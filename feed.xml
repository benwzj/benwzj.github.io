<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-09T06:08:38+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">How to make MarkDown file looks better</title><link href="https://benwzj.github.io/blog/2023/Markdown-looks/" rel="alternate" type="text/html" title="How to make MarkDown file looks better"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-looks</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-looks/"><![CDATA[<p>We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,<code class="language-plaintext highlighter-rouge"> # Headline</code> convert to <code class="language-plaintext highlighter-rouge">&lt;h1&gt;Headline&lt;/h1&gt;</code>. But how about the style?</p> <p>There are two ways:</p> <ol> <li>Embed HTML code in markdown files (Most markdown parsers support).</li> <li>Find a specific markdown perser.</li> </ol> <h2 id="embed-html-code-in-markdown-files">Embed HTML code in markdown files</h2> <ul> <li>You can use inline HTML in Markdown for styles: <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:green;font-weight:700;font-size:20px"</span><span class="nt">&gt;</span>
  markdown color font styles
<span class="nt">&lt;/span&gt;</span>
</code></pre></div> </div> </li> <li>you can use CSS styles in markdown content ```markdown</li> </ul> <style>.heading1{color:red;font-weight:700;font-size:35px}.heading2{color:blue;font-weight:700;font-size:30px}</style> <h1 id="markdown-heading-styles-identifier-heading1">Markdown heading styles {#identifier .heading1}</h1> <h2 id="markdown-heading-styles-identifier-heading2">Markdown heading styles {#identifier .heading2}</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- Define CSS styles using selector
```markdown
&lt;style&gt;
red { color: red }
yellow { color: yellow }
&lt;/style&gt;

&lt;red&gt; red color markdown text&lt;/red&gt;
&lt;yellow&gt; red color markdown text&lt;/yellow&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><summary type="html"><![CDATA[We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example, # Headline convert to &lt;h1&gt;Headline&lt;/h1&gt;. But how about the style?]]></summary></entry><entry><title type="html">What Markdown can do</title><link href="https://benwzj.github.io/blog/2023/Markdown-can-do/" rel="alternate" type="text/html" title="What Markdown can do"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-can-do</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-can-do/"><![CDATA[<p>Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.</p> <h2 id="it-can-embed-html-tags">It can embed HTML tags</h2> <h4 id="direct-link">Direct link:</h4> <p><a href="https://en.wikipedia.org/">wikipedia</a></p> <h4 id="make-a-list">Make a list</h4> <ul> <li>Milk</li> <li>Bread</li> <li>Yogurt</li> <li>Nappy</li> </ul> <hr/> <h4 id="we-can-quote">We can Quote:</h4> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h4 id="support-images">Support Images:</h4> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>responsive format:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="display-programm-code">Display programm code</h2> <h4 id="you-have-to-do-is-wrap-your-code-in-markdown-code-tags">You have to do is wrap your code in markdown code tags:</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="display-line-number">Display line number</h4> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h4 id="display-liquid-template-code-too">Display liquid template code too</h4> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <h4 id="support-mathjax">Support Mathjax</h4> <p>You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. Example: \(E = mc^2\).</p> <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <h2 id="adding-disqus-comments">Adding DISQUS comments.</h2> <p>Turn <code class="language-plaintext highlighter-rouge">disqus_comments: true</code> on at the Front Matter.</p> <h2 id="adding-table-of-contents">Adding table of contents</h2> <p>To add a table of contents to a post, add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h2 id="customized-blockquotes">customized blockquotes</h2> <p>Like below:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="redirecting-to-another-page">Redirecting to another page</h2> <p>Add below in the front matter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redirect: /assets/pdf/example_pdf.pdf
</code></pre></div></div> <h2 id="display-tables-bootstrap-tables">Display tables Bootstrap Tables</h2> <p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="video">Video</h2> <h4 id="it-supports-local-video-files">It supports local video files.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <h4 id="it-does-also-support-embedding-videos-from-different-sources">It does also support embedding videos from different sources.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h2 id="audio">Audio</h2> <p>It supports local and external audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><summary type="html"><![CDATA[Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.]]></summary></entry><entry><title type="html">Introduce MathJax</title><link href="https://benwzj.github.io/blog/2023/Mathjax/" rel="alternate" type="text/html" title="Introduce MathJax"/><published>2023-09-14T00:00:00+00:00</published><updated>2023-09-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Mathjax</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Mathjax/"><![CDATA[<h2 id="what-is-mathjax">What is MathJax</h2> <ul> <li>MathJax is a cross-browser JavaScript library</li> <li>MathJax displays <strong>mathematical notation</strong> in web browsers</li> <li>MathJax uses CSS with web fonts or SVG, instead of bitmap images or Flash</li> <li>MathJax using MathML, LaTeX and ASCIIMathML markup</li> <li>MathJax is highly modular on input and output. Use MathML, TeX, and ASCIImath as input and produce HTML+CSS, SVG, or MathML as output</li> <li>MathJax works with screenreaders &amp; provides expression zoom and interactive exploration. You also can copy equations into Office, LaTeX, wikis, and other software.</li> </ul> <h2 id="what-is-mjx-container">What is mjx-container?</h2> <p>mjx-container is specific style class for MathJax content.</p> <h3 id="example">Example</h3> <p>This will also provide display-mode math with scroll bars if they are too long. If you want to do this only for inline math, then use mjx-container:not([display]) instead.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">mjx-container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-grid</span><span class="p">;</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">overflow-y</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:15em; border: 1px solid; padding: 3px 5px"</span><span class="nt">&gt;</span>
This is some text with a long in-line math expression
\(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\)
that we hope will have a scroll bar!  This math \(x+y+z\) should not.
Long display math also gets a scroll bar:
\[a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\]
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div> <p>just test, make git action is working</p>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="SVG"/><summary type="html"><![CDATA[What is MathJax]]></summary></entry><entry><title type="html">Build your own personal brand</title><link href="https://benwzj.github.io/blog/2023/BuildPersonalBrand/" rel="alternate" type="text/html" title="Build your own personal brand"/><published>2023-08-31T00:00:00+00:00</published><updated>2023-08-31T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/BuildPersonalBrand</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/BuildPersonalBrand/"><![CDATA[<p>Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!</p> <p>What is your persoanl brand? <strong><em>It is your reputation!</em></strong></p> <p>How to build your personal brand? I believe the following advices is good one.</p> <h2 id="1-figure-out-your-goal">#1 Figure out your goal.</h2> <p>What do you want your personal brand to help you accomplish? Are you change job, or transition into a new industry? No matter what it is, Write it down, make it specific so that you are working toward to a clear outcome.</p> <h2 id="2-get-clear-on-what-you-want-to-be-known-for">#2 Get Clear on What you want to be known for.</h2> <p>In another word, How do you want other people to describe you as a professional. No matter what type your professional is, What you need to do is dig deep on What, How and Why behind your work! So that you can make it concrete and <strong>easy to remember</strong>. Just make sure no confusion. Try to think about this:</p> <ul> <li>What are the things that make you unique?</li> <li>Are there specific talents and expertise you’ve acquired?</li> <li>What do you know more about than most people.</li> </ul> <p>Sit down and make a list!</p> <h2 id="3-know-your-audience">#3 Know your Audience.</h2> <p>Who you want to share your personal brand with? <strong>The reality is, your personal brand is not about you! It is about the people you want to educate with the skills, knowledge and value you provide.</strong></p> <p>Who you want to focus on should be based on two things:</p> <ul> <li>The goal of your personal brand and</li> <li>The people who can best benefit from your skills.</li> </ul> <p>Answer this questions:</p> <ul> <li>Who can most gain benefit from your share? and</li> <li>How exactly can you see yourself helping them?</li> </ul> <h2 id="4-creat-a-misson-statement">#4 Creat a Misson statement</h2> <p>Let’s pull all your answers into a <strong>single</strong> mission statement that describe:</p> <ul> <li>Who you are</li> <li>What you do</li> <li>Who you do it for</li> <li>The transformation you create</li> </ul> <p>Let’s make a concrete example (Project manager):</p> <blockquote> <p>My name is Jennifer, I’m a project manager for a sustainable fashion company. I work with teams across different deparments to plan, organize and direct Annovative marketing campaigns that engage customers while also increasing brand loyalty.</p> </blockquote> <p>The mission statement can be very different, depending on your career. But no matter what is it, <strong>Write it down and put it somewhere prominent.</strong> You can use it to make decision about how you speak about yourself when you first meet someone, or to the communities you want to share it with.</p> <h2 id="5-build-your-personal-brand-online">#5 Build your personal brand online</h2> <p>There are two ways to do this online: your own website, and social media.</p> <ul> <li>Website is very professional!</li> <li>Don’t choose too many social media!</li> </ul>]]></content><author><name></name></author><category term="Personal"/><category term="personal"/><category term="career"/><category term="professional"/><summary type="html"><![CDATA[Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!]]></summary></entry><entry><title type="html">Iteration in Python</title><link href="https://benwzj.github.io/blog/2023/iteration-python/" rel="alternate" type="text/html" title="Iteration in Python"/><published>2023-05-13T00:00:00+00:00</published><updated>2023-05-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/iteration-python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/iteration-python/"><![CDATA[<p><strong>In short:</strong> Iterbale support <code class="language-plaintext highlighter-rouge">iter()</code> and maintain the data. Iterator support <code class="language-plaintext highlighter-rouge">next()</code> and reach the data.</p> <h2 id="iterable">Iterable</h2> <h3 id="official-defination">Official defination</h3> <p>Any object that supports <code class="language-plaintext highlighter-rouge">iter()</code> and return iterator is said to be “iterable.” example:</p> <ul> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an <code class="language-plaintext highlighter-rouge">iter()</code> method or with a <code class="language-plaintext highlighter-rouge">getitem()</code> method that implements sequence semantics are iterables.</li> </ul> <p>Iterables can be used in a for loop and in many other places where a sequence is needed.<br/> built-in function <code class="language-plaintext highlighter-rouge">iter()</code>, it returns an iterator for the object.</p> <h2 id="iterator">Iterator</h2> <h3 id="official-definition">Official definition</h3> <p>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: <code class="language-plaintext highlighter-rouge">iterator.iter()</code> return itself. <code class="language-plaintext highlighter-rouge">iterator.next()</code> return one data and maintain state.</p> <p><strong>But CPython doesn’t consistently apply</strong></p> <h2 id="iterable-vs-iterator">Iterable vs. Iterator</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <p>An iterable can returns a <strong>fresh</strong> ITERATOR. An iterator can return itself. And iterator also is an object with a <strong>next</strong> method that returns the next value in the iteration and updates the state to point at the next value</p> <h2 id="pure-iterables">Pure iterables</h2> <p>Maybe we can produce a pure iterable concept. Pure iterable typically hold the data itself, and return fresh iterator. In contrast, iterator is not pure iterable that fetch data and return itself.</p> <h2 id="conclusion">Conclusion</h2> <p>Many people say iterators are iterables as well, and iterables don’t have to be iterators. But they also say iterators and iterables are different, like iterators are more effecient in memory consumsion. That is confusing concept. I reckon iterator don’t have to support <code class="language-plaintext highlighter-rouge">iter()</code> That means iterator don’t have to be iterable. Just like JavaScript.</p> <h2 id="generator">Generator</h2> <h3 id="what-is-generator">What is Generator</h3> <ul> <li>Generators are a special class of functions that simplify the task of writing iterators.</li> <li>Generator functions is a convenient shortcut to building iterators.</li> <li>Regular functions compute a value and return it, but generators return an iterator that returns a stream of values.</li> <li>When you call a generator function, it doesn’t return a single value; instead it returns a generator object that supports the iterator protocol.</li> <li>If a container object’s <code class="language-plaintext highlighter-rouge">__iter__()</code> method is implemented as a generator, it will automatically return a generator object supplying the <code class="language-plaintext highlighter-rouge">__iter__()</code> and <code class="language-plaintext highlighter-rouge">__next__()</code> methods.</li> <li>There are two ways to create Generator: generator expression and generator function</li> <li>If you create a list to sum the first n. When n is really big, then it consume lots of memory. Not acceptable. Generator (iterator) will perform the job much better.</li> <li>Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.</li> <li>When you use recursion for generator, you need to clear the subgenerator concept. Otherwise, it won’t work as you expect.</li> </ul> <h3 id="generator-is-not-pure-iterable">Generator is not pure iterable</h3> <p>Generator is iterator, but it is not pure iterable. That means iter(generator) return itself instead of a fresh iterator.</p> <p>Basic Example, clone python’s built-in range() function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">start must be smaller than stop</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">step</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">my_range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="generator-functions">Generator functions</h3> <p>Generator function is defined similar to normal function but there is only one difference, it is using yield keyword to return value used for each iteration.</p> <p>Any function containing a yield keyword is a generator function; this is detected by Python’s bytecode compiler which compiles the function specially as a result.</p> <p>Generator function return a lazy iterator. This iterator also call generator object.</p> <h3 id="generator-expressionalso-call-generator-comprehension">Generator expression(also call generator comprehension)</h3> <p>Generator expressions provide an additional shortcut to build generators out of expressions similar to that of list comprehensions.</p> <p>If the generated expressions are more complex, involve multiple steps, or depend on additional temporary state, Using generator function .</p> <ul> <li>generator comprehension</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums_squared_gc</span> <span class="o">=</span> <span class="p">(</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div></div> <ul> <li>List comprehension</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums_squared_lc</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">nums_squared_lc</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">nums_squared_gc</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x107fbbc78</span><span class="o">&gt;</span>
</code></pre></div></div> <h3 id="the-difference">The difference</h3> <p>We can think of list comprehensions as generator expressions wrapped in a list constructor:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list comprehension
</span><span class="n">doubles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">)]</span>
<span class="c1"># same as the list comprehension above
</span><span class="n">doubles</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span>
</code></pre></div></div> <p>The difference between generator and list comprehensions is that generator comprehension create lazy generator. it won’t consume all memory it need at one time. But list comprehension will, because list constructor run through the generator.</p> <h3 id="subgenerator-yield-from">Subgenerator (yield from)</h3> <ul> <li>You can use yield from to read data from an other generator.</li> <li> <p>There is Subgenerator concept, read more at <strong>PEP380</strong>.</p> </li> <li>When you use recursion in generator you will meet some weird issue. That is because you have no subgenerator concept. You need to use yield from for each subgenerator. Otherwise you need to use for to run over it (sometime works, sometime not works). Because Generator return Generator Object! it is different from normal function.</li> </ul> <h3 id="understand-subgenerator">Understand subgenerator</h3> <ul> <li> <p>A Python generator is a form of coroutine, but has the limitation that it can only yield to its immediate caller. This means that a piece of code containing a yield cannot be factored out and put into a separate function in the same way as other code.</p> </li> <li> <p>Performing such a factoring causes the called function to itself become a generator, and it is necessary to explicitly iterate over this second generator and re-yield any values that it produces.</p> </li> <li> <p>If yielding of values is the only concern, this can be performed without much difficulty using a loop.</p> </li> <li> <p>However, if the subgenerator is to interact properly with the caller in the case of calls to send(), throw() and close(), things become considerably more difficult. As will be seen later, the necessary code is very complicated, and it is tricky to handle all the corner cases correctly.</p> </li> </ul> <h3 id="understand-yield-from">Understand <code class="language-plaintext highlighter-rouge">yield from</code></h3> <ul> <li><code class="language-plaintext highlighter-rouge">yield from</code> is a new syntax. You can check the codes for <code class="language-plaintext highlighter-rouge">yield from</code> in <strong>PEP380</strong>.</li> <li>This new syntax empowers you to refactor generators in a clean way by making it easy to yield every value from an iterator (which a generator conveniently happens to be).</li> <li> <p><code class="language-plaintext highlighter-rouge">yield from</code> also lets you chain generators together so that values bubble up and down the call stack without code having to do anything special.</p> </li> <li>Let’s get one thing out of the way first. The explanation that <code class="language-plaintext highlighter-rouge">yield from g</code> is equivalent to <code class="language-plaintext highlighter-rouge">for v in g: yield v</code> does not even begin to do justice to what <code class="language-plaintext highlighter-rouge">yield from</code> is all about.</li> <li>Because, if all <code class="language-plaintext highlighter-rouge">yield from</code> does is expand the for loop, then it does not warrant adding <code class="language-plaintext highlighter-rouge">yield from</code> to the language and preclude a whole bunch of new features from being implemented in Python 2.x. PEP380 have the detail.</li> </ul> <p>– What <code class="language-plaintext highlighter-rouge">yield from</code> does is it establishes a transparent bidirectional connection between the caller and the sub-generator:</p> <ul> <li>The connection is “transparent” in the sense that it will propagate everything correctly too, not just the elements being generated (e.g. exceptions are propagated).</li> <li>The connection is “bidirectional” in the sense that data can be both sent from and to a generator.</li> </ul> <h3 id="example-of-using-recursion-in-generator">Example of using recursion in generator:</h3> <p>You can’t print 0,1,2,3,4 from following code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
    
<span class="n">gr</span> <span class="o">=</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">gr</span><span class="p">:</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="you-need-to-use-yield-from">You need to use yield from:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
</code></pre></div></div> <h3 id="passing-values-into-a-generator">Passing values into a generator</h3> <ul> <li> <p>In Python 2.5 there’s a simple way to pass values into a generator.</p> </li> <li>yield became an expression, returning a value that can be assigned to a variable or otherwise operated on: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
<span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span>
</code></pre></div> </div> </li> <li> <p>recommend that you always put parentheses around a yield expression.</p> </li> <li> <p>Values are sent into a generator by calling its .send(value) method. This method resumes the generator’s code and the yield expression returns the specified value.</p> </li> <li>Simple example: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">counter</span><span class="p">(</span><span class="n">maximum</span><span class="p">):</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maximum</span><span class="p">:</span>
      <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
      <span class="c1"># If value provided, change counter
</span>      <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
          <span class="n">i</span> <span class="o">=</span> <span class="n">val</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div> </div> <p>The value of val is always None when regular <code class="language-plaintext highlighter-rouge">__next__()</code> method is called. When <code class="language-plaintext highlighter-rouge">.send(value)</code> is called. the val will be the value</p> </li> </ul> <h3 id="how-do-sendvalue-resumes-the-generator">How do <code class="language-plaintext highlighter-rouge">send(value)</code> resumes the generator?</h3> <ul> <li> <p>When calling <code class="language-plaintext highlighter-rouge">next()</code>, the code resume from the next line which after last yield.</p> </li> <li> <p>When calling <code class="language-plaintext highlighter-rouge">.send(value)</code>, the code resume from the last yield! And also yield a value back to <code class="language-plaintext highlighter-rouge">.send(value)</code> function (like <code class="language-plaintext highlighter-rouge">next()</code> do).</p> </li> <li> <p>You can even can’t send(value) at the very beginning, otherwise get error: TypeError: can’t send non-None value to a just-started generator</p> </li> </ul> <h2 id="built-in-functions-for-iterators">Built-in functions for iterators</h2> <ul> <li> <p><code class="language-plaintext highlighter-rouge">map()</code> and <code class="language-plaintext highlighter-rouge">filter()</code> duplicate the features of generator expressions: <code class="language-plaintext highlighter-rouge">map(f, iterA, iterB, ...)</code> returns an iterator over the sequence <code class="language-plaintext highlighter-rouge">f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ....</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">filter(predicate, iter) </code> returns an iterator over all the sequence elements that meet a certain condition, and is similarly duplicated by list comprehensions.</p> </li> <li><code class="language-plaintext highlighter-rouge">enumerate(iter, start=0) </code> counts off the elements in the iterable returning 2-tuples containing the count (from start) and each element. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">([</span><span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]):</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">Sorted(iterable, key=None, reverse=False)</code> collects all the elements of the iterable into a list, sorts the list, and returns the sorted result. The key and reverse arguments are passed through to the constructed list’s sort() method.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">any(iter)</code> and <code class="language-plaintext highlighter-rouge">all(iter)</code> built-ins look at the truth values of an iterable’s contents. <code class="language-plaintext highlighter-rouge">any()</code> returns True if any element in the iterable is a true value, and <code class="language-plaintext highlighter-rouge">all()</code> returns True if all of the elements are true values</p> </li> <li><code class="language-plaintext highlighter-rouge">zip(iterA, iterB, ...) </code> takes one element from each iterable and returns them in a tuple</li> </ul> <h2 id="itertools-module">itertools module</h2> <p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p> <h3 id="combinatoric-iterators">Combinatoric iterators:</h3> <ol> <li><code class="language-plaintext highlighter-rouge">permutations(iterable, r=None)</code> <ul> <li>Return successive r length permutations of elements in the iterable.</li> <li>Return a iterable object, elements are tuple.</li> <li>Elements are treated as unique based on their position, not on their value. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nf">permutations</span><span class="p">(</span><span class="sh">'</span><span class="s">pro</span><span class="sh">'</span><span class="p">)])</span>
<span class="p">[(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">)]</span>
</code></pre></div> </div> </li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">product(*iterables, repeat=1)</code> Cartesian product of input iterables. What Cartesian product do is as following: <code class="language-plaintext highlighter-rouge">product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</code></li> </ol> <p>repeat parameter <code class="language-plaintext highlighter-rouge">product(A, repeat=4)</code> means the same as <code class="language-plaintext highlighter-rouge">product(A, A, A, A)</code>.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="o">--&gt;</span> <span class="mi">000</span> <span class="mi">001</span> <span class="mi">010</span> <span class="mi">011</span> <span class="mi">100</span> <span class="mi">101</span> <span class="mi">110</span> <span class="mi">111</span>
</code></pre></div></div> <p>This function is roughly equivalent to the following code, except that the actual implementation does not build up intermediate results in memory:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">pools</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="n">pool</span><span class="p">)</span> <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span> <span class="o">*</span> <span class="n">repeat</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[]]</span>
    <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">pools</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">result</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">pool</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">prod</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
        <span class="k">yield</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">prod</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Iterable"/><category term="Iterator"/><category term="Iteration"/><category term="Generator"/><summary type="html"><![CDATA[In short: Iterbale support iter() and maintain the data. Iterator support next() and reach the data.]]></summary></entry><entry><title type="html">How for loop iterate an iterable in Python</title><link href="https://benwzj.github.io/blog/2023/for-loop-Python/" rel="alternate" type="text/html" title="How for loop iterate an iterable in Python"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/for-loop-Python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/for-loop-Python/"><![CDATA[<p><strong>In short:</strong> it is a lazy processing.</p> <p>I am going to make two example to display how <em>for…in</em> loop work underneath the cover.<br/> First one is loop over a enumerate object, and second one is loop over a range object. Both of them will modify the list inside the loop.</p> <h2 id="first-example">First example:</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p><strong>There are No error raising for these codes, but they are not work as expected.</strong></p> <p>The code print below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</code></pre></div></div> <p>enumerate object is generator object which will yield value from <em>lst</em>. It is lazy process. When <em>lst</em> change, <em>value</em> from enumerate object change as well, but <em>i</em> is keep going.</p> <p><strong>for…in is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><strong>enumerate() is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h2 id="second-example">Second example:</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p><strong>This code will raise IndexError</strong></p> <p><em>range()</em> is iterable, but <em>len(lst)</em>, the parameter of <em>range()</em>, have been replace with constant value 10. Because <em>len(lst)</em> is not a lazy process. It don’t change any more. So <em>i</em> will up to 9.</p> <p><strong>The codes are equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Iteration"/><category term="for-in"/><summary type="html"><![CDATA[In short: it is a lazy processing.]]></summary></entry><entry><title type="html">Bootstrap Main points</title><link href="https://benwzj.github.io/blog/2023/Bootstrap/" rel="alternate" type="text/html" title="Bootstrap Main points"/><published>2023-01-09T00:00:00+00:00</published><updated>2023-01-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Bootstrap</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Bootstrap/"><![CDATA[<h2 id="what-is-bootstrap">What is Bootstrap</h2> <p>Bootstrap is popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first websites. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins. Bootstrap is focus on the look of webpage! single page. mainly use CSS and partly use javascript for some effect. It is completely free to download and use!</p> <p>Bootstrap is Writen in HTML, CSS, Less, <strong>Sass</strong> and JS, Originally named Twitter Blueprint.</p> <p>Bootstrap 3 was released in 2013. Bootstrap 4 (released 2018) and Bootstrap 5 (released 2021).</p> <h3 id="what-bootstrap-can-do">What Bootstrap can do</h3> <p>Once Bootstrap is added to a project, it provides basic style definitions for all HTML elements. The result is a uniform appearance for prose, tables and form elements across web browsers. In addition, developers can take advantage of CSS classes defined in Bootstrap to further customize the appearance of their contents.</p> <h3 id="to-use-bootstrap-just-take-following">To use BootStrap, just take following:</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
   <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <h2 id="using-bootstrap-4">Using Bootstrap 4</h2> <p>Main points:</p> <ul> <li><strong>Containers</strong> are used to pad the content inside of them</li> <li><strong>Grid</strong> is Basic Structure</li> <li><strong>Flexbox</strong> is enabled by default in 4. In general this means a move away from <strong>floats</strong> which in 3.</li> </ul> <h3 id="bootstrap-4-rely-on-grid-system">Bootstrap 4 rely on Grid System</h3> <ul> <li>is built with flexbox.</li> <li>allows up to 12 columns across the page.</li> <li>is responsive, and the columns will re-arrange automatically depending on the screen size.</li> </ul> <h3 id="basic-structure-example">Basic Structure Example</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <ul> <li>first star (*) represents the responsiveness: <code class="language-plaintext highlighter-rouge">sm</code>, <code class="language-plaintext highlighter-rouge">md</code>, <code class="language-plaintext highlighter-rouge">lg</code> or <code class="language-plaintext highlighter-rouge">xl</code>,</li> <li>second star represents a number, which should add up to 12 for each row.</li> <li><code class="language-plaintext highlighter-rouge">sm</code> means small devices - screen width <code class="language-plaintext highlighter-rouge">&gt;= 576px</code> and <code class="language-plaintext highlighter-rouge">&lt; 768px</code>.</li> </ul> <h3 id="why-we-need-sm-md-lg-xl">Why we need sm, md, lg, xl?</h3> <p>This is for helping re-arrange display according to the width of screen. For example, when screen width is <code class="language-plaintext highlighter-rouge">576px</code>, it use <code class="language-plaintext highlighter-rouge">sm</code> class.</p> <h3 id="code-example-1">Code Example 1</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>When screen width is equal to or greater than <code class="language-plaintext highlighter-rouge">575px</code>, 4 columns in one row. When screen width is less than <code class="language-plaintext highlighter-rouge">575px</code>, it will use another class which make 4 columns stack together. If change <code class="language-plaintext highlighter-rouge">col-sm-3</code> to <code class="language-plaintext highlighter-rouge">col-lg-3</code>, then they will stack when screen width less than <code class="language-plaintext highlighter-rouge">992px</code></p> <h3 id="code-example-2">Code Example 2</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container-fluid"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3 col-md-6"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Lorem ipsum...<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-9 col-md-6"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Sed ut perspiciatis...<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>It will result in a 25%/75% split on small devices and a 50%/50% split on medium (and large and xlarge) devices. The class will scales up, this means if it is 50%/50% split on medium screen, then it is 50%/50% on large and xlarge, but no on small screen.</p> <h3 id="some-notes-for-bootstrap-4">Some notes for Bootstrap 4</h3> <ul> <li>Make sure that the sum adds up to 12 or fewer (it is not required that you use all 12 available columns)</li> <li><code class="language-plaintext highlighter-rouge">&lt;div class="row row-cols-2"&gt;</code> means just allow 2 columns in a row</li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="HTML"/><category term="Website"/><category term="SASS"/><summary type="html"><![CDATA[What is Bootstrap]]></summary></entry><entry><title type="html">Talk about Context in React</title><link href="https://benwzj.github.io/blog/2022/context-react/" rel="alternate" type="text/html" title="Talk about Context in React"/><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2022/context-react</id><content type="html" xml:base="https://benwzj.github.io/blog/2022/context-react/"><![CDATA[<h2 id="what-is-context">What is Context</h2> <p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p> <p>In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application.</p> <h2 id="use-context">Use Context</h2> <p>Usually you create, provide, and consume context, here it is:</p> <p>Firstly, You’ll usually have one file that uses createContext and exports a Provider wrapper:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">createContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Context</span> <span class="o">=</span> <span class="nf">createContext</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Provider</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">({})</span>

  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">state</span><span class="p">,</span>
    <span class="nx">setState</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Context</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Context.Provider</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <p>Secondly, you’ll wrap whatever component needs access to the Context state with the Provider:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Context</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConsumingComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./ConsumingComponent</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Page</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Provider</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ConsumingComponent</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now you can consume. the consuming component can use the <code class="language-plaintext highlighter-rouge">useContext</code> hook to access the data:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Context</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Context</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ConsumingComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">state</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useContext</span><span class="p">(</span><span class="nx">Context</span><span class="p">)</span>

  <span class="k">return</span> <span class="kc">null</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">useContext(MyContext)</code> is equivalent to <code class="language-plaintext highlighter-rouge">static contextType = MyContext</code> in a class, or to <code class="language-plaintext highlighter-rouge">&lt;MyContext.Consumer&gt;</code>.</p> <h2 id="use-react-context-system-to-replace-redux">use React Context system to replace Redux</h2> <p>It is not recomment, but you can do something like Redux:</p> <ol> <li>you can create a react component as a store. and use this component to wrap all children component which need to share information inside them.</li> <li>use myContext.Provider in the Store component to wrap children components.</li> <li>design state as object which contain functions. Then children can use function reference to change states.</li> </ol> <p>In a very small application, you might be able to get away with just using Context for most of your global data storage needs, but in a large-scale production environment, you’re likely using Redux for global state management. Redux still provides improved performance, improved debugging capabilities, architectural consistency, the ability to use middleware. Therefore, Context is not a replacement for a proper global state management system.</p> <h2 id="important-caveats">Important Caveats</h2> <p>Context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value. Class component example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">MyContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nx">Toolbar</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/MyContext.Provider</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>How to fix it? Using global reference, like state.</p> <h3 id="think-more-before-apply-context">Think more before apply context</h3> <p>We should apply context sparingly because it make components reuse more difficult. If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context. And even render props is another option.</p> <blockquote> <p><strong>Inversion of control</strong>: Using component composition, you can wrap the deepest component as prop, then other components don’t need to know what is passing down. This inversion of control can make your code cleaner.</p> </blockquote>]]></content><author><name></name></author><category term="React"/><category term="Context"/><category term="Redux"/><summary type="html"><![CDATA[What is Context]]></summary></entry><entry><title type="html">React Component Detail</title><link href="https://benwzj.github.io/blog/2022/component-react/" rel="alternate" type="text/html" title="React Component Detail"/><published>2022-03-04T00:00:00+00:00</published><updated>2022-03-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2022/component-react</id><content type="html" xml:base="https://benwzj.github.io/blog/2022/component-react/"><![CDATA[<h2 id="component-basic">Component Basic</h2> <p>Components are one of the core concepts of React. Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen. React lets you combine your markup, CSS, and JavaScript into custom “components”, reusable UI elements for your app. Just like with HTML tags, you can <strong>compose</strong>, order and nest components to design whole pages.</p> <h3 id="component-features">Component Features</h3> <ul> <li>Component is independent and reuseable code.</li> <li>Component can be in another Component.</li> <li>Component work as two ways: <strong>class</strong> and <strong>function</strong>.</li> <li><strong>state</strong> and <strong>prop</strong> are key properties for components.</li> <li>Compoents’ names must start with a capital letter or they won’t work!</li> </ul> <h3 id="props">Props</h3> <ul> <li><strong>props</strong> are a way of passing data from parent to child.</li> <li><strong>props</strong> contains information set by the parent component (although defaults can be set) and should not be changed.</li> <li>Can pass HTML’s attributes as a props to React class. And attribute can be a OBJECT.</li> </ul> <h3 id="state">State</h3> <ul> <li>All React component have built-in state object. state object is the object in which you can store component properties.</li> <li>State is reserved only for interactivity, Static version don’t need state.</li> <li>State is private and fully controled by component. e.g. initialise, change.</li> <li>USE setState to update component state properties.</li> <li><code class="language-plaintext highlighter-rouge">setState()</code> can cause re-render.</li> <li><code class="language-plaintext highlighter-rouge">setState()</code> use asychronous nature. React may batch multiple <code class="language-plaintext highlighter-rouge">setState()</code> calls into a single update for performance.</li> </ul> <h3 id="event">Event</h3> <ul> <li>React Evert are writen in camelCase syntax: use <code class="language-plaintext highlighter-rouge">onClick()</code> instead of <code class="language-plaintext highlighter-rouge">onclick()</code>;</li> <li>Use curly braces: use <code class="language-plaintext highlighter-rouge">onClick={shoot}</code> instead of <code class="language-plaintext highlighter-rouge">onclick='shoot()'</code>.</li> <li>Always use arrow function, because with arrow function, keyword this will always represent the object which define it.</li> </ul> <h3 id="passing-arguments-to-event-handler-two-ways">passing Arguments to Event handler, TWO WAYS:</h3> <ul> <li>make anonymous arrow function. like: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{()</span><span class="o">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nf">myFunction</span><span class="p">(</span><span class="dl">'</span><span class="s1">Goal</span><span class="dl">'</span><span class="p">)}</span><span class="o">&gt;</span> <span class="nx">take</span> <span class="nx">shot</span> <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span></code></pre></div> </div> </li> <li>bind event handler to ‘this’;like: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">myFunction</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="dl">'</span><span class="s1">Goal</span><span class="dl">'</span><span class="p">)}</span><span class="o">&gt;</span> <span class="nx">take</span> <span class="nx">shot</span> <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span></code></pre></div> </div> </li> <li>handling form passing event object, you can use <code class="language-plaintext highlighter-rouge">event.target.value</code> on <code class="language-plaintext highlighter-rouge">onChange ()</code> or <code class="language-plaintext highlighter-rouge">onClick()</code>;</li> </ul> <p>example: inside component:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">myChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nf">setState</span><span class="p">({</span><span class="na">username</span> <span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
  <span class="p">}</span>
</code></pre></div></div> <p>event element:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nx">onChange</span> <span class="o">=</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">myChange</span><span class="p">}</span>
</code></pre></div></div> <h2 id="class-vs-function-component">Class vs. Function Component</h2> <p>These two kinds of components are equivalent from React’s point of view. But React recommend defining components as functions instead of classes.</p> <ul> <li>The function of the Function Component is run through with each render. (But <code class="language-plaintext highlighter-rouge">useRef()</code> can return the same object for each time render)</li> <li>Class component instance keep alive. the <code class="language-plaintext highlighter-rouge">instance.render()</code> with will run with each render</li> </ul> <h3 id="syntax">Syntax:</h3> <ul> <li>A functional component is just a plain JavaScript pure function that accepts props as an argument and returns a React element(JSX). <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Welcome</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div> </div> </li> <li>A class component requires you to extend from React.Component and create a render function which returns a React element. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Welcome</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
<span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> <h3 id="prop">prop</h3> <p>Props are passed from outside into the components.</p> </li> <li>For Class component, Props are passed as arguments to the constructor and also should be passed to the parent component class by calling <code class="language-plaintext highlighter-rouge">super(props)</code>. this.props are accessible throughout the life of the object.</li> <li>For Function component, props are passed as arguments into the function.</li> </ul> <h3 id="state-1">state</h3> <ul> <li>For Class component, React.Component objects have property state, so it is stateful.</li> <li>For Function components, although they are known as stateless components, but you can use hook <code class="language-plaintext highlighter-rouge">useState()</code> to manage state.</li> </ul> <h3 id="life-cycle">Life cycle</h3> <ul> <li>For Class component, React lifecycle methods can be used inside class components (for example, <code class="language-plaintext highlighter-rouge">componentDidMount</code>).</li> <li>For Function component, you can use hook <code class="language-plaintext highlighter-rouge">useEffect()</code> to manage lifecycle.</li> </ul> <h3 id="life-time">Life time</h3> <ul> <li>Functional component run from top to bottom and once the function is returned it can’t be kept alive. There are no instance object kept alive.</li> <li>Class component is instantiated and different life cycle method is kept alive and being run and invoked depending on phase of class component.</li> </ul> <h3 id="render">Render</h3> <ul> <li>For Function component, It have not instance, When it need to render, the function component gets called which returns a set of instructions for creating DOM.</li> <li>For Class component, When it need to render, instance’s render method gets called which returns a set of instructions for creating DOM.</li> </ul> <h3 id="if-you-need-to-use-regular-function-in-class-component">If you need to use regular function in class component.</h3> <p>You have to bind <code class="language-plaintext highlighter-rouge">'this'</code> to component instance. otherwise , this will be undefined.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
	<span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">myFunction</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">myFunction</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">myFunction</span><span class="p">(){</span>
	<span class="nf">alert </span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="component-life-cycle">Component Life cycle</h2> <p>There are three phases which are: <strong>Mounting</strong>, <strong>Updating</strong>, and <strong>Unmounting</strong>.</p> <figure> <picture> <img src="/assets/img/component-lifecycle.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="mounting-four-built-in-methods-that-gets-called-in-this-order">Mounting: four built-in methods that gets called, in this order:</h3> <ol> <li><code class="language-plaintext highlighter-rouge">constructor()</code> optional, handle the props, and pass props to <code class="language-plaintext highlighter-rouge">super(props)</code>;</li> <li><code class="language-plaintext highlighter-rouge">static getDerivedStateFromProps()</code>, rare use</li> <li><code class="language-plaintext highlighter-rouge">render()</code>, is required, and is the method that actually outputs the HTML to the DOM.</li> <li><code class="language-plaintext highlighter-rouge">componentDidMount()</code>, is called after the component is rendered.</li> </ol> <h3 id="updating">Updating</h3> <p>A component is updated whenever there is a change in the component’s state or props. Five built-in methods that gets called:</p> <ol> <li><code class="language-plaintext highlighter-rouge">getDerivedStateFromProps()</code></li> <li><code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code></li> <li><code class="language-plaintext highlighter-rouge">render()</code></li> <li><code class="language-plaintext highlighter-rouge">getSnapshotBeforeUpdate()</code></li> <li><code class="language-plaintext highlighter-rouge">componentDidUpdate()</code>, Use this as an opportunity to operate on the DOM when the component has been updated. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">componentDidUpdate</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Typical usage (don't forget to compare props):</span>
  <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">userID</span> <span class="o">!==</span> <span class="nx">prevProps</span><span class="p">.</span><span class="nx">userID</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">this</span><span class="p">.</span><span class="nf">fetchData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">userID</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> <blockquote> <p>You may call <code class="language-plaintext highlighter-rouge">setState()</code> immediately in <code class="language-plaintext highlighter-rouge">componentDidUpdate()</code> but note that it must be wrapped in a condition.</p> </blockquote> </li> </ol> <h3 id="unmounting">UnMounting</h3> <p>Just this method: <code class="language-plaintext highlighter-rouge">componentWillUnmount()</code></p> <h3 id="questions">Questions</h3> <ul> <li> <p>It is easier to understand function components, which return react element. But how to understand Class component which use <code class="language-plaintext highlighter-rouge">render()</code>?</p> </li> <li> <p>Why <code class="language-plaintext highlighter-rouge">render()</code> function happen both in mounting and updating phrase?</p> </li> </ul> <h2 id="reactpurecomponent-vs-reactcomponent">React.PureComponent vs. React.Component</h2> <p>React.PureComponent is similar to React.Component. The difference between them is that</p> <ul> <li>React.PureComponent implements shouldComponentUpdate() with a shallow prop and state comparison.</li> <li>React.Component doesn’t implement shouldComponentUpdate() by default. But if you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped.</li> </ul> <h2 id="web-component-vs-react-component">Web component vs. React component</h2> <p>Web component and React component are in different scope. Web Component is a web technology, that means it is a specification of w3c. While React component is a concept in React.</p> <h3 id="what-is-web-component">What is Web Component</h3> <p>Web Components are custom elements that you can define and reuse in your Web apps. Web Component consists of three main technologies:</p> <ol> <li>Custom elements: APIs to define new HTML elements</li> <li>Shadow DOM: encapsulated DOM and styling, with composition</li> <li>HTML templates: HTML fragments that are not rendered, but stored until instantiated via JavaScript</li> </ol> <p>Web component basic approach:</p> <ol> <li>Using class syntax, create a class.</li> <li>Register your new custom element using the <code class="language-plaintext highlighter-rouge">CustomElementRegistry.define()</code> method.</li> <li>attach a shadow DOM to the custom element using <code class="language-plaintext highlighter-rouge">Element.attachShadow()</code> method.</li> <li>define an HTML template using <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>.</li> <li>Use your custom element wherever you like on your page, just like you would any regular HTML element.</li> </ol> <p>React and Web Components are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.</p> <p>Most people who use React don’t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.</p>]]></content><author><name></name></author><category term="React"/><category term="Component"/><summary type="html"><![CDATA[Component Basic]]></summary></entry><entry><title type="html">My Overview of React</title><link href="https://benwzj.github.io/blog/2022/overview-react/" rel="alternate" type="text/html" title="My Overview of React"/><published>2022-03-03T00:00:00+00:00</published><updated>2022-03-03T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2022/overview-react</id><content type="html" xml:base="https://benwzj.github.io/blog/2022/overview-react/"><![CDATA[<h2 id="what-is-react">What is React</h2> <p>React is a JavaScript library. It provide a framework for you to build your interactive UIs. React is a declarative, Non-opinionated, flexible, efficient library. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p> <h3 id="here-are-some-key-features">Here are some key features:</h3> <ul> <li>React is using component composition for code reuse.</li> <li>React provides a declarative API so that you don’t have to worry about exactly what changes on every UI update. This makes writing applications a lot easier.</li> <li>React create a virtual DOM in memory.</li> <li>React only change what need to be changed.</li> <li>React can work without node.js, just need some tools. like npm, Babel, Webpack</li> <li>React’s one-way data flow (also called one-way binding) keeps everything modular and fast.</li> <li>Using JSX, which can be translated by Babel.</li> <li>There are two types of “model” data in React: props and state.</li> <li>In React components, code reuse is primarily achieved through composition rather than inheritance.</li> </ul> <h3 id="the-simplest-react-example">The simplest React example:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Welcome</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span> <span class="c1">// component</span>

<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Welcome</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Sara</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</code></pre></div></div> <h3 id="ajax-in-react">Ajax in React</h3> <p>You can use any AJAX library you like with React. Like Axios, jQuery AJAX, and the browser built-in <code class="language-plaintext highlighter-rouge">window.fetch</code>.</p> <p>You should populate data with AJAX calls in the componentDidMount lifecycle method. This is so you can use setState to update your component when the data is retrieved.</p> <h3 id="react-library">React library</h3> <p>All top-level APIs come from ‘react’ library, including hooks. So, you need to always import react! <code class="language-plaintext highlighter-rouge">import React, { useState, useEffect } from 'react';</code></p> <h3 id="reactdom-package">ReactDOM package</h3> <p>The react-dom package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside the React model if you need to.</p> <p>React dom is one of the renderers. The renderer is the part of the React ecosystem responsible for displaying React components on specific platforms. like Web dom, mobile native.</p> <p>Usually we use it at index.js as below:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#root</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div> <h2 id="what-is-instances-in-react">What is Instances in React</h2> <p>We let React create, update, and destroy instances. We describe them with elements we return from the components, and React takes care of managing the instances.</p> <p>Only components declared as classes have instances, and you never create them directly: React does that for you. The Only reason to use this instance is for imperative actions (such as setting focus on a field), and should generally be avoided.</p> <p>Instances have much less importance in React than in most object-oriented UI frameworks.</p> <h2 id="what-is-element-in-react">What is Element in React</h2> <p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p> <p>Simple element example:</p> <p>DOM tags:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span></code></pre></div></div> <p>user-defined components.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Welcome</span> <span class="nx">name</span><span class="o">=</span><span class="dl">'</span><span class="s1">sara</span><span class="dl">'</span> <span class="o">/&gt;</span><span class="p">;</span>
</code></pre></div></div> <p>React element structure</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">React</span><span class="o">&lt;</span><span class="sr">/p&gt;</span><span class="err">;
</span><span class="p">};</span>
</code></pre></div></div> <p>React calls its <code class="language-plaintext highlighter-rouge">React.createElement()</code> method internally which returns the following object:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nc">App</span><span class="p">());</span>
<span class="c1">// {</span>
<span class="c1">//   $$typeof: Symbol(react.element)</span>
<span class="c1">//   "type": "p",</span>
<span class="c1">//   "key": null,</span>
<span class="c1">//   "ref": null,</span>
<span class="c1">//   "props": {</span>
<span class="c1">//     "children": "Hello React"</span>
<span class="c1">//   },</span>
<span class="c1">//   "_owner": null,</span>
<span class="c1">//   "_store": {}</span>
<span class="c1">// }</span>
</code></pre></div></div> <h3 id="elements-describe-the-tree">Elements Describe the Tree</h3> <p>In React, An element contains only information about the component type (for example, a Button), its properties (for example, its color), and any child elements inside it.</p> <p>An element is not an actual instance. Rather, it is a way to tell React what you want to see on the screen. It’s just an immutable description object with fields like: type: (string | ReactClass) and props: Object.</p> <ol> <li>DOM Elements: type is string, it represents a DOM node with that tag name, and props correspond to its attributes. They don’t refer to anything on the screen when you create them. React elements are easy to traverse, don’t need to be parsed, and of course they are much lighter than the actual DOM elements—they’re just objects!</li> <li>Component Elements: the type of an element can also be a function or a class corresponding to a React component.</li> </ol> <p>An element describing a component is also an element, just like an element describing the DOM node. They can be nested and mixed with each other.</p> <h2 id="component">Component</h2> <p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.</p> <h3 id="components-encapsulate-element-trees">Components Encapsulate Element Trees.</h3> <p>For a React component, props are the input, and an element tree is the output.</p> <p>The returned element tree can contain both elements describing DOM nodes, and elements describing other components. This lets you compose independent parts of UI without relying on their internal DOM structure.</p> <p>whether functions or classes, fundamentally they are all components to React. They take the props as their input, and return the elements as their output.</p> <p>We let React create, update, and destroy instances. We describe them with elements we return from the components, and React takes care of managing the instances.</p> <h2 id="react-component-vs-react-element-vs-component-instance">React component vs. React element vs. component instance</h2> <ul> <li>Rendering a component happens whenever we use this component as a React element with angle brackets (e.g.<code class="language-plaintext highlighter-rouge"> &lt;Greeting /&gt;</code>) in another component: <code class="language-plaintext highlighter-rouge">const this_is_element = &lt;ThisIsComponent /&gt;</code></li> <li>Whenever a component gets rendered as element, we create an instance of this component.</li> <li>While a React Component is the one time declaration of a component, it can be used once or multiple times as React Element in JSX (React’s createElement method).</li> </ul> <h3 id="html-element-vs-react-element">HTML element vs. React element</h3> <p>HTML elements (or call DOM elements) are created by tag, like<code class="language-plaintext highlighter-rouge"> &lt;div&gt; &lt;a&gt;</code> etc. React elements are plain objects.</p> <h3 id="props">Props</h3> <ul> <li>props are a way of passing data from parent to child.</li> <li>props contains information set by the parent component (although defaults can be set) and should not be changed.</li> </ul> <h3 id="state">State</h3> <ul> <li>State is reserved only for interactivity, Static version don’t need state.</li> <li>State is private and fully controled by component. e.g. initialise, change.</li> <li>setState() can cause re-render.</li> <li>setState() use asychronous nature. React may batch multiple setState() calls into a single update for performance.</li> </ul> <h2 id="hook">Hook</h2> <p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p> <p>Hooks are functions that let you “hook into” React state and lifecycle features from function components.</p> <ul> <li> <p>useState() is a Hook. We call it inside a function component to add some local state to it.</p> </li> <li> <p>useEffect() adds the ability to perform side effects from a function component. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes</p> </li> </ul> <p>Rules of Using Hook:</p> <ol> <li>Only Call Hooks at the Top Level</li> <li>Only Call Hooks from React Functions</li> </ol> <h2 id="redux">Redux</h2> <p>First of All, Redux give you a pattern which can help you manage your application state. And also give you a tools library to help you to build this pattern.</p> <p>The main concept of implements this is using events called “actions”. Redux serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.</p> <figure> <picture> <img src="/assets/img/redux-overview.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <blockquote> <p>Redux is not just for react, it can be used to other JS application.</p> </blockquote> <h2 id="how-to-use-react">How to use React</h2> <p>Runing React application, means using React APIs which locate in React library. React is the entry point to the React library. If you don’t use bundler and you just load React from a <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag, these top-level APIs are available on the React global.</p> <ul> <li>If you use ES6 with npm, you can write <code class="language-plaintext highlighter-rouge">import React from 'react'</code>.</li> <li>If you use ES5 with npm, you can write <code class="language-plaintext highlighter-rouge">var React = require('react')</code>.</li> </ul> <h3 id="how-do-react-applications-work-within-browsers">How do react applications work within browsers</h3> <p>React app usually have one index.html and many js files. React use Webpack tool to bundle all the js files into one bundle.js file.</p> <p>When browsers visit React app, it will return index.html file. And also, return the bundle js file! Browser will execute the bundle file!</p> <h3 id="how-do-react-work-with-the-backend">How do react work with the backend</h3> <p>React is front end application framework. Just like HTML file, it can connect to backend through Hyperlinks, Ajax, etc.</p> <h3 id="how-to-deploy-react">How to deploy react</h3> <ul> <li> <p>Create React App Using Create React App to create React Application. and you can use it with any backend you want. Under the hood, Create React App uses Babel and webpack, but you don’t need to know anything about them. When you’re ready to deploy to production, running npm run build will create an optimized build of your app in the build folder.</p> </li> <li> <p>Vercel There are many services which provide web application deployment. Like Vercel. Vercel is free and easy to use. Sign in and Run CLI to deploy your code to Vercel. after done, you can get a public link like: https//yourapplicationname.vercel.app Under the hood, Vercel use <code class="language-plaintext highlighter-rouge">npm run build</code> to build your app.</p> </li> <li> <p>Next.js framework You can use Next.js to build Node.js applications built with React. It includes styling and routing solutions out of the box.</p> </li> </ul> <h2 id="how-to-design-react-applications">How to design React applications?</h2> <p>How do you know what should be its own component? One such technique is the single responsibility principle, that is, a component should ideally only do one thing.</p> <p>arrange components into a hierarchy.</p> <p>Usually it can be static version and interactive version.</p> <ul> <li>It’s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing.</li> <li>To build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using props. props are a way of passing data from parent to child.</li> <li>To make your UI interactive, you need to be able to trigger changes to your underlying data model. React achieves this with state. go through each one and figure out which one is state.</li> </ul>]]></content><author><name></name></author><category term="React"/><category term="Hook"/><category term="Redux"/><category term="Overview"/><summary type="html"><![CDATA[What is React]]></summary></entry></feed>