<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-31T07:52:12+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">React and TypeScript</title><link href="https://benwzj.github.io/blog/2024/React-ts/" rel="alternate" type="text/html" title="React and TypeScript"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/React-ts</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/React-ts/"><![CDATA[<h2 id="premise">Premise</h2> <p>All production-grade React frameworks offer support for using TypeScript. Like, Next.js, Remix, Gatsby, Expo, Create-React-App.</p> <p>When you want to write React app in TypeScript, you need to setup the configuration to support typeScript. For example, you need <code class="language-plaintext highlighter-rouge">ts-loader</code>, <code class="language-plaintext highlighter-rouge">source-map-loader</code>, <code class="language-plaintext highlighter-rouge">@types</code>, <code class="language-plaintext highlighter-rouge">tsconfig.json</code>, setup webpack config, etc.</p> <p>The things you need can be: <code class="language-plaintext highlighter-rouge">npm install --save-dev typescript ts-loader source-map-loader</code> <code class="language-plaintext highlighter-rouge">npm install @types/react @types/react-dom</code></p> <p>The best way is using framework to build new project which support TypeScript. Otherwise you will have a big head.</p> <p>Of course you will use TSX, TS files instead of JS files.</p> <h2 id="typescript-and-components">TypeScript and Components</h2> <blockquote class="block-warning"> <h5 id="note">Note</h5> <p>Every file containing JSX must use the <code class="language-plaintext highlighter-rouge">.tsx</code> file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.</p> </blockquote> <p>Writing TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can <strong>provide types for your component’s props</strong>. These types can be used for correctness checking and providing inline documentation in editors.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MyButton</span><span class="p">({</span> <span class="nx">title</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">app</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">MyButton</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">I'm a button</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component’s props</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">MyButtonProps</span> <span class="p">{</span>
  <span class="cm">/** The text to display inside the button */</span>
  <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="cm">/** Whether the button can be interacted with */</span>
  <span class="nl">disabled</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">MyButton</span><span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">disabled</span> <span class="p">}:</span> <span class="nx">MyButtonProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">disabled</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">app</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">MyButton</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">I'm a disabled button</span><span class="dl">"</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="hooks-and-typescript">Hooks and TypeScript</h2> <p>The type definitions from <code class="language-plaintext highlighter-rouge">@types/react</code> include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get <strong>inferred types</strong> a lot of the time.</p> <h3 id="usestate">useState</h3> <p>Usually, you can just use infer types:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Infer the type as "boolean"</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">enabled</span><span class="p">,</span> <span class="nx">setEnabled</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</code></pre></div></div> <p>But you still can do it explicitly, but not necessary:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">enabled</span><span class="p">,</span> <span class="nx">setEnabled</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</code></pre></div></div> <p>For object type, usually implement like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">user</span><span class="p">,</span> <span class="nx">serUser</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">User</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">user</span><span class="p">?.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></div></div> <h3 id="useref">useRef</h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">HTMLElement</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Me</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span></code></pre></div></div> <h3 id="usereducer">useReducer</h3> <p>Exampel:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">useReducer</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">State</span> <span class="p">{</span>
   <span class="nl">count</span><span class="p">:</span> <span class="kr">number</span> 
<span class="p">};</span>
<span class="kd">type</span> <span class="nx">CounterAction</span> <span class="o">=</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span> <span class="p">}</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">;</span> <span class="nl">value</span><span class="p">:</span> <span class="nx">State</span><span class="p">[</span><span class="dl">"</span><span class="s2">count</span><span class="dl">"</span><span class="p">]</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">initialState</span><span class="p">:</span> <span class="nx">State</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>
<span class="kd">function</span> <span class="nf">stateReducer</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">State</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">CounterAction</span><span class="p">):</span> <span class="nx">State</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">initialState</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">,</span> <span class="na">count</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">value</span> <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Unknown action</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useReducer</span><span class="p">(</span><span class="nx">stateReducer</span><span class="p">,</span> <span class="nx">initialState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">addFive</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">5</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span> <span class="p">});</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">counter</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">addFive</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="mi">5</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">reset</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Reset</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>We are using TypeScript in a few key places:</p> <ul> <li><code class="language-plaintext highlighter-rouge">interface State</code> describes the shape of the reducer’s state.</li> <li><code class="language-plaintext highlighter-rouge">type CounterAction</code> describes the different actions which can be dispatched to the reducer.</li> <li><code class="language-plaintext highlighter-rouge">const initialState: State</code> provides a type for the initial state, and also the type which is used by useReducer by default.</li> <li><code class="language-plaintext highlighter-rouge">stateReducer(state: State, action: CounterAction): State</code> sets the types for the reducer function’s arguments and return value.</li> </ul> <h3 id="usecontext">useContext</h3> <p>The useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createContext</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Theme</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">system</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">ThemeContext</span> <span class="o">=</span> <span class="nx">createContext</span><span class="o">&lt;</span><span class="nx">Theme</span><span class="o">|</span><span class="kc">null</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">useGetTheme</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">useContext</span><span class="p">(</span><span class="nx">ThemeContext</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">theme</span><span class="p">,</span> <span class="nx">setTheme</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">Theme</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">light</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ThemeContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/ThemeContext.Provider</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">MyComponent</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="nf">useGetTheme</span><span class="p">();</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">theme</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">theme must be used within a Provider</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Current</span> <span class="nx">theme</span><span class="p">:</span> <span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="usememo">useMemo</h3> <h3 id="usecallback">useCallback</h3> <h2 id="useful-types">Useful Types</h2> <h3 id="dom-events">DOM Events</h3> <p>When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to <strong>explicitly</strong> set the type of the event.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Form</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">setValue</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">"</span><span class="s2">Change me</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleChange</span><span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">setValue</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Value</span><span class="p">:</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="children">Children</h3> <p>There are two common paths to describing the children of a component. The first is to use the <code class="language-plaintext highlighter-rouge">React.ReactNode</code> type, which is a union of all the possible types that can be passed as children in JSX:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ModalRendererProps</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is a very broad definition of children. The second is to use the <code class="language-plaintext highlighter-rouge">React.ReactElement</code> type, which is only JSX elements and not JavaScript primitives like strings or numbers:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ModalRendererProps</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactElement</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <p>Note, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> children.</p> </blockquote> <h3 id="style-props">Style Props</h3> <p>When using inline styles in React, you can use <code class="language-plaintext highlighter-rouge">React.CSSProperties</code> to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">MyComponentProps</span> <span class="p">{</span>
  <span class="nl">style</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">CSSProperties</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="reactcomponentprops">React.ComponentProps</h3> <p>When you component wrap basic elements, like div, button, you can use <code class="language-plaintext highlighter-rouge">React.ComponentProps</code> accept all the props for that elements.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ComponentProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">MyDivProps</span> <span class="o">=</span> <span class="nx">ComponentProps</span><span class="o">&lt;</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="p">{</span>
  <span class="na">myProp</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">MyDiv</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">myProp</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">}:</span> <span class="nx">MyDivProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myProp</span><span class="o">!</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">};</span>
</code></pre></div></div> <p>There are also <code class="language-plaintext highlighter-rouge">ComponentPropsWithRef</code>, <code class="language-plaintext highlighter-rouge">ComponentPropsWithoutRef</code> available.</p> <h2 id="implement-types">Implement Types</h2> <p>The more type information provided to TypeScript, the more powerful its type checking is.</p> <h3 id="naming-conventions">Naming Conventions</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">PascalCase</code> for type names.</li> <li>Do not use the <code class="language-plaintext highlighter-rouge">I</code> prefix for interfaces. (Something that was copied from statically typed languages)</li> <li>Use <code class="language-plaintext highlighter-rouge">_</code> prefix for private properties.</li> <li>Use consistent naming for component props types (For example, type CustomComponentProps)</li> </ul> <h3 id="where-to-put-your-types-in-application-code">Where To Put Your Types in Application Code</h3> <ul> <li>Rule 1: When a type is used in only one place, put it in the same file where it’s used. <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
<span class="nl">foo</span><span class="p">:</span> <span class="kr">string</span>
<span class="nx">bar</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div> </div> <p>And when types are truly single-use, You can even inline them:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="p">{</span><span class="nl">foo</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="nl">bar</span><span class="p">:</span> <span class="kr">number</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Rule 2: Types that are used in more than one place should be moved to a shared location. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- src
|- components
  |- MyComponent.tsx
|- shared.types.ts
</code></pre></div> </div> <p>If they’re only used in the components folder, I’ll put them there:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- src
|- components-
  |- MyComponent.tsx
  |- components.types.ts
</code></pre></div> </div> <p>In other words, I share the type across the <strong>smallest</strong> number of modules that need it.</p> </li> <li>Rule 3: Types that are used in more than one package in a monorepo should be moved to a shared package. if you’re working on a monorepo with multiple packages? In that case, you should move shared types to a shared package. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- apps
|- app
|- website
|- docs
|- packages
|- types
  |- src
    |- shared.types.ts
</code></pre></div> </div> </li> </ul> <h3 id="export-import-types">export import types</h3> <p>types.ts file:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">type</span> <span class="nx">Launch</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">full_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>you can use <code class="language-plaintext highlighter-rouge">import</code> or <code class="language-plaintext highlighter-rouge">import type</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span><span class="nx">Launch</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./types</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <h3 id="namespaces">Namespaces</h3> <p>As your project size increases, so will the number of types. There is a good chance that there will be name collisions. Namespaces are the solution to this problem. A namespace will not only avoid multiple type declarations but also provide an organisational structure to your projects. Using namespaces effectively can make your codebase clean.</p> <h3 id="keyof-typeof">Keyof, Typeof</h3> <p>In Typescript, it can use the <code class="language-plaintext highlighter-rouge">typeof</code> operator to get the exact type definition of a variable. <code class="language-plaintext highlighter-rouge">typeof</code> can be used to infer types.</p> <p>The <code class="language-plaintext highlighter-rouge">keyof</code> operator is introduced by typescript. It gives the properties of an object type in form of a union. For example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">b</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;};</span>
<span class="kd">const</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="kc">false</span><span class="p">};</span>
<span class="c1">// Y = 'a' | 'b'</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="kr">keyof</span> <span class="nx">X</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">y</span><span class="p">:</span> <span class="nx">Y</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">;</span>
<span class="cm">/* Without explicitly specifying y as type Y TS will infer its type as string and will throw an error about indexing type X using string */</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">y</span><span class="p">]);</span>
</code></pre></div></div> <p>You will often be using typeof and keyof operators in combination, typeof to get the type of an object and keyof to index it.</p> <h3 id="types">@types</h3> <p><code class="language-plaintext highlighter-rouge">@types</code> is a special directory in typescript. It is <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefintelyTyped</a> which is maintained by TypeScript. DefinitelyTyped try to conclude all the types used in TypeScript, including build-in libraryies and third libraryies.</p> <p>You can find <code class="language-plaintext highlighter-rouge">@types</code> dictionary in React project <code class="language-plaintext highlighter-rouge">node_modules</code>. The declaration file (*.d.ts files, e.g. index.d.ts) are auto recognised by your project’s <code class="language-plaintext highlighter-rouge">tsconfig</code> as the root types files. The types defined in these files can be used as global types in your project.</p> <p>For example <code class="language-plaintext highlighter-rouge">@types/react/index.d.ts</code>, which difine type for React project.</p> <h3 id="utility-types">Utility Types</h3> <p>Typescript provides several utility types which help you transform your type definitions. Some of my commonly used utility types are:</p> <ul> <li>Partial<Type> constructs type with all the properties of the type set to optional. </Type> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;}</span>
<span class="c1">// Y = Partial&lt;X&gt; = {a?: number;} or {a: number | undefined;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">X</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Required<Type> constructs type with all the properties of the type set to required. </Type> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;}</span>
<span class="c1">// Y = Required&lt;X&gt; = {a: number;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Required</span><span class="o">&lt;</span><span class="nx">X</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Record&lt;Keys, Type&gt; constructs an object type with property key of type Keys and property value of type Type. <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// X = {[key: string]: number;}</span>
<span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Omit&lt;Type, Keys&gt; constructs a type from type Type after removing key Keys (string literal or union of strings). <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">b</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span> <span class="nl">c</span><span class="p">:</span> <span class="kr">string</span><span class="p">;}</span>
<span class="c1">// Y = {b: boolean; c: string;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">X</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="o">&gt;</span>
<span class="c1">// Z = {c: string;}</span>
<span class="kd">type</span> <span class="nx">Z</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">X</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="o">&gt;</span>
</code></pre></div> </div> <p>There are many more Utility Types in typescript and these will help you avoid rewriting your type definitions for every individual or derivable type.</p> </li> </ul> <p>You can also write custom utility types, like the Optional type provided in the <code class="language-plaintext highlighter-rouge">@types/index.d.ts</code> file. Optional type is used to make only selected properties optional in a type.</p> <h3 id="generics">Generics</h3> <blockquote> <p>Definiton: Generics take type(s) as input and use them to derive the type of variables or functions.</p> </blockquote> <blockquote> <p>Purpose: Generics type give you chance to describe the type <strong>relationship</strong> between input and output.</p> </blockquote> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">identity</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">arg</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/* Explicitly*/</span>
<span class="nx">identity</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
<span class="cm">/* Implicitly */</span>
<span class="nf">identity</span><span class="p">(</span><span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ButtonProp</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">count</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="nl">countHistory</span><span class="p">:</span> <span class="nx">T</span><span class="p">[];</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">Button</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">({</span><span class="nx">count</span><span class="p">,</span> <span class="nx">countHistory</span><span class="p">}:</span> <span class="nx">ButtonProp</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Me</span><span class="o">&lt;</span><span class="sr">/button&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <p>Use generics to make your code reusable without writing multiple type definitions.</p> <h3 id="the-unknown-type">The <code class="language-plaintext highlighter-rouge">unknown</code> Type</h3> <ul> <li>The <code class="language-plaintext highlighter-rouge">any</code> type is container type, but <code class="language-plaintext highlighter-rouge">unknown</code> type is not.</li> <li>All assignments to the <code class="language-plaintext highlighter-rouge">unknown</code> variable are considered type-correct. But the <code class="language-plaintext highlighter-rouge">unknown</code> type is only assignable to the <code class="language-plaintext highlighter-rouge">any</code> type and the <code class="language-plaintext highlighter-rouge">unknown</code> type itself.</li> <li>You can narrow <code class="language-plaintext highlighter-rouge">unknown</code> type and use them.</li> </ul> <h4 id="narrowing-the-unknown-type">Narrowing the <code class="language-plaintext highlighter-rouge">unknown</code> Type</h4> <p>You need to <strong>narrow</strong> the <code class="language-plaintext highlighter-rouge">unknown</code> Type first before using it. For example using:</p> <ul> <li><code class="language-plaintext highlighter-rouge">typeof</code> operators</li> <li><code class="language-plaintext highlighter-rouge">instanceof</code> operators</li> <li>custom type guard function</li> <li>third lib schema, like Zod.</li> </ul> <p>Custom type guard function Example :</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">isNumberArray</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">):</span> <span class="nx">value</span> <span class="k">is</span> <span class="kr">number</span><span class="p">[]</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nf">every</span><span class="p">(</span><span class="nx">element</span> <span class="o">=&gt;</span> <span class="k">typeof</span> <span class="nx">element</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">unknownValue</span><span class="p">:</span> <span class="nx">unknown</span> <span class="o">=</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">16</span><span class="p">];</span>
<span class="k">if </span><span class="p">(</span><span class="nf">isNumberArray</span><span class="p">(</span><span class="nx">unknownValue</span><span class="p">))</span> <span class="p">{</span>
  <span class="c1">// Within this branch, `unknownValue` has type `number[]`,</span>
  <span class="c1">// so we can spread the numbers as arguments to `Math.max`</span>
  <span class="kd">const</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(...</span><span class="nx">unknownValue</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">max</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Zod example</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">z</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zod</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// creating a schema for strings</span>
<span class="kd">const</span> <span class="nx">mySchema</span> <span class="o">=</span> <span class="nx">z</span><span class="p">.</span><span class="nf">string</span><span class="p">();</span>
<span class="c1">// parsing</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="dl">"</span><span class="s2">tuna</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// =&gt; "tuna"</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// =&gt; throws ZodError</span>
<span class="c1">// "safe" parsing (doesn't throw error if validation fails)</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">safeParse</span><span class="p">(</span><span class="dl">"</span><span class="s2">tuna</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// =&gt; { success: true; data: "tuna" }</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">safeParse</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// =&gt; { success: false; error: ZodError }</span>
</code></pre></div></div> <h4 id="using-type-assertions-with-unknown">Using Type Assertions with <code class="language-plaintext highlighter-rouge">unknown</code></h4> <p>If you want to force the compiler to trust you that a value of type <code class="language-plaintext highlighter-rouge">unknown</code> is of a given type, you can use a type assertion like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">unknown</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">someString</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="nx">value</span> <span class="k">as</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">otherString</span> <span class="o">=</span> <span class="nx">someString</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span> <span class="c1">// "HELLO WORLD"</span>
</code></pre></div></div> <h4 id="unknown-in-union-and-intersection-types"><code class="language-plaintext highlighter-rouge">unknown</code> in Union and Intersection Types</h4> <p>In union, any of the constituent types is <code class="language-plaintext highlighter-rouge">unknown</code>, the union type evaluates to <code class="language-plaintext highlighter-rouge">unknown</code>, except <code class="language-plaintext highlighter-rouge">any</code>. In intersection, intersecting any type with unknown doesn’t change the resulting type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">UnionType1</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType2</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType3</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType4</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">number</span><span class="p">[];</span> <span class="c1">// unknown</span>

<span class="kd">type</span> <span class="nx">UnionType5</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">any</span><span class="p">;</span> <span class="c1">// any</span>

<span class="kd">type</span> <span class="nx">IntersectionType1</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// null</span>
<span class="kd">type</span> <span class="nx">IntersectionType2</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// undefined</span>
<span class="kd">type</span> <span class="nx">IntersectionType3</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// string</span>
<span class="kd">type</span> <span class="nx">IntersectionType4</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">number</span><span class="p">[];</span> <span class="c1">// number[]</span>
<span class="kd">type</span> <span class="nx">IntersectionType5</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">any</span><span class="p">;</span> <span class="c1">// any</span>
</code></pre></div></div> <h4 id="use-unknown-type-in-fetch">use <code class="language-plaintext highlighter-rouge">unknown</code> type in fetch</h4> <p>The <code class="language-plaintext highlighter-rouge">data</code> is <code class="language-plaintext highlighter-rouge">any</code> type when fetching!</p> <ul> <li>Using Zod: <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">useEffect</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
<span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://jsonplaceholder.typicode.com/todos/1</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="na">data</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="c1">// use Zod</span>
    <span class="c1">// for example: const todo = todoSchema.parse(data); </span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">},[]);</span>
</code></pre></div> </div> </li> <li>Using ts-reset: <code class="language-plaintext highlighter-rouge">.json</code> (in fetch) and <code class="language-plaintext highlighter-rouge">JSON.parse</code> both return <code class="language-plaintext highlighter-rouge">unknown</code>.</li> </ul> <h3 id="type-assertions">Type Assertions</h3> <p>Type assertion allows you to set the type of a value and tell the compiler not to infer it.</p> <p>You may do this to make thing simple:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ButtonColor</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="o">|</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">;</span>

<span class="nf">useEffect </span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">previousButtonColor</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nf">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">buttonColor</span><span class="dl">'</span><span class="p">)</span> <span class="k">as</span> <span class="nx">ButtonColor</span><span class="p">;</span>
<span class="p">},[]);</span>
</code></pre></div></div> <h3 id="omit"><code class="language-plaintext highlighter-rouge">Omit&lt;&gt;</code></h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">sessionId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">Guest</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">,</span> <span class="s2">`name`</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// then, Guest type just contain sessionId. </span>
</code></pre></div></div> <h2 id="reference">Reference</h2> <ul> <li><a href="https://react.dev/learn/typescript">React Doc</a></li> <li><a href="https://www.typescriptlang.org">TypeScript official website</a></li> <li><a href="https://react-typescript-cheatsheet.netlify.app">React TypeScript Cheatsheets</a></li> <li><a href="https://github.com/microsoft/TypeScript-React-Conversion-Guide/blob/master/README.md">TypeScript-React-Conversion-Guide</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="TypeScript"/><summary type="html"><![CDATA[Premise]]></summary></entry><entry><title type="html">Responsive Web Design</title><link href="https://benwzj.github.io/blog/2024/responsive-page/" rel="alternate" type="text/html" title="Responsive Web Design"/><published>2024-03-18T00:00:00+00:00</published><updated>2024-03-18T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/responsive-page</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/responsive-page/"><![CDATA[<p>Responsive Web Design (RWD) is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones).</p> <p>Media queries can help with RWD, but are not a requirement. Flexible grids, relative units, and minimum and maximum unit values can be used without queries.</p> <p>A modern-day solution for developing highly responsive layouts using traditional CSS is by combining <strong>Flexbox</strong> and <strong>Grid</strong> System.</p> <h2 id="setting-the-viewport">Setting The Viewport</h2> <p><code class="language-plaintext highlighter-rouge">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</code></p> <p>This viewport meta tag tells <strong>mobile</strong> browsers that they should set the width of the viewport to the device width, and scale the document to 100% of its intended size, which shows the document at the mobile-optimized size that you intended.</p> <p>Why is this needed? Because mobile browsers tend to lie about their viewport width.</p> <p>This meta tag exists because when smartphones first arrived, most sites were not mobile optimized. The mobile browser would, therefore, set the viewport width to 980 pixels, render the page at that width, and show the result as a zoomed-out version of the desktop layout.</p> <h2 id="responsive-images">Responsive Images</h2> <h3 id="using-the-width-property">Using the width Property</h3> <p>If the CSS <code class="language-plaintext highlighter-rouge">width</code> property is set to <strong>100%</strong>, the image will be responsive and scale up and down: <code class="language-plaintext highlighter-rouge">&lt;img src="img_girl.jpg" style="width:100%;"&gt;</code></p> <h3 id="using-the-max-width-property">Using the max-width Property</h3> <p>If the <code class="language-plaintext highlighter-rouge">max-width</code> property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size: <code class="language-plaintext highlighter-rouge">&lt;img src="img_girl.jpg" style="max-width:100%;height:auto;"&gt;</code></p> <h3 id="show-different-images-depending-on-browser-width">Show Different Images Depending on Browser Width</h3> <p>The HTML <picture> element allows you to define different images for different browser window sizes.</picture></p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">picture</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">source</span> <span class="nt">srcset</span><span class="o">=</span><span class="s1">"img_smallflower.jpg"</span> <span class="nt">media</span><span class="o">=</span><span class="s1">"(max-width: 600px)"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">source</span> <span class="nt">srcset</span><span class="o">=</span><span class="s1">"img_flowers.jpg"</span> <span class="nt">media</span><span class="o">=</span><span class="s1">"(max-width: 1500px)"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">source</span> <span class="nt">srcset</span><span class="o">=</span><span class="s1">"flowers.jpg"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">img</span> <span class="nt">src</span><span class="o">=</span><span class="s1">"img_smallflower.jpg"</span> <span class="nt">alt</span><span class="o">=</span><span class="s1">"Flowers"</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nt">picture</span><span class="o">&gt;</span>
</code></pre></div></div> <h3 id="responsive-text-size">Responsive Text Size</h3> <p>The text size can be set with a “vw” unit, which means the “viewport width”. That way the text size will follow the size of the browser window. <code class="language-plaintext highlighter-rouge">&lt;h1 style="font-size:10vw"&gt;Hello World&lt;/h1&gt;</code></p> <h2 id="media-queries">Media Queries</h2> <p>With media queries you can define completely different styles for different browser sizes.</p> <ul> <li>Media query uses the <code class="language-plaintext highlighter-rouge">@media</code> rule to include a block of CSS properties only if a certain condition is true.</li> <li>Media queries are a popular technique for delivering a tailored style sheet (responsive web design) to desktops, laptops, tablets, and mobile phones.</li> <li>Media query is a CSS technique introduced in CSS3.</li> </ul> <p>Media queries can be used to check many things, such as:</p> <ul> <li>width and height of the viewport</li> <li>width and height of the device</li> <li>orientation (is the tablet/phone in landscape or portrait mode?)</li> <li>resolution</li> </ul> <h3 id="example-1">Example 1</h3> <p>Web page looks like this on Desktop:</p> <figure> <picture> <img src="/assets/img/css-mediaquery1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint. Now we Use a media query to add a breakpoint at 768px:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">/* For mobile phones: */</span>
  <span class="o">[</span><span class="nt">class</span><span class="o">*=</span><span class="s1">"col-"</span><span class="o">]</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <figure> <picture> <img src="/assets/img/css-mediaquery2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="example-2">Example 2</h3> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">550px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.card</span> <span class="p">{</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then browser can change <code class="language-plaintext highlighter-rouge">.card</code> class content as above when screen width less than <code class="language-plaintext highlighter-rouge">550px</code>.</p> <h2 id="container-queries">Container queries</h2> <p>(https://blog.logrocket.com/css-container-queries-guide)</p> <ul> <li> <p>CSS container queries allow us to style an element with regard to its parent or container size (width and height).</p> </li> <li> <p>Container queries differ from media queries in the sense that media queries target the viewport (width and height) of the web browser in order to apply the style to an element.</p> </li> <li> <p>CSS container queries enables designers to create webpages that are very responsive by ensuring that styles are applied to components based on their width and height and not based on the viewport of the full page.</p> </li> <li> <p>The effect of Container query is very similar to Media query.</p> </li> </ul> <h3 id="how-to-use-container-queries">How to use container queries</h3> <ul> <li>Similar to Media query. But a little bit complicated.</li> <li>card class should be inside card-container class.</li> <li>It need container-type</li> <li>container-name is optional</li> <li>Looks like this: <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.card-container</span> <span class="p">{</span>
<span class="py">container-type</span><span class="p">:</span> <span class="n">inline-size</span><span class="p">;</span>
<span class="py">container-name</span><span class="p">:</span> <span class="n">cardContainer</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.card</span> <span class="p">{</span>
<span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
 <span class="p">}</span>
<span class="k">@container</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">500px</span><span class="p">)</span> <span class="p">{</span>
<span class="nc">.card</span> <span class="p">{</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>When the width of The container witch with cardContainer class is less than 500px, when card class will change accordingly.</li> </ul> <h2 id="rwd-and-react">RWD and React</h2> <h3 id="matchmedia-api"><code class="language-plaintext highlighter-rouge">matchMedia()</code> API</h3> <p>Window <code class="language-plaintext highlighter-rouge">matchMedia()</code> API returns a <code class="language-plaintext highlighter-rouge">MediaQueryList</code> object with the results from the query.</p> <p>Example: This example runs the media query (max-width: 600px) and displays the value of the resulting MediaQueryList’s matches property in a <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>; as a result, the output will say “true” if the viewport is less than or equal to 600 pixels wide, and will say “false” if the window is wider than that.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"mq-value"</span><span class="nt">&gt;&lt;/span&gt;</span>
</code></pre></div></div> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mql</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">matchMedia</span><span class="p">(</span><span class="dl">"</span><span class="s2">(max-width: 600px)</span><span class="dl">"</span><span class="p">);</span>

<span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.mq-value</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">;</span>
</code></pre></div></div> <h3 id="write-a-matchmediawrapper-component">Write a <code class="language-plaintext highlighter-rouge">MatchMediaWrapper</code> Component</h3> <p>You can create this <code class="language-plaintext highlighter-rouge">MatchMediaWrapper</code> component to display differnent according to <code class="language-plaintext highlighter-rouge">max-width</code>.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MatchMediaWrapper</span> <span class="o">=</span> <span class="p">({</span><span class="nx">mobileContent</span><span class="p">,</span> <span class="nx">desktopContent</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isNarrowScreen</span><span class="p">,</span> <span class="nx">setIsNarrowScreen</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">mediaWatcher</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">matchMedia</span><span class="p">(</span><span class="dl">"</span><span class="s2">(max-width: 500px)</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">setIsNarrowScreen</span><span class="p">(</span><span class="nx">mediaWatcher</span><span class="p">.</span><span class="nx">matches</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nf">updateIsNarrowScreen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">setIsNarrowScreen</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">matches</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">mediaWatcher</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">mediaWatcher</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">change</span><span class="dl">'</span><span class="p">,</span> <span class="nx">updateIsNarrowScreen</span><span class="p">)</span>
      <span class="k">return</span> <span class="kd">function</span> <span class="nf">cleanup</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">mediaWatcher</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">change</span><span class="dl">'</span><span class="p">,</span> <span class="nx">updateIsNarrowScreen</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">mediaWatcher</span><span class="p">.</span><span class="nf">addListener</span><span class="p">(</span><span class="nx">updateIsNarrowScreen</span><span class="p">)</span>
      <span class="k">return</span> <span class="kd">function</span> <span class="nf">cleanup</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">mediaWatcher</span><span class="p">.</span><span class="nf">removeListener</span><span class="p">(</span><span class="nx">updateIsNarrowScreen</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},[])</span>
  <span class="k">return</span> <span class="nx">isNarrowScreen</span> <span class="p">?</span> <span class="nx">mobileContent</span> <span class="p">:</span> <span class="nx">desktopContent</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Use this Wrapper compoent:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyReponsiveComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">mobileContent</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">what</span> <span class="nx">you</span> <span class="nx">see</span> <span class="nx">on</span> <span class="nx">mobile</span><span class="o">!&lt;</span><span class="sr">/div&gt;</span><span class="se">)</span><span class="err">;
</span>  <span class="kd">const</span> <span class="nx">desktopContent</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">what</span> <span class="nx">you</span> <span class="nx">see</span> <span class="nx">on</span> <span class="nx">desktop</span><span class="o">!&lt;</span><span class="sr">/div&gt;</span><span class="se">)</span><span class="err">;
</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MatchMediaWrapper</span> <span class="nx">mobileContent</span><span class="o">=</span><span class="p">{</span><span class="nx">mobileContent</span><span class="p">}</span> <span class="nx">desktopContent</span><span class="o">=</span><span class="p">{</span><span class="nx">desktopContent</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <h2 id="reference">Reference</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design">mdn Responsive_Design</a></li> <li><a href="https://css-tricks.com/a-complete-guide-to-css-media-queries/">css-tricks media-queries</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="HTML"/><category term="RWD"/><category term="React"/><summary type="html"><![CDATA[Responsive Web Design (RWD) is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones).]]></summary></entry><entry><title type="html">JavaScript Overview</title><link href="https://benwzj.github.io/blog/2024/js-overview/" rel="alternate" type="text/html" title="JavaScript Overview"/><published>2024-03-17T00:00:00+00:00</published><updated>2024-03-17T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/js-overview</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/js-overview/"><![CDATA[<ul> <li> <p>JavaScript is single-threaded non-blocking asynchronous concurrent language.</p> </li> <li> <p>JavaScript is all about Object!</p> </li> <li> <p>JavaScript have a call stack, an event loop, a callback queue, and some other APIs. So JavaScript don’t just have JavaScript engine.</p> </li> <li> <p>JavaScript is Dynamic language which means JavaScript do much more thing underneath. For example auto-boxing, auto type conversion, etc. And these make JavaScript harder to understand. You need to know what JavaScript will do for you.</p> </li> <li> <p>The class keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based.</p> </li> <li> <p>About Inheritance, JavaScript only has one construct: objects. Inheritance is all about prototype chain: Each object has a private property which holds a link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype, and acts as the final link in this prototype chain.</p> </li> <li> <p>When you get value from property, JS will look through prototype chain. When you Set value to property, JS will implement in own object, means if the property have been existed, then change value, if no, then create one.</p> </li> <li> <p>In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: <code class="language-plaintext highlighter-rouge">string</code>, <code class="language-plaintext highlighter-rouge">number</code>, <code class="language-plaintext highlighter-rouge">bigint</code>, <code class="language-plaintext highlighter-rouge">boolean</code>, <code class="language-plaintext highlighter-rouge">undefined</code>, <code class="language-plaintext highlighter-rouge">symbol</code>, and <code class="language-plaintext highlighter-rouge">null</code>.</p> </li> <li><code class="language-plaintext highlighter-rouge">undefined</code> vs <code class="language-plaintext highlighter-rouge">null</code>. Both of them are primitive data. <code class="language-plaintext highlighter-rouge">typeof(null)</code> will display <code class="language-plaintext highlighter-rouge">null</code> is object. But it is not. <code class="language-plaintext highlighter-rouge">null</code> is a deliberate assignment that represents no value. When a variable is declared but not initialized, or when a function does not return a value, the variable or the function’s result is <code class="language-plaintext highlighter-rouge">undefined</code>. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">null</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="c1">// true</span>
<span class="kc">null</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// false</span>
</code></pre></div> </div> </li> <li> <p>Except for null and undefined, all primitive values have object equivalents that wrap around the primitive values. The wrapper’s valueOf() method returns the primitive value.</p> </li> <li> <p>In JavaScript, only objects and arrays are mutable. All primitive values are immutable.</p> </li> <li>avoid some code in Javascript: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">eval</span><span class="p">()</span> 
<span class="nx">arguments</span>
<span class="k">for</span><span class="p">...</span><span class="k">in</span>
<span class="kd">with</span>
<span class="k">delete</span>
<span class="nx">Hidden</span> <span class="kd">class</span>
<span class="nc">inline</span> <span class="nx">caching</span>
</code></pre></div> </div> </li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><category term="TypeScript"/><summary type="html"><![CDATA[JavaScript is single-threaded non-blocking asynchronous concurrent language.]]></summary></entry><entry><title type="html">Loop Over in JS</title><link href="https://benwzj.github.io/blog/2024/loop-over-js/" rel="alternate" type="text/html" title="Loop Over in JS"/><published>2024-03-16T00:00:00+00:00</published><updated>2024-03-16T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/loop-over-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/loop-over-js/"><![CDATA[<h2 id="for">for</h2> <p>The <code class="language-plaintext highlighter-rouge">for</code> statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="forof">for…of</h2> <p>The <code class="language-plaintext highlighter-rouge">for...of</code> statement executes a loop that operates on a sequence of values sourced from an <strong>iterable</strong> object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables.</p> <p>When a <code class="language-plaintext highlighter-rouge">for...of</code> loop iterates over an iterable, it first calls the iterable’s <code class="language-plaintext highlighter-rouge">[@@iterator]()</code> method, which returns an iterator, and then repeatedly calls the resulting iterator’s <code class="language-plaintext highlighter-rouge">next()</code> method to produce the sequence of values to be assigned to variable.</p> <h2 id="forin">for…in</h2> <p>The <code class="language-plaintext highlighter-rouge">for...in</code> statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.</p> <h3 id="forof-vs-forin"><code class="language-plaintext highlighter-rouge">for...of</code> vs <code class="language-plaintext highlighter-rouge">for...in</code></h3> <p>When loop over an Array, unlike <code class="language-plaintext highlighter-rouge">for...of</code>, <code class="language-plaintext highlighter-rouge">for...in</code> uses property enumeration instead of the array’s iterator. In sparse arrays, <code class="language-plaintext highlighter-rouge">for...of</code> will visit the empty slots, but <code class="language-plaintext highlighter-rouge">for...in</code> will not.</p> <h2 id="while">while</h2> <p>The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">while </span><span class="p">(</span><span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">n</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="loop-over-an-object">loop over an object</h2> <p>The prefered way is using <code class="language-plaintext highlighter-rouge">Object.entries()</code> or <code class="language-plaintext highlighter-rouge">Object.keys()</code> method. It is clean.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">object1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="dl">'</span><span class="s1">somestring</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">b</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
<span class="p">};</span>
<span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">entries</span><span class="p">(</span><span class="nx">object1</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// Expected output:</span>
<span class="c1">// "a: somestring"</span>
<span class="c1">// "b: 42"</span>
</code></pre></div></div> <p>Alternative way: You can still use <code class="language-plaintext highlighter-rouge">for...in</code>. But it iterates through properties in the prototype chain. This means that we need to check if the property belongs to the object using <code class="language-plaintext highlighter-rouge">hasOwnProperty</code>.</p> <h2 id="loop-over-set">Loop Over Set</h2> <p>You can iterate over the elements of a Set using various methods, such as the <code class="language-plaintext highlighter-rouge">forEach()</code> method, the <code class="language-plaintext highlighter-rouge">for...of</code> loop, or by converting the Set to an array and using array iteration methods.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mySet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>

<span class="nx">mySet</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
<span class="p">});</span>

</code></pre></div></div> <p>Using <code class="language-plaintext highlighter-rouge">for...of</code> loop, (but old browser may not support):</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mySet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">mySet</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="reference">Reference</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in">for…in</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">for…of</a></li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><category term="React"/><summary type="html"><![CDATA[for]]></summary></entry><entry><title type="html">CSS Grid Layout</title><link href="https://benwzj.github.io/blog/2024/css-grid/" rel="alternate" type="text/html" title="CSS Grid Layout"/><published>2024-03-10T00:00:00+00:00</published><updated>2024-03-10T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-grid</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-grid/"><![CDATA[<p>CSS grid layout is a two-dimensional layout system for the web. It lets you organize content into rows and columns and offers many features to simplify the creation of complex layouts.</p> <p>Similar to Flexbox, Grid has concepts of parent container and the child elements.</p> <h2 id="create-grid-container">Create Grid container</h2> <p>Define grid container:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="implicit-and-explicit-grids">Implicit and explicit grids</h3> <ul> <li>Explicit grid is created using <code class="language-plaintext highlighter-rouge">grid-template-column</code>s or <code class="language-plaintext highlighter-rouge">grid-template-rows</code>.</li> <li>Implicit grid extends the defined explicit grid when content is placed outside of that grid, such as into the rows by drawing additional grid lines.</li> </ul> <p>By default, tracks created in the implicit grid are auto sized, which in general means that they’re large enough to contain their content. If you wish to give implicit grid tracks a size, you can use the grid-auto-rows and grid-auto-columns properties.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">100px</span> <span class="m">100px</span> <span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="special-units--functions">Special Units &amp; Functions</h3> <h4 id="fr-unit">fr unit</h4> <p>The <code class="language-plaintext highlighter-rouge">fr</code> unit represents one <strong>fraction</strong> of the available space in the grid container to flexibly size grid rows and columns. The <code class="language-plaintext highlighter-rouge">fr</code> unit distributes space proportionally. You can specify different positive values for your tracks. Creating three tracks below:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">2</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote class="warning-block"> <p>Note: The <code class="language-plaintext highlighter-rouge">fr</code> unit distributes available space, not all space. Therefore, if one of your tracks has something large inside it, there will be less free space to share.</p> </blockquote> <h4 id="sizing-keywords">Sizing Keywords</h4> <ul> <li><code class="language-plaintext highlighter-rouge">min-content</code>: the minimum size of the content. Imagine a line of text like “E pluribus unum”, the min-content is likely the width of the word “pluribus”.</li> <li><code class="language-plaintext highlighter-rouge">max-content</code>: the maximum size of the content. Imagine the sentence above, the max-content is the length of the whole sentence.</li> <li><code class="language-plaintext highlighter-rouge">auto</code>: this keyword is a lot like fr units, except that they “lose” the fight in sizing against fr units when allocating the remaining space.</li> <li>Fractional units: <code class="language-plaintext highlighter-rouge">fr</code></li> </ul> <h4 id="sizing-functions">Sizing Functions</h4> <ul> <li><code class="language-plaintext highlighter-rouge">minmax()</code> function lets us set a minimum and maximum size for a track.</li> <li><code class="language-plaintext highlighter-rouge">fit-content()</code> function uses the space available, but never less than min-content and never more than max-content.</li> <li><code class="language-plaintext highlighter-rouge">min()</code> function.</li> <li><code class="language-plaintext highlighter-rouge">max()</code> function.</li> </ul> <h4 id="repeat-function">repeat() function</h4> <p>The <code class="language-plaintext highlighter-rouge">repeat()</code> function can save some typing But repeat() can get extra fancy when combined with keywords:</p> <ul> <li><code class="language-plaintext highlighter-rouge">auto-fill</code>: Fit as many possible columns as possible on a row, even if they are empty.</li> <li><code class="language-plaintext highlighter-rouge">auto-fit</code>: Fit whatever columns there are into the space. Prefer expanding columns to fill space rather than empty columns.</li> </ul> <h2 id="line-based-placement">Line-based placement</h2> <p>To position items along lines, we can specify the <strong>start</strong> and <strong>end</strong> lines of the grid area where an item should be placed. There are four properties we can use to do this:</p> <ul> <li>grid-column-start</li> <li>grid-column-end</li> <li>grid-row-start</li> <li>grid-row-end</li> <li>grid-column shorthand for grid-column-start and grid-column-end</li> <li>grid-row shorthand for grid-row-start and grid-row-end</li> </ul> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">header</span> <span class="p">{</span>
  <span class="nl">grid-column</span><span class="p">:</span> <span class="m">1</span> <span class="p">/</span> <span class="m">3</span><span class="p">;</span>
  <span class="nl">grid-row</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Means the header contain 1 to 3 column, and first row.</p> <h2 id="grid-template-areas">grid-template-areas</h2> <p>Positioning with <code class="language-plaintext highlighter-rouge">grid-template-areas</code>.</p> <p>Other than Line-based placement, an <strong>alternative</strong> way to arrange items on your grid is to use the <code class="language-plaintext highlighter-rouge">grid-template-areas</code> property and give the various elements of your design a name.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-areas</span><span class="p">:</span>
    <span class="s1">"header header"</span>
    <span class="s1">"sidebar content"</span>
    <span class="s1">"footer footer"</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">3</span><span class="n">fr</span><span class="p">;</span>
  <span class="py">gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">header</span> <span class="p">{</span>
  <span class="py">grid-area</span><span class="p">:</span> <span class="n">header</span><span class="p">;}</span>
<span class="nt">article</span> <span class="p">{</span>
  <span class="py">grid-area</span><span class="p">:</span> <span class="n">content</span><span class="p">;}</span>
<span class="nt">aside</span> <span class="p">{</span>
  <span class="py">grid-area</span><span class="p">:</span> <span class="n">sidebar</span><span class="p">;}</span>
<span class="nt">footer</span> <span class="p">{</span>
  <span class="py">grid-area</span><span class="p">:</span> <span class="n">footer</span><span class="p">;}</span>
</code></pre></div></div> <p>The rules for grid-template-areas are as follows:</p> <ul> <li>You need to have every cell of the grid filled.</li> <li>To span across two cells, repeat the name.</li> <li>To leave a cell empty, use a . (period).</li> <li>Areas must be rectangular — for example, you can’t have an L-shaped area.</li> <li>Areas can’t be repeated in different locations.</li> </ul> <h2 id="subgrid">Subgrid</h2> <p>It’s possible to nest a grid within another grid, creating a “subgrid”. You can do this by setting the display: grid property on a grid item.</p> <h2 id="grid-container-properties">Grid Container properties</h2> <h3 id="justify-content">justify-content</h3> <p>Use the <code class="language-plaintext highlighter-rouge">justify-content</code> property to align the <strong>grid</strong> inside the container. <code class="language-plaintext highlighter-rouge">justify-content</code> property to align the grid along the inline (<strong>row</strong>) axis.</p> <h3 id="align-content">align-content</h3> <p>This property aligns the grid along the block (<strong>column</strong>) axis. The align-content property is used to vertically align the whole grid inside the container.</p> <h3 id="justify-items">justify-items</h3> <p>Aligns grid <strong>items</strong> along the inline (<strong>row</strong>) axis. This value applies to all grid items inside the container.</p> <h3 id="align-items">align-items</h3> <p>Aligns grid items along the block (<strong>column</strong>) axis. This value applies to all grid items inside the container.</p> <h2 id="grid-items-properties">Grid Items properties</h2> <ul> <li>justify-self</li> <li>align-self</li> <li>place-self</li> <li>grid-column-start</li> <li>grid-column-end</li> <li>grid-row-start</li> <li>grid-row-end</li> <li>grid-area</li> <li>grid-column</li> <li>grid-row</li> </ul> <h2 id="support-rwd">Support RWD</h2> <h3 id="fluid-columns-snippet">Fluid columns snippet</h3> <p>Fluid width columns that break into more or less columns as space is available, with no media queries!</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.grid</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="nb">repeat</span><span class="p">(</span><span class="n">auto-fill</span><span class="p">,</span> <span class="n">minmax</span><span class="p">(</span><span class="m">200px</span><span class="p">,</span> <span class="m">1</span><span class="n">fr</span><span class="p">));</span>
  <span class="c">/* This is better for small screens, once min() is better supported */</span>
  <span class="c">/* grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr)); */</span>
  <span class="py">gap</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="reference">Reference</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids">mdn</a></li> <li><a href="https://css-tricks.com/snippets/css/complete-guide-grid">css-tricks</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="HTML"/><category term="RWD"/><category term="Layout"/><summary type="html"><![CDATA[CSS grid layout is a two-dimensional layout system for the web. It lets you organize content into rows and columns and offers many features to simplify the creation of complex layouts.]]></summary></entry><entry><title type="html">Dropdown in React</title><link href="https://benwzj.github.io/blog/2024/dropdown-css/" rel="alternate" type="text/html" title="Dropdown in React"/><published>2024-03-01T00:00:00+00:00</published><updated>2024-03-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/dropdown-css</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/dropdown-css/"><![CDATA[<h2 id="element-select">Element <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code></h2> <p>As with all form field types, <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> varies across browsers in its initial appearance.</p> <p>The differences include box size, font-size, line-height, and most standout is the difference in how the dropdown indicator is styled.</p> <p>From left to right, here is the initial appearance for <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> in Firefox, Chrome, and Safari:</p> <figure> <picture> <img src="/assets/img/select-element.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can create the same initial appearance across these browsers. For example using CSS, or create your own component for <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> function.</p> <h2 id="css-style-select">CSS Style <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code></h2> <p>You can style <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> with CSS to provide unique apprence. HTML file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"standard-select"</span><span class="nt">&gt;</span>Standard Select<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"select"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"standard-select"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"Option 1"</span><span class="nt">&gt;</span>Option 1<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"Option 2"</span><span class="nt">&gt;</span>Option 2<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"Option 3"</span><span class="nt">&gt;</span>Option 3<span class="nt">&lt;/option&gt;</span>
  <span class="nt">&lt;/select&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"focus"</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Sass file:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*,</span>
<span class="o">*</span><span class="nd">::before</span><span class="o">,</span>
<span class="o">*</span><span class="nd">::after</span> <span class="p">{</span>
  <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
<span class="p">}</span>

<span class="nd">:root</span> <span class="p">{</span>
  <span class="py">--select-border</span><span class="p">:</span> <span class="m">#777</span><span class="p">;</span>
  <span class="py">--select-focus</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="py">--select-arrow</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--select-border</span><span class="p">);</span>
<span class="p">}</span>

<span class="nt">select</span> <span class="p">{</span>
  <span class="err">//</span> <span class="err">A</span> <span class="err">reset</span> <span class="err">of</span> <span class="err">styles,</span> <span class="err">including</span> <span class="err">removing</span> <span class="err">the</span> <span class="err">default</span> <span class="err">dropdown</span> <span class="err">arrow</span>
  <span class="nl">appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nb">transparent</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">1em</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>

  <span class="err">//</span> <span class="err">Stack</span> <span class="err">above</span> <span class="err">custom</span> <span class="err">arrow</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>

  <span class="err">//</span> <span class="err">Remove</span> <span class="err">dropdown</span> <span class="err">arrow</span> <span class="err">in</span> <span class="err">IE10</span> <span class="err">&amp;</span> <span class="err">IE11</span>
  <span class="err">//</span> <span class="err">@link</span> <span class="py">https</span><span class="p">://</span><span class="n">www</span><span class="p">.</span><span class="n">filamentgroup</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">lab</span><span class="p">/</span><span class="n">select-css</span><span class="p">.</span><span class="n">html</span>
  <span class="err">&amp;</span><span class="p">::</span><span class="n">-ms-expand</span> <span class="err">{</span>
    <span class="n">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="o">//</span> <span class="nt">Remove</span> <span class="nt">focus</span> <span class="nt">outline</span><span class="o">,</span> <span class="nt">will</span> <span class="nt">add</span> <span class="nt">on</span> <span class="nt">alternate</span> <span class="nt">element</span>
  <span class="nt">outline</span><span class="o">:</span> <span class="nt">none</span><span class="o">;</span>
<span class="err">}</span>

<span class="nc">.select</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-areas</span><span class="p">:</span> <span class="s1">"select"</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>

  <span class="err">select,</span>
  <span class="err">&amp;::after</span> <span class="err">{</span>
    <span class="py">grid-area</span><span class="p">:</span> <span class="n">select</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nt">min-width</span><span class="o">:</span> <span class="err">15</span><span class="nt">ch</span><span class="o">;</span>
  <span class="nt">max-width</span><span class="o">:</span> <span class="err">30</span><span class="nt">ch</span><span class="o">;</span>

  <span class="nt">border</span><span class="o">:</span> <span class="err">1</span><span class="nt">px</span> <span class="nt">solid</span> <span class="nt">var</span><span class="o">(</span><span class="nt">--select-border</span><span class="o">);</span>
  <span class="nt">border-radius</span><span class="o">:</span> <span class="err">0</span><span class="o">.</span><span class="err">25</span><span class="nt">em</span><span class="o">;</span>
  <span class="nt">padding</span><span class="o">:</span> <span class="err">0</span><span class="o">.</span><span class="err">25</span><span class="nt">em</span> <span class="err">0</span><span class="o">.</span><span class="err">5</span><span class="nt">em</span><span class="o">;</span>

  <span class="nt">font-size</span><span class="o">:</span> <span class="err">1</span><span class="o">.</span><span class="err">25</span><span class="nt">rem</span><span class="o">;</span>
  <span class="nt">cursor</span><span class="o">:</span> <span class="nt">pointer</span><span class="o">;</span>
  <span class="nt">line-height</span><span class="o">:</span> <span class="err">1</span><span class="o">.</span><span class="err">1</span><span class="o">;</span>

  <span class="o">//</span> <span class="nt">Optional</span> <span class="nt">styles</span>
  <span class="o">//</span> <span class="nt">remove</span> <span class="nt">for</span> <span class="nt">transparency</span>
  <span class="nt">background-color</span><span class="o">:</span> <span class="nf">#fff</span><span class="o">;</span>
  <span class="nt">background-image</span><span class="o">:</span> <span class="nt">linear-gradient</span><span class="o">(</span><span class="nt">to</span> <span class="nt">top</span><span class="o">,</span> <span class="nf">#f9f9f9</span><span class="o">,</span> <span class="nf">#fff</span> <span class="err">33</span><span class="o">%);</span>

  <span class="o">//</span> <span class="nt">Custom</span> <span class="nt">arrow</span>
  <span class="o">&amp;</span><span class="nd">:not</span><span class="o">(</span><span class="nc">.select--multiple</span><span class="o">)</span><span class="nd">::after</span> <span class="p">{</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">""</span><span class="p">;</span>
    <span class="py">justify-self</span><span class="p">:</span> <span class="n">end</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">0.8em</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">0.5em</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--select-arrow</span><span class="p">);</span>
    <span class="nl">clip-path</span><span class="p">:</span> <span class="n">polygon</span><span class="p">(</span><span class="m">100%</span> <span class="m">0%</span><span class="p">,</span> <span class="m">0</span> <span class="m">0%</span><span class="p">,</span> <span class="m">50%</span> <span class="m">100%</span><span class="p">);</span>
  <span class="p">}</span>
<span class="err">}</span>

<span class="o">//</span> <span class="nt">Interim</span> <span class="nt">solution</span> <span class="nt">until</span> <span class="nd">:focus-within</span> <span class="nt">has</span> <span class="nt">better</span> <span class="nt">support</span>
<span class="nt">select</span><span class="nd">:focus</span> <span class="o">+</span> <span class="nc">.focus</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">2px</span> <span class="nb">solid</span> <span class="n">var</span><span class="p">(</span><span class="n">--select-focus</span><span class="p">);</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="nb">inherit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="react-dropdown-component">React Dropdown component</h2> <p>You can write your own component which mimic the function with select element. You can easy to style it with CSS.</p> <h2 id="reference">Reference</h2> <ul> <li><a href="https://moderncss.dev/custom-select-styles-with-pure-css/">Using pure CSS to style <code class="language-plaintext highlighter-rouge">&lt;select</code>&gt;</a></li> <li><a href="https://www.sliderrevolution.com/resources/css-select-styles/">Here have many Styles for select</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="CSS"/><category term="HTML"/><category term="React"/><summary type="html"><![CDATA[Element &lt;select&gt; As with all form field types, &lt;select&gt; varies across browsers in its initial appearance.]]></summary></entry><entry><title type="html">HTML Concepts</title><link href="https://benwzj.github.io/blog/2024/html-concept/" rel="alternate" type="text/html" title="HTML Concepts"/><published>2024-02-24T00:00:00+00:00</published><updated>2024-02-24T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/html-concept</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/html-concept/"><![CDATA[<h2 id="html-layout">HTML Layout</h2> <h3 id="html-layout-elements">HTML Layout Elements</h3> <p>Basic sections of a document:</p> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;header&gt; </code>- Defines a header for a document or a section</li> <li><code class="language-plaintext highlighter-rouge">&lt;nav&gt;</code> - Defines a set of navigation links</li> <li><code class="language-plaintext highlighter-rouge">&lt;section&gt; </code>- Defines a section in a document</li> <li><code class="language-plaintext highlighter-rouge">&lt;article&gt;</code> - Defines an independent, self-contained content</li> <li><code class="language-plaintext highlighter-rouge">&lt;aside&gt;</code> - Defines content aside from the content (like a sidebar)</li> <li><code class="language-plaintext highlighter-rouge">&lt;footer&gt;</code> - Defines a footer for a document or a section</li> <li><code class="language-plaintext highlighter-rouge">&lt;details&gt;</code> - Defines additional details that the user can open and close on demand</li> <li><code class="language-plaintext highlighter-rouge">&lt;summary&gt; </code>- Defines a heading for the <code class="language-plaintext highlighter-rouge">&lt;details&gt;</code> element</li> </ul> <p>They are <strong>semantic</strong> elements.</p> <h3 id="html-layout-techniques">HTML Layout Techniques</h3> <p>The webpage layout is controlled by CSS. There are four different techniques to create multicolumn layouts:</p> <ul> <li>CSS framework, like Bootstrap</li> <li>CSS float property</li> <li>CSS flexbox</li> <li>CSS grid</li> </ul> <h2 id="viewport">Viewport</h2> <p>The viewport is the user’s visible area of a web page and is often used when talking about mobile devices.</p> <p>A more specific meaning of the term viewport refers to a meta element in HTML 5, which plays a crucial role in mobile optimization. The element scales the displayed content so that the size of the screen can be used efficiently.</p> <p>In this case, the meta element viewport ensures that all content is equally legible and displayed correctly and completely on screens of different sizes. The viewport element adapts web pages to the screen’s length and width so that mobile browsers can display the entire content correctly.</p> <p>Thanks to the viewport, websites on mobile devices are not displayed in the same way as on a desktop screen. Users do not have to zoom in but can view the content of a page in a way that matches the small display. Viewports as meta elements (in combination with responsive web design) help web browsers to break up the pages and reassemble them on small screens in a way that enables users to receive a meaningful and readable image. Viewports thus have the task of preventing display problems by determining output formats that are tailored to the respective mobile device.</p> <h3 id="setting-the-viewport">Setting The Viewport</h3> <p>HTML5 introduced a method to let web designers take control over the viewport, through the <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> tag. You should include the following <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> viewport element in all your web pages:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>This gives the browser instructions on how to control the page’s dimensions and scaling.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">width=device-width</code> part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).</li> <li>The <code class="language-plaintext highlighter-rouge">initial-scale=1.0</code> part sets the initial zoom level when the page is first loaded by the browser.</li> </ul> <blockquote> <p>Tip: If you are browsing page without this <code class="language-plaintext highlighter-rouge">meta</code> in a phone, you will have bad experience.</p> </blockquote> <p>If you specify the viewport in a CSS file instead, you should put it right at the beginning of the file to ensure a correct display. Here’s an example of how that code could look like:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@viewport</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="n">device-width</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="css-viewport-units">CSS Viewport Units</h3> <ul> <li><code class="language-plaintext highlighter-rouge">vh</code> stands for viewport height. This unit is based on the height of the viewport. A value of 1vh is equal to 1% of the viewport height. A value of 100vh is equal to 100% of the viewport height.</li> <li><code class="language-plaintext highlighter-rouge">vw</code> stands for viewport width. This unit is based on the width of the viewport. A value of 1vw is equal to 1% of the viewport width.</li> <li><code class="language-plaintext highlighter-rouge">vmin</code> stands for viewport minimum. This unit is based on the smaller dimension of the viewport. If the viewport height is smaller than the width, the value of 1vmin will be equal to 1% of the viewport height. Similarly, if the viewport width is smaller than the height, the value of 1vmin will be equal to 1% of the viewport width.</li> <li><code class="language-plaintext highlighter-rouge">vmax</code> stands for viewport maximum. This unit is based on the larger dimension of the viewport. If the viewport height is larger than the width, the value of 1vmax will be equal to 1% of viewport height. Similarly, if the viewport width is larger than the height, the value of 1vmax will be equal to 1% of the viewport width.</li> </ul> <h2 id="metadata">Metadata</h2> <p>Metadata is data that describes data. The job of <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element is to contain metadata about the document. For exmaple <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;link&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;mate&gt;</code>, etc. The <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> element is an “official” way of adding metadata to a document.</p> <h3 id="specifying-your-documents-character-encoding">Specifying your document’s character encoding</h3> <p><code class="language-plaintext highlighter-rouge">&lt;meta charset="utf-8" /&gt;</code> utf-8 is a universal character set that includes pretty much any character from any human language. This means that your web page will be able to handle displaying any language;</p> <blockquote> <p>it’s therefore a good idea to set <code class="language-plaintext highlighter-rouge">&lt;meta charset="utf-8" /&gt;</code> on every web page you create!</p> </blockquote> <h3 id="adding-an-author-and-description">Adding an author and description</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"author"</span> <span class="na">content=</span><span class="s">"Chris Mills"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span>
  <span class="na">name=</span><span class="s">"description"</span>
  <span class="na">content=</span><span class="s">"This is description"</span> <span class="nt">/&gt;</span>
</code></pre></div></div> <p>Good for SEO.</p> <h3 id="adding-custom-icons-to-your-site">Adding custom icons to your site</h3> <p><code class="language-plaintext highlighter-rouge">&lt;link rel="icon" href="favicon.ico" type="image/x-icon" /&gt;</code></p> <h3 id="setting-the-primary-language-of-the-document">Setting the primary language of the document</h3> <p><code class="language-plaintext highlighter-rouge">&lt;html lang="en-US"&gt;</code> You can also set subsections of your document to be recognized as different languages. <code class="language-plaintext highlighter-rouge">&lt;p&gt;Japanese example: &lt;span lang="ja"&gt;ご飯が熱い。&lt;/span&gt;.&lt;/p&gt;</code></p> <h3 id="applying-css-and-javascript-to-html">Applying CSS and JavaScript to HTML</h3> <h2 id="text-fundamentals">text fundamentals</h2> <h3 id="structural-hierarchy">structural hierarchy</h3> <p>HTML can be used to structure a page of text by adding headings and paragraphs, emphasizing words, creating lists.</p> <p>HTML define semantics to some elements:</p> <ul> <li>There are six heading elements: h1, h2, h3, h4, h5, and h6.</li> <li>Each paragraph has to be wrapped in a <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> element</li> </ul> <p>Using these to Implement structural hierarchy.</p> <p>This is a <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> element. It has no semantics. You use it to wrap content when you want to apply CSS to it (or do something to it with JavaScript) without giving it any extra meaning.</p> <h3 id="lists">Lists</h3> <p>Unordered lists Ordered lists Description lists</p> <h3 id="emphasis-and-importance">Emphasis and importance</h3> <p>Here’s the best rule you can remember: It’s only appropriate to use <code class="language-plaintext highlighter-rouge">&lt;b&gt;, &lt;i&gt;, or &lt;u&gt;</code> to convey a meaning traditionally conveyed with bold, italics, or underline when there isn’t a more suitable element; and there usually is. Consider whether <code class="language-plaintext highlighter-rouge">&lt;strong&gt;, &lt;em&gt;, &lt;mark&gt;, or &lt;span&gt;</code> might be more appropriate.</p>]]></content><author><name></name></author><category term="HTML"/><category term="HTML"/><category term="CSS"/><summary type="html"><![CDATA[HTML Layout]]></summary></entry><entry><title type="html">Spread and Rest Syntax</title><link href="https://benwzj.github.io/blog/2024/spread-js/" rel="alternate" type="text/html" title="Spread and Rest Syntax"/><published>2024-02-24T00:00:00+00:00</published><updated>2024-02-24T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/spread-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/spread-js/"><![CDATA[<h2 id="spread-syntax">Spread Syntax</h2> <p>Spread syntax can be used when all elements from an object or array need to be included in a new array or object, or should be applied one-by-one in a function call’s arguments list. There are 3 distinct places that accept the spread syntax:</p> <ol> <li>Function arguments list (<code class="language-plaintext highlighter-rouge">myFunction(a, ...iterableObj, b)</code>)</li> <li>Array literals (<code class="language-plaintext highlighter-rouge">[1, ...iterableObj, '4', 'five', 6]</code>)</li> <li>Object literals (<code class="language-plaintext highlighter-rouge">{ ...obj, key: 'value' }</code>)</li> </ol> <h3 id="overview">Overview</h3> <ul> <li> <p>Spread syntax allows an <strong>iterable</strong>, such as an array expression or string to be expanded in places where arguments(for function calls) or elements (for array literals) are expected.</p> </li> <li> <p>Spread syntax allows an <strong>object</strong> expression to be expanded in places where key-value pairs (for object literals) are expected. For object, Objects themselves are not iterable, but they become iterable when used in an Array, or with iterating functions such as <code class="language-plaintext highlighter-rouge">map()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code>, and <code class="language-plaintext highlighter-rouge">assign()</code>.</p> </li> </ul> <h3 id="spread-object">Spread Object</h3> <h4 id="merging-object">Merging Object</h4> <p>When merging 2 objects together with the spread operator, it is assumed another iterating function is used when the merging occurs. So following work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span><span class="na">abc</span><span class="p">:</span><span class="mi">123</span><span class="p">,</span> <span class="na">def</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="na">ghi</span><span class="p">:</span> <span class="mi">32321</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="na">abc</span><span class="p">:</span><span class="dl">'</span><span class="s1">new one</span><span class="dl">'</span><span class="p">,</span> <span class="na">def</span><span class="p">:</span> <span class="dl">'</span><span class="s1">re new one</span><span class="dl">'</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">obj1</span><span class="p">,</span> <span class="p">...</span><span class="nx">obj2</span><span class="p">}</span> <span class="c1">//=&gt; Object { abc: "new one", def: "re new one", ghi: 32321 }</span>
</code></pre></div></div> <p>But below code do not work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">key1</span><span class="dl">'</span><span class="p">:</span> <span class="mi">323243</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">obj</span><span class="p">];</span> <span class="c1">// TypeError: obj is not iterable </span>
</code></pre></div></div> <h4 id="obj-vs-objectassign"><code class="language-plaintext highlighter-rouge">...obj</code> vs <code class="language-plaintext highlighter-rouge">Object.assign()</code></h4> <ul> <li><code class="language-plaintext highlighter-rouge">Object.assign()</code> can be used to mutate an object, whereas spread syntax can’t.</li> <li><code class="language-plaintext highlighter-rouge">Object.assign()</code> triggers <strong>setters</strong> on the target object, whereas spread syntax does not.</li> </ul> <h4 id="conditionally-adding-properties-to-an-object">Conditionally adding properties to an object</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isSummer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apple</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">banana</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="p">...(</span><span class="nx">isSummer</span> <span class="p">?</span> <span class="p">{</span> <span class="na">watermelon</span><span class="p">:</span> <span class="mi">30</span> <span class="p">}</span> <span class="p">:</span> <span class="p">{}),</span>
<span class="p">};</span>
</code></pre></div></div> <h4 id="spread-array-instead-of-object">spread Array instead of object.</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">,</span> <span class="na">x</span><span class="p">:</span> <span class="mi">42</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">baz</span><span class="dl">"</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">13</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">objects</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="p">...</span><span class="nx">objects</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">mergedObj</span> <span class="o">=</span> <span class="nf">merge</span><span class="p">(</span><span class="nx">obj1</span><span class="p">,</span> <span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }</span>
</code></pre></div></div> <p>Check Rest parameter syntax!</p> <h3 id="spread-array">Spread Array</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nf">unshift </span><span class="p">(</span> <span class="p">...</span><span class="nx">arr</span> <span class="p">);</span><span class="c1">// equal to : arr1.unshift ( 1, 2, 3 ); not: arr1.unshift ( 1 ); arr1.unshift ( 2); arr1.unshift ( 3 );</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log </span><span class="p">(</span> <span class="nx">arr1</span> <span class="p">);</span> <span class="c1">// Array [1, 2, 3, 4, 5, 6]  </span>

<span class="c1">//Array.prototype.unshift.apply( arr1, arr); // Array [1, 2, 3, 4, 5, 6]</span>

<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nf">push </span><span class="p">(</span> <span class="p">...</span><span class="nx">arr</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log </span><span class="p">(</span> <span class="nx">arr2</span> <span class="p">);</span> <span class="c1">// Array [4, 5, 6,1,2,3], </span>
</code></pre></div></div> <p>Below code won’t work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">...</span><span class="nx">b</span><span class="p">;</span> <span class="c1">// Error: Unexpected token '...'</span>
</code></pre></div></div> <p>There are <strong>ONLY</strong> 3 distinct places that accept the spread syntax.</p> <h4 id="conditionally-adding-values-to-an-array-or-an-object">Conditionally adding values to an array or an object</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isSummer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="p">...(</span><span class="nx">isSummer</span> <span class="p">?</span> <span class="p">[</span><span class="dl">"</span><span class="s2">watermelon</span><span class="dl">"</span><span class="p">]</span> <span class="p">:</span> <span class="p">[])];</span>
<span class="c1">// ['apple', 'banana']</span>
</code></pre></div></div> <p>Much better than:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="nx">isSummer</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">watermelon</span><span class="dl">"</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">];</span>
<span class="c1">// ['apple', 'banana', undefined]</span>
</code></pre></div></div> <h2 id="rest-syntax">Rest Syntax</h2> <p>Rest syntax looks exactly like spread syntax, but is used for destructuring arrays and objects. rest syntax is the <strong>opposite</strong> of spread syntax.</p> <h3 id="rest-parameter-syntax">Rest parameter syntax</h3> <p>The rest parameter syntax allows a function to accept an indefinite number of arguments as an <strong>array</strong>, providing a way to represent variadic functions in JavaScript.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">myFun</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">manyMoreArgs</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">manyMoreArgs</span><span class="dl">"</span><span class="p">,</span> <span class="nx">manyMoreArgs</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">myFun</span><span class="p">(</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">four</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">five</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">six</span><span class="dl">"</span><span class="p">);</span><span class="c1">// manyMoreArgs, ["three", "four", "five", "six"]</span>
</code></pre></div></div> <h4 id="rest-parameters-vs-the-arguments-object">rest parameters vs the arguments object</h4> <p>One word: The arguments object is array-like object, it is not a real array, while rest parameters are Array instances.</p> <p>The Differences detail:</p> <ul> <li>The arguments object is array-like object, it is not a real array, while rest parameters are Array instances, meaning methods like <code class="language-plaintext highlighter-rouge">sort()</code>, <code class="language-plaintext highlighter-rouge">map()</code> or<code class="language-plaintext highlighter-rouge"> pop()</code> can be applied on it directly.</li> <li>The arguments object has the additional (deprecated) callee property.</li> <li>In a non-strict function with simple parameters, the arguments object syncs its indices with the values of parameters. The rest parameter array never updates its value when the named parameters are re-assigned.</li> <li>The rest parameter bundles all the extra parameters into a single array, but does not contain any named argument defined before the <code class="language-plaintext highlighter-rouge">...restParam</code>. The arguments object contains all of the parameters — including the parameters in the <code class="language-plaintext highlighter-rouge">...restParam</code> array — bundled into one array-like object.</li> </ul> <h3 id="destructuring-assignment-syntax">destructuring assignment syntax</h3> <p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from <strong>arrays</strong>, or properties from <strong>objects</strong>, into distinct variables.</p> <blockquote> <p>Rest parameters is one of the implement of Destructuring. And Destructuring assignment syntax can used in many situation.</p> </blockquote> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">rest</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
<span class="c1">// Expected output: 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
<span class="c1">// Expected output: 20</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">);</span>
<span class="c1">// Expected output: Array [30, 40, 50]</span>
</code></pre></div></div> <p>Similarly, you can destructure objects on the left-hand side of the assignment.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
<span class="c1">// is equivalent to:</span>
<span class="c1">// const a = obj.a;</span>
<span class="c1">// const b = obj.b;</span>
</code></pre></div></div> <h4 id="binding-and-assignment">Binding and assignment</h4> <p>For both object and array destructuring, there are two kinds of destructuring patterns: binding pattern and assignment pattern, with slightly different syntaxes.</p> <ul> <li>In <strong>binding</strong> patterns, the pattern starts with a declaration keyword (var, let, or const). Then, each individual property must either be bound to a variable or further destructured. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">a</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// a is constant</span>
<span class="kd">let</span> <span class="p">{</span>
<span class="na">b</span><span class="p">:</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="nx">d</span> <span class="p">},</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// d is re-assignable</span>
</code></pre></div> </div> </li> <li>In <strong>assignment</strong> patterns, the pattern does not start with a keyword. Each destructured property is assigned to a target of assignment — which may either be declared beforehand with var or let, or is a property of another object — in general, anything that can appear on the left-hand side of an assignment expression. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>
<span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="na">b</span><span class="p">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">);</span>
<span class="c1">// The properties `a` and `b` are assigned to properties of `numbers`</span>
<span class="c1">// The parentheses ( ... ) around the assignment statement are required when using object literal destructuring assignment without a declaration.</span>
</code></pre></div> </div> </li> </ul> <h4 id="array-destructuring">Array destructuring</h4> <ul> <li>Swapping variables <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">];</span>
</code></pre></div> </div> </li> <li>Unpacking values from a regular expression match. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">parseProtocol</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">parsedURL</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">:</span><span class="se">\/\/([^/]</span><span class="sr">+</span><span class="se">)\/(</span><span class="sr">.*</span><span class="se">)</span><span class="sr">$/</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">parsedURL</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">parsedURL</span><span class="p">);</span>
<span class="c1">// ["https://developer.mozilla.org/en-US/docs/Web/JavaScript",</span>
<span class="c1">// "https", "developer.mozilla.org", "en-US/docs/Web/JavaScript"]</span>
<span class="kd">const</span> <span class="p">[,</span> <span class="nx">protocol</span><span class="p">,</span> <span class="nx">fullhost</span><span class="p">,</span> <span class="nx">fullpath</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parsedURL</span><span class="p">;</span>
<span class="k">return</span> <span class="nx">protocol</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span>
<span class="nf">parseProtocol</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://developer.mozilla.org/en-US/docs/Web/JavaScript</span><span class="dl">"</span><span class="p">),</span>
<span class="p">);</span>
<span class="c1">// "https"</span>
</code></pre></div> </div> </li> <li>Using array destructuring on any iterable. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">([</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [1, 2] [3, 4]</span>
</code></pre></div> </div> </li> <li>The rest binding is eagerly evaluated and creates a <strong>new array</strong>! <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
<span class="o">*</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">v</span> <span class="k">of</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="k">yield</span> <span class="nx">v</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">},</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// Logs 0 1 2 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">);</span> <span class="c1">// [2, 3] (an array)</span>
</code></pre></div> </div> </li> </ul> <h4 id="object-destructuring">Object destructuring</h4> <ul> <li>Unpacking properties from objects passed as a function parameter. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">id</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
<span class="na">displayName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jdoe</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
<span class="c1">// The parameter value { id } indicates that the id property of the object passed to the function should be unpacked into a variable with the same name, which can then be used within the function.</span>
<span class="kd">function</span> <span class="nf">userId</span><span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">id</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">userId</span><span class="p">(</span><span class="nx">user</span><span class="p">));</span> <span class="c1">// 42</span>
</code></pre></div> </div> </li> <li>Nested object and array destructuring <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Scratchpad</span><span class="dl">"</span><span class="p">,</span>
<span class="na">translations</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">locale</span><span class="p">:</span> <span class="dl">"</span><span class="s2">de</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">localizationTags</span><span class="p">:</span> <span class="p">[],</span>
    <span class="na">lastEdit</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2014-04-14T08:43:37</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/de/docs/Tools/Scratchpad</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">JavaScript-Umgebung</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">],</span>
<span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/en-US/docs/Tools/Scratchpad</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span>
<span class="na">title</span><span class="p">:</span> <span class="nx">englishTitle</span><span class="p">,</span> <span class="c1">// rename</span>
<span class="na">translations</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="nx">localeTitle</span><span class="p">,</span> <span class="c1">// rename</span>
  <span class="p">},</span>
<span class="p">],</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">metadata</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">englishTitle</span><span class="p">);</span> <span class="c1">// "Scratchpad"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">localeTitle</span><span class="p">);</span> <span class="c1">// "JavaScript-Umgebung"</span>
</code></pre></div> </div> </li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">mdn doc</a></p>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><summary type="html"><![CDATA[Spread Syntax]]></summary></entry><entry><title type="html">CSS Animations</title><link href="https://benwzj.github.io/blog/2024/css-animation/" rel="alternate" type="text/html" title="CSS Animations"/><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-animation</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-animation/"><![CDATA[<p>CSS allows animation of HTML elements without using JavaScript!</p> <p>You can use CSS to create animation by <strong>CSS Animation</strong> and <strong>CSS Transition</strong>. But CSS Animation can create more more complex, multi-step animation.</p> <h2 id="css-transitions">CSS Transitions</h2> <p>CSS transitions allows you to change property values smoothly, over a given duration.</p> <p>To create a transition effect, you must specify two things:</p> <ul> <li>the CSS property you want to add an effect to</li> <li>the duration of the effect</li> </ul> <blockquote> <p>Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.</p> </blockquote> <p>Here are some features:</p> <ul> <li>Basic idea is that, told Browser the origial properties, final properties value and duraton time, Browser can transit them smoothly. Or, There are even some options to tell browser how to transit.</li> <li>Not all properties support transitions.</li> <li>CSS transitions is one way to create animation!</li> <li>CSS transitions and animations are <strong>expensive operations</strong> for most CSS properties—except <code class="language-plaintext highlighter-rouge">opacity</code> and <code class="language-plaintext highlighter-rouge">transform</code>.</li> </ul> <h3 id="basic-example">Basic example:</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span> 
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">2s</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;p&gt;</span>Hover over the div element below, to see the transition effect:<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</code></pre></div></div> <h3 id="transition-properties">Transition Properties</h3> <ul> <li><code class="language-plaintext highlighter-rouge">transition</code> A <strong>shorthand</strong> property for setting the four transition properties into a single property</li> <li><code class="language-plaintext highlighter-rouge">transition-delay</code> Specifies a delay (in seconds) for the transition effect</li> <li><code class="language-plaintext highlighter-rouge">transition-duration</code> Specifies how many seconds or milliseconds a transition effect takes to complete</li> <li><code class="language-plaintext highlighter-rouge">transition-property</code> Specifies the name of the CSS property the transition effect is for</li> <li><code class="language-plaintext highlighter-rouge">transition-timing-function</code> Specifies the speed curve of the transition effect</li> </ul> <h3 id="using-transitions-other-than-hover">Using Transitions other than <code class="language-plaintext highlighter-rouge">:hover</code></h3> <p>the most common use for CSS3 Transitions has been in conjunction with the well-known CSS <code class="language-plaintext highlighter-rouge">:hover</code> pseudo-class.</p> <ol> <li>Transitions still can be used with some other pseudo-class. <ul> <li><code class="language-plaintext highlighter-rouge">:active</code>. This pseudo-class matches any element that’s in the process of being activated. The primary way that an element is “activated” is by means of a mouse click, or mouse down.</li> <li><code class="language-plaintext highlighter-rouge">:focus</code></li> <li><code class="language-plaintext highlighter-rouge">:checked</code></li> <li><code class="language-plaintext highlighter-rouge">:disabled</code></li> </ul> </li> <li>Transitions Using Media Queries. <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">440px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">440px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#222</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">2s</span> <span class="n">ease</span><span class="p">,</span> <span class="n">height</span> <span class="m">2s</span> <span class="n">ease</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span> <span class="p">:</span> <span class="m">960px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.box</span> <span class="p">{</span>
 <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
 <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Changing class for element using JS. The transtion works as well. In <code class="language-plaintext highlighter-rouge">Dropdown</code> component, when you click it, the chevron logo will turning up when the Options OPEN; when click again, the logo turning to normal when Options CLOSE. These are done by changing CSS class for the logo using JS. <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.chevron</span><span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">transform</span> <span class="m">0.6s</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.chevron-up</span><span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">transform</span> <span class="m">0.6s</span><span class="p">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180deg</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> </div> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.dropdown-el</span><span class="dl">'</span><span class="p">).</span><span class="nf">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
  <span class="nx">e</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">();</span>
  <span class="nf">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">toggleClass</span><span class="p">(</span><span class="dl">'</span><span class="s1">expanded</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nf">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nf">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.dropdown-el</span><span class="dl">'</span><span class="p">).</span><span class="nf">removeClass</span><span class="p">(</span><span class="dl">'</span><span class="s1">expanded</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> </li> </ol> <h2 id="css-animations">CSS Animations</h2> <p>An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want.</p> <blockquote class="block-warning"> <p>To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times.</p> </blockquote> <h3 id="basic-example-1">Basic example</h3> <p>Basic example show you how CSS Animations work.</p> <p>The animation will last for 4 seconds, and it will gradually change the background-color of the <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> element from “red” to “yellow”:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* The animation code */</span>
<span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="nt">from</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="nt">to</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
<span class="c">/* The element to apply the animation to */</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">animation-name</span><span class="p">:</span> <span class="n">example</span><span class="p">;</span>
  <span class="nl">animation-duration</span><span class="p">:</span> <span class="m">4s</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>It uses @keyframes rule, and some animation properties.</p> <h2 id="use-css-animations">Use CSS Animations</h2> <h3 id="animation-properties">animation properties</h3> <ul> <li><code class="language-plaintext highlighter-rouge">animation-name</code>: Specifies the name of the @keyframes animation</li> <li><code class="language-plaintext highlighter-rouge">animation-duration</code>: Specifies how long time an animation should take to complete one cycle</li> <li><code class="language-plaintext highlighter-rouge">animation-delay</code>: Specifies a delay for the start of an animation</li> <li><code class="language-plaintext highlighter-rouge">animation-iteration-count</code>: Specifies the number of times an animation should be played</li> <li><code class="language-plaintext highlighter-rouge">animation-direction</code>: Specifies whether an animation should be played forwards, backwards or in alternate cycles</li> <li><code class="language-plaintext highlighter-rouge">animation-timing-function</code>: Specifies the <strong>speed</strong> curve of the animation.</li> <li><code class="language-plaintext highlighter-rouge">animation-fill-mode</code>: Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)</li> <li><code class="language-plaintext highlighter-rouge">animation</code>: A shorthand property for setting all the animation properties. Like: <code class="language-plaintext highlighter-rouge">animation: example 5s linear 2s infinite alternate;</code></li> </ul> <h3 id="the-keyframes-rule">The @keyframes Rule</h3> <p>When you specify CSS styles inside the <code class="language-plaintext highlighter-rouge">@keyframes</code> rule, the animation will gradually change from the current style to the new style at certain times.</p> <p>Some features:</p> <ul> <li><code class="language-plaintext highlighter-rouge">@keyframes</code> rule is quite simple to understand. It is similar to CSS Transition.</li> <li>To get an animation to work, you must bind the animation to an element.</li> <li>JavaScript can access the <code class="language-plaintext highlighter-rouge">@keyframes</code> at-rule with the CSS object model interface <code class="language-plaintext highlighter-rouge">CSSKeyframesRule</code>.</li> <li>Properties that can’t be animated in keyframe rules are ignored, but supported properties will still be animated.</li> </ul> <p>Basic one like this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="nt">from</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="nt">to</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <p>same as:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="err">0</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="err">100</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Also you can do this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="err">0</span><span class="o">%</span>   <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="err">25</span><span class="o">%</span>  <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
  <span class="err">50</span><span class="o">%</span>  <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;}</span>
  <span class="err">100</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">green</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="css-animations-vs-transition">CSS Animations vs Transition</h2> <p>Both CSS transitions and animations can be used to write animation. Transitions are used for simple, one-step property changes, while animations are used for more complex, multi-step animations.</p> <p>They each have their own user scenarios:</p> <ul> <li>CSS transitions provide an easy way to make animations occur between the current style and an end CSS state, e.g., a resting button state and a <strong>hover</strong> state. Even if an element is in the middle of a transition, the new transition starts from the current style immediately instead of jumping to the end CSS state.</li> <li>CSS animations, on the other hand, allow developers to make animations between a set of starting property values and a final set rather than between two states. CSS animations consist of two components: a style describing the CSS animation, and a set of key frames that indicate the start and end states of the animation’s style, as well as possible intermediate points.</li> </ul> <p>A little conclusion:</p> <ul> <li>In terms of performance, there is no difference between implementing an animation with CSS transitions or animations. Both of them are classified under the same CSS-based umbrella.</li> <li>A transition is just one that is performed between two distinct states - i.e. a start state and an end state. Like a drawer menu, the start state could be open and the end state could be closed, or vice versa.</li> <li>If you want to perform something that does not specifically involve a start state and an end state, or you need more fine-grained control over the keyframes in a transition, then you’ve got to use an animation.</li> <li>Animations also have the ability to loop, play in reverse, and be controlled through JavaScript.</li> <li>transition usually Require a trigger to run (like mouse hover).</li> <li>Transition run only one. CSS Animations can run infinitely.</li> </ul> <h2 id="css-vs-js-in-animation">CSS vs JS in Animation</h2> <h3 id="js-animation">JS Animation</h3> <p>The <code class="language-plaintext highlighter-rouge">requestAnimationFrame()</code> API provides an efficient way to make animations in JavaScript. The callback function of the method is called by the browser before the next repaint on each frame. Compared to <code class="language-plaintext highlighter-rouge">setTimeout()</code>/<code class="language-plaintext highlighter-rouge">setInterval()</code>, which need a specific delay parameter, <code class="language-plaintext highlighter-rouge">requestAnimationFrame() </code>is much more efficient. Developers can create an animation by changing an element’s style each time the loop is called (or updating the Canvas draw, or whatever.)</p> <blockquote> <p>Note: Like CSS transitions and animations, requestAnimationFrame() pauses when the current tab is pushed into the background.</p> </blockquote> <h3 id="performance-comparison">Performance comparison</h3> <p>in most cases, the performance of CSS-based animations is almost the same as JavaScripted animations.</p> <blockquote> <p>You can use the Browser FPS tools to test the animation performance.</p> </blockquote> <h3 id="in-summary">In summary</h3> <p>we should always try to create our animations using CSS transitions/animations where possible. If your animations are really complex, you may have to rely on JavaScript-based animations instead.</p> <h2 id="how-browser-render-animation">How Browser render Animation</h2> <p>Modern browsers can animate two CSS properties cheaply: <code class="language-plaintext highlighter-rouge">transform</code> and <code class="language-plaintext highlighter-rouge">opacity</code>. If you animate anything else, the chances are you’re not going to hit a silky smooth 60 frames per second (FPS). Why? Simply say, Because this two properties is composite properties, which browser easier to handle when animate things.</p> <p>Here are some concepts:</p> <ul> <li>frame rate,</li> <li>rendering pipeline,</li> <li>layout,</li> <li>paint,</li> <li>composite,</li> <li>layer.</li> </ul> <h3 id="animation-performance-and-frame-rate">Animation performance and frame rate</h3> <p>It is widely accepted that a frame rate of <strong>60 FPS</strong> is the target when animating anything on the web. This frame rate will ensure that your animations look smooth. On the web a frame is the time that it takes to do all of the work required to update and repaint the screen. If each frame does not complete within 16.7ms (1000ms / 60 ≈ 16.7), then users will perceive the delay.</p> <h3 id="the-rendering-pipeline">The rendering pipeline</h3> <p>To display something on a webpage the browser has to go through the following sequential steps:</p> <ol> <li>Style: Calculate the styles that apply to the elements.</li> <li>Layout: Generate the geometry and position for each element.</li> <li>Paint: Fill out the pixels for each element into layers.</li> <li>Composite: Draw the layers to the screen.</li> </ol> <p>These four steps are known as the browser’s rendering pipeline.</p> <p>When you animate something on a page that has already loaded these steps have to happen again. This process begins from the step that has to be changed in order to allow the animation to take place.</p> <p>As mentioned before, these steps are sequential. For example, if you animate something that changes layout, the paint and composite steps also have to run again. Animating something that changes layout is therefore more expensive than animating something that only changes compositing.</p> <h4 id="animating-layout-properties">Animating layout properties</h4> <p>Layout changes involve calculating the geometry (position and size) of all the elements affected by the change. If you change one element, the geometry of other elements may need to be recalculated. For example, if you change the width of the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element any of its children may be affected. Due to the way elements overflow and affect one another, changes further down the tree can sometimes result in layout calculations all the way back up to the top.</p> <p>The larger the tree of visible elements, the longer it takes to perform layout calculations.</p> <h4 id="animating-paint-properties">Animating paint properties</h4> <p>Paint is the process of determining in what order elements should be painted to the screen. It is often the longest-running of all tasks in the pipeline.</p> <p>The majority of painting in modern browsers is done in software rasterizers. Depending on how the elements in your app are grouped into layers, other elements besides the one that changed may also need to be painted.</p> <h4 id="animating-composite-properties">Animating composite properties</h4> <p>Compositing is the process of separating the page into layers, converting the information about how the page should look into pixels (rasterization), and putting the layers together to create a page (compositing).</p> <p>This is why the <code class="language-plaintext highlighter-rouge">opacity</code> property is included in the list of things which are cheap to animate. As long as this property is in its own layer, changes to it can be handled by the GPU during the compositing step. Chromium-based browsers and WebKit create a new layer for any element which has a CSS transition or animation on <code class="language-plaintext highlighter-rouge">opacity</code>.</p> <h3 id="what-is-a-layer">What is a layer?</h3> <p>By placing the things that will be animated or transitioned onto a new layer, the browser only needs to repaint those items and not everything else. You may be familiar with Photoshop’s concept of a layer which contains a bunch of elements that can be moved together. Browser rendering layers are similar to that idea.</p> <p>While the browser does a good job of making decisions about what elements should be on a new layer, if it misses one there are ways to force layer creation. You can find out about that in How to create high-performance animations. However, creating new layers should be done with care because each layer uses memory. On devices with limited memory creating new layers may cause more of a performance problem than the one you are trying to solve. In addition, each layer’s textures need to be uploaded to the GPU. Therefore you may well hit constraints of bandwidth between the CPU and GPU.</p> <h3 id="css-vs-javascript-performance">CSS vs JavaScript performance</h3> <p>CSS-based animations, and Web Animations (in the browsers that support the API), are typically handled on a thread known as the compositor thread. This is different from the browser’s main thread, where styling, layout, painting, and JavaScript are executed. This means that if the browser is running some expensive tasks on the main thread, these animations can keep going without being interrupted.</p> <p>As explained in this article, other changes to <code class="language-plaintext highlighter-rouge">transforms</code> and <code class="language-plaintext highlighter-rouge">opacity</code> can, in many cases, also be handled by the compositor thread.</p> <p>If any animation triggers paint, layout, or both, the main thread will be required to do work. This is true for both CSS and JavaScript animations, and the overhead of layout or paint will likely dwarf any work associated with CSS or JavaScript execution, rendering the question moot.</p> <h2 id="high-performance-animations">High-performance Animations</h2> <p>How Create High-performance Animations? There are some point need to know:</p> <ul> <li>Where possible restrict animations to <strong><code class="language-plaintext highlighter-rouge">opacity</code></strong> and <strong><code class="language-plaintext highlighter-rouge">transform</code></strong> in order to keep animations on the compositing stage of the rendering path.</li> <li>If you must use a property that triggers layout or paint, it is unlikely that you will be able to make the animation smooth and high-performance.</li> <li>You can Use DevTools to check which stage of the path is being affected by your animations. <ul> <li>Check if an animation do layout work. Using Performance panel to check, for example in Chrome, if there are <code class="language-plaintext highlighter-rouge">Rendering</code> in the Summary tab, it may mean that your animation is causing the browser to do layout work.</li> <li>Check if an animation triggers paint. In Chrome, Using Rendering tab -&gt; Paint Flashing. The <a href="https://developer.chrome.com/docs/devtools/performance/reference#paint-profiler">paint profiler</a> to see if any paint operations are particularly expensive. If you find anything, see if a different CSS property will give the same look and feel with better performance.</li> </ul> </li> <li>By placing elements on a new layer they can be repainted without also requiring the rest of the layout to be repainted. you can manually force layer creation with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change"><code class="language-plaintext highlighter-rouge">will-change</code></a> property. But Use the <code class="language-plaintext highlighter-rouge">will-change</code> property sparingly, and only if you encounter a performance issue.</li> </ul> <h3 id="move-an-element">Move an element</h3> <p>👎 Don’t do this, because it trigger layout and paint.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="n">move</span> <span class="m">3s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@keyframes</span> <span class="n">move</span> <span class="p">{</span>
  <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
     <span class="nl">top</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vh</span> <span class="n">-</span> <span class="m">160px</span><span class="p">);</span>
     <span class="nl">left</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vw</span> <span class="n">-</span> <span class="m">200px</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>👍 Do this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="n">move</span> <span class="m">3s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@keyframes</span> <span class="n">move</span> <span class="p">{</span>
  <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
     <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="n">calc</span><span class="p">(</span><span class="m">90vw</span> <span class="n">-</span> <span class="m">200px</span><span class="p">),</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vh</span> <span class="n">-</span> <span class="m">160px</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Using <code class="language-plaintext highlighter-rouge">opacity</code> and <code class="language-plaintext highlighter-rouge">transform</code> you can also rotate an element, Resize an element, Change an element’s visibility etc.</p> <h2 id="reference">Reference</h2> <ul> <li><a href="https://web.dev/articles/animations-overview">web.dev animations overview</a></li> <li><a href="https://web.dev/articles/animations-guide">web.dev animations guide</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance">MDN animation_performance</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="Animation"/><category term="JavaScript"/><summary type="html"><![CDATA[CSS allows animation of HTML elements without using JavaScript!]]></summary></entry><entry><title type="html">CSS Transforms</title><link href="https://benwzj.github.io/blog/2024/css-transforms/" rel="alternate" type="text/html" title="CSS Transforms"/><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-transforms</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-transforms/"><![CDATA[<p>There are 2D and 3D transform.</p> <h2 id="2d-transforms">2D Transforms</h2> <p>CSS 2D transforms allow you to move, rotate, scale, and skew elements.</p> <p>Example:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span><span class="nf">#myDiv</span> <span class="p">{</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">skewY</span><span class="p">(</span><span class="m">20deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div&gt;</span>
This a normal div element.
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"myDiv"</span><span class="nt">&gt;</span>
This div element is skewed 20 degrees along the Y-axis.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h3 id="2d-transform-properties">2D Transform Properties</h3> <ul> <li><code class="language-plaintext highlighter-rouge">transform</code> Applies a 2D or 3D transformation to an element</li> <li><code class="language-plaintext highlighter-rouge">transform-origin</code> Allows you to change the position on transformed elements</li> </ul> <h3 id="2d-transform-methods">2D Transform Methods</h3> <ul> <li><code class="language-plaintext highlighter-rouge">matrix(n,n,n,n,n,n)</code> Defines a 2D transformation, using a matrix of six values</li> <li><code class="language-plaintext highlighter-rouge">translate(x,y)</code> Defines a 2D translation, moving the element along the X- and the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">translateX(n)</code> Defines a 2D translation, moving the element along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">translateY(n)</code> Defines a 2D translation, moving the element along the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">scale(x,y)</code> Defines a 2D scale transformation, changing the elements width and height</li> <li><code class="language-plaintext highlighter-rouge">scaleX(n)</code> Defines a 2D scale transformation, changing the element’s width</li> <li><code class="language-plaintext highlighter-rouge">scaleY(n)</code> Defines a 2D scale transformation, changing the element’s height</li> <li><code class="language-plaintext highlighter-rouge">rotate(angle)</code> Defines a 2D rotation, the angle is specified in the parameter</li> <li><code class="language-plaintext highlighter-rouge">skew(x-angle,y-angle)</code> Defines a 2D skew transformation along the X- and the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">skewX(angle)</code> Defines a 2D skew transformation along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">skewY(angle)</code> Defines a 2D skew transformation along the Y-axis</li> </ul> <h2 id="3d-transforms">3D Transforms</h2> <h3 id="basic-example">Basic Example</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#myDiv</span> <span class="p">{</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">rotateZ</span><span class="p">(</span><span class="m">90deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div&gt;</span>
This a normal div element.
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"myDiv"</span><span class="nt">&gt;</span>
This div element is rotated 90 degrees around the z axle.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h3 id="3d-transform-properties">3D transform properties:</h3> <ul> <li><code class="language-plaintext highlighter-rouge">transform</code> Applies a 2D or 3D transformation to an element</li> <li><code class="language-plaintext highlighter-rouge">transform-origin</code> Allows you to change the position on transformed elements</li> <li><code class="language-plaintext highlighter-rouge">transform-style</code> Specifies how nested elements are rendered in 3D space</li> <li><code class="language-plaintext highlighter-rouge">perspective</code> Specifies the perspective on how 3D elements are viewed</li> <li><code class="language-plaintext highlighter-rouge">perspective-origin</code> Specifies the bottom position of 3D elements</li> <li><code class="language-plaintext highlighter-rouge">backface-visibility</code> Defines whether or not an element should be visible when not facing the screen</li> </ul> <h3 id="3d-transform-methods">3D Transform Methods</h3> <ul> <li><code class="language-plaintext highlighter-rouge">matrix3d (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</code> Defines a 3D transformation, using a 4x4 matrix of 16 values</li> <li><code class="language-plaintext highlighter-rouge">translate3d(x,y,z)</code> Defines a 3D translation</li> <li><code class="language-plaintext highlighter-rouge">translateX(x)</code> Defines a 3D translation, using only the value for the X-axis</li> <li><code class="language-plaintext highlighter-rouge">translateY(y)</code> Defines a 3D translation, using only the value for the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">translateZ(z)</code> Defines a 3D translation, using only the value for the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">scale3d(x,y,z)</code> Defines a 3D scale transformation</li> <li><code class="language-plaintext highlighter-rouge">scaleX(x)</code> Defines a 3D scale transformation by giving a value for the X-axis</li> <li><code class="language-plaintext highlighter-rouge">scaleY(y)</code> Defines a 3D scale transformation by giving a value for the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">scaleZ(z)</code> Defines a 3D scale transformation by giving a value for the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">rotate3d(x,y,z,angle)</code> Defines a 3D rotation</li> <li><code class="language-plaintext highlighter-rouge">rotateX(angle)</code> Defines a 3D rotation along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">rotateY(angle)</code> Defines a 3D rotation along the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">rotateZ(angle)</code> Defines a 3D rotation along the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">perspective(n)</code> Defines a perspective view for a 3D transformed element</li> </ul> <h2 id="transition-and-transform">Transition and Transform</h2> <p>Usually, transition and transform work together to make animation.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span> 
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">2s</span><span class="p">,</span> <span class="n">height</span> <span class="m">2s</span><span class="p">,</span> <span class="n">transform</span> <span class="m">2s</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;p&gt;</span>Hover over the div element below:<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</code></pre></div></div> <h2 id="reference">Reference</h2> <ul> <li><a href="https://www.w3schools.com/css/css3_transitions.asp">w3schools</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="Animation"/><summary type="html"><![CDATA[There are 2D and 3D transform.]]></summary></entry></feed>