<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-13T11:52:43+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">WebSocket Introduction</title><link href="https://benwzj.github.io/blog/2023/websocket-introduce/" rel="alternate" type="text/html" title="WebSocket Introduction"/><published>2023-10-21T00:00:00+00:00</published><updated>2023-10-21T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/websocket-introduce</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/websocket-introduce/"><![CDATA[<h2 id="what-is-websocket">What is WebSocket</h2> <p>WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.</p> <p>WebSocket is distinct from HTTP. Both protocols are located at layer 5 in the OSI model and depend on TCP at layer 4.</p> <p>Although they are different, RFC 6455 states that WebSocket “is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries,” thus making it compatible with the HTTP protocol.</p> <p>To achieve compatibility, the WebSocket handshake uses the HTTP Upgrade header to change from the HTTP protocol to the WebSocket protocol.</p> <p>The WebSocket protocol enables interaction between a web browser (or other client application) and a web server with lower overhead than half-duplex alternatives such as HTTP polling, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the client without being first requested by the client.</p> <h2 id="test-websocket">Test Websocket</h2> <h3 id="websocket-client-testers">Websocket Client Testers</h3> <ul> <li>Using browser as Client Tester: 1, <a href="https://www.piesocket.com/websocket-tester">piesocket</a> or 2, <a href="https://socketsbay.com/test-websockets">socketsbay</a></li> <li>Using <code class="language-plaintext highlighter-rouge">zsh</code> as Client Tester: <code class="language-plaintext highlighter-rouge">wscat</code>.</li> </ul> <h3 id="public-websocket-server">Public WebSocket server</h3> <ul> <li>websocket-echo.com is a simple echo websocket server. support ws and wss. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ws://websocket-echo.com
wss://websocket-echo.com
</code></pre></div> </div> </li> <li>Free Chatroom I apply a free WebScoket chatroom in socketsbay. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wss://socketsbay.com/wss/v2/[ChannelId]/[ApiKey]/
</code></pre></div> </div> <p>You can use wscat to connect to the chatroom.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wscat -c wss://socketsbay.com/wss/v2/1/1f437d249c2ca2eb3c415b9f92df92c8/
</code></pre></div> </div> </li> </ul> <h2 id="uing-aws-websocket-api-gateway-create-group-chat-application">Uing AWS WebSocket API Gateway Create Group Chat application</h2> <p>This example will show how to create Group Chat applicatin using AWS WebSocket API Gateway.</p> <h3 id="group-chat-app-overview">Group Chat App Overview</h3> <p>1, Clients join the chat room as they connect to the WebSocket API. 2, The backend can send messages to specific users via a callback URL that is provided after the user is connected to the WebSocket API. 3, Users can send messages to the room. 4, Disconnected clients are removed from the chat room.</p>]]></content><author><name></name></author><category term="Protocol"/><category term="WebSocket"/><category term="Http"/><category term="Tcp"/><summary type="html"><![CDATA[What is WebSocket]]></summary></entry><entry><title type="html">Chrome DevTools Lighthouse</title><link href="https://benwzj.github.io/blog/2023/network-permance/" rel="alternate" type="text/html" title="Chrome DevTools Lighthouse"/><published>2023-10-14T00:00:00+00:00</published><updated>2023-10-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/network-permance</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/network-permance/"><![CDATA[<p><strong>Lighthouse</strong> is design to help to optimize website speed. It provide two important functions:</p> <ul> <li>It creates a baseline for you to measure subsequent changes against.</li> <li>It gives you actionable tips on what changes will have the most impact.</li> </ul> <h2 id="build-initial-report">Build Initial Report</h2> <p>The baseline is a record of how the site performed before you made any performance improvements. <em>Analyze page load</em> to create a report at the very first.</p> <p>The report will</p> <ul> <li>tell scores for your selected categories.</li> <li>Metric section provides quantitative measurements of the site’s performance. Each metric provides insight into a different aspect of the performance. <ul> <li>Largest Contentful Paint (LCP) measures when the largest content element in the viewport is rendered to the screen. This approximates when the main content of the page is visible to users.</li> </ul> </li> <li>Screenshots section show collection of screenshots that show you how the page looked as it loaded.</li> <li>Opportunities section that provides specific tips on how to improve this particular page’s load performance. For example choose smaller size pictures, compress js files.</li> <li>Diagnostics section provides more information about factors that contribute to the page’s load time.</li> <li>Passed audits section shows you what the site is doing correctly.</li> </ul> <p>Some tips:</p> <ul> <li>Enabling <em>Clear Storage checkbox</em> clears all storage associated with the page, This will audit how first-time visitors experience your site.</li> </ul> <h2 id="actions-according-to-report">Actions according to Report</h2> <h4 id="enable-text-compression">Enable text compression</h4> <p>Go to Network panel to check!</p> <ul> <li>Compare download size anf uncompression size.</li> <li>Search file Response Headers section for a <code class="language-plaintext highlighter-rouge">content-encoding</code> header.</li> </ul> <p>If haven’t compression, then use commpression. For example, if you are using Node Express, then install the Node.js compression middleware via <code class="language-plaintext highlighter-rouge">npm compression</code>.</p> <h4 id="resize-images">Resize images</h4> <p>Create multiple sizes of each image during the build process and then use srcset in your code. At runtime, the browser takes care of choosing what size is best for the device it’s running on.</p> <h4 id="eliminate-render-blocking-resources">Eliminate render-blocking resources</h4> <p>A render-blocking resource is an external JavaScript or CSS file that the browser must download, parse, and execute before it can show the page. The goal is to only run the core CSS and JavaScript code that is required to display the page properly.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">Coverage tab</code> provides an overview of how much of the code in js files,like main.js, bundle.js, jquery.js, and lodash.js is being executed while the page loads. The <code class="language-plaintext highlighter-rouge">Coverage tab</code> can help you analyze your code, line-by-line, and only ship the code that’s needed for page load.</li> <li>The<code class="language-plaintext highlighter-rouge"> Request Blocking tab</code> can show you what happens when resources aren’t available. Which can help you remove the thing we don’t need.</li> </ul> <h4 id="do-less-main-thread-work">Do less main thread work</h4> <p>The main thread is where the browser does most of the work needed to display a page, such as parsing and executing HTML, CSS, and JavaScript.</p> <ul> <li>Diagnostics section in the Lighthouse report will show you the main thread activity.</li> <li>The goal is to use the <code class="language-plaintext highlighter-rouge">Performance panel</code> to analyze what work the main thread is doing while the page loads, and find ways to defer or remove unnecessary work.</li> </ul> <h4 id="improve-largest-contentful-paint-lcp">Improve Largest Contentful Paint (LCP)</h4> <p>LCP represents how quickly the main content of a web page is loaded. Specifically, LCP measures the time from when the user initiates loading the page until the largest image or text block is rendered within the viewport. To provide a good user experience, sites should strive to have an LCP of <strong>2.5 seconds</strong> or less for at least 75% of page visits. To improve LCP, breakdown it and looking at two:</p> <ul> <li>The initial HTML document</li> <li>The LCP resource</li> </ul> <figure> <picture> <img src="/assets/img/a-breakdown-lcp-showing.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Check <a href="https://web.dev/articles/optimize-lcp">here</a> for more info to Optimize LCP.</p> <h4 id="reduce-cumulative-layout-shift-cls">Reduce Cumulative Layout Shift (CLS)</h4> <p>CLS is a measure of the largest burst of layout shift scores for every unexpected layout shift that occurs during the entire lifespan of a page. Check <a href="https://web.dev/articles/cls">here</a> for more info to Optimize CLS.</p> <h2 id="reference">Reference</h2> <p><a href="https://developer.chrome.com/docs/devtools/lighthouse/">Chrome DevTools Doc</a> https://developer.chrome.com/docs/devtools/lighthouse/</p>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Lighthouse"/><summary type="html"><![CDATA[Lighthouse is design to help to optimize website speed. It provide two important functions: It creates a baseline for you to measure subsequent changes against. It gives you actionable tips on what changes will have the most impact.]]></summary></entry><entry><title type="html">How to make MarkDown file looks better</title><link href="https://benwzj.github.io/blog/2023/Markdown-looks/" rel="alternate" type="text/html" title="How to make MarkDown file looks better"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-looks</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-looks/"><![CDATA[<p>We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,<code class="language-plaintext highlighter-rouge">#Headline</code> convert to <code class="language-plaintext highlighter-rouge">&lt;h1&gt;Headline&lt;/h1&gt;</code>. But how about the style?</p> <p>There are two ways to style your markdown file:</p> <ol> <li>Embed HTML code in markdown files (Most markdown parsers support).</li> <li>Find a specific markdown perser.</li> </ol> <h2 id="embed-html-code-in-markdown-files">Embed HTML code in markdown files</h2> <h4 id="inline-html">inline HTML</h4> <p>You can use inline HTML in Markdown for styles:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:green;font-weight:700;font-size:20px"</span><span class="nt">&gt;</span>
    markdown color font styles
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div> <p>Your output looks like this:</p> <p><span style="color:green;font-weight:700;font-size:20px"> markdown color font styles </span></p> <h4 id="embed-css-styles">Embed CSS styles</h4> <p>You can use CSS styles in markdown content</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
.heading1 {
    color: red;
    font-weight:700;
    font-size: 35px;
}
.heading3 {
    color: blue;
    font-weight:700;
    font-size: 30px;
}
<span class="nt">&lt;/style&gt;</span>

<span class="gh"># Markdown heading styles </span>
{: .heading1}
<span class="gu">### Markdown heading styles </span>
{: .heading3}  

</code></pre></div></div> <p>Your output looks like this:</p> <style>.heading1{color:red;font-weight:700;font-size:35px}.heading3{color:blue;font-weight:700;font-size:30px}</style> <h1 class="heading1" id="markdown-heading-styles">Markdown heading styles</h1> <h3 class="heading3" id="markdown-heading-styles-1">Markdown heading styles</h3> <h4 id="use-selector">Use selector</h4> <p>Define CSS styles using selector</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
red { color: red }
olive { color: olive }
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;red&gt;</span> red color markdown text<span class="nt">&lt;/red&gt;</span>

<span class="nt">&lt;olive&gt;</span> olive color markdown text<span class="nt">&lt;/olive&gt;</span>
</code></pre></div></div> <p>Your output looks like this:</p> <style>red{color:red}olive{color:olive}</style> <red> red color markdown text</red> <p><br/></p> <olive> olive color markdown text</olive>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><category term="Markdown"/><summary type="html"><![CDATA[We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,#Headline convert to &lt;h1&gt;Headline&lt;/h1&gt;. But how about the style?]]></summary></entry><entry><title type="html">What Markdown can do</title><link href="https://benwzj.github.io/blog/2023/Markdown-can-do/" rel="alternate" type="text/html" title="What Markdown can do"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-can-do</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-can-do/"><![CDATA[<p>Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.</p> <h2 id="it-can-embed-html-tags">It can embed HTML tags</h2> <h4 id="direct-link">Direct link:</h4> <p><a href="https://en.wikipedia.org/">wikipedia</a></p> <h4 id="make-a-list">Make a list</h4> <ul> <li>Milk</li> <li>Bread</li> <li>Yogurt</li> <li>Nappy</li> </ul> <hr/> <h4 id="we-can-quote">We can Quote:</h4> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h4 id="support-images">Support Images:</h4> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>responsive format:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="display-programm-code">Display programm code</h2> <h4 id="you-have-to-do-is-wrap-your-code-in-markdown-code-tags">You have to do is wrap your code in markdown code tags:</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="display-line-number">Display line number</h4> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h4 id="display-liquid-template-code-too">Display liquid template code too</h4> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <h4 id="support-mathjax">Support Mathjax</h4> <p>You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. Example: \(E = mc^2\).</p> <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <h2 id="adding-disqus-comments">Adding DISQUS comments.</h2> <p>Turn <code class="language-plaintext highlighter-rouge">disqus_comments: true</code> on at the Front Matter.</p> <h2 id="adding-table-of-contents">Adding table of contents</h2> <p>To add a table of contents to a post, add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h2 id="customized-blockquotes">customized blockquotes</h2> <p>Like below:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="redirecting-to-another-page">Redirecting to another page</h2> <p>Add below in the front matter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redirect: /assets/pdf/example_pdf.pdf
</code></pre></div></div> <h2 id="display-tables-bootstrap-tables">Display tables Bootstrap Tables</h2> <p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="video">Video</h2> <h4 id="it-supports-local-video-files">It supports local video files.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <h4 id="it-does-also-support-embedding-videos-from-different-sources">It does also support embedding videos from different sources.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h2 id="audio">Audio</h2> <p>It supports local and external audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><category term="Markdown"/><summary type="html"><![CDATA[Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.]]></summary></entry><entry><title type="html">Introduce MathJax</title><link href="https://benwzj.github.io/blog/2023/Mathjax/" rel="alternate" type="text/html" title="Introduce MathJax"/><published>2023-09-14T00:00:00+00:00</published><updated>2023-09-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Mathjax</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Mathjax/"><![CDATA[<h2 id="what-is-mathjax">What is MathJax</h2> <p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers. MathJax has a rich application programming interface (API) that can be used to make the mathematics on your web pages interactive and dynamic.</p> <p>Here are some main features:</p> <ul> <li>MathJax is a cross-browser JavaScript library</li> <li>MathJax displays <strong>mathematical notation</strong> in web browsers</li> <li>MathJax uses CSS with web fonts or SVG, instead of bitmap images or Flash</li> <li>MathJax using MathML, LaTeX and ASCIIMathML markup</li> <li>MathJax is highly modular on input and output. Use MathML, TeX, and ASCIImath as input and produce HTML+CSS, SVG, or MathML as output</li> <li>MathJax works with screenreaders &amp; provides expression zoom and interactive exploration. You also can copy equations into Office, LaTeX, wikis, and other software.</li> <li>Version 3.0 of MathJax is the latest version. It is a complete rewrite of MathJax from the ground up, and its usage and configuration is significantly different from that of MathJax version 2.</li> </ul> <h3 id="example">Example</h3> <p>For example for displayed formulas, use <code class="language-plaintext highlighter-rouge">$$…$$</code>. Type the following for display mode: <code class="language-plaintext highlighter-rouge">$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$</code>. It will turn into:</p> \[\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{equation}
\label{eq:cauchy-schwarz}
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\end{equation}
</code></pre></div></div> <p>It will turn into: \begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>Get more informaiton at <a href="https://docs.mathjax.org/en/latest/index.html">mathjax offical document</a> and <a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">mathjax-basic-tutorial</a></p> <h3 id="what-is-mathml">What is MathML</h3> <p>Maybe you want to know a bit about Mathematical Markup Language (MathML). There are a number of mathematical markup languages, And MathML is a popular one.</p> <p>MathML is a mathematical markup language, an application of <strong>XML</strong> for describing mathematical notations and capturing both its structure and content, and is one of a number of mathematical markup languages. Its aim is to natively integrate mathematical formulae into World Wide Web pages and other documents. It is part of HTML5 and standardised by ISO/IEC since 2015.</p> <h2 id="what-is-mjx-container">What is mjx-container?</h2> <p>mjx-container is custom element (specific selector) for MathJax content. You can think that like below:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">mjx-container</span><span class="o">&gt;</span>
<span class="nt">MathJax</span> <span class="nt">content</span><span class="o">...</span>
<span class="o">&lt;/</span><span class="nt">mjx-container</span><span class="o">&gt;</span>
</code></pre></div></div> <h3 id="example1">Example1</h3> <p>This will also provide display-mode math with scroll bars if they are too long. If you want to do this only for inline math, then use mjx-container:not([display]) instead.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">mjx-container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-grid</span><span class="p">;</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">overflow-y</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:15em; border: 1px solid; padding: 3px 5px"</span><span class="nt">&gt;</span>
This is some text with a long in-line math expression
\(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\)
that we hope will have a scroll bar!  This math \(x+y+z\) should not.
Long display math also gets a scroll bar:
\[a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\]
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div> <p>just test, make git action is working</p> <style>mjx-container{display:inline-grid;overflow-x:auto;overflow-y:hidden;max-width:100%}</style> <div style="width:15em; border: 1px solid; padding: 3px 5px"> This is some text with a long in-line math expression \(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\) that we hope will have a scroll bar! This math \(x+y+z\) should not. Long display math also gets a scroll bar: \[a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\] </div>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="SVG"/><category term="HTML"/><summary type="html"><![CDATA[What is MathJax]]></summary></entry><entry><title type="html">Chrome DevTools Overview</title><link href="https://benwzj.github.io/blog/2023/DevTools-overview/" rel="alternate" type="text/html" title="Chrome DevTools Overview"/><published>2023-09-10T00:00:00+00:00</published><updated>2023-09-10T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/DevTools-overview</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/DevTools-overview/"><![CDATA[<p>If you clear the concepts in HTML, CSS, JavaScript. Chrome DevTools is handy and easy to use. Chrome DevTools is a set of web developer tools built directly into the Google Chrome browser. It can help you edit pages on-the-fly and diagnose problems quickly, which helps you build better websites, faster.</p> <h2 id="some-points-for-starting">Some points for starting</h2> <ul> <li>Right-click an element on the page and select Inspect to jump into the Elements panel which work on the DOM or CSS.</li> <li>Shortcut: <keyboard>Command</keyboard>+<keyboard>Option</keyboard>+<keyboard>J</keyboard> (Mac) to jump straight into the Console panel which for JavaScript.</li> <li>Shortcut: <keyboard>Command</keyboard>+<keyboard>shift</keyboard>+<keyboard>P</keyboard> to reach more Feature from the Drawer.</li> <li>The top-level tabs are called panels. Like Console, Network, Sources, etc.</li> <li>Press <keyboard>esc</keyboard> to open or close the Drawer. The Drawer contains many hidden features.</li> <li>You can Change DevTools placement, default is vertical.</li> <li>When you use DevTools a lot, you might <em>Customize keyboard shortcuts</em>.</li> <li>DevTools only logs network activity while it’s open.</li> <li>Chrome DevTools provide many functionality: <ul> <li>View and Change the DOM</li> <li>View and Change a Page’s Styles (CSS)</li> <li>Debug JavaScript</li> <li>View Messages and Run JavaScript in the Console</li> <li>Optimize Website Speed</li> <li>Inspect Network Activity</li> </ul> </li> </ul> <h2 id="what-devtools-can-do">What DevTools can do</h2> <h3 id="debugging-css">Debugging CSS</h3> <p>DevTools provide many comvenient ways for you debug CSS. Here list some main points:</p> <ul> <li>You can <code class="language-plaintext highlighter-rouge">Inspect</code> the CSS of your selected element.</li> <li>The <em>Styles</em> panel show all CSS declaration. It is good for check cascade order problem.</li> <li>The <em>Computed</em> panel tell you what final sytle it use.</li> <li>It provide methods for you to search your elements.</li> <li>It provide tools to control, optimize your <strong>animaitons</strong>. check Animation Panel.</li> </ul> <h3 id="prototyping-css">Prototyping CSS</h3> <p>It is tedious to edit CSS. But with Chrome DevTools, you can edit the CSS and check the result.</p> <ul> <li>Basic idea is <code class="language-plaintext highlighter-rouge">Inspect</code> your selected element, and <strong>eidt</strong> it.</li> <li>Add style directly to the element.</li> <li>Add CSS class to the elemeny.</li> <li>Provide Contrast ratio suggestion.</li> <li><strong>Copy element style</strong>. For example you see a fancy style on a webpage, you can copy the style and make it yours. <ol> <li>select your fance element and <code class="language-plaintext highlighter-rouge">Inspcet</code> it.</li> <li>Right click the element in the Element panel, and select <code class="language-plaintext highlighter-rouge">copy</code> -&gt; <code class="language-plaintext highlighter-rouge">copy style</code>.</li> <li>apply it to your element.</li> </ol> </li> <li>Screenshots, you can screen shot whole page, your select area, ro one node in the DOM Tree, etc.</li> </ul> <h3 id="debugging-javascript">Debugging JavaScript</h3> <p>When you debug JavaScript, the common problems are Checking executing order; Checking value tht was set as expected. The common strategy is Logging with Console panel. And Debugging with source panel. How to debug with source panel? Here are some hihts and tips:</p> <ul> <li>Set <code class="language-plaintext highlighter-rouge">debugger</code> statement. (Just set breakpoint)</li> <li>Set line-of-code breakpoint</li> <li>Code Stepping.</li> <li>Code folding (you can enable it)</li> <li>Call stack</li> <li>Value print inline after code executed.</li> <li>Use <strong>Scope</strong> pane. When you’re paused on a line of code, the Scope pane shows you what local and global variables are currently defined, along with the value of each variable. It also shows closure variables, when applicable. Double-click a variable value to edit it.</li> <li>Run JavaScript contextually in the Drawer(Console panel)</li> <li>Live Expressions (turn it on by click the eye logo)</li> <li>Add Logpoints. (just like <code class="language-plaintext highlighter-rouge">console.log()</code>, but don’t need to write it to code)</li> <li>Store the output of Logpoints as global variables.</li> </ul> <h3 id="analyzing-load-performance">Analyzing Load performance</h3> <ul> <li>Start with <strong>Lighthouse</strong> Panel</li> <li>Analyze further with Coverage tag, performace panel, or Network panel depond on the resule of Lighthouse panel results.</li> </ul> <h3 id="reference">Reference</h3> <ul> <li><a href="https://developer.chrome.com/docs/devtools/overview">Chrome DevTools Overview</a></li> <li><a href="https://www.youtube.com/watch?v=VYyQv0CSZOE&amp;t=2s">Build better sites faster with Chrome DevTools</a></li> </ul> <h2 id="go-a-bit-deep-on-breakpoints">Go a bit deep on BreakPoints</h2> <p>The most well-known type of breakpoint is line-of-code. But with a large codebase it is good idea to know how and when to use the other types of breakpoints.</p> <table> <thead> <tr> <th style="text-align: left">Breakpoint Type</th> <th style="text-align: left">Use this when you want to …</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Line-of-code</td> <td style="text-align: left">Pause on an exact region of code.</td> </tr> <tr> <td style="text-align: left">Conditional line-of-code</td> <td style="text-align: left">Pause on an exact region of code, but only when some other condition is true.</td> </tr> <tr> <td style="text-align: left">Logpoint</td> <td style="text-align: left">Log a message to the Console without pausing the execution.</td> </tr> <tr> <td style="text-align: left">DOM</td> <td style="text-align: left">Pause on the code that changes or removes a specific DOM node, or its children</td> </tr> <tr> <td style="text-align: left">XHR</td> <td style="text-align: left">Pause when an XHR URL contains a string pattern.</td> </tr> <tr> <td style="text-align: left">Event listener</td> <td style="text-align: left">Pause on the code that runs after an event, such as click, is fired.</td> </tr> <tr> <td style="text-align: left">Exception</td> <td style="text-align: left">Pause on the line of code that is throwing a caught or uncaught exception.</td> </tr> <tr> <td style="text-align: left">Function</td> <td style="text-align: left">Pause whenever a specific function is called.</td> </tr> <tr> <td style="text-align: left">Trusted Type</td> <td style="text-align: left">Pause on Trusted Type violations.</td> </tr> </tbody> </table> <h3 id="line-of-code-breakpoint">line-of-code breakpoint</h3> <p>Use a line-of-code breakpoint when you know the exact region of code that you need to investigate.</p> <p>Call <code class="language-plaintext highlighter-rouge">debugger</code> from your code to pause on that line. This is equivalent to a line-of-code breakpoint, except that the breakpoint is set in your code, not in the DevTools UI.</p> <h3 id="conditional-line-of-code-breakpoints">Conditional line-of-code breakpoints</h3> <p>Use a conditional line-of-code breakpoint when you want to stop the execution but only when some condition is true.</p> <p>Such breakpoints are useful when you want to skip breaks that are irrelevant to your case, especially in a loop.</p> <h3 id="log-line-of-code-breakpoints">Log line-of-code breakpoints</h3> <p>Use log line-of-code breakpoints (logpoints) to log messages to the Console without pausing the execution and without cluttering up your code with <code class="language-plaintext highlighter-rouge">console.log()</code> calls.</p> <p>Also, you can use the Breakpoints pane to disable, edit, or remove line-of-code breakpoints.</p> <h3 id="dom-change-breakpoints">DOM change breakpoints</h3> <p>Use a DOM change breakpoint when you want to pause on the code that changes a DOM node or its children.</p> <p>To set a DOM change breakpoint:</p> <ul> <li>Click the Elements tab.</li> <li>Go to the element that you want to set the breakpoint on.</li> <li>Right-click the element.</li> <li>Hover over Break on then select Subtree modifications, Attribute modifications, or Node removal.</li> </ul> <h3 id="xhrfetch-breakpoints">XHR/fetch breakpoints</h3> <p>Use an XHR/fetch breakpoint when you want to break when the request URL of an XHR contains a specified string. DevTools pauses on the line of code where the XHR calls send().</p> <p>One example of when this is helpful is when you see that your page is requesting an incorrect URL, and you want to quickly find the AJAX or Fetch source code that is causing the incorrect request.</p> <p>To set an XHR/fetch breakpoint:</p> <ul> <li>Click the Sources tab.</li> <li>Expand the XHR Breakpoints pane.</li> <li>Click Add. Add breakpoint.</li> <li>Enter the string which you want to break on. DevTools pauses when this string is present anywhere in an XHR’s request URL.</li> <li>Press Enter to confirm.</li> </ul> <h3 id="event-listener-breakpoints">Event listener breakpoints</h3> <p>Use event listener breakpoints when you want to pause on the event listener code that runs after an event is fired. You can select specific events, such as <code class="language-plaintext highlighter-rouge">click</code>, or categories of events, such as all mouse events.</p> <ul> <li>Click the Sources tab.</li> <li>Expand the Event Listener Breakpoints pane. DevTools shows a list of event categories, such as Animation.</li> <li>Check one of these categories to pause whenever any event from that category is fired, or expand the category and check a specific event.</li> </ul> <h3 id="exception-breakpoints">Exception breakpoints</h3> <p>Use exception breakpoints when you want to pause on the line of code that’s throwing a caught or uncaught exception. You can pause on both such exceptions independently in any debug session other than Node.js.</p> <h3 id="function-breakpoints">Function breakpoints</h3> <p>Call <code class="language-plaintext highlighter-rouge">debug(functionName)</code>, where <code class="language-plaintext highlighter-rouge">functionName</code> is the function you want to debug, when you want to pause whenever a specific function is called. You can insert <code class="language-plaintext highlighter-rouge">debug()</code> into your code (like a <code class="language-plaintext highlighter-rouge">console.log()</code> statement) or call it from the DevTools Console. <code class="language-plaintext highlighter-rouge">debug()</code> is equivalent to setting a line-of-code breakpoint on the first line of the function.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// DevTools pauses on this line.</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">debug</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span> <span class="c1">// Pass the function object, not a string.</span>
<span class="nf">sum</span><span class="p">();</span>
</code></pre></div></div> <h3 id="reference-1">Reference</h3> <ul> <li><a href="https://developer.chrome.com/docs/devtools/javascript/breakpoints/">Chrome DevTools breakpoints overview</a></li> </ul> <h2 id="panel-overview">Panel Overview</h2> <h3 id="elements-panel--css">Elements panel &amp; CSS</h3> <p>You can view <strong>DOM nodes</strong> in the Elements Panel. Some skills:</p> <ul> <li>Inspect a node: <ul> <li>Right-click ELEMENT and select Inspect.</li> <li>Click the Inspect icon in the <em>top-left corner</em> of DevTools. And then the selected element in the viewport will be highlighted in the DOM Tree.</li> </ul> </li> <li>Navigate the DOM Tree with a keyboard <ul> <li>Once you’ve selected a node in the DOM Tree, you can navigate the DOM Tree with your keyboard.</li> </ul> </li> <li>Scroll into view: <ul> <li>When viewing the DOM Tree, right click DOM node and <code class="language-plaintext highlighter-rouge">Scroll into view</code> lets you quickly reposition the viewport so that you can see the node.</li> </ul> </li> <li>Show rulers: <ul> <li>With rulers, you can measure the width and height of an element when you hover over it in the Elements panel.</li> <li>Enable the rulers: Settings &gt; Preferences &gt; Elements &gt; Show rulers on hover.</li> </ul> </li> <li>Search for nodes: <ul> <li>You can search the DOM Tree by <em>string</em>, <em>CSS selector</em>, or <em>XPath selector</em>.</li> <li>Press Control+F or Command+F (Mac). The Search bar opens at the bottom of the DOM Tree.</li> </ul> </li> <li>Edit the DOM <ul> <li>You can edit the DOM on the fly and see how those changes affect the page.</li> <li>In the DOM Tree, double-click the Element, see what happen.</li> <li>Edit attributes, double-click the attribute name or value.</li> <li>Edit node type, double-click the type and then type in the new type.</li> <li>Edit as HTML, select Edit as HTML from the node’s drop-down menu.</li> <li>Duplicate a node, duplicate an element using the Duplicate element right-click option.</li> </ul> </li> <li>Capture a node screenshot <ul> <li>You can screenshot any individual node in the DOM Tree using Capture node screenshot.</li> <li>right-click and select Capture node screenshot from the drop-down menu.</li> </ul> </li> <li>Reorder DOM nodes <ul> <li>Drag nodes to reorder them.</li> </ul> </li> <li>Force state <ul> <li>You can force nodes to remain in states like <code class="language-plaintext highlighter-rouge">:active</code>, <code class="language-plaintext highlighter-rouge">:hover</code>, <code class="language-plaintext highlighter-rouge">:focus</code>, <code class="language-plaintext highlighter-rouge">:visited</code>, and <code class="language-plaintext highlighter-rouge">:focus-within</code>.</li> <li>Right-click element and select <code class="language-plaintext highlighter-rouge">Force State &gt; :hover</code>.</li> </ul> </li> <li>Hide a node <ul> <li>Press H to hide a node.</li> <li>You can also right-click the node and use the Hide element option.</li> </ul> </li> <li>Delete a node <ul> <li>Press Delete to delete a node.</li> </ul> </li> <li>View the properties of DOM objects <ul> <li>Select a node the DOM tree, you can find Properties pane.</li> <li><a href="https://developer.chrome.com/docs/devtools/dom/properties/">Check here</a></li> </ul> </li> <li>Badges reference <ul> <li>Toggle various overlays and speed up DOM tree navigation with this comprehensive reference of badges in the Elements panel.</li> <li>What is badge? It is small <em>badge sign</em> that can give you more information. For example, you can find <code class="language-plaintext highlighter-rouge">flex</code> badge after a <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>, that mean the <code class="language-plaintext highlighter-rouge">display</code> of this <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> is <code class="language-plaintext highlighter-rouge">flex</code>.</li> <li>Right-click an element in the DOM tree and select Badge settings</li> </ul> </li> </ul> <p>DevTools provides a few shortcuts for accessing DOM nodes from the Console, or getting JavaScript references to them.</p> <ul> <li>Reference the currently-selected node with <code class="language-plaintext highlighter-rouge">$0</code> <ul> <li>When you inspect a node, the <code class="language-plaintext highlighter-rouge">== $0</code> text next to the node means that you can reference this node in the Console with the variable <code class="language-plaintext highlighter-rouge">$0</code>.</li> </ul> </li> <li>Store as global variable <ul> <li>If you need to refer back to a node many times, store it as a global variable.</li> </ul> </li> <li>Copy JS path <ul> <li>Copy the JavaScript path to a node when you need to reference it in an automated test.</li> <li>Right-click Element in the DOM Tree and select <code class="language-plaintext highlighter-rouge">Copy &gt; Copy JS Path</code>.</li> </ul> </li> </ul> <p>You can view and change CSS in element Panel.</p> <ul> <li>In the Elements &gt; Styles pane!</li> </ul> <h3 id="console-panel">Console panel</h3> <p>The Console has 2 main uses: viewing logged messages and running JavaScript.</p> <ul> <li><code class="language-plaintext highlighter-rouge">console.log('Hello, Console!')</code>, <code class="language-plaintext highlighter-rouge">console.table(array)</code> can display log in console.</li> <li>When building or debugging a page, it’s often useful to run statements in the Console in order to change how the page looks or runs.</li> <li>Also you can Run arbitrary JavaScript that’s not related to the page</li> </ul> <h3 id="sources-panel">Sources panel</h3> <p>Use the Chrome DevTools Sources panel to:</p> <ul> <li>View files.</li> <li>Edit CSS and JavaScript.</li> <li>Create and save Snippets of JavaScript, which you can run on any page. Snippets are similar to bookmarklets.</li> <li>Debug JavaScript.</li> <li>Set up a Workspace, so that changes you make in DevTools get saved to the code on your file system.</li> </ul> <h3 id="network-panel">Network panel</h3> <p>You can analyze how your page load in this Network Panel! Network Panel provides:</p> <ul> <li>Record network requests</li> <li>Change loading behavior</li> <li>Filter requests</li> <li>Sort requests</li> <li><strong>Analyze requests</strong></li> <li>Export requests data You can know more on a <a href="https://developer.chrome.com/docs/devtools/network/">hands-on tutorial</a></li> </ul> <h3 id="recorder-panel">Recorder panel</h3> <p>Record, replay, and measure user flows.</p> <h3 id="performance-panel">Performance panel</h3> <p>Runtime performance is how your page performs when it is running, as opposed to loading.</p> <ul> <li>You can analyze runtime performance of you website. Check <a href="https://developer.chrome.com/docs/devtools/performance/">here</a></li> </ul> <h3 id="memory-panel">Memory panel</h3> <p>Chrome DevTools can help find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.</p> <h3 id="application-panel">Application panel</h3> <p>Use the Application panel to inspect, modify, and debug web app manifests, service workers, and service worker caches.</p> <h3 id="rendering-tab">Rendering tab</h3> <p>The Rendering tab helps you:</p> <ul> <li>Discover rendering performance issues. Spot repainting, layout shifts, layers and tiles, scrolling issues, see rendering statistics and Core Web Vitals.</li> <li>Emulate CSS media features. Test how pages render with different CSS media features without manually specifying them in your code or testing environment.</li> <li>Apply other useful effects. Highlight ad frames, emulate focus on a page, disable local fonts and image formats, enable an automatic dark theme, and emulate vision deficiencies.</li> </ul> <h3 id="reference-2">Reference</h3> <p><a href="https://developer.chrome.com/docs/devtools/overview/">Chrome DevTools Overview</a></p>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Network"/><summary type="html"><![CDATA[If you clear the concepts in HTML, CSS, JavaScript. Chrome DevTools is handy and easy to use. Chrome DevTools is a set of web developer tools built directly into the Google Chrome browser. It can help you edit pages on-the-fly and diagnose problems quickly, which helps you build better websites, faster.]]></summary></entry><entry><title type="html">Build your own personal brand</title><link href="https://benwzj.github.io/blog/2023/BuildPersonalBrand/" rel="alternate" type="text/html" title="Build your own personal brand"/><published>2023-08-31T00:00:00+00:00</published><updated>2023-08-31T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/BuildPersonalBrand</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/BuildPersonalBrand/"><![CDATA[<p>Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!</p> <p>What is your persoanl brand? <strong><em>It is your reputation!</em></strong></p> <p>How to build your personal brand? I believe the following advices is good one.</p> <h2 id="1-figure-out-your-goal">#1 Figure out your goal.</h2> <p>What do you want your personal brand to help you accomplish? Are you change job, or transition into a new industry? No matter what it is, Write it down, make it specific so that you are working toward to a clear outcome.</p> <h2 id="2-get-clear-on-what-you-want-to-be-known-for">#2 Get Clear on What you want to be known for.</h2> <p>In another word, How do you want other people to describe you as a professional. No matter what type your professional is, What you need to do is dig deep on What, How and Why behind your work! So that you can make it concrete and <strong>easy to remember</strong>. Just make sure no confusion. Try to think about this:</p> <ul> <li>What are the things that make you unique?</li> <li>Are there specific talents and expertise you’ve acquired?</li> <li>What do you know more about than most people.</li> </ul> <p>Sit down and make a list!</p> <h2 id="3-know-your-audience">#3 Know your Audience.</h2> <p>Who you want to share your personal brand with? <strong>The reality is, your personal brand is not about you! It is about the people you want to educate with the skills, knowledge and value you provide.</strong></p> <p>Who you want to focus on should be based on two things:</p> <ul> <li>The goal of your personal brand and</li> <li>The people who can best benefit from your skills.</li> </ul> <p>Answer this questions:</p> <ul> <li>Who can most gain benefit from your share? and</li> <li>How exactly can you see yourself helping them?</li> </ul> <h2 id="4-creat-a-misson-statement">#4 Creat a Misson statement</h2> <p>Let’s pull all your answers into a <strong>single</strong> mission statement that describe:</p> <ul> <li>Who you are</li> <li>What you do</li> <li>Who you do it for</li> <li>The transformation you create</li> </ul> <p>Let’s make a concrete example (Project manager):</p> <blockquote> <p>My name is Jennifer, I’m a project manager for a sustainable fashion company. I work with teams across different deparments to plan, organize and direct Annovative marketing campaigns that engage customers while also increasing brand loyalty.</p> </blockquote> <p>The mission statement can be very different, depending on your career. But no matter what is it, <strong>Write it down and put it somewhere prominent.</strong> You can use it to make decision about how you speak about yourself when you first meet someone, or to the communities you want to share it with.</p> <h2 id="5-build-your-personal-brand-online">#5 Build your personal brand online</h2> <p>There are two ways to do this online: your own website, and social media.</p> <ul> <li>Website is very professional!</li> <li>Don’t choose too many social media!</li> </ul>]]></content><author><name></name></author><category term="Personal"/><category term="personal"/><category term="career"/><category term="professional"/><summary type="html"><![CDATA[Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!]]></summary></entry><entry><title type="html">Iteration in Python</title><link href="https://benwzj.github.io/blog/2023/iteration-python/" rel="alternate" type="text/html" title="Iteration in Python"/><published>2023-05-13T00:00:00+00:00</published><updated>2023-05-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/iteration-python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/iteration-python/"><![CDATA[<p><strong>In short:</strong> Iterbale support <code class="language-plaintext highlighter-rouge">iter()</code> and maintain the data. Iterator support <code class="language-plaintext highlighter-rouge">next()</code> and reach the data.</p> <h2 id="iterable">Iterable</h2> <h3 id="official-defination">Official defination</h3> <p>Any object that supports <code class="language-plaintext highlighter-rouge">iter()</code> and return iterator is said to be “iterable.” example:</p> <ul> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an <code class="language-plaintext highlighter-rouge">iter()</code> method or with a <code class="language-plaintext highlighter-rouge">getitem()</code> method that implements sequence semantics are iterables.</li> </ul> <p>Iterables can be used in a for loop and in many other places where a sequence is needed.<br/> built-in function <code class="language-plaintext highlighter-rouge">iter()</code>, it returns an iterator for the object.</p> <h2 id="iterator">Iterator</h2> <h3 id="official-definition">Official definition</h3> <p>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: <code class="language-plaintext highlighter-rouge">iterator.iter()</code> return itself. <code class="language-plaintext highlighter-rouge">iterator.next()</code> return one data and maintain state.</p> <p><strong>But CPython doesn’t consistently apply</strong></p> <h2 id="iterable-vs-iterator">Iterable vs. Iterator</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <p>An iterable can returns a <strong>fresh</strong> ITERATOR. An iterator can return itself. And iterator also is an object with a <strong>next</strong> method that returns the next value in the iteration and updates the state to point at the next value</p> <h2 id="pure-iterables">Pure iterables</h2> <p>Maybe we can produce a pure iterable concept. Pure iterable typically hold the data itself, and return fresh iterator. In contrast, iterator is not pure iterable that fetch data and return itself.</p> <h2 id="conclusion">Conclusion</h2> <p>Many people say iterators are iterables as well, and iterables don’t have to be iterators. But they also say iterators and iterables are different, like iterators are more effecient in memory consumsion. That is confusing concept. I reckon iterator don’t have to support <code class="language-plaintext highlighter-rouge">iter()</code> That means iterator don’t have to be iterable. Just like JavaScript.</p> <h2 id="generator">Generator</h2> <h3 id="what-is-generator">What is Generator</h3> <ul> <li>Generators are a special class of functions that simplify the task of writing iterators.</li> <li>Generator functions is a convenient shortcut to building iterators.</li> <li>Regular functions compute a value and return it, but generators return an iterator that returns a stream of values.</li> <li>When you call a generator function, it doesn’t return a single value; instead it returns a generator object that supports the iterator protocol.</li> <li>If a container object’s <code class="language-plaintext highlighter-rouge">__iter__()</code> method is implemented as a generator, it will automatically return a generator object supplying the <code class="language-plaintext highlighter-rouge">__iter__()</code> and <code class="language-plaintext highlighter-rouge">__next__()</code> methods.</li> <li>There are two ways to create Generator: generator expression and generator function</li> <li>If you create a list to sum the first n. When n is really big, then it consume lots of memory. Not acceptable. Generator (iterator) will perform the job much better.</li> <li>Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.</li> <li>When you use recursion for generator, you need to clear the subgenerator concept. Otherwise, it won’t work as you expect.</li> </ul> <h3 id="generator-is-not-pure-iterable">Generator is not pure iterable</h3> <p>Generator is iterator, but it is not pure iterable. That means iter(generator) return itself instead of a fresh iterator.</p> <p>Basic Example, clone python’s built-in range() function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">start must be smaller than stop</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">step</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">my_range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="generator-functions">Generator functions</h3> <p>Generator function is defined similar to normal function but there is only one difference, it is using yield keyword to return value used for each iteration.</p> <p>Any function containing a yield keyword is a generator function; this is detected by Python’s bytecode compiler which compiles the function specially as a result.</p> <p>Generator function return a lazy iterator. This iterator also call generator object.</p> <h3 id="generator-expressionalso-call-generator-comprehension">Generator expression(also call generator comprehension)</h3> <p>Generator expressions provide an additional shortcut to build generators out of expressions similar to that of list comprehensions.</p> <p>If the generated expressions are more complex, involve multiple steps, or depend on additional temporary state, Using generator function .</p> <ul> <li>generator comprehension</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums_squared_gc</span> <span class="o">=</span> <span class="p">(</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div></div> <ul> <li>List comprehension</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums_squared_lc</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">nums_squared_lc</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">nums_squared_gc</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x107fbbc78</span><span class="o">&gt;</span>
</code></pre></div></div> <h3 id="the-difference">The difference</h3> <p>We can think of list comprehensions as generator expressions wrapped in a list constructor:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list comprehension
</span><span class="n">doubles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">)]</span>
<span class="c1"># same as the list comprehension above
</span><span class="n">doubles</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span>
</code></pre></div></div> <p>The difference between generator and list comprehensions is that generator comprehension create lazy generator. it won’t consume all memory it need at one time. But list comprehension will, because list constructor run through the generator.</p> <h3 id="subgenerator-yield-from">Subgenerator (yield from)</h3> <ul> <li>You can use yield from to read data from an other generator.</li> <li> <p>There is Subgenerator concept, read more at <strong>PEP380</strong>.</p> </li> <li>When you use recursion in generator you will meet some weird issue. That is because you have no subgenerator concept. You need to use yield from for each subgenerator. Otherwise you need to use for to run over it (sometime works, sometime not works). Because Generator return Generator Object! it is different from normal function.</li> </ul> <h3 id="understand-subgenerator">Understand subgenerator</h3> <ul> <li> <p>A Python generator is a form of coroutine, but has the limitation that it can only yield to its immediate caller. This means that a piece of code containing a yield cannot be factored out and put into a separate function in the same way as other code.</p> </li> <li> <p>Performing such a factoring causes the called function to itself become a generator, and it is necessary to explicitly iterate over this second generator and re-yield any values that it produces.</p> </li> <li> <p>If yielding of values is the only concern, this can be performed without much difficulty using a loop.</p> </li> <li> <p>However, if the subgenerator is to interact properly with the caller in the case of calls to send(), throw() and close(), things become considerably more difficult. As will be seen later, the necessary code is very complicated, and it is tricky to handle all the corner cases correctly.</p> </li> </ul> <h3 id="understand-yield-from">Understand <code class="language-plaintext highlighter-rouge">yield from</code></h3> <ul> <li><code class="language-plaintext highlighter-rouge">yield from</code> is a new syntax. You can check the codes for <code class="language-plaintext highlighter-rouge">yield from</code> in <strong>PEP380</strong>.</li> <li>This new syntax empowers you to refactor generators in a clean way by making it easy to yield every value from an iterator (which a generator conveniently happens to be).</li> <li> <p><code class="language-plaintext highlighter-rouge">yield from</code> also lets you chain generators together so that values bubble up and down the call stack without code having to do anything special.</p> </li> <li>Let’s get one thing out of the way first. The explanation that <code class="language-plaintext highlighter-rouge">yield from g</code> is equivalent to <code class="language-plaintext highlighter-rouge">for v in g: yield v</code> does not even begin to do justice to what <code class="language-plaintext highlighter-rouge">yield from</code> is all about.</li> <li>Because, if all <code class="language-plaintext highlighter-rouge">yield from</code> does is expand the for loop, then it does not warrant adding <code class="language-plaintext highlighter-rouge">yield from</code> to the language and preclude a whole bunch of new features from being implemented in Python 2.x. PEP380 have the detail.</li> </ul> <p>– What <code class="language-plaintext highlighter-rouge">yield from</code> does is it establishes a transparent bidirectional connection between the caller and the sub-generator:</p> <ul> <li>The connection is “transparent” in the sense that it will propagate everything correctly too, not just the elements being generated (e.g. exceptions are propagated).</li> <li>The connection is “bidirectional” in the sense that data can be both sent from and to a generator.</li> </ul> <h3 id="example-of-using-recursion-in-generator">Example of using recursion in generator:</h3> <p>You can’t print 0,1,2,3,4 from following code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
    
<span class="n">gr</span> <span class="o">=</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">gr</span><span class="p">:</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="you-need-to-use-yield-from">You need to use yield from:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
</code></pre></div></div> <h3 id="passing-values-into-a-generator">Passing values into a generator</h3> <ul> <li> <p>In Python 2.5 there’s a simple way to pass values into a generator.</p> </li> <li>yield became an expression, returning a value that can be assigned to a variable or otherwise operated on: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
<span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span>
</code></pre></div> </div> </li> <li> <p>recommend that you always put parentheses around a yield expression.</p> </li> <li> <p>Values are sent into a generator by calling its .send(value) method. This method resumes the generator’s code and the yield expression returns the specified value.</p> </li> <li>Simple example: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">counter</span><span class="p">(</span><span class="n">maximum</span><span class="p">):</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maximum</span><span class="p">:</span>
      <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
      <span class="c1"># If value provided, change counter
</span>      <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
          <span class="n">i</span> <span class="o">=</span> <span class="n">val</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div> </div> <p>The value of val is always None when regular <code class="language-plaintext highlighter-rouge">__next__()</code> method is called. When <code class="language-plaintext highlighter-rouge">.send(value)</code> is called. the val will be the value</p> </li> </ul> <h3 id="how-do-sendvalue-resumes-the-generator">How do <code class="language-plaintext highlighter-rouge">send(value)</code> resumes the generator?</h3> <ul> <li> <p>When calling <code class="language-plaintext highlighter-rouge">next()</code>, the code resume from the next line which after last yield.</p> </li> <li> <p>When calling <code class="language-plaintext highlighter-rouge">.send(value)</code>, the code resume from the last yield! And also yield a value back to <code class="language-plaintext highlighter-rouge">.send(value)</code> function (like <code class="language-plaintext highlighter-rouge">next()</code> do).</p> </li> <li> <p>You can even can’t send(value) at the very beginning, otherwise get error: TypeError: can’t send non-None value to a just-started generator</p> </li> </ul> <h2 id="built-in-functions-for-iterators">Built-in functions for iterators</h2> <ul> <li> <p><code class="language-plaintext highlighter-rouge">map()</code> and <code class="language-plaintext highlighter-rouge">filter()</code> duplicate the features of generator expressions: <code class="language-plaintext highlighter-rouge">map(f, iterA, iterB, ...)</code> returns an iterator over the sequence <code class="language-plaintext highlighter-rouge">f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ....</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">filter(predicate, iter) </code> returns an iterator over all the sequence elements that meet a certain condition, and is similarly duplicated by list comprehensions.</p> </li> <li><code class="language-plaintext highlighter-rouge">enumerate(iter, start=0) </code> counts off the elements in the iterable returning 2-tuples containing the count (from start) and each element. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">([</span><span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]):</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">Sorted(iterable, key=None, reverse=False)</code> collects all the elements of the iterable into a list, sorts the list, and returns the sorted result. The key and reverse arguments are passed through to the constructed list’s sort() method.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">any(iter)</code> and <code class="language-plaintext highlighter-rouge">all(iter)</code> built-ins look at the truth values of an iterable’s contents. <code class="language-plaintext highlighter-rouge">any()</code> returns True if any element in the iterable is a true value, and <code class="language-plaintext highlighter-rouge">all()</code> returns True if all of the elements are true values</p> </li> <li><code class="language-plaintext highlighter-rouge">zip(iterA, iterB, ...) </code> takes one element from each iterable and returns them in a tuple</li> </ul> <h2 id="itertools-module">itertools module</h2> <p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p> <h3 id="combinatoric-iterators">Combinatoric iterators:</h3> <ol> <li><code class="language-plaintext highlighter-rouge">permutations(iterable, r=None)</code> <ul> <li>Return successive r length permutations of elements in the iterable.</li> <li>Return a iterable object, elements are tuple.</li> <li>Elements are treated as unique based on their position, not on their value. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nf">permutations</span><span class="p">(</span><span class="sh">'</span><span class="s">pro</span><span class="sh">'</span><span class="p">)])</span>
<span class="p">[(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">)]</span>
</code></pre></div> </div> </li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">product(*iterables, repeat=1)</code> Cartesian product of input iterables. What Cartesian product do is as following: <code class="language-plaintext highlighter-rouge">product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</code></li> </ol> <p>repeat parameter <code class="language-plaintext highlighter-rouge">product(A, repeat=4)</code> means the same as <code class="language-plaintext highlighter-rouge">product(A, A, A, A)</code>.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="o">--&gt;</span> <span class="mi">000</span> <span class="mi">001</span> <span class="mi">010</span> <span class="mi">011</span> <span class="mi">100</span> <span class="mi">101</span> <span class="mi">110</span> <span class="mi">111</span>
</code></pre></div></div> <p>This function is roughly equivalent to the following code, except that the actual implementation does not build up intermediate results in memory:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">pools</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="n">pool</span><span class="p">)</span> <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span> <span class="o">*</span> <span class="n">repeat</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[]]</span>
    <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">pools</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">result</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">pool</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">prod</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
        <span class="k">yield</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">prod</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Iterable"/><category term="Iterator"/><category term="Iteration"/><category term="Generator"/><category term="Python"/><summary type="html"><![CDATA[In short: Iterbale support iter() and maintain the data. Iterator support next() and reach the data.]]></summary></entry><entry><title type="html">How for loop iterate an iterable in Python</title><link href="https://benwzj.github.io/blog/2023/for-loop-Python/" rel="alternate" type="text/html" title="How for loop iterate an iterable in Python"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/for-loop-Python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/for-loop-Python/"><![CDATA[<p><strong>In short:</strong> it is a lazy processing.</p> <p>I am going to make two example to display how <em>for…in</em> loop work underneath the cover.<br/> First one is loop over a enumerate object, and second one is loop over a range object. Both of them will modify the list inside the loop.</p> <h2 id="first-example">First example:</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p><strong>There are No error raising for these codes, but they are not work as expected.</strong></p> <p>The code print below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</code></pre></div></div> <p>enumerate object is generator object which will yield value from <em>lst</em>. It is lazy process. When <em>lst</em> change, <em>value</em> from enumerate object change as well, but <em>i</em> is keep going.</p> <p><strong>for…in is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><strong>enumerate() is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h2 id="second-example">Second example:</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p><strong>This code will raise IndexError</strong></p> <p><em>range()</em> is iterable, but <em>len(lst)</em>, the parameter of <em>range()</em>, have been replace with constant value 10. Because <em>len(lst)</em> is not a lazy process. It don’t change any more. So <em>i</em> will up to 9.</p> <p><strong>The codes are equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Iteration"/><category term="Python"/><summary type="html"><![CDATA[In short: it is a lazy processing.]]></summary></entry><entry><title type="html">Bootstrap Main points</title><link href="https://benwzj.github.io/blog/2023/Bootstrap/" rel="alternate" type="text/html" title="Bootstrap Main points"/><published>2023-01-09T00:00:00+00:00</published><updated>2023-01-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Bootstrap</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Bootstrap/"><![CDATA[<h2 id="what-is-bootstrap">What is Bootstrap</h2> <p>Bootstrap is popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first websites. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins. Bootstrap is focus on the look of webpage! single page. mainly use CSS and partly use javascript for some effect. It is completely free to download and use!</p> <p>Bootstrap is Writen in HTML, CSS, Less, <strong>Sass</strong> and JS, Originally named Twitter Blueprint.</p> <p>Bootstrap 3 was released in 2013. Bootstrap 4 (released 2018) and Bootstrap 5 (released 2021).</p> <h3 id="what-bootstrap-can-do">What Bootstrap can do</h3> <p>Once Bootstrap is added to a project, it provides basic style definitions for all HTML elements. The result is a uniform appearance for prose, tables and form elements across web browsers. In addition, developers can take advantage of CSS classes defined in Bootstrap to further customize the appearance of their contents.</p> <h3 id="to-use-bootstrap-just-take-following">To use BootStrap, just take following:</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
   <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <h2 id="using-bootstrap-4">Using Bootstrap 4</h2> <p>Main points:</p> <ul> <li><strong>Containers</strong> are used to pad the content inside of them</li> <li><strong>Grid</strong> is Basic Structure</li> <li><strong>Flexbox</strong> is enabled by default in 4. In general this means a move away from <strong>floats</strong> which in 3.</li> </ul> <h3 id="bootstrap-4-rely-on-grid-system">Bootstrap 4 rely on Grid System</h3> <ul> <li>is built with flexbox.</li> <li>allows up to 12 columns across the page.</li> <li>is responsive, and the columns will re-arrange automatically depending on the screen size.</li> </ul> <h3 id="basic-structure-example">Basic Structure Example</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-*-*"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <ul> <li>first star (*) represents the responsiveness: <code class="language-plaintext highlighter-rouge">sm</code>, <code class="language-plaintext highlighter-rouge">md</code>, <code class="language-plaintext highlighter-rouge">lg</code> or <code class="language-plaintext highlighter-rouge">xl</code>,</li> <li>second star represents a number, which should add up to 12 for each row.</li> <li><code class="language-plaintext highlighter-rouge">sm</code> means small devices - screen width <code class="language-plaintext highlighter-rouge">&gt;= 576px</code> and <code class="language-plaintext highlighter-rouge">&lt; 768px</code>.</li> </ul> <h3 id="why-we-need-sm-md-lg-xl">Why we need sm, md, lg, xl?</h3> <p>This is for helping re-arrange display according to the width of screen. For example, when screen width is <code class="language-plaintext highlighter-rouge">576px</code>, it use <code class="language-plaintext highlighter-rouge">sm</code> class.</p> <p>It is good to explain what it is by examples:</p> <ul> <li>Code Example 1</li> </ul> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3"</span><span class="nt">&gt;</span>.col-sm-3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>When screen width is equal to or greater than <code class="language-plaintext highlighter-rouge">575px</code>, 4 columns in one row. When screen width is less than <code class="language-plaintext highlighter-rouge">575px</code>, it will use another class which make 4 columns stack together. If change <code class="language-plaintext highlighter-rouge">col-sm-3</code> to <code class="language-plaintext highlighter-rouge">col-lg-3</code>, then they will stack when screen width less than <code class="language-plaintext highlighter-rouge">992px</code></p> <ul> <li>Code Example 2</li> </ul> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container-fluid"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-3 col-md-6"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Lorem ipsum...<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-9 col-md-6"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Sed ut perspiciatis...<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>It will result in a 25%/75% split on small devices and a 50%/50% split on medium (and large and xlarge) devices. The class will scales up, this means if it is 50%/50% split on medium screen, then it is 50%/50% on large and xlarge, but no on small screen.</p> <h3 id="some-notes-for-bootstrap-4">Some notes for Bootstrap 4</h3> <ul> <li>Make sure that the sum adds up to 12 or fewer (it is not required that you use all 12 available columns)</li> <li><code class="language-plaintext highlighter-rouge">&lt;div class="row row-cols-2"&gt;</code> means just allow 2 columns in a row</li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="HTML"/><category term="Website"/><category term="SASS"/><category term="CSS"/><summary type="html"><![CDATA[What is Bootstrap]]></summary></entry></feed>