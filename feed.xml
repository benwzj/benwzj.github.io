<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-08T13:23:01+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">JavaScript Module</title><link href="https://benwzj.github.io/blog/2024/module-js/" rel="alternate" type="text/html" title="JavaScript Module"/><published>2024-08-07T00:00:00+00:00</published><updated>2024-08-07T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/module-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/module-js/"><![CDATA[<p>Today there are two module systems that are actively being used. CommonJS (CJS) is what Node.js has used historically. ESM (EcmaScript modules) is a newer system which has been added to the JavaScript specification. Browsers already support ES modules, and Node is adding support.</p> <h2 id="commonjs-and-esm">CommonJS and ESM</h2> <p>CommonJS was primarily intended for server-side development with Node.js. It is named ServerJS before. CommonJS’s specification of how modules should work is widely used today for <strong>server-side</strong> JavaScript with Node.js. It is also used for browser-side JavaScript, but that code must be packaged with a transpiler since browsers don’t support CommonJS.</p> <p>The other major module specification in use is the ECMAScript (ES) modules specification (ES6 modules aka ES2015 modules). CommonJS can be recognized by the use of the <code class="language-plaintext highlighter-rouge">require()</code> function and <code class="language-plaintext highlighter-rouge">module.exports</code>, while ES modules use <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code> statements for similar (though not identical) functionality.</p> <h3 id="commonjs-and-es-modules-have-different-syntax">CommonJS and ES modules have different syntax.</h3> <p>CommonJS module that exports two functions:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> 
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></div></div> <p>We can also import the public functions into another Node.js script using require, just as we do here:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./util</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 5</span>
</code></pre></div></div> <p>ES modules:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can then import both functions using the import statement:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./util.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 5</span>
</code></pre></div></div> <h3 id="commonjs-vs-ecmascript-modules">CommonJS vs ECMAScript modules</h3> <ul> <li>Node.js support for ES modules too.</li> <li>CommonJS offers flexibility with module imports.</li> <li>CommonJS loads modules synchronously, ES modules are asynchronous.</li> <li>All in all, ECMAScript modules are the future of JavaScript.</li> </ul> <h2 id="ecmascript-modules-syntax">ECMAScript modules Syntax</h2> <h3 id="export">Export</h3> <p>After the <code class="language-plaintext highlighter-rouge">export</code> keyword, you can use <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code>, and <code class="language-plaintext highlighter-rouge">var</code> declarations, as well as <code class="language-plaintext highlighter-rouge">function</code> or <code class="language-plaintext highlighter-rouge">class</code> declarations. You can also use the <code class="language-plaintext highlighter-rouge">export { name1, name2 }</code> syntax to export a list of names declared elsewhere.</p> <blockquote> <p>Note that <code class="language-plaintext highlighter-rouge">export {}</code> does not export an empty object — it’s a no-op declaration that exports nothing (an empty name list).</p> </blockquote> <p>JS have default export and named export. JS have <code class="language-plaintext highlighter-rouge">export from</code> syntax as well.</p> <h4 id="default-exports">Default exports</h4> <p>Default export is used to export a single value as the default value for a module. This value can be a variable, function, class, or any other JavaScript entity. When importing a default export, you can assign it any name you want in the importing module.</p> <p>Example:</p> <pre><code class="language-JS">// moduleA.js
const myDefault = 'Default Value';
export default myDefault;

// moduleB.js
import myAlias from './moduleC';
</code></pre> <h4 id="named-exports">Named exports</h4> <p>Named exports allow you to export multiple values from a module and give each of them a specific name. You can import these values by using their respective names when importing in another module.</p> <p>Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleC.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Foo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// function implementation</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">foobar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">FooBar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="p">{</span><span class="nx">foobar</span><span class="p">};</span>

<span class="c1">// moduleD.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">foobar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./moduleA</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <h4 id="mix-them">Mix them</h4> <p>you can mix both named and default exports in the same module:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleE.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">namedExport</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Named Export</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">defaultExport</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Default Export</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">defaultExport</span><span class="p">;</span>

<span class="c1">// moduleF.js</span>
<span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="p">{</span> <span class="nx">namedExport</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./moduleE</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>More info at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">here</a>.</p> </blockquote> <h3 id="import">Import</h3> <p>The static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.</p> <p>There are four forms of import declarations:</p> <ul> <li>Named import: <code class="language-plaintext highlighter-rouge">import { export1, export2 } from "module-name";</code></li> <li>Default import: <code class="language-plaintext highlighter-rouge">import defaultExport from "module-name";</code></li> <li>Namespace import: <code class="language-plaintext highlighter-rouge">import * as name from "module-name";</code></li> <li>Side effect import: <code class="language-plaintext highlighter-rouge">import "module-name";</code></li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">myModule</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// or</span>
<span class="k">import</span> <span class="p">{</span> <span class="k">default</span> <span class="nx">as</span> <span class="nx">myDefault</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// or</span>
<span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <h2 id="deep-dive-module">Deep dive module</h2> <h3 id="what-problem-do-modules-solve">What problem do modules solve</h3> <p>When you think about it, coding in JavaScript is all about managing variables. It’s all about assigning values to variables, or adding numbers to variables, or combining two variables together and putting them into another variable.</p> <p>Because so much of your code is just about changing variables, how you organize these variables is going to have a big impact on how well you can code and how well you can maintain that code.</p> <p>Having just a few variables to think about at one time makes things easier.</p> <p>JavaScript has a way of helping you do this, called scope. It also has a downside, though. It does make it hard to share variables between different functions. The common way to handle this is to put it on a scope above you, for example, on the global scope. This makes maintaining code tricky. And because these variables are on the global scope, every part of the code that’s inside of that global scope can change the variable.</p> <h3 id="how-do-modules-help">How do modules help</h3> <p>Modules give you a better way to organize these variables and functions. With modules, you group the variables and functions that make sense to go together. But unlike function scopes, module scopes have a way of making their variables available to other modules as well.</p> <p>When something is made available to other modules, it’s called an export. Once you have an export, other modules can explicitly say that they depend on that variable, class or function.</p> <p>Once you have the ability to export and import variables between modules, it makes it a lot easier to break up your code into small chunks that can work independently of each other.</p> <h3 id="how-es-modules-work">How ES modules work</h3> <p>When you’re developing with modules, you build up a graph of dependencies. The connections between different dependencies come from any import statements that you use.</p> <h2 id="references">References</h2> <ul> <li><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/">es-modules-a-cartoon deep dive</a></li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><category term="CommonJS"/><summary type="html"><![CDATA[Today there are two module systems that are actively being used. CommonJS (CJS) is what Node.js has used historically. ESM (EcmaScript modules) is a newer system which has been added to the JavaScript specification. Browsers already support ES modules, and Node is adding support.]]></summary></entry><entry><title type="html">Router in React</title><link href="https://benwzj.github.io/blog/2024/react-router/" rel="alternate" type="text/html" title="Router in React"/><published>2024-07-25T00:00:00+00:00</published><updated>2024-07-25T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/react-router</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/react-router/"><![CDATA[<h2 id="overview">Overview</h2> <p>Routing is the skeleton of every web application. Many React framework come with router, like Next.js. If you are using Create React App, It doesn’t include page routing. React Router is the most popular solution. Nowaday, Using React framework is a popular way to write React app. So React Router create their framework as well. It is called Remix.</p> <p>You can write your own Router if your appllication is small and simple.</p> <h2 id="write-your-own-router">Write your own Router</h2> <p>Basic ideas are:</p> <ul> <li>using <code class="language-plaintext highlighter-rouge">Context</code>.</li> <li>Using APIs: <code class="language-plaintext highlighter-rouge">window.location.pathname</code>, <code class="language-plaintext highlighter-rouge">window.addEventListener('popstate', handler)</code>, <code class="language-plaintext highlighter-rouge">window.removeEventListener('popstate', handler);</code>, <code class="language-plaintext highlighter-rouge">window.history.pushState({}, '', to);</code></li> <li>Create a Context and wrap all components in the application inside <code class="language-plaintext highlighter-rouge">Context.Provider</code>.</li> <li>This Context value like this <code class="language-plaintext highlighter-rouge">{ currentPath, navigate }</code>. Marking down current path and provide function <code class="language-plaintext highlighter-rouge">navigate</code> to route to next URL.</li> </ul> <h2 id="react-router">React Router</h2> <h3 id="what-is-react-router">What is React Router</h3> <p>React Router is a collection of navigational components within your application. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps the UI in sync with the URL.</p> <h3 id="whyt-react-router-popular-in-the-past">Whyt React Router popular in the past?</h3> <p>In the past, Create React App (CRA) was the simplest way to bootstrap a React application. It handled and hid the complexity of setting up webpack and Babel, and when new features were added to React, <code class="language-plaintext highlighter-rouge">react-scripts</code> supported them from the beginning.</p> <p>However, CRA didn’t provide a router, a data fetching solution, or any of the features listed above. That wasn’t the purpose of CRA. It was a simple React app starter that allowed you to use whatever libraries from the React ecosystem you liked. Many projects bootstrapped with CRA use React Router for routing, which means there are a large number of “CRA apps” that are also “React Router apps”.</p> <h3 id="how-about-now">How about now</h3> <p>These days CRA is no longer a recommended way to create React applications. And the React docs don’t even recommend using it.</p> <p>At the same time, Vite has risen substantially in popularity, offering a fast dev experience, optimized builds, and a rich plugin ecosystem and authoring experience.</p> <p>Now The React Router team create a React Framework call Remix. You can even think <code class="language-plaintext highlighter-rouge">Remix = React Router + Vite</code>.</p> <h3 id="the-react-router-package">The React Router package</h3> <p>The <code class="language-plaintext highlighter-rouge">react-router</code> package is the heart of React Router and provides all the core functionality for both <code class="language-plaintext highlighter-rouge">react-router-dom</code> and <code class="language-plaintext highlighter-rouge">react-router-native</code>.</p> <h3 id="basic-usage">Basic Usage</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">BrowserRouter</span> <span class="nx">as</span> <span class="nx">Router</span><span class="p">,</span>
    <span class="nx">Routes</span><span class="p">,</span>
    <span class="nx">Route</span><span class="p">,</span>
    <span class="nx">Link</span><span class="p">,</span>
    <span class="nx">useNavigate</span><span class="p">,</span>
    <span class="nx">Outlet</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Home</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span>
                 <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Go</span> <span class="nx">to</span> <span class="nx">Contact</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">About</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">About</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">nav</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">team</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Our</span> <span class="nx">Team</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">company</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Our</span> <span class="nx">Company</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Outlet</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Contact</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Contact</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">const</span> <span class="nx">Team</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Team</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">const</span> <span class="nx">Company</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Company</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">nav</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Home</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">About</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Contact</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">About</span> <span class="o">/&gt;</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">team</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Team</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">company</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Company</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/Route</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Contact</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://reactrouter.com/">React Router website</a></li> <li><a href="https://remix.run/">Remix</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Router"/><category term="Remix"/><category term="Next.js"/><category term="Vite"/><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Kotlin Introduce</title><link href="https://benwzj.github.io/blog/2024/kotlin/" rel="alternate" type="text/html" title="Kotlin Introduce"/><published>2024-07-09T00:00:00+00:00</published><updated>2024-07-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/kotlin</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/kotlin/"><![CDATA[<h2 id="packages-and-imports">Packages and imports</h2> <p>A source file should start with a package declaration:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">org.example</span>

<span class="k">fun</span> <span class="nf">printMessage</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span>
<span class="kd">class</span> <span class="nc">Message</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span>
</code></pre></div></div> <p>All the contents, such as classes and functions, of the source file are included in this package. So, in the example above, the full name of printMessage() is <code class="language-plaintext highlighter-rouge">org.example.printMessage</code>, and the full name of Message is <code class="language-plaintext highlighter-rouge">org.example.Message</code>.</p> <ul> <li>A number of packages are imported into every Kotlin file by default.</li> <li>Apart from the default imports, each file may contain its own import directives.</li> </ul> <h2 id="classes">Classes</h2> <ul> <li>A class in Kotlin has a primary constructor and possibly one or more secondary constructors.</li> <li>If the primary constructor does not have any annotations or visibility modifiers, the constructor keyword can be omitted.</li> <li>Kotlin does not have a <code class="language-plaintext highlighter-rouge">new</code> keyword.</li> <li>Class members: <ul> <li>Constructors and initializer blocks</li> <li>Functions;</li> <li>Properties</li> <li>Nested and inner classes</li> <li>Object declarations</li> </ul> </li> </ul> <h3 id="abstract-class">Abstract Class</h3> <ul> <li>Abstract classes may or may not contain abstract methods.</li> <li>Abstract classes cannot be instantiated.</li> <li>To use an abstract class, you have to inherit it from another class, provide implementations to the abstract methods in it.</li> <li>If you inherit an abstract class, you have to provide implementations to all the abstract methods in it.</li> </ul> <h3 id="interfaces">Interfaces</h3> <p>Interfaces in Kotlin can contain declarations of abstract methods, as well as method implementations.</p> <h4 id="interfaces-vs-abstract-class">Interfaces vs Abstract Class</h4> <p>What makes them different from abstract classes is that interfaces cannot store state. They can have properties, but these need to be abstract or provide accessor implementations.</p> <h4 id="functional-sam-interfaces">Functional (SAM) interfaces</h4> <p>An interface with only one abstract method is called a functional interface, or a Single Abstract Method (SAM) interface. The functional interface can have several non-abstract members but only one abstract member.</p> <h2 id="object">Object</h2> <h3 id="object-expressions">Object expressions</h3> <p>Such classes are useful for one-time use. Object expressions start with the object keyword.</p> <h2 id="functions">Functions</h2> <ul> <li>Infix notation: <code class="language-plaintext highlighter-rouge">infix fun Int.shl(x: Int): Int { ... }</code>, calling the function using the infix notation: <code class="language-plaintext highlighter-rouge">1 shl 2</code></li> <li>Local functions: Kotlin supports local functions, which are functions inside other functions.</li> <li>Member functions: A member function is a function that is defined inside a class or object.</li> <li>Generic functions: Functions can have generic parameters, which are specified using angle brackets before the function name: <code class="language-plaintext highlighter-rouge">fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; { /*...*/ }</code></li> <li>Single-expression function: <code class="language-plaintext highlighter-rouge">fun double(x: Int): Int = x * 2</code>.</li> <li>Higher-order functions: a function that takes functions as parameters, or returns a function. A good examplevis the functional programming idiom <code class="language-plaintext highlighter-rouge">fold</code> for collections. (it is similar to <code class="language-plaintext highlighter-rouge">reduce()</code> in JS)</li> <li>Function types: Kotlin uses function types, such as <code class="language-plaintext highlighter-rouge">(Int) -&gt; String</code>.</li> <li>A lambda expression: <code class="language-plaintext highlighter-rouge">{ a, b -&gt; a + b }</code>.</li> <li>An anonymous function: <code class="language-plaintext highlighter-rouge">fun(s: String): Int { return s.toIntOrNull() ?: 0 }</code>.</li> <li>Function literals: Lambda expressions and anonymous functions are function literals. They are functions that are not declared but are passed immediately as an expression.</li> <li>Function literals with receiver: Function types with receiver, such as <code class="language-plaintext highlighter-rouge">A.(B) -&gt; C,</code> can be instantiated with a special form of function literals.</li> </ul> <h3 id="lambda">lambda</h3>]]></content><author><name></name></author><category term="Kotlin"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[Packages and imports]]></summary></entry><entry><title type="html">Kotlin Annotation</title><link href="https://benwzj.github.io/blog/2024/kotlin-annotation/" rel="alternate" type="text/html" title="Kotlin Annotation"/><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/kotlin-annotation</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/kotlin-annotation/"><![CDATA[<h2 id="what-is-annotations">What is Annotations</h2> <p>Annotations are means of attaching metadata to code.</p> <p>Annotations are a form of metadata that provide data about the program but are not part of the program itself. Annotations have <strong>no direct effect on the operation</strong> of the code they annotate. Instead, they are used by the compiler and various tools during the build process, and can also be accessed at runtime through reflection. Kotlin annotations can be applied to classes, functions, properties, property accessors, parameters, and constructors.</p> <p>Kotlin comes with a set of built-in annotations. You can define your own custom annotations.</p> <p>There are three main mechanisms that handle annotations:</p> <ul> <li>annotation processing,</li> <li>reflection, and</li> <li>lint.</li> </ul> <h3 id="purposes">Purposes</h3> <p>Annotations can be used for a wide range of purposes, from marking code as deprecated, to influencing how data is serialized, or even modifying the behavior of frameworks and libraries.</p> <ul> <li>influencing the compiler’s behavior</li> <li>guiding the use of frameworks or libraries</li> <li>providing metadata for runtime reflection</li> <li>enforcing coding standards</li> </ul> <h3 id="built-in-annotations">Built-in Annotations</h3> <p>Kotlin, like Java, comes with a set of built-in annotations. One commonly used annotation is <code class="language-plaintext highlighter-rouge">@Deprecated</code>, which marks a program element as deprecated. For example:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Deprecated</span><span class="p">(</span><span class="s">"This function will be removed in future releases."</span><span class="p">)</span>
<span class="k">fun</span> <span class="nf">oldFunction</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div> <h3 id="declaring-an-custom-annotation">Declaring an custom Annotation</h3> <p>To declare an annotation, put the annotation modifier in front of a class:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Fancy</span>
</code></pre></div></div> <h3 id="using-annotations">Using Annotations</h3> <p>Once declared, this annotation can be used to annotate various program elements. For example:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Fancy</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span> <span class="p">}</span>
<span class="nd">@Fancy</span> <span class="k">fun</span> <span class="nf">myFunction</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div> <h3 id="features">Features</h3> <ul> <li>Support Annotation Parameters</li> <li>Java Interoperability</li> <li>Enhancing Code Readability and Maintainability: It better then comment in some circumstance, because it can, for example influencing the compiler’s behavior.</li> <li>Enforcing Coding Conventions and Safety, either at compile-time or runtime.</li> <li>Integration with Frameworks and Libraries: Many frameworks and libraries leverage annotations to allow developers to configure behavior or integrate custom logic seamlessly. By creating custom annotations, developers can extend these frameworks in powerful and flexible ways.</li> <li>Simplifying Configuration.</li> </ul> <h2 id="example">Example</h2> <h3 id="specify-annotation-targets">Specify Annotation Targets</h3> <p>By default, a Kotlin annotation can be used on any declaration. However, you might want to restrict your annotation to certain types of declarations (e.g., functions, classes, properties). You can do this using the <code class="language-plaintext highlighter-rouge">@Target</code> meta-annotation.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="p">(</span><span class="nc">AnnotationTarget</span><span class="p">.</span><span class="nc">FUNCTION</span><span class="p">,</span> <span class="nc">AnnotationTarget</span><span class="p">.</span><span class="nc">CLASS</span><span class="p">)</span>
<span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Loggable</span>
</code></pre></div></div> <p>In this example, <code class="language-plaintext highlighter-rouge">@Loggable</code> can only be applied to functions and classes.</p> <h3 id="add-parameters-to-your-annotation">Add Parameters to Your Annotation</h3> <p>Annotations can have parameters to allow for more flexible and detailed configuration. Parameters are declared in the primary constructor of the annotation class.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Loggable</span><span class="p">(</span><span class="kd">val</span> <span class="py">level</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"INFO"</span><span class="p">)</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">@Loggable</code> includes an optional level parameter that specifies the logging level, with a default value of “INFO”.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Loggable</span><span class="p">(</span><span class="n">level</span> <span class="p">=</span> <span class="s">"DEBUG"</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">UserService</span>
</code></pre></div></div> <h3 id="retention-policy">Retention Policy</h3> <p>The retention policy of an annotation determines at which point the annotation is discarded during the compilation and execution of your program. Both Kotlin and Java support three types of retention policies:</p> <p>Source: The annotation is only available in the source code and is discarded by the compiler. Binary: The annotation is retained in the compiled class files but not available at runtime. Runtime: The annotation is available at runtime through reflection. In Kotlin, you specify the retention policy using the @Retention annotation:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="p">(</span><span class="nc">AnnotationRetention</span><span class="p">.</span><span class="nc">SOURCE</span><span class="p">)</span>
<span class="k">annotation</span> <span class="kd">class</span> <span class="nc">DebugLog</span>
</code></pre></div></div> <p>This @DebugLog annotation is only available in the source code, making it useful for annotations that are intended to be processed by tools that analyze the source code.</p> <h3 id="use-reflection">use reflection</h3> <p>Reflection: read annotations at runtime. To check if a function is annotated with @Loggable and print a message accordingly, you might use reflection like this:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">checkLoggable</span><span class="p">(</span><span class="n">function</span><span class="p">:</span> <span class="nc">KFunction</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="n">function</span><span class="p">.</span><span class="n">findAnnotation</span><span class="p">&lt;</span><span class="nc">Loggable</span><span class="p">&gt;()</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Function ${function.name} is loggable with level ${it.level}."</span><span class="p">)</span> 
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="c1">// Usage</span>
<span class="nf">checkLoggable</span><span class="p">(</span><span class="o">::</span><span class="n">updateUser</span><span class="p">)</span>
</code></pre></div></div> <h2 id="annotation-processing">Annotation Processing</h2> <p>Annotation processors are compiler plugins that generate code based on annotations at compile time. You know a third-party library includes an annotation processor when it requires using <code class="language-plaintext highlighter-rouge">annotationProcessor</code>, <code class="language-plaintext highlighter-rouge">kapt</code> or <code class="language-plaintext highlighter-rouge">ksp</code> instead of implementation as its build.gradle dependency configuration. Popular libraries that rely on annotation processing include Dagger (<code class="language-plaintext highlighter-rouge">@Provides</code>, <code class="language-plaintext highlighter-rouge">@Inject</code>), Moshi (<code class="language-plaintext highlighter-rouge">@Json</code>), and Room (<code class="language-plaintext highlighter-rouge">@Entity</code>, <code class="language-plaintext highlighter-rouge">@Dao</code>).</p> <p>An annotation processor must be registered to the compiler for it to run during compilation. The most common way to register one is via Google’s AutoService library — just annotate your processor with <code class="language-plaintext highlighter-rouge">@AutoService(Processor.class)</code>.</p> <h2 id="references">References</h2> <ul> <li><a href="https://kotlinlang.org/docs/annotations.html">annotation official doc</a></li> </ul>]]></content><author><name></name></author><category term="Android"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[What is Annotations]]></summary></entry><entry><title type="html">Jetpack Compose Overview</title><link href="https://benwzj.github.io/blog/2024/jetpack-compose/" rel="alternate" type="text/html" title="Jetpack Compose Overview"/><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/jetpack-compose</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/jetpack-compose/"><![CDATA[<h2 id="what-is-jetpack-compose">What is Jetpack Compose</h2> <p>XML has been a staple in Android development since the early days. Jetpack Compose represents a paradigm shift in Android UI development. The first preview of Jetpack Compose was announced in May 2019, and the framework was made ready for production in July 2021.</p> <ul> <li>Jetpack Compose is Android’s recommended modern toolkit for building native <strong>UI</strong>.</li> <li>You can think Jetpack Compose do the same job as React.js. It is declarative, update View according states, etc.</li> <li>You won’t be editing any XML layouts or using the Layout Editor.</li> <li>You will call composable functions to define what elements you want, and the Compose compiler will do the rest.</li> <li>In Jetpack compose you write declarative code that describes how data should be displayed as UI.</li> </ul> <h2 id="composable-functions">Composable functions</h2> <p>Jetpack Compose is built around composable functions. These functions let you define your app’s UI programmatically by describing how it should look and providing data dependencies, rather than focusing on the process of the UI’s construction (initializing an element, attaching it to a parent, etc.).</p> <p>To create a composable function, just add the <code class="language-plaintext highlighter-rouge">@Composable</code> annotation to the function name. The annotation tells the Kotlin compiler that this function is used by Jetpack Compose to convert data into UI.</p> <p>Composable functions are the building blocks of UI in Compose. This encouraging you to break your UI into a library of reusable elements.</p> <h3 id="hello-world-example">Hello World example</h3> <p>Create a new project: In The <code class="language-plaintext highlighter-rouge">MainActivity.kt</code> file</p> <ul> <li>Notice there are some automatically generated functions in this code, specifically the <code class="language-plaintext highlighter-rouge">onCreate()</code> and the <code class="language-plaintext highlighter-rouge">setContent()</code> functions.</li> <li>The <code class="language-plaintext highlighter-rouge">onCreate()</code> function is the entry point to this Android app and calls other functions to build the user interface.</li> <li>The <code class="language-plaintext highlighter-rouge">setContent()</code> function within the <code class="language-plaintext highlighter-rouge">onCreate()</code> function is used to define your layout through composable functions. All functions marked with the <code class="language-plaintext highlighter-rouge">@Composable</code> annotation can be called from the <code class="language-plaintext highlighter-rouge">setContent()</code> function or from other Composable functions.</li> </ul> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContent</span> <span class="p">{</span>
            <span class="nc">MessageCard</span><span class="p">(</span><span class="s">"Android"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">MessageCard</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Hello $name!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="basic-staff">Basic staff</h3> <ul> <li><code class="language-plaintext highlighter-rouge">mutableStateOf(value)</code> creates a <code class="language-plaintext highlighter-rouge">MutableState</code>, which is an observable type in Compose. Any changes to its value will schedule recomposition of any composable functions that read that value.</li> <li><code class="language-plaintext highlighter-rouge">remember</code> stores objects in the composition, and forgets the object when the composable that called <code class="language-plaintext highlighter-rouge">remember</code> is removed from the composition.</li> <li><code class="language-plaintext highlighter-rouge">rememberSaveable</code> retains the state across configuration changes by saving it in a Bundle.</li> </ul> <h3 id="recomposition">Recomposition</h3> <p>In an imperative UI model, to change a widget, you call a setter on the widget to change its internal state. In Compose, you call the composable function again with new data. Doing so causes the function to be recomposed–the widgets emitted by the function are redrawn, if necessary, with new data. The Compose framework can intelligently recompose only the components that changed.</p> <h3 id="composable-functions-just-like-react-components">Composable functions Just like React components</h3> <ul> <li>Composable functions can execute in any order</li> <li>Composable functions can run in parallel</li> <li>Recomposition skips as much as possible</li> <li>Recomposition is optimistic</li> <li>Composable functions might run quite frequently</li> </ul> <h2 id="layout">Layout</h2> <p>Constraints and Modifiers are keys to understand Compose Layout.</p> <h3 id="three-phases-in-compose">Three Phases in Compose</h3> <p>There are three phases in the process of transforming data into UI:</p> <ul> <li><strong>composition</strong>(What to Show): transforme composable functions into a UI tree.</li> <li><strong>layout</strong>(Where to Show): use this UI tree as input, the collection of layout nodes contain all the information needed to eventually decide on each node’s size and location in 2D space. during the layout phase the tree is reversed using the following three-step algorithm: <ul> <li>first a node <strong>measures</strong> its children if any and</li> <li>then based on those measurements it <strong>decides</strong> on its own size and,</li> <li>finally it <strong>places</strong> its children relative to its own position. At the end of the phase each layout note will have an assigned width and height and an x y coordinate of where it should be drawn. each node only visited once.</li> </ul> </li> <li><strong>drawing</strong>(How to Show): now we know the sizes and XY coordinates of all of our layout nodes. the tree is traversed again from top to bottom and each node draws itself on the screen.</li> </ul> <p>We are focus on Layout here.</p> <h3 id="how-to-use-modifier">How to use Modifier</h3> <p>We can chain multiple modifiers, like <code class="language-plaintext highlighter-rouge">Modifier.clip(CircleShape).size(40.dp),</code>. Each modifier node wraps the rest of the chain and the layout node Within. For example when we chain a clip in a size modifier, the clip modifier node wraps the size modifier node which then wraps the image layout node in the layout phase:</p> <figure> <picture> <img src="/assets/img/android-modifier.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="understand-constraints">Understand Constraints</h3> <p>Modifier will decide the positin, size, etc for the node. And Jetpack compose use ‘Constraints’ which come from parent’s node to layout nodes. that means Modifier and Constraint will work together to layout nodes. The Constraint can affect the size of composables, and Modifier(depend on which modifier) affect the Constraints.</p> <h3 id="how-constraint-affect-modifier">How Constraint affect Modifier?</h3> <ul> <li>For example, the passing in constraint is <code class="language-plaintext highlighter-rouge">w:0-300; h:0-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(50)</code>, then the modifier pass constraint <code class="language-plaintext highlighter-rouge">w:50; h:50</code> to next node.</li> <li>The passing in constraint is <code class="language-plaintext highlighter-rouge">w:0-300; h:0-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(500)</code>, then the modifier will adapt to constriant to be <code class="language-plaintext highlighter-rouge">w:300; h:400</code>.</li> <li>If the passing in constraint is <code class="language-plaintext highlighter-rouge">w:50-300; h:50-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(40)</code>, modifier will adapt to constriant to be <code class="language-plaintext highlighter-rouge">w:50; h:50</code>.</li> <li>If you don’t want node adhere to passing in constraint, you can use <code class="language-plaintext highlighter-rouge">requiredSize()</code>.</li> <li><code class="language-plaintext highlighter-rouge">fillMaxSize()</code> will pass constraint <code class="language-plaintext highlighter-rouge">w:300; h:400</code> in.</li> <li><code class="language-plaintext highlighter-rouge">wrapContentSize()</code> will reset the minium constraint. And also can put it’s child to the center.</li> </ul> <h3 id="how-modifier-adapt-constraint">How Modifier adapt constraint?</h3> <p>After the node get size, location etc, then it will pass the size, etc. back up the tree. The parent will decide the final size and location. Following is a good way to understand the interaction between modifier and contraint:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Image</span><span class="p">(</span>
    <span class="nf">painterResource</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">hero</span><span class="p">),</span>
    <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
    <span class="nc">Modifier</span>
        <span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="nc">CircleShape</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div> <figure> <picture> <img src="/assets/img/jetpack-compose-modifier-constraint.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Here is the process:</p> <ul> <li>The clip modifier does not change the constraints.</li> <li>The padding modifier lowers the maximum constraints.</li> <li>The size modifier sets all constraints to 100dp.</li> <li>The Image adheres to those constraints and reports a size of 100 by 100dp.</li> <li>The padding modifier adds 10dp on all sizes, so it increases the reported width and height by 20dp.</li> <li>Now in the drawing phase, the clip modifier acts on a canvas of 120 by 120dp. So, it creates a circle mask of that size.</li> <li>The padding modifier then insets its content by 10dp on all sizes, so it lowers the canvas size to 100 by 100dp.</li> <li>The Image is drawn in that canvas. The image is clipped based on the original circle of 120dp, so the output is a non-round result.</li> </ul> <h2 id="material-design">Material Design</h2> <p>Compose is built to support Material Design principles. Many of its UI elements implement Material Design out of the box.</p> <h3 id="how-to-use">How to use</h3> <p>Jetpack Compose provides an implementation of Material Design 3 and its UI elements out of the box.</p> <blockquote> <p>Note: the Empty Compose Activity template generates a default theme for your project that allows you to customize MaterialTheme.</p> </blockquote> <p>For example, improving the appearance of <code class="language-plaintext highlighter-rouge">MessageCard</code> composable using Material Design styling.</p> <ol> <li>To start, wrap the <code class="language-plaintext highlighter-rouge">MessageCard</code> function with the Material theme created in your project, <code class="language-plaintext highlighter-rouge">YourProjectTheme</code>, as well as a <code class="language-plaintext highlighter-rouge">Surface</code>.</li> <li>Material Design is built around three pillars: Color, Typography, and Shape. You will add them one by one. <ul> <li>Color: Use MaterialTheme.colorScheme to style with colors from the wrapped theme.</li> <li>Typography: Material Typography styles are available in the MaterialTheme, just add them to the Text composables.</li> </ul> </li> </ol> <h2 id="faq">FAQ</h2> <ul> <li>Why not use HTML, CSS and JavaScript for UI?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://developer.android.com/">android developer website</a></li> <li><a href="https://developer.android.com/develop/ui/compose/layouts/constraints-modifiers">constraints and modifiers order</a></li> </ul>]]></content><author><name></name></author><category term="Android"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[What is Jetpack Compose]]></summary></entry><entry><title type="html">Auth Concepts Overview</title><link href="https://benwzj.github.io/blog/2024/all-about-auth/" rel="alternate" type="text/html" title="Auth Concepts Overview"/><published>2024-06-15T00:00:00+00:00</published><updated>2024-06-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/all-about-auth</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/all-about-auth/"><![CDATA[<p>Try to clear the main Auth concepts from higher perspective.</p> <h2 id="term-overview">Term Overview</h2> <h3 id="oauth-vs-openid-vs-oidc">OAuth vs OpenID vs OIDC</h3> <ul> <li>OpenID is based on a simple idea: a user authenticates with an identity provider (IDP), who then provides the user with a <strong>unique identifier</strong> (called an OpenID). This identifier can then be used to authenticate the user with any website that supports OpenID.</li> <li>OAuth(Open Authorization), Originally designed to for applications to get access to APIs. grants access to Other resources via <strong>Access Tokens</strong>.</li> <li>OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.0 framework. It allows third-party applications to verify the identity of the end-user and to obtain basic user profile information. OIDC uses JWTs, which you can obtain using flows conforming to the OAuth 2.0 specifications. Simply saying, it adds an <strong>additional token</strong> called <strong>ID Token</strong>.</li> </ul> <h4 id="anology">Anology</h4> <p>Let’s understand that like this: a Guest check at a hotel reception with ID card, then reception give him a digit key which can unlock a hotel room, or visit gym, swiming pool, etc. Hotel room lock just accept the key and don’t care who use it. Guest is User, Reception is OpenID IDP(Authentication), digit card is Access token. Now, there is a apecial service, kid care, which need digit key, and User information to show up as well. OAuth can do nothing about this, but OIDC can do it!</p> <h3 id="oidc-and-jwt">OIDC and JWT</h3> <p>Each time you need to log in to a website using OIDC, you are redirected to your OpenID site where you log in, and then taken back to the website. For example, if you chose to sign in to Auth0 using your Google account then you used OIDC. Once you successfully authenticate with Google and authorize Auth0 to access your information, Google sends information back to Auth0 about the user and the authentication performed. This information is returned in a JWT. You’ll receive an access token and if requested, an ID token.</p> <p>The OIDC specification defines a set of standard claims for JWT. The set of standard claims include name, email, gender, birth date, and so on. However, if you want to capture information about a user and there currently isn’t a standard claim that best reflects this piece of information, you can create custom claims and add them to your tokens.</p> <h3 id="how-is-oidc-different-from-openid20">How is OIDC different from OpenID2.0?</h3> <p>OIDC has many architectural similarities to OpenID 2.0, and in fact the protocols solve a very similar set of problems. However, OpenID 2.0 used <strong>XML</strong> and a custom message signature scheme that in practice sometimes proved difficult for developers to get right, with the effect that OpenID 2.0 implementations would sometimes mysteriously refuse to interoperate. OAuth 2.0, the substrate for OpenID Connect, outsources the necessary encryption to the Web’s built-in TLS (also called HTTPS or SSL) infrastructure, which is universally implemented on both client and server platforms. OpenID Connect uses standard <strong>JWT</strong> data structures when signatures are required. This makes OpenID Connect dramatically easier for developers to implement, and in practice has resulted in much better interoperability.</p> <h3 id="more-concrete-way-to-understand-the-concepts">More concrete way to understand the concepts</h3> <ul> <li>Authentication = Identifying user</li> <li>Authorization = Accessing APIs</li> </ul> <h2 id="jwt-overview">JWT Overview</h2> <p>JSON Web Token (JWT) defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally <strong>signed</strong>.</p> <ul> <li>JWTs can be <strong>signed</strong> using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.</li> <li>Although JWT can be encrypted to also provide secrecy between parties, It will focus on <strong>signed</strong> tokens.</li> <li>Because most of JWTS are not encrypted, you can read them.</li> <li>It need to be used with HTTPS connection.</li> </ul> <h3 id="two-common-usage-scenarios">TWO common usage scenarios</h3> <ul> <li><strong>Authorization</strong>: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.</li> <li><strong>Information Exchange</strong>: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed — for example, using public/private key pairs — you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn’t been tampered with.</li> </ul> <h3 id="jwt-structure">JWT structure</h3> <p>Three parts separated by dots (.), which are:</p> <ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Like this:</p> <figure> <picture> <img src="/assets/img/encoded-jwt3.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Header and Payload are just plain text that get encoded, but not encrypted. So everyone can read them. JWT just focus on signed.</p> <h3 id="client-sidestateless-sessions">Client-side/Stateless Sessions</h3> <p>The so-called stateless sessions are in fact nothing more than client-side data. Most of the time sessions need only be signed. In other words, there is no security or privacy concern when data stored in them is read by third parties. client-side data can be suffered Security attack like, Signature Stripping, CSRF, XSS. Use JWT propertly can protect. For example adding CSRF mitigation techniques. Sometime a certain balance between client-side data and database lookups in the backend is necessary.</p> <h3 id="one-concrete-example">One Concrete Example</h3> <p>Here copy a example to show how to use JWT.</p> <p>For example we will make a simple shopping application. The user’s shopping cart will be stored client-side. In this example, there are multiple JWTs present. Our shopping cart will be one of them.</p> <ul> <li>One JWT for the ID token, a token that carries the user’s profile information, useful for the UI.</li> <li>One JWT for interacting with the API backend (the access token).</li> <li>One JWT for our client-side state: the shopping cart. Here’s how the shopping cart looks when decoded: <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="mi">4</span><span class="w">
  </span><span class="p">],</span><span class="w">
</span><span class="nl">"iat"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493139659</span><span class="p">,</span><span class="w">
</span><span class="nl">"exp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493143259</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> <p>Each item is identified by a numeric ID. The encoded and signed JWT looks like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpdGVtcyI6WzAsMiw0XSwiaWF0IjoxNDkzMTM5NjU5LCJleHAiOjE0OTMxNDMyNTl9.
932ZxtZzy1qhLXs932hd04J58Ihbg5_g_rIrj-Z16Js
</code></pre></div> </div> <p>To render the items in the cart, the frontend only needs to retrieve it from its cookie:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">populateCart</span><span class="p">()</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">cartElem</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cart</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">cartElem</span><span class="p">.</span><span class="nf">empty</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">cartToken</span> <span class="o">=</span> <span class="nx">Cookies</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cartToken</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">cart</span> <span class="o">=</span> <span class="nf">jwt_decode</span><span class="p">(</span><span class="nx">cartToken</span><span class="p">).</span><span class="nx">items</span><span class="p">;</span>
<span class="nx">cart</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">itemId</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">itemId</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">cartElem</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s2">`&lt;li&gt;</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">);</span>
<span class="p">});</span>
<span class="p">}</span>
</code></pre></div> </div> <p>The actual checks are performed by the backend. All JWTs are verified. Here is the backend check for the validity of the cart JWT implemented as an Express middleware:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cartValidator</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">items</span><span class="p">:</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">verify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
      <span class="nx">cartVerifyJwtOptions</span><span class="p">).</span><span class="nx">items</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> </div> <p>When items are added, the backend constructs a new JWT with the new item in it and a new signature:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected/add_item</span><span class="dl">'</span><span class="p">,</span> <span class="nx">idValidator</span><span class="p">,</span> <span class="nx">cartValidator</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nf">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">newCart</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
<span class="nx">cartSignJwtOptions</span><span class="p">);</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">,</span> <span class="nx">newCart</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Item ID </span><span class="p">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2"> added to cart.`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> <p>Note that locations prefixed by /protected are also protected by the API access token. This is setup using express-jwt:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span> <span class="nf">expressJwt</span><span class="p">({</span>
<span class="na">secret</span><span class="p">:</span> <span class="nx">jwksClient</span><span class="p">.</span><span class="nf">expressJwtSecret</span><span class="p">(</span><span class="nx">jwksOpts</span><span class="p">),</span>
<span class="na">issuer</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_ISSUER</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_AUDIENCE</span><span class="p">,</span>
<span class="na">requestProperty</span><span class="p">:</span> <span class="dl">'</span><span class="s1">accessToken</span><span class="dl">'</span><span class="p">,</span>
<span class="na">getToken</span><span class="p">:</span> <span class="nx">req</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">[</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">];</span>
<span class="p">}</span>
<span class="p">}));</span>
</code></pre></div> </div> <p>In other words, the <code class="language-plaintext highlighter-rouge">/protected/add_item</code> endpoint must first pass the access token validation step before validating the cart. One token validates access (authorization) to the API and the other token validates the integrity of the client side data (the cart). The access token and the ID token are assigned by Auth0 to our application. This requires setting up a client and an API endpoint using the Auth0 dashboard. These are then retrieved using the Auth0 JavaScript library, called by our frontend:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Auth0 Client ID</span>
<span class="kd">const</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">t42WY87weXzepAdUlwMiHYRBQj9qWVAT</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//Auth0 Domain</span>
<span class="kd">const</span> <span class="nx">domain</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">speyrott.auth0.com</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">auth0</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">.</span><span class="nx">auth0</span><span class="p">.</span><span class="nc">WebAuth</span><span class="p">({</span>
<span class="na">domain</span><span class="p">:</span> <span class="nx">domain</span><span class="p">,</span>
<span class="na">clientID</span><span class="p">:</span> <span class="nx">clientId</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span>
<span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">openid profile purchase</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">id_token token</span><span class="dl">'</span><span class="p">,</span>
<span class="na">redirectUri</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000/auth/</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseMode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">form_post</span><span class="dl">'</span>
<span class="p">});</span>
<span class="c1">//(...)</span>
<span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#login-button</span><span class="dl">'</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">auth0</span><span class="p">.</span><span class="nf">authorize</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div> </div> <p>The audience claim must match the one setup for your API endpoint using the Auth0 dashboard. The Auth0 authentication and authorization server displays a login screen with our settings and then redirects back to our application at a specific path with the tokens we requested. These are handled by our backend which simply sets them as cookies:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/auth</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">access_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">id_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> </li> </ul> <p>You can Implement CSRF mitigation techniques on the top of this example.</p> <h2 id="oauth2-overview">OAuth2 Overview</h2> <p>The apps which using OAuth2 usually are web server, browser-based SPA and mobile apps. OAuth 2 provides <strong>Authorization Code</strong> to grant authorization. OAuth still provide other grant type like Password, Client credentials, PKCE.</p> <p>Here will display an Web server App example which can explain the main process of OAuth2. The process in SPA, mobile App have a little bit difference.</p> <p>Let’s say, you are developing a MobilePrinter Website App which using OAuth process. This App can help users print photo in Other server, like Google photos.</p> <h3 id="4-roles">4 Roles</h3> <ul> <li>The Third-Party Application, “Client”, MobilePrinter Website App</li> <li>The API: “Resource Server”, Visiting Google photos</li> <li>The Authorization Server: Google</li> <li>The User: “Resource Owner”</li> </ul> <h3 id="creating-an-app">Creating an App</h3> <p>MobilePrinter must first register a new app with the service.</p> <ul> <li>You must register a redirect URI to be used for redirecting users to for web server.</li> <li>You will get Client ID and Secret.</li> </ul> <h3 id="authorization-process">Authorization process</h3> <p>MobilePrinter Website use Client ID and Secret communicate with the authorization server, (Google).</p> <ul> <li>Create a “Log In” link sending the user to: <code class="language-plaintext highlighter-rouge">https://authorization-server.com/auth?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=REDIRECT_URI&amp;scope=photos&amp;state=1234zyx</code></li> <li>The user sees the authorization prompt (Allow or Deny) from authorization-server.</li> <li>If the user clicks “Allow,” the authorization-service redirects the user back to your site with an authorization code: <code class="language-plaintext highlighter-rouge">https://example-app.com/cb?code=AUTH_CODE_HERE&amp;state=1234zyx</code></li> <li>To Get an Access Token, Your server should exchanges the authorization code for an access token by making a POST request to the authorization server’s token endpoint: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://api.authorization-server.com/token
grant_type=authorization_code&amp;
code=AUTH_CODE_HERE&amp;
redirect_uri=REDIRECT_URI&amp;
client_id=CLIENT_ID&amp;
client_secret=CLIENT_SECRET
</code></pre></div> </div> </li> <li>The server replies with an access token and expiration time <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"access_token"</span><span class="p">:</span><span class="s2">"RsT5OjbzRn430zqMLgV3Ia"</span><span class="p">,</span><span class="w">
</span><span class="nl">"expires_in"</span><span class="p">:</span><span class="mi">3600</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h3 id="pkce">PKCE</h3> <p>Single-page apps (or browser-based apps) run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of a client secret, so the secret is not used in this case.</p> <p>The flow is based on the authorization code flow above, but with the addition of a dynamically generated secret used on each request. This is known as the PKCE extension.</p> <blockquote> <p>Note: Previously, it was recommended that browser-based apps use the “Implicit” flow, which returns an access token immediately in the redirect and does not have a token exchange step. In the time since the spec was originally written, the industry best practice has changed to recommend that the authorization code flow be used without the client secret. This provides more opportunities to create a secure flow, such as using the PKCE extension.</p> </blockquote> <h2 id="session-management">Session Management</h2> <p>Session management involves tracking and managing a user’s interaction with the application over time, ensuring that their authenticated state is preserved across different parts of the application.</p> <p>This prevents the need for repeated logins, enhancing both security and user convenience. There are two primary methods used for session management:</p> <ul> <li>cookie-based (storing session data on the User Browser, data should be encrypted)</li> <li>database sessions（storing session data on the server）</li> </ul> <h3 id="jwt-sessions-vs-database-sessions">JWT Sessions vs Database Sessions</h3> <ul> <li>JWT refer to as stateless. Dataase is the opposite, stateful.</li> <li>Both need cookie (http-only). Database session use cookie for SessionID and JWT use cookies to store more information.</li> <li>JWT need bigger and more cookies; But reduce the interact between server and database.</li> <li>Database Sessions can be safer.</li> <li>JWT also good for Single Sign On.</li> </ul> <h2 id="authentication-solutions">Authentication Solutions</h2> <ul> <li>There are many authentication solutions. Like, Auth0, Clerk, Kinde etc.</li> <li>You can add these solutions to your application.</li> <li>They all support Modern authentication strategies, like OAuth/OpenID Connect (OIDC), Credentials-based login (Email + Password), Passwordless/Token-based authentication.</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>Common use case for JWT?</li> <li>How JWT implement authorization?</li> <li>What is Cross-Site Request Forgery (CSRF)?</li> <li>What is Cross-Site Scripting (XSS)?</li> <li>How is OIDC different from OpenID2.0?</li> </ul> <h3 id="what-is-cross-site-request-forgery-csrf">What is Cross-Site Request Forgery (CSRF)?</h3> <p>Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user’s browser. In a CSRF attack, an innocent end user is tricked by an attacker into submitting a web request that they did not intend. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user’s account.</p> <h3 id="what-is-cross-site-scripting-xss">What is Cross-Site Scripting (XSS)</h3> <p>Cross-site scripting (XSS) attacks attempt to inject JavaScript in trusted sites. Injected JavaScript can then steal tokens from cookies and local storage. If an access token is leaked before it expires, a malicious user could use it to access protected resources.</p> <ul> <li>Don’t use localStorage, cause JS can read it.</li> <li>use cookie with ‘http-only’ setting.</li> </ul> <h3 id="how-jwt-implement-authorization">How JWT implement authorization</h3> <p>JWTs are self-contained, all the necessary information is there, reducing the need of going back and forward to the database. JWTs can container Authorization information.</p> <h2 id="references">References</h2> <ul> <li><a href="https://jwt.io/introduction">jwt.io</a></li> <li><a href="https://aaronparecki.com/oauth-2-simplified/">OAuth2 simplified</a></li> <li>jwt-handbook-v0_14_2.pdf</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="Authentication"/><category term="Authorization"/><category term="JWT"/><category term="OAuth"/><category term="OpenID"/><category term="OIDC"/><summary type="html"><![CDATA[Try to clear the main Auth concepts from higher perspective.]]></summary></entry><entry><title type="html">Implement Auth in Next.js</title><link href="https://benwzj.github.io/blog/2024/nextjs-auth/" rel="alternate" type="text/html" title="Implement Auth in Next.js"/><published>2024-06-13T00:00:00+00:00</published><updated>2024-06-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-auth</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-auth/"><![CDATA[<h2 id="the-basic-authenticatin-process">The Basic Authenticatin process</h2> <ul> <li>Login button: <ul> <li>get user information from form.</li> <li>verify user information.</li> <li>create session: <ul> <li>setup information in JWT, like create signature.</li> <li>create cookie, setup expiration date, etc.</li> <li>put JWT inside cookie</li> </ul> </li> </ul> </li> <li>every request from browser will send with this session cookie. server check this JWT and confirm the state of the browser. <ul> <li>also, you can use middleware to handle every request, for example refresh the session cookie.</li> </ul> </li> <li>Logout button: <ul> <li>simply destroy the session cookie</li> </ul> </li> </ul> <h2 id="nextauthjs">NextAuth.js</h2> <p>NextAuth.js is an open source auth layer for Next.js project. Auth.js was born out of next-auth. And it try to support more frameworks. It keep using the name “NextAuth.js” for Next.js.</p> <p>There are 4 ways to authenticate users with Auth.js:</p> <ul> <li>OAuth authentication (Sign in with Google, GitHub, LinkedIn, etc…)</li> <li>Magic Links (Email Provider like Resend, Sendgrid, Nodemailer etc…)</li> <li>Credentials (Username and Password, Integrating with external APIs, etc…)</li> <li>WebAuthn (Passkeys, etc…)</li> </ul> <h2 id="implement-authentication">Implement Authentication</h2> <p>The step roughly like this:</p> <h3 id="setting-up-nextauthjs-to-your-project">Setting up NextAuth.js to your project</h3> <ul> <li>install it: <code class="language-plaintext highlighter-rouge">npm install next-auth@beta</code></li> <li>generate a secret key for your application. This key is used to encrypt cookies, ensuring the security of user sessions. Like this: <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code></li> <li>In your <code class="language-plaintext highlighter-rouge">.env</code> file, add your generated key to the AUTH_SECRET variable: <code class="language-plaintext highlighter-rouge">AUTH_SECRET=your-secret-key</code></li> </ul> <h3 id="authconfigts-file">auth.config.ts file</h3> <p>Create an <code class="language-plaintext highlighter-rouge">auth.config.ts</code> file at the root of our project that exports an <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <ul> <li>you can Add the login pages option in this config file.</li> <li>configure Protecting your routes with Next.js Middleware.</li> </ul> <h3 id="authts-file">auth.ts file</h3> <p><code class="language-plaintext highlighter-rouge">auth.ts</code> file spreads your <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">NextAuth</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">authConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./auth.config</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Credentials</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth/providers/credentials</span><span class="dl">'</span><span class="p">;</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="p">{</span> <span class="nx">auth</span><span class="p">,</span> <span class="nx">signIn</span><span class="p">,</span> <span class="nx">signOut</span> <span class="p">}</span> <span class="o">=</span> <span class="nc">NextAuth</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">authConfig</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nc">Credentials</span><span class="p">({})],</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="the-login-form-for-email-and-password">The login form for email and password</h3> <p>you create the login route and component where users can input their credentials. for example, create route <code class="language-plaintext highlighter-rouge">/login</code>.This login page UI should use <code class="language-plaintext highlighter-rouge">form</code> which is using <code class="language-plaintext highlighter-rouge">authenticate()</code> Server action to authenticate user.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/login/page.tsx</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">authenticate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/lib/actions</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="p">{</span><span class="nx">authenticate</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Email</span><span class="dl">"</span> <span class="nx">required</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Password</span><span class="dl">"</span> <span class="nx">required</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Implement <code class="language-plaintext highlighter-rouge">authenticate</code> Server Action:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/lib/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">signIn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/auth</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nx">_currentState</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">,</span> <span class="nx">formData</span><span class="p">:</span> <span class="nx">FormData</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nf">signIn</span><span class="p">(</span><span class="dl">'</span><span class="s1">credentials</span><span class="dl">'</span><span class="p">,</span> <span class="nx">formData</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, you can add Form Validation implement using <code class="language-plaintext highlighter-rouge">useFormState</code> (<code class="language-plaintext highlighter-rouge">useActionState</code>) and <code class="language-plaintext highlighter-rouge">useFormStatus</code>.</p> <h2 id="implement-authorization">Implement Authorization</h2> <p>Once a user is authenticated, you’ll need to think about What user can do:</p> <ul> <li>visiting certain routes</li> <li>perform operations such as mutating data with Server Actions</li> <li>calling Route Handlers</li> </ul> <h3 id="protecting-routes-with-middleware">Protecting Routes with Middleware</h3> <p>Middleware in Next.js helps you control who can access different parts of your website.</p> <p>Here’s how to implement Middleware for authentication in Next.js:</p> <ul> <li>Setting Up Middleware: <ul> <li>Create a middleware.ts or .js file in your project’s root directory.</li> <li>Include logic to authorize user access, such as checking for authentication tokens.</li> </ul> </li> <li>Defining Protected Routes: <ul> <li>Not all routes require authorization. Use the matcher option in your Middleware to specify any routes that do not require authorization checks.</li> </ul> </li> <li>Middleware Logic: <ul> <li>Write logic to verify if a user is authenticated. Check user roles or permissions for route authorization.</li> </ul> </li> <li>Handling Unauthorized Access: <ul> <li>Redirect unauthorized users to a login or error page as appropriate.</li> </ul> </li> </ul> <p>Middleware example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//middleware.ts</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="kd">function</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">currentUser</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">currentUser</span><span class="dl">'</span><span class="p">)?.</span><span class="nx">value</span>
 
  <span class="k">if </span><span class="p">(</span><span class="nx">currentUser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
  <span class="p">}</span>
 
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">currentUser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">matcher</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">/((?!api|_next/static|_next/image|.*</span><span class="se">\\</span><span class="s1">.png$).*)</span><span class="dl">'</span><span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="data-access-layerdal">Data Access Layer(DAL)</h3> <ul> <li>For new next.js projects, It is good to use Data Access Layer(DAL) to consolidate all data access in there.</li> <li><strong>The principle</strong> is that a Server Component function body should only see data that the current user issuing the request is authorized to have access to.</li> <li><strong>The concept</strong> is that building an internal JavaScript library that provides custom data access checks before giving it to the caller. Similar to HTTP endpoints but in the same memory model.</li> <li>Every API should accept the current user and check if the user can see this data before returning it.</li> </ul> <p>From this point, normal security practices for implementing APIs take over.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// data/auth.tsx</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">cache</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span><span class="p">;</span>
 
<span class="c1">// Cached helper methods makes it easy to get the same value in many places</span>
<span class="c1">// without manually passing it around. This discourages passing it from Server</span>
<span class="c1">// Component to Server Component which minimizes risk of passing it to a Client</span>
<span class="c1">// Component.</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">getCurrentUser</span> <span class="o">=</span> <span class="nf">cache</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nf">cookies</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">AUTH_TOKEN</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">decodedToken</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">decryptAndValidate</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
  <span class="c1">// Don't include secret tokens or private information as public fields.</span>
  <span class="c1">// Use classes to avoid accidentally passing the whole object to the client.</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="nx">decodedToken</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// data/user-dto.tsx</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">server-only</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getCurrentUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./auth</span><span class="dl">'</span><span class="p">;</span>
 
<span class="kd">function</span> <span class="nf">canSeeUsername</span><span class="p">(</span><span class="nx">viewer</span><span class="p">:</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Public info for now, but can change</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">function</span> <span class="nf">canSeePhoneNumber</span><span class="p">(</span><span class="nx">viewer</span><span class="p">:</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">team</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Privacy rules</span>
  <span class="k">return</span> <span class="nx">viewer</span><span class="p">.</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">team</span> <span class="o">===</span> <span class="nx">viewer</span><span class="p">.</span><span class="nx">team</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">getProfileDTO</span><span class="p">(</span><span class="nx">slug</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Don't pass values, read back cached values, also solves context and easier to make it lazy</span>
 
  <span class="c1">// use a database API that supports safe templating of queries</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">rows</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">sql</span><span class="s2">`SELECT * FROM user WHERE slug = </span><span class="p">${</span><span class="nx">slug</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">userData</span> <span class="o">=</span> <span class="nx">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
 
  <span class="kd">const</span> <span class="nx">currentUser</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getCurrentUser</span><span class="p">();</span>
 
  <span class="c1">// only return the data relevant for this query and not everything</span>
  <span class="c1">// &lt;https://www.w3.org/2001/tag/doc/APIMinimization&gt;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">username</span><span class="p">:</span> <span class="nf">canSeeUsername</span><span class="p">(</span><span class="nx">currentUser</span><span class="p">)</span> <span class="p">?</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">username</span> <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">phonenumber</span><span class="p">:</span> <span class="nf">canSeePhoneNumber</span><span class="p">(</span><span class="nx">currentUser</span><span class="p">,</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">team</span><span class="p">)</span>
      <span class="p">?</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">phonenumber</span>
      <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>These methods should expose objects that are safe to be transferred to the client as is. We like to call these Data Transfer Objects (DTO) to clarify that they’re ready to be consumed by the client.</p> <p>They might only get consumed by Server Components in practice. This creates a layering where security audits can focus primarily on the Data Access Layer while the UI can rapidly iterate. Smaller surface area and less code to cover makes it easier to catch security issues.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">getProfile</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../data/user</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">({</span> <span class="na">params</span><span class="p">:</span> <span class="p">{</span> <span class="nx">slug</span> <span class="p">}</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// This page can now safely pass around this profile knowing</span>
  <span class="c1">// that it shouldn't contain anything sensitive.</span>
  <span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getProfile</span><span class="p">(</span><span class="nx">slug</span><span class="p">);</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Secret keys can be stored in environment variables but only the data access layer should access process.env in this approach.</p> <h3 id="protecting-server-actions">Protecting Server Actions</h3> <p>Implement checks within Server Actions to determine user permissions, such as restricting certain actions to admin users.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/lib/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">serverAction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">userRole</span> <span class="o">=</span> <span class="nx">session</span><span class="p">?.</span><span class="nx">user</span><span class="p">?.</span><span class="nx">role</span>
 
  <span class="c1">// Check if user is authorized to perform the action</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unauthorized access: User does not have admin privileges.</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
 
  <span class="c1">// Proceed with the action for authorized users</span>
  <span class="c1">// ... implementation of the action</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="protecting-route-handlers">Protecting Route Handlers</h3> <p>You can do this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/api/route.ts</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">GET</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// User authentication and role verification</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
 
  <span class="c1">// Check if the user is authenticated</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">401</span> <span class="p">})</span> <span class="c1">// User is not authenticated</span>
  <span class="p">}</span>
 
  <span class="c1">// Check if the user has the 'admin' role</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">role</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">403</span> <span class="p">})</span> <span class="c1">// User is authenticated but does not have the right permissions</span>
  <span class="p">}</span>
 
  <span class="c1">// Data fetching for authorized users</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="authorization-using-server-components">Authorization Using Server Components</h3> <p>Server Components can direct access to back-end resources. So need do Authorization. A common practice is to conditionally render UI elements based on the user’s role. Like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/dashboard/page.tsx</span>

<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Dashboard</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">userRole</span> <span class="o">=</span> <span class="nx">session</span><span class="p">?.</span><span class="nx">user</span><span class="p">?.</span><span class="nx">role</span> <span class="c1">// Assuming 'role' is part of the session object</span>
 
  <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">AdminDashboard</span> <span class="o">/&gt;</span> <span class="c1">// Component for admin users</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">UserDashboard</span> <span class="o">/&gt;</span> <span class="c1">// Component for regular users</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">AccessDenied</span> <span class="o">/&gt;</span> <span class="c1">// Component shown for unauthorized access</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="session-management">Session Management</h2> <p>Session management involves tracking and managing a user’s interaction with the application over time, ensuring that their authenticated state is preserved across different parts of the application.</p> <p>This prevents the need for repeated logins, enhancing both security and user convenience. There are two primary methods used for session management:</p> <ul> <li>cookie-based (storing session data on the User Browser, data should be encrypted)</li> <li>database sessions（storing session data on the server）</li> </ul> <h3 id="implement-cookie-based-session-management">Implement cookie-based Session management</h3> <p>Setting a cookie on the server action:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span> 
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">handleLogin</span><span class="p">(</span><span class="nx">sessionData</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">encryptedSessionData</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="nx">sessionData</span><span class="p">)</span> <span class="c1">// Encrypt your session data using JWT</span>
  <span class="nf">cookies</span><span class="p">().</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">session</span><span class="dl">'</span><span class="p">,</span> <span class="nx">encryptedSessionData</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">secure</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">maxAge</span><span class="p">:</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">7</span><span class="p">,</span> <span class="c1">// One week</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="c1">// Redirect or handle the response after setting the cookie</span>
<span class="p">}</span>
</code></pre></div></div> <p>Accessing the session data stored in the cookie in a server component:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/page.tsx</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">getSessionData</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">encryptedSessionData</span> <span class="o">=</span> <span class="nf">cookies</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">session</span><span class="dl">'</span><span class="p">)?.</span><span class="nx">value</span>
  <span class="k">return</span> <span class="nx">encryptedSessionData</span> <span class="p">?</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nf">decrypt</span><span class="p">(</span><span class="nx">encryptedSessionData</span><span class="p">))</span> <span class="p">:</span> <span class="kc">null</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="faq">FAQ</h2> <ul> <li>How NextAuth.js implement OIDC authentication?</li> <li>What <code class="language-plaintext highlighter-rouge">signIn()</code> do in NextAuth.js?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://next-auth.js.org">NextAuth.js Doc</a></li> <li><a href="https://authjs.dev/reference/next-auth">Auth.js Doc</a>.</li> <li><a href="https://nextjs.org/blog/security-nextjs-server-components-actions">Blog: Security in Next.js</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="Next.js"/><category term="JavaScript"/><category term="React"/><category term="Authentication"/><category term="Authorization"/><summary type="html"><![CDATA[The Basic Authenticatin process]]></summary></entry><entry><title type="html">Get to Know Eslint</title><link href="https://benwzj.github.io/blog/2024/eslint/" rel="alternate" type="text/html" title="Get to Know Eslint"/><published>2024-06-05T00:00:00+00:00</published><updated>2024-06-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/eslint</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/eslint/"><![CDATA[<h2 id="what-is-linter">What is Linter</h2> <p>Lint, or a linter is a static code analysis tool, that is used in such a way, that can flag programming errors, bugs, bad constructs, or stylistic errors.</p> <p>The term “lint” was derived from the name of the tiny bits of fiber and fluff shed by clothing. In 1979, lint was used outside of Bell Labs for the first time in the seventh version of the Unix operating system.</p> <h3 id="linter-can-help-a-lot">Linter can help a lot</h3> <p>Standardizing your code is very important. Having a guideline and running linters against the codebase avoid aesthetical changes in your pull request, like replacing all tabs for spaces, variable assignment indentation, or similar.</p> <p>There are many benefits of using linters. Beside code standardization, linters improve code review discussion level, it can make code look like it’s written by a single person and much more. Many linters include a performance check. They can add different kinds of performance improvements for experienced and newcomers developers.</p> <h2 id="what-is-eslint">What is ESLint</h2> <p>ESLint is a configurable JavaScript linter. It helps you find and fix problems in your JavaScript code. Problems can be anything from potential runtime bugs, to not following best practices, to styling issues.</p> <h3 id="core-concepts">Core Concepts</h3> <ul> <li>Rules: the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule. <ul> <li>Rule Fixes: Rules may optionally provide fixes for violations that they find. Fixes safely correct the violation without changing application logic.</li> <li>Rule Suggestions: Rules may optionally provide suggestions in addition to or instead of providing fixes.</li> </ul> </li> <li>Configuration Files: An ESLint configuration file is a place where you put the configuration for ESLint in your project.</li> <li>Plugins: An ESLint plugin is an npm module that can contain a set of ESLint rules, configurations, processors, and environments. Often plugins include custom rules. Plugins can be used to enforce a style guide and support JavaScript extensions (like TypeScript), libraries (like React), and frameworks (Angular).</li> <li>Parsers: An ESLint parser converts code into an abstract syntax tree that ESLint can evaluate. By default, ESLint uses the built-in Espree parser, which is compatible with standard JavaScript runtimes and versions.</li> <li>Custom Processors: An ESLint processor extracts JavaScript code from other kinds of files(like CoffeeScript), then lets ESLint lint the JavaScript code.</li> <li>CLI: The ESLint CLI is a command line interface that lets you execute linting from the terminal. The CLI has a variety of options that you can pass to its commands.</li> <li>Formatters: An ESLint formatter controls the appearance of the linting results in the CLI.</li> <li>ESLint Node.js API: It lets you use ESLint programmatically from Node.js code. The API is useful when developing plugins, integrations, and other tools related to ESLint.</li> </ul> <h3 id="features">Features</h3> <p>Everything is pluggable! 🔌</p> <ul> <li>Rule API is used both by bundled and custom rules</li> <li>Formatter API is used both by bundled and custom formatters</li> <li>Additional rules and formatters can be specified at a runtime</li> <li>Rules and formatters don’t have to be bundled to be used</li> </ul> <p>Every rule:</p> <ul> <li>Is standalone</li> <li>Can be turned off or on (nothin can be deemed “too important to turn off”)</li> <li>Can be set to a warning or error individually</li> </ul> <p>Additionally:</p> <ul> <li>Rules are “agenda-free” - ESLint does not promote any particular coding style</li> <li>Any bundled rules are generalizable</li> </ul> <h3 id="how-eslint-work">How ESLint work</h3> <figure> <picture> <img src="https://eslint.org/docs/latest/assets/images/architecture/dependency.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="how-to-use-eslint">How to use ESLint</h2> <ul> <li>First need to install ESLint in you project: <code class="language-plaintext highlighter-rouge">npm install eslint --save-dev</code></li> <li>Initialize an ESLint configuration for your project: <code class="language-plaintext highlighter-rouge">./node_modules/.bin/eslint --init</code></li> <li>Then you should have <code class="language-plaintext highlighter-rouge">.eslintrc.json</code> file. You can modify or add rule in this file.</li> <li>You can use ESLint CLI to check your code now. But most common way is integrating with ESCode.</li> <li>Install the ESLint Extension.</li> <li>Configure ESLint to automatically fix syntax and formatting issues every time you save by configure settings in Visual Studio Code.</li> </ul> <h3 id="eslint-and-vs-code">ESLint and VS Code</h3> <p>You can install <strong>“VS Code ESLint extension”</strong> in VS Code to use ESLint in VS Code Editor.</p> <p>The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn’t provide one the extension looks for a global install version. If you haven’t installed ESLint either locally or globally do so by running <code class="language-plaintext highlighter-rouge">npm install eslint</code> in the workspace folder for a local install or <code class="language-plaintext highlighter-rouge">npm install -g eslint</code> for a global install.</p> <p>On new folders you might also need to create an <code class="language-plaintext highlighter-rouge">.eslintrc</code> configuration file. You can do this by either using the VS Code command <code class="language-plaintext highlighter-rouge">Create ESLint configuration</code> or by running the eslint command in a terminal with <code class="language-plaintext highlighter-rouge">npx eslint --init</code>.</p> <h2 id="faq">FAQ</h2> <ul> <li>What is VS Code ESLint extension?</li> <li>How ESLint work with Editor?</li> </ul> <h3 id="why-need-package-lockjson-file">Why need package-lock.json file?</h3> <p>The “package-lock.json” file in npm simply serves as a lockfile that captures the exact versions of packages and their dependencies. It ensures that the same versions of packages are used across different installations or environments. This consistency prevents unexpected changes in package versions and helps avoid compatibility issues. When you install or update packages using npm, it checks the “package-lock.json” file to ensure the specified versions are installed. This lockfile is especially important when collaborating on projects, as it guarantees that all contributors use consistent package versions.</p> <h3 id="eslint-works-fine-before-but-after-vscode-update-or-install-other-extensions-eslint-display-many-errors">ESLint works fine before. But after VSCode update, or install other extensions, ESLint display many errors.</h3> <p>Sometime, ESLint may not work properly. You can install the latest version:</p> <ol> <li>delete all <code class="language-plaintext highlighter-rouge">node_modules</code>, and <code class="language-plaintext highlighter-rouge">packet-lock.json</code> file.</li> <li>Delete ALL Dependencies about ESLint.</li> <li>Re-install all package.</li> <li>And then install latest version: <code class="language-plaintext highlighter-rouge">npm init @eslint/config@latest</code>.</li> </ol> <h2 id="references">References</h2> <ul> <li><a href="https://eslint.org/docs/latest/use/core-concepts/">eslint.org doc</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Eslint"/><summary type="html"><![CDATA[What is Linter]]></summary></entry><entry><title type="html">Shopify Dev Overview</title><link href="https://benwzj.github.io/blog/2024/shopify-dev/" rel="alternate" type="text/html" title="Shopify Dev Overview"/><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/shopify-dev</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/shopify-dev/"><![CDATA[<p>There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).</p> <p>Run through this blog, you can get to know some concepts and terminologies of Shopify develpment.</p> <h2 id="apps">Apps</h2> <h3 id="what-is-shopify-app">What is Shopify App?</h3> <ul> <li>Shopify itself meets about 80% of global merchant needs. For everything else, Shopify merchants turn to apps.</li> <li>Shopify offers APIs, toolings and integration point to App.</li> <li>App Connects with Shopify APIs to extend store features.</li> <li>Merchant installs and uses App in their store.</li> <li>Shopify Apps can appear in and add functionality to nearly every area of the Shopify platform.</li> <li>A single app can add functionality to multiple areas of the platform.</li> <li>Depending on the tool that you’re using, Shopify might host your code, or you might have to arrange for hosting yourself.</li> <li>You can Surface App’s functionality in Shopify admin, Checkout, Online Store, Shopify Flow, Point of Sale, etc.</li> <li>For example, If you use Shopify as CMS to build your Ecommerce WebApp. You need to install Headless App in your Shopify store. Then you Ecommerce WebApp can connect to the Storefront API which provided by Headless App.</li> </ul> <h4 id="shopify-admin">Shopify admin</h4> <p>The Shopify admin is the primary interface for merchants to manage their stores, and core Shopify objects such as products, orders, and customers. The Shopify admin is also the place where merchants can manage their apps. Developers can surface their app’s functionality in the Shopify admin using the following technologies:</p> <ul> <li>Embedded app pages directly inside of the Shopify admin. <ul> <li>Shopify App Bridge (A JavaScript library)</li> <li>Polaris design system</li> <li>Shopify app templates</li> </ul> </li> <li>Custom data (more data models except for basic, like products, collections, and orders) <ul> <li>Metafields</li> <li>Metaobjects</li> </ul> </li> <li>App extensions</li> </ul> <h4 id="checkout">Checkout</h4> <p>Merchants use Shopify checkout to accept orders and receive payments wherever they sell online. You can add functionality to Shopify checkout by building an app. using the following technologies:</p> <ul> <li>Checkout UI extensions</li> <li>Shopify Functions</li> <li>Post-purchase checkout extensions</li> </ul> <h3 id="online-store">Online Store</h3> <p>The online store is a storefront that merchants use to sell their products. You can add functionality to the online store using the following technologies:</p> <ul> <li>Theme app extensions</li> <li>Web pixels</li> <li>Storefront API</li> </ul> <h4 id="shopify-flow">Shopify Flow</h4> <p>Shopify Flow is an app and platform that lets merchants customize their store through automation. You can integrate your app with Shopify Flow through custom triggers and actions. Triggers enable your app to start a Flow workflow. Actions enable Flow to call your app or service in a workflow to do work.</p> <h4 id="shopify-pos">Shopify POS</h4> <p>Shopify Point of Sale (POS) is a point of sale app that merchants can use to sell products in person. Merchants can create a cart for each customer, customize the cart in several ways, and then accept payment with a wide range of payment methods. You can surface your app’s functionality in Shopify POS through standardized APIs and extensions.</p> <h3 id="build-shopify-app">Build Shopify App</h3> <ul> <li>You need a Partner account and a development store.</li> <li>You need to use Shopify CLI. like this: <code class="language-plaintext highlighter-rouge">shopify app init</code>.</li> <li>Shopify recommend use Remix to build Shopify App. But you can still other framework.</li> </ul> <h2 id="theme">Theme</h2> <h3 id="what-is-shopify-theme">What is Shopify Theme</h3> <ul> <li>A Shopify theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers.</li> <li>Different themes have different styles and layouts, and offer a different experience for your customers. For example, if you’re selling spa products, then you might want your online store to feel relaxed and luxurious. If you’re selling electronics, then you might want your online store to look energetic and sleek.</li> <li>Shopify themes are built using Shopify’s theme templating language, Liquid, along with <strong>HTML, CSS, JavaScript, and JSON</strong>. Using these languages, developers can create any look and feel that their clients want.</li> <li><a href="https://github.com/Shopify/dawn">Dawn</a> is official, free, default theme. It show What a Theme exactly to be.</li> </ul> <h3 id="theme-architecture">Theme architecture</h3> <p>Theme code is organized with a standard directory structure of files specific to Shopify themes, as well as supporting assets such as images, stylesheets, and scripts.</p> <h4 id="theme-file-categories">Theme file categories</h4> <p>Theme files fall into the following general categories:</p> <ul> <li><strong>Markup and features</strong> - These files control the layout and functionality of a theme. They use <strong>Liquid</strong> to generate the HTML markup that makes up the pages of the merchant’s online store.</li> <li><strong>Supporting assets</strong> - These files are assets, scripts, or locale files that are either called or consumed by other files in the theme.</li> <li><strong>Config files</strong> - These files use <strong>JSON</strong> to store configuration data that can be customized by merchants using the theme editor.</li> </ul> <h4 id="themes-directory-structure">Themes directory structure</h4> <p>Themes must use the following directory structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── assets
├── config
├── layout
├── locales
├── sections
├── snippets
└── templates
    └── customers
</code></pre></div></div> <ul> <li>The <code class="language-plaintext highlighter-rouge">assets</code> directory, including image, CSS, and JavaScript files.</li> <li>The <code class="language-plaintext highlighter-rouge">config</code> directory contains the config files for a theme.</li> <li>The <code class="language-plaintext highlighter-rouge">layout</code> directory contains the layout files for a theme, through which template files are rendered. A <code class="language-plaintext highlighter-rouge">theme.liquid</code> file must exist in this folder for the theme to be uploaded to Shopify.</li> <li>The <code class="language-plaintext highlighter-rouge">locales</code> directory contains the locale files for a theme, which are used to provide translated content.</li> <li>The <code class="language-plaintext highlighter-rouge">sections</code> directory contains a theme’s sections and section groups. Sections are Liquid files, while Section groups are JSON containers.</li> <li>The <code class="language-plaintext highlighter-rouge">snippets</code> directory contains Liquid files that host smaller reusable snippets of code.</li> <li>The <code class="language-plaintext highlighter-rouge">templates</code> directory contains a theme’s template files, which control what’s rendered on each type of page.</li> <li>The <code class="language-plaintext highlighter-rouge">templates/customers</code> directory contains the template files for customer-centric pages like the login and account overview pages.</li> </ul> <h3 id="theme-layout">Theme Layout</h3> <ul> <li>Layouts are the base of the theme, through which all templates are rendered.</li> <li>Layouts are Liquid files.</li> <li>Layout files are located in the <code class="language-plaintext highlighter-rouge">layout</code> directory of the theme.</li> <li>Layout files allow you to include content, that should be <strong>repeated</strong> on multiple page types, in a single location. For example, layouts are a good place to include any content you might want in your <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element, as well as headers and footers.</li> <li>There are the two layout types: General, Checkout.</li> <li>Most layout files also contain the following Schema objects: <code class="language-plaintext highlighter-rouge">content_for_header</code>, <code class="language-plaintext highlighter-rouge">content_for_layout</code>.</li> </ul> <h3 id="theme-template">Theme Template</h3> <ul> <li>Theme Template files located in <code class="language-plaintext highlighter-rouge">templates</code> directory.</li> <li>Templates control what’s rendered on each type of page in a theme.</li> <li>Each page type in an online store has an associated template type. For example, to render a product page, the theme needs at least one template of type <code class="language-plaintext highlighter-rouge">product</code>.</li> <li>There are two different file types you can use for a theme template: JSON and Liquid.</li> <li>Template types can be: <code class="language-plaintext highlighter-rouge">404</code>, <code class="language-plaintext highlighter-rouge">article</code>, <code class="language-plaintext highlighter-rouge">blog</code>, <code class="language-plaintext highlighter-rouge">cart</code>, <code class="language-plaintext highlighter-rouge">collection</code>, <code class="language-plaintext highlighter-rouge">customers/account</code>, etc.</li> </ul> <h3 id="sections">Sections</h3> <ul> <li>Section files are located in the <code class="language-plaintext highlighter-rouge">sections</code> directory of the theme.</li> <li>Sections are Liquid files that allow you to create reusable modules of content that can be customized by <strong>merchants</strong>.</li> <li>For example, you can create an Image with text section that displays an image and text side-by-side with options for merchants to choose the image, set the text, and select the display order.</li> </ul> <h3 id="blocks">Blocks</h3> <ul> <li>Blocks are reusable modules for structuring content within sections.</li> <li>Blocks can represent a variety of content types such as text, images, products, collections and videos. They can be added, removed, and reordered within a section, providing merchants with a high degree of flexibility and customization in the theme editor.</li> </ul> <h2 id="headless">Headless</h2> <p>Headless means total <strong>customized storefront</strong> which give you maximum flexibility.</p> <h3 id="features">Features</h3> <ul> <li>You can build Headless with Shopify’s <strong>Storefront APIs</strong> and <strong>Customer Account APIs</strong>.</li> <li>Hydrogen is Shopify official headless framework. You are allowed to bring your own stack as well.</li> <li>Oxygen is Shopify’s global serverless hosting platform, built for deploying Hydrogen storefronts at the edge.</li> <li>Custom storefron, not just website, it can be native mobile app, PWA, video livestreams, IoT, or just add a buy button on an existing website.</li> </ul> <h3 id="storefront-api">Storefront API</h3> <p>The Storefront API provides access to Shopify’s primitives and capabilities such as displaying products and collections, adding items to the cart, calculating contextual pricing, and more. You can use the Storefront API to build unique commerce experiences on any platform, including the web, native apps, games, and social media, using the frontend tools of your choice.</p> <p>There are two methods of authentication for the Storefront API:</p> <ul> <li>Public token</li> <li>Private token</li> </ul> <p>Shopify provide some Developer tools for Storefront API:</p> <ul> <li>Storefront API GraphiQL explorer</li> <li>Storefront API learning kit</li> </ul> <p>You can create customers and update customer accounts using the Storefront API. (then why Customer Account API)</p> <h4 id="storefront-api-vs-admin-api">storefront api vs admin api</h4> <p>The Storefront API is primarily used by <strong>merchants</strong> to build their storefront and create custom experiences for their customers. This API allows merchants to access and modify data related to products, collections, customers, and orders on the storefront.</p> <p>On the other hand, the Admin API is primarily used by <strong>partners</strong> to access and modify data on the merchant’s store. This API allows partners to create apps that add functionality to the merchant’s store, such as inventory management or marketing tools. The Admin API provides access to a broader range of data compared to the Storefront API, including data related to payments, shipping, and taxes.</p> <h3 id="customer-account-api">Customer Account API</h3> <p>The Customer Account API offers a secure and private way of accessing private customer-scoped data, such as customer, orders, payments, fulfillment, discounts, refunds, and metafields. The Customer Account API allows you to build personalized customer experiences that you can use in your Headless or Hydrogen custom storefronts.</p> <p>The Customer Account API is a GraphQL API that requires an access token associated with a specific customer.</p> <h2 id="faq">FAQ</h2> <ul> <li>How Theme work in Shopify?</li> </ul> <h3 id="what-is-storefront">What is Storefront</h3> <p>Storefront is the interface to customers from which you can sell things. There are two way to build your Storefront: Using Theme or Headless.</p> <p>The following components form a part of every buying journey:</p> <ul> <li>A storefront is where merchants tell their brand story, and where customers browse available products.</li> <li>A cart is where customers add products that they’re interested in buying, and remove products that they no longer want to buy. A customer might visit their cart multiple times to renegotiate with themselves before they make a final purchase.</li> <li>A checkout is where a customer makes their final decision to purchase products, and completes a transaction.</li> </ul> <figure> <picture> <img src="https://cdn.shopify.com/shopifycloud/shopify_dev/assets/apps/storefront-cart-checkout-d813a2b5eb1e5474831bc2d3f869c625aa0148d7b3c8abb2c215537b1aa029d0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="what-is-shopify-point-of-sale-pos">What is Shopify Point of Sale (POS)</h3> <h4 id="what-is-pos">What is POS</h4> <p>The point of sale (POS) is the time and place at which a retail transaction is completed. At the point of sale, the merchant calculates the amount owed by the customer, indicates that amount, prepare an invoice for the customer (which may be a cash register printout), and indicates the options for the customer to make payment.</p> <h4 id="what-is-shopify-pos">What is Shopify POS</h4> <p>Shopify POS is a point of sale <strong>app</strong> that you can use to sell your products in person. Process orders, accept payments, produce receipts, and control it all from your mobile device. Shopify online store automatically synchronizes with Shopify POS, and you manage your entire business from one dashboard. Inventory, product, and payment updates that you make in your Shopify admin will instantly take effect in Shopify POS.</p> <h3 id="what-is-app-extension">What is App extension</h3> <ul> <li>An app extension enables you to add your app’s functionality to Shopify user interfaces.</li> <li>An app extension isn’t an app. It’s a mechanism that lets an app add features to certain defined parts of several Shopify user interfaces</li> <li><strong>Without</strong> an app extension, users interact directly with your app. Your app relays information to Shopify that gets surfaced back to the users through your app.</li> <li><strong>With</strong> an app extension, users interact with Shopify. Shopify relays information to your app that gets surfaced back to the users through your app extension in Shopify.</li> </ul> <h3 id="what-is-headless-shopify-theme">What is headless Shopify theme</h3> <p>A theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers. Shopify themes are built using Shopify’s theme templating language, Liquid, along with HTML, CSS, JavaScript, and JSON. Using these languages, developers can create any look and feel that their clients want. Headless Theme is used for Headless storefront.</p> <h3 id="what-is-sales-channel">What is sales channel</h3> <p>Usually, you sales channel in your shopify account will be:</p> <ul> <li>Online store <ul> <li>Use theme to layout your Online website pages.</li> </ul> </li> <li>Point of sale <ul> <li>POS app help you Process orders, accept payments, sync with online store, etc from your mobile phone.</li> </ul> </li> <li>Shop <ul> <li>Shop App is mobile app in iOS and Android. customers can do shopping in the app. you can provide product in Shop App.</li> </ul> </li> <li>Headless <ul> <li>It is custom storefront.</li> </ul> </li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://shopify.dev">shopify.dev</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="Shopify"/><category term="Ecommerce"/><category term="Theme"/><summary type="html"><![CDATA[There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).]]></summary></entry><entry><title type="html">SEO Overview</title><link href="https://benwzj.github.io/blog/2024/SEO/" rel="alternate" type="text/html" title="SEO Overview"/><published>2024-05-28T00:00:00+00:00</published><updated>2024-05-28T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/SEO</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/SEO/"><![CDATA[<h2 id="what-is-seo">What is SEO</h2> <p>Search engine optimization (SEO) is the process of increasing the visibility of website pages on search engines in order to attract more relevant traffic.</p> <p>From search engine view, SEO is also about helping search engines understand your content, and helping users find your site and make a decision about whether they should visit your site.</p> <p>SEO can also refer to a position (Search Engine Optimizer)</p> <p>Google provide many reports and tools to help to improve website SEO. Check <a href="https://support.google.com/webmasters">here</a> to see HOW Google help you improve your webiste SEO.</p> <h2 id="how-google-search-works">How Google Search works</h2> <h3 id="crawling">Crawling:</h3> <ul> <li>Google downloads text, images, and videos from pages it found on the internet with automated programs called crawlers.</li> <li>Google constantly look for new and updated pages and add them to its list of known pages. This process is called “URL discovery”.</li> <li>During the crawl, Google renders the page and runs any JavaScript it finds using a recent version of Chrome, similar to how your browser renders pages you visit.</li> <li>Crawling depends on whether Google’s crawlers can access the site. For example, <code class="language-plaintext highlighter-rouge">robots.txt</code> rules preventing Googlebot’s access to the page.</li> <li>Some JavaScript sites may use SPA where the initial HTML does not contain the actual content and Google needs to execute JavaScript before being able to see the actual page content that JavaScript generates. Googlebot queues all pages for rendering.</li> </ul> <h3 id="indexing">Indexing:</h3> <ul> <li>After a page is crawled, Google tries to understand what the page is about. This stage is called indexing and it includes processing and analyzing the textual content and key content tags and attributes, such as <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code> elements and <code class="language-plaintext highlighter-rouge">alt</code> attributes, <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">videos</code>, and more. And stores the information in the Google index.</li> <li>During the indexing process, Google determines if a page is a duplicate of another page on the internet or <strong>canonical</strong>.</li> <li>Indexing also depends on the <strong>content</strong> of the page and its <strong>metadata</strong>.</li> </ul> <h3 id="serving-search-results">Serving search results:</h3> <ul> <li>When a user enters a query, our machines search the index for matching pages and return the results we believe are the highest quality and most relevant to the user’s query.</li> <li>Search Console might tell you that a page is indexed, but you don’t see it in search results. Check it.</li> </ul> <h2 id="google-give-guides-to-maintain-your-websites-seo">Google give guides to Maintain your website’s SEO</h2> <h3 id="control-how-google-crawls-and-indexes">Control how Google crawls and indexes</h3> <ul> <li>Work around Canonical URL a canonical URL is the URL of a page that Google chose as the most representative from a set of duplicate pages.</li> <li>Make sure your resource are accessible</li> <li>Robots.txt</li> <li>Use Sitemaps</li> <li>Internationalized or multi-lingual sites</li> <li>Follow crawling and indexing best practices</li> <li>Help Google understand your site</li> <li>Follow Google guidelines</li> </ul> <h2 id="google-search-console">Google Search Console</h2> <p><a href="https://search.google.com/search-console/">Search Console</a> helps you monitor, maintain, and troubleshoot your site’s presence in Google Search results</p> <p>Search Console offers tools and reports for the following actions:</p> <ul> <li>Confirm that Google can find and crawl your site.</li> <li>Fix indexing problems and request re-indexing of new or updated content.</li> <li>View Google Search traffic data for your site: how often your site appears in Google Search, which search queries show your site, how often searchers click through for those queries, and more.</li> <li>Receive alerts when Google encounters indexing, spam, or other issues on your site.</li> <li>Show you which sites link to your website.</li> </ul> <h2 id="rich-results-test">Rich Results Test</h2> <p><a href="https://search.google.com/test/rich-results">Rich Results Test</a> can Test your publicly accessible page to see which rich results can be generated by the structured data it contains.</p> <h3 id="what-is-structured-data-markup">What is structured data markup</h3> <p>Structured data is a standardized format for providing information about a page and classifying the page content; for example, on a recipe page, what are the ingredients, the cooking time and temperature, the calories, and so on.</p> <p>Adding structured data can enable search results that are more engaging to users and might encourage them to interact more with your website, which are called rich results.</p> <p>For example, here is a JSON-LD structured data snippet that might appear on a recipe page, describing the title of the recipe, the author of the recipe, and other details:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Party Coffee Cake<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"application/ld+json"</span><span class="nt">&gt;</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@context</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://schema.org/</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Recipe</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Party Coffee Cake</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Person</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mary Stone</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">datePublished</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2018-03-10</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This coffee cake is awesome and perfect for parties.</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">prepTime</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PT20M</span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Party coffee cake recipe<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;i&gt;</span>by Mary Stone, 2018-03-10<span class="nt">&lt;/i&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This coffee cake is awesome and perfect for parties.
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Preparation time: 20 minutes
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://search.google.com/search-console/">Search Console</a></li> <li><a href="https://search.google.com/test/rich-results">Rich Results Test</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="SEO"/><category term="Website"/><summary type="html"><![CDATA[What is SEO]]></summary></entry></feed>