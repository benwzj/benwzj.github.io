<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-23T11:25:49+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Virtual DOM Concept</title><link href="https://benwzj.github.io/blog/2024/Virtual-DOM/" rel="alternate" type="text/html" title="Virtual DOM Concept"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/Virtual-DOM</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/Virtual-DOM/"><![CDATA[<h2 id="dom-rendering">DOM rendering</h2> <p>Let’s get to know a bit about DOM rendering first. In traditional rendering, the Browser does the following tasks:</p> <ul> <li>The browser parses our HTML and stores it in memory as a <strong>tree structure</strong> of a document, which is also known as DOM (Document Object Model) or sometimes as Real DOM. DOM methods allow programmatic access to the tree. With them, you can change the document’s structure, style, or content.</li> <li>The browser uses DOM to create a render tree. Render Tree represents everything that will be rendered on the browser.</li> <li><strong>Layout</strong> Render Tree by calculating the geometry of all elements (sizes &amp; positioning) and placing them.</li> <li><strong>painting</strong> all individual nodes.</li> </ul> <blockquote class="block-warning"> <h5 id="the-premise-of-virtual-dom">The Premise of Virtual DOM:</h5> <p>Real DOM updation is a slow process (due to reflow and repainting).</p> </blockquote> <h2 id="why-virtual-dom-can-help">Why Virtual DOM can help</h2> <p>Modern browsers are efficient enough to update only the required elements in the DOM. For example, if I have two ‘p’ tags and I change the text in one of the p tags using a button click, then only that p tag will be updated by safari (you can verify this using paint flashing).</p> <p>Then why we still need Virtual DOM?</p> <p>Virtual DOM is not magic, but it make writing WebApp easier. For example, if there are many tags you need to update when a state change, you will have a headache to figure out what tags to change and how to change. Rebuild the whole DOM can be easier, but it is slow process. Virtual DOM is one way to fix this.</p> <p>There are two arguments for React’s Virtual DOM being <strong>easier</strong> to build WebApp (not faster):</p> <ul> <li>It updates ONLY those elements that actually need to be updated (using <strong>diff</strong>).</li> <li>It <strong>batches</strong> the updates and hence we update the real DOM only a single time. Thus the repainting is also done only once which otherwise would have been done multiple times.</li> </ul> <p>Here some points need to be clear:</p> <ul> <li>You can drop into raw DOM operations and DOM API calls and beat React if you wanted to. This way can be more efficient. But it can be too trivial to do that in real App.</li> <li>Batching updates is actually the basic for every WebApp. Virtual DOM just make batching is much easier for us.</li> </ul> <h2 id="what-is-react-virtual-dom">What is React Virtual DOM</h2> <p>React renders JSX components to the Browser DOM, but keeps a copy of the actual DOM to itself. This copy is the Virtual DOM. We can think of it as the twin brother of the real or Browser DOM. The following actions take place in React:</p> <ul> <li>React stores a copy of Browser DOM which is called Virtual DOM.</li> <li>When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one.</li> <li>Comparison is done by <strong>Diffing Algorithm</strong>. The cool fact is all these comparisons take place in the memory and nothing is yet changed in the Browser.</li> <li>After comparing, React goes ahead and creates a new Virtual DOM having the changes. It is to be noted that as many as 200,000 virtual DOM nodes can be produced in a second.</li> <li>Then it updates the Browser DOM with the least number of changes possible without rendering the entire DOM again. This changes the efficiency of an application tremendously.</li> </ul> <p>It’s important to understand that virtual DOM isn’t a feature for React. It’s a means to an end, the end being <strong>declarative</strong>, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is generally good enough. That means less buggy code, and more time spent on creative tasks instead of tedious ones.</p> <h3 id="reconciliation">Reconciliation</h3> <p>To get a better understanding, we need to discuss some terminologies before discussing the whole Reconciliation process.</p> <p>Reconciliation is the process of keeping 2 DOM Trees in sync by a library like ReactDOM. It is done by using <strong>Reconciler</strong> and a <strong>Renderer</strong>.</p> <p><strong>Reconciler</strong> uses Diffing Algorithm to find differences between Current Tree and Work in Progress Tree and sends computed changes to the Renderer.</p> <p>The <strong>Renderer</strong> is the one that updates the app’s UI. Different devices can have different Renderers while sharing the same Reconciler.</p> <p>Before React 16, React used to work on Call Stack to keep track of the program’s execution. Hence old reconciler has been given the name Stack Reconciler. In React 16, they created a new Reconciler from scratch which uses a new data structure called fiber. Hence it is called <strong>Fiber Reconciler</strong>. The main aim was to make the reconciler asynchronous and smarter by executing work on the basis of priority.</p> <p>In <a href="https://www.youtube.com/watch?v=aS41Y_eyNrU">Dan Abramov’s Youtube Video</a>, he explained the motivation of 2 Virtual DOM trees came from The Double Buffering Technique that was used in the earlier days for Game Development.</p> <h2 id="svelte">Svelte</h2> <p>Many people reckon VDOM cut down the performance. Svelte is an example to ditch VDOM.</p> <p>Svelte regards <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">Virtual DOM is pure overhead</a>.</p> <p>Firstly, The <strong>diffing</strong> isn’t free. Svelte believe the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip the diffing.</p> <blockquote> <p>Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.</p> </blockquote> <p>Secondly, the greater overhead is in the <strong>components themselves</strong>. You’d be carelessly recalculating value on every update, regardless of whether props.foo had changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">StrawManComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nf">expensivelyCalculateValue</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">the</span> <span class="nx">value</span> <span class="nx">is</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <p>Or we’re generating a new array of virtual <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> elements — each with their own inline event handler — on every state change, regardless of whether props.items has changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MoreRealisticComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">selected</span><span class="p">,</span> <span class="nx">setSelected</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Selected</span> <span class="p">{</span><span class="nx">selected</span> <span class="p">?</span> <span class="nx">selected</span><span class="p">.</span><span class="nx">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">nothing</span><span class="dl">'</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">setSelected</span><span class="p">(</span><span class="nx">item</span><span class="p">)}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Svelte achieve a similar programming model without using virtual DOM.</p> <figure> <picture> <img src="/assets/img/svelte-VS-react.avif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="React"/><category term="JavaScript"/><category term="DOM"/><category term="SPA"/><category term="Svelte"/><summary type="html"><![CDATA[DOM rendering]]></summary></entry><entry><title type="html">Should TypeScript be ditched</title><link href="https://benwzj.github.io/blog/2023/dropping-ts/" rel="alternate" type="text/html" title="Should TypeScript be ditched"/><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/dropping-ts</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/dropping-ts/"><![CDATA[<p>Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?</p> <p>Now the people begin talk about dropping TypeScript. Why?</p> <p>The main reasons looks like this:</p> <blockquote> <p>Not just because it requires an explicit compile step, but because it pollutes the code with type gymnastics that add ever so little joy to my development experience, and quite frequently considerable grief. Things that should be easy become hard, and things that are hard become <code class="language-plaintext highlighter-rouge">any</code>.</p> </blockquote> <p>One of the longest running schisms in programming is that of static vs dynamic typing. There were a million arguments from both sides throughout these years, but seen very few of them ever convinced anyone of anything. As rationalizations masquerading as reason rarely do in matters of faith.</p> <p>We know that types are always there, but the difference is that they are in your codes or in your mind.</p> <h2 id="jsdoc">JSDoc</h2> <p>Both TypeScript and JSDoc aim to improve the development experience and enhance JavaScript codebases.</p> <p>TypeScript introduces a type system to JavaScript, enabling developers to catch errors at compile-time rather than runtime.</p> <p>What is JSDoc? JSDoc is a markup language and a documentation tool for JavaScript. It allows developers to add structured comments to their JavaScript code, providing valuable information about the codebase. Here are some notable aspects of JSDoc:</p> <ul> <li>Type Annotations: JSDoc supports type annotations similar to TypeScript, allowing developers to document the expected types of variables, parameters, and return values.</li> <li>Code Documentation: JSDoc allows developers to document functions, classes, objects, and their members, providing information about their purpose, usage, and expected behavior.</li> <li>Tool Integration: JSDoc-generated documentation can be utilized by various tools and IDEs to provide context-aware help, autocompletion suggestions, and inline documentation.</li> <li>Custom Tags: JSDoc supports custom tags, which enable developers to extend the existing set of annotations and document additional information specific to their codebase or project.</li> </ul> <h3 id="jsdoc-vs-typescript">JSDoc vs TypeScript</h3> <ul> <li>Type Checking: TypeScript performs static type checking during compilation, catching type-related errors before runtime. JSDoc, on the other hand, is primarily a documentation tool and does not provide type checking by itself.</li> <li>Language Features: TypeScript introduces additional language features like interfaces, classes, and modules, while JSDoc focuses on providing documentation annotations for existing JavaScript code.</li> <li>Ecosystem and Tooling: TypeScript has a mature ecosystem with strong tooling support, including IDE integrations, build systems, and popular frameworks. JSDoc, being a documentation tool, complements existing JavaScript development workflows and is commonly used alongside other tools.</li> </ul> <h2 id="some-libraries-turn-around">Some libraries turn around</h2> <p>So big libraries like Turbo, Svelte, Drizzle are deciding to ditch TypeScript from their code bases. Are there more to ditch TypeScript in the future?</p> <p>TypeScripte become popular since it come out at 2012 from MicroSoft. The fact is not changed, the pros and cons of TypeScript are not changend. But people can change.</p> <p>Let us enjoy JavaScript in the glorious spirit it was originally designed: Free of strong typing.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><summary type="html"><![CDATA[Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?]]></summary></entry><entry><title type="html">ExpressJS vs. NestJS</title><link href="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/" rel="alternate" type="text/html" title="ExpressJS vs. NestJS"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/ExpressJS-NestJS</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/"><![CDATA[<p>Both of them are Server side application frameworks for NodeJS.</p> <h2 id="expressjs">ExpressJS</h2> <p>ExpressJS is Lightweight and the most widely-used. The strengths of Express is its strong community and the number of available plugins.</p> <h2 id="nestjs">NestJS</h2> <p>Nest is a progressive framework. It is built with TypeScript and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming). Under the hood, Nest makes use of ExpressJS. The architecture of NestJS is heavily inspired by Angular.</p> <h2 id="expressjs-vs-nestjs">ExpressJS vs. NestJS</h2> <p>The biggest difference between these frameworks is that NestJS is opinionated, and ExpressJS is not. It means Express gives developers the freedom to make multiple possibilities and implement code as per the need, as it doesn’t have a set of pre-defined rules to follow. Such a flexibility is appreciated by many developers, and it’s beneficial for smaller flexible teams, but once team size and app’s complexity grows, the lack of structure becomes a problem.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><category term="JavaScript"/><category term="NodeJS"/><category term="Framework"/><summary type="html"><![CDATA[Both of them are Server side application frameworks for NodeJS.]]></summary></entry><entry><title type="html">Chrome DevTools Network</title><link href="https://benwzj.github.io/blog/2023/network-chrome/" rel="alternate" type="text/html" title="Chrome DevTools Network"/><published>2023-10-23T00:00:00+00:00</published><updated>2023-10-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/network-chrome</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/network-chrome/"><![CDATA[<p>Here will try to a bit deep dive in <strong>Network</strong> panel in Chrome DevTools.</p> <p>Network Panel only logs network activity while it’s open.</p> <h2 id="network-log-overview">Network Log Overview</h2> <p>Each row of the Network Log represents a <strong>resource</strong> or call <strong>request</strong>. By default the resources are listed chronologically. The top resource is usually the main HTML document. The bottom resource is whatever was requested last.</p> <p>Let’s take a look at default columes:</p> <ul> <li>Status. The HTTP response code.</li> <li>Type. The resource type.</li> <li>Initiator. What caused a resource to be requested. Clicking a link in the Initiator column takes you to the source code that caused the request.</li> <li>Time. How long the request took.</li> <li>Waterfall. A graphical representation of the different stages of the request. Hover over a Waterfall to see a breakdown.</li> </ul> <p>You can display more columes, like Protocol, domain, etc.</p> <h2 id="some-tips">Some tips</h2> <ul> <li> <p>Simulate a slower network connection By throttling the page you can get a better idea of how long a page takes to load on a mobile device. Find the Throttling menu,(it is No Throttling by default)</p> </li> <li> <p>Empty Cache And Hard Reload On repeat visits, the browser usually serves some files from its cache, which speeds up the page load. Empty Cache And Hard Reload forces the browser to go the network for all resources. This is helpful when you want to see how a first-time visitor experiences a page load.</p> </li> <li> <p>Capture screenshots Tick <em>Capture Screenshots</em> Capture Screenshots.</p> </li> <li>You can Save requests across page loads. check the <em>Preserve log</em> checkbox</li> <li>Inspect a resource’s details Click a resource to learn more information about it. <ul> <li>Use <strong>Headers</strong> tab to inspect HTTP headers.</li> <li>Click the Preview tab. A basic rendering of the HTML is shown.</li> <li>Click the Response tab. The HTML source code is shown.</li> <li>Click the Timing tab. A breakdown of the network activity for this resource is shown.</li> </ul> </li> <li> <p>Use the <strong>Search</strong> pane when you need to search the <em>HTTP headers</em> and <em>responses</em> of all resources for a certain string or regular expression.</p> </li> <li> <p>Filter resources DevTools provides numerous workflows for filtering out resources that aren’t relevant to the task at hand.</p> </li> <li>Block requests How does a page look and behave when some of its resources aren’t available? Does it fail completely, or is it still somewhat functional? Block requests to find out: <ul> <li>Shortcut <keyboard>Command</keyboard>+<keyboard>Shift</keyboard>+<keyboard>P</keyboard> (Mac) to open the Command Menu.</li> <li>Type <code class="language-plaintext highlighter-rouge">block</code>, select Show Request Blocking, and press <keyboard>Enter</keyboard>.</li> <li>Click <em>Add</em> Pattern</li> <li>Then Reload the page.</li> </ul> </li> <li> <p>Replay XHR request Select the XMLHttpRequest(XHR), Right-click the request and select Replay XHR.</p> </li> <li>Throttling <ul> <li>Emulate offline. When you develop Progressive Web Apps, this is helpful.</li> <li>You can even create custom throttling profiles!</li> <li>In addition to HTTP requests, you can throttle WebSocket connections.</li> </ul> </li> <li>Override HTTP response headers With local overrides, you can override HTTP response headers and web content, including XHR and fetch requests, to mock remote resources even if you don’t have access to them. This lets you prototype changes without waiting for the backend to support them. Local overrides also lets you keep the changes you make in DevTools across page loads. How it works: <ul> <li>When you make changes in DevTools, DevTools saves a copy of the modified file to a folder you specify.</li> <li>When you reload the page, DevTools serves the local, modified file, rather than the network resource.</li> </ul> </li> <li>Override the user agent</li> <li>Powerful Filter function on requests</li> <li>Export requests data</li> </ul> <h2 id="understand-waterfall-chart">Understand Waterfall Chart</h2> <p>They are often used to analyze site speed and identify opportunities for optimization.</p> <h4 id="server-connections">Server connections</h4> <h2 id="questions">Questions</h2> <ul> <li>What is Site Speed Test</li> <li>What is routing, data fetching, and generating HTML</li> <li>What is Network Waterfall. How to read waterfall charts. Network Waterfall charts show what network requests are made when loading a web page. They are often used to analyze website speed and identify opportunities for optimization. Many DevTools provide Network Waterfall charts, Like Chrome DevTools.</li> </ul> <p>It provides you with a visual representation of how all the assets on your website load. This includes CSS, JavaScript, HTML, images, plugins, and third-party content.</p> <figure> <picture> <img src="/assets/img/waterfall-chart.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="reference">Reference</h2>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Network"/><summary type="html"><![CDATA[Here will try to a bit deep dive in Network panel in Chrome DevTools.]]></summary></entry><entry><title type="html">WebSocket Introduction</title><link href="https://benwzj.github.io/blog/2023/websocket-introduce/" rel="alternate" type="text/html" title="WebSocket Introduction"/><published>2023-10-21T00:00:00+00:00</published><updated>2023-10-21T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/websocket-introduce</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/websocket-introduce/"><![CDATA[<h2 id="what-is-websocket">What is WebSocket</h2> <p>WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.</p> <p>WebSocket is distinct from HTTP. Both protocols are located at layer 5 in the OSI model and depend on TCP at layer 4.</p> <p>Although they are different, RFC 6455 states that WebSocket “is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries,” thus making it compatible with the HTTP protocol.</p> <p>To achieve compatibility, the WebSocket handshake uses the HTTP Upgrade header to change from the HTTP protocol to the WebSocket protocol.</p> <p>The WebSocket protocol enables interaction between a web browser (or other client application) and a web server with lower overhead than half-duplex alternatives such as HTTP polling, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the client without being first requested by the client.</p> <h2 id="test-websocket">Test Websocket</h2> <h3 id="websocket-client-testers">Websocket Client Testers</h3> <ul> <li>Using browser as Client Tester: 1, <a href="https://www.piesocket.com/websocket-tester">piesocket</a> or 2, <a href="https://socketsbay.com/test-websockets">socketsbay</a></li> <li>Using <code class="language-plaintext highlighter-rouge">zsh</code> as Client Tester: <code class="language-plaintext highlighter-rouge">wscat</code>.</li> </ul> <h3 id="public-websocket-server">Public WebSocket server</h3> <ul> <li>websocket-echo.com is a simple echo websocket server. support ws and wss. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ws://websocket-echo.com
wss://websocket-echo.com
</code></pre></div> </div> </li> <li>Free Chatroom I apply a free WebScoket chatroom in socketsbay. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wss://socketsbay.com/wss/v2/[ChannelId]/[ApiKey]/
</code></pre></div> </div> <p>You can use wscat to connect to the chatroom.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wscat -c wss://socketsbay.com/wss/v2/1/1f437d249c2ca2eb3c415b9f92df92c8/
</code></pre></div> </div> </li> </ul> <h2 id="uing-aws-websocket-api-gateway-create-group-chat-application">Uing AWS WebSocket API Gateway Create Group Chat application</h2> <p>This example will show how to create Group Chat applicatin using AWS WebSocket API Gateway.</p> <h3 id="group-chat-app-overview">Group Chat App Overview</h3> <p>1, Clients join the chat room as they connect to the WebSocket API. 2, The backend can send messages to specific users via a callback URL that is provided after the user is connected to the WebSocket API. 3, Users can send messages to the room. 4, Disconnected clients are removed from the chat room.</p>]]></content><author><name></name></author><category term="Protocol"/><category term="WebSocket"/><category term="Http"/><category term="Tcp"/><summary type="html"><![CDATA[What is WebSocket]]></summary></entry><entry><title type="html">React State system</title><link href="https://benwzj.github.io/blog/2023/react-state/" rel="alternate" type="text/html" title="React State system"/><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-state</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-state/"><![CDATA[<h2 id="state-rules">State Rules</h2> <ul> <li>Treat all state in React as <strong>immutable</strong>. This help React run very fast.</li> <li>State behaves as a <strong>snapshot</strong>. Setting state does not change the state variable you already have, but instead triggers a re-render.</li> <li> <p>States are a component’s memory. State actually “lives” in React itself (as if on a shelf!) outside of your function. When triggering a render, React calls your component, it gives you a snapshot of the state for that particular render. This snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!</p> </li> <li>React will ignore your update if the next state is equal to the previous state, as determined by an Object.is comparison.</li> <li>You can store information from previous renders, but need to use condition, and also, the logic is hard to read. try to avoid.</li> <li>When you call the <code class="language-plaintext highlighter-rouge">set</code> function of useState hook during render, React will re-render that component immediately after your component exits with a <code class="language-plaintext highlighter-rouge">return</code> statement, and before rendering the children.</li> <li>Unlike props, state is fully private to the component declaring it. If you render the same component twice, each copy will have completely isolated state!</li> <li>React batches state updates, it will queue all set functions and execute all set functions one by one before re-render.</li> </ul> <h2 id="usestate-hook">useState Hook</h2> <h3 id="syntax">Syntax</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">);</span>
</code></pre></div></div> <p>useState returns an array with exactly two items:</p> <ol> <li>The current state of this state variable, initially set to the initial state you provided.</li> <li>The set function that lets you change it to any other value in response to interaction.</li> </ol> <p>Important to Know:</p> <ol> <li>Calling the set function does not change the current state in the already executing code.</li> <li>State is considered read-only, When state is objects or arrays, you should replace it rather than mutate your existing objects.</li> <li>About the initial state, React saves it once and ignores it on the next renders. So don’t do this: <code class="language-plaintext highlighter-rouge">const [todos, setTodos] = useState(createInitialTodos());</code>, because React run this function every render and means nothing. But you can do this: <code class="language-plaintext highlighter-rouge">const [todos, setTodos] = useState(createInitialTodos);</code>.</li> </ol> <h3 id="how-react-implement-usestate-hook">How React implement <code class="language-plaintext highlighter-rouge">useState</code> Hook</h3> <p>It is helpful to know How <code class="language-plaintext highlighter-rouge">useState</code> works inside React. Internally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState, React gives you the next state pair and increments the index. Hooks rely on a stable call <strong>order</strong> on every render of the same component. Roughly like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">componentHooks</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">let</span> <span class="nx">currentHookIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">pair</span> <span class="o">=</span> <span class="nx">componentHooks</span><span class="p">[</span><span class="nx">currentHookIndex</span><span class="p">];</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">pair</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// This is not the first render,</span>
    <span class="c1">// so the state pair already exists.</span>
    <span class="c1">// Return it and prepare for next Hook call.</span>
    <span class="nx">currentHookIndex</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">pair</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// This is the first time we're rendering,</span>
  <span class="c1">// so create a state pair and store it.</span>
  <span class="nx">pair</span> <span class="o">=</span> <span class="p">[</span><span class="nx">initialState</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>

  <span class="kd">function</span> <span class="nf">setState</span><span class="p">(</span><span class="nx">nextState</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// When the user requests a state change,</span>
    <span class="c1">// put the new value into the pair.</span>
    <span class="nx">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nextState</span><span class="p">;</span>
    <span class="nf">updateDOM</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// Store the pair for future renders</span>
  <span class="c1">// and prepare for the next Hook call.</span>
  <span class="nx">componentHooks</span><span class="p">[</span><span class="nx">currentHookIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
  <span class="nx">currentHookIndex</span><span class="o">++</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">pair</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="how-about-setstate">How about <code class="language-plaintext highlighter-rouge">setState</code></h3> <p>The set function returned by <code class="language-plaintext highlighter-rouge">useState</code> lets you update the state to a different value and trigger a re-render.</p> <p>You can pass the next <strong>state value</strong> directly, OR a <strong>‘updater function’</strong> that calculates it from the previous state. Because <strong>React batches state updates</strong>, it will queue all these set functions and execute all these set functions one by one before re-render. React will treat updater function differently from direct value (<code class="language-plaintext highlighter-rouge">baseState</code> is current value; <code class="language-plaintext highlighter-rouge">queue</code> is setfunctions array) :</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">getFinalState</span><span class="p">(</span><span class="nx">baseState</span><span class="p">,</span> <span class="nx">queue</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">finalState</span> <span class="o">=</span> <span class="nx">baseState</span><span class="p">;</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">updater</span> <span class="k">of</span> <span class="nx">queue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">updater</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Apply the updater function.</span>
      <span class="nx">finalState</span> <span class="o">=</span> <span class="nf">updater</span><span class="p">(</span><span class="nx">finalState</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// Replace the next state.</span>
      <span class="nx">finalState</span> <span class="o">=</span> <span class="nx">updater</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">finalState</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>The <strong>order</strong> is matter! React execute the setState functions in exact order.</li> <li>The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value that was on the screen before your call. It is Async.</li> <li> <p>If the new value you provide is identical to the current state, as determined by an <code class="language-plaintext highlighter-rouge">Object.is</code> comparison, React will skip re-rendering the component and its children.</p> </li> <li>Calling the set function during rendering is only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it to store information from the previous renders.</li> <li>In Strict Mode, React will call your updater function twice in order to help you find accidental impurities. This is development-only behavior and does not affect production.</li> </ul> <h3 id="set-state-to-a-function">Set State to a function</h3> <p>Don’t do this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">setFn</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">someFunction</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setFn</span><span class="p">(</span><span class="nx">someOtherFunction</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Because you’re passing a function, React assumes that someFunction is an initializer function, and that someOtherFunction is an updater function, so it tries to call them and store the result. To actually store a function, you have to put <code class="language-plaintext highlighter-rouge">()=&gt;</code> before them in both cases. Then React will store the functions you pass.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">setFn</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">someFunction</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setFn</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">someOtherFunction</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <p>The different between <code class="language-plaintext highlighter-rouge">someFunction</code> and <code class="language-plaintext highlighter-rouge">()=&gt;someFunction</code> is that, executing latter will return former.</p> </blockquote> <h2 id="fqa">FQA</h2> <h3 id="how-to-understand-state-behaves-as-snapshot">How to understand State behaves as snapshot?</h3> <p>State actually “lives” in React itself outside of your function. When triggering a render, React calls your component, it gives you a snapshot of the state for that particular render. This snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!</p> <p>But how to understand this component:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">counter</span><span class="p">,</span> <span class="nx">setCounter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">async</span> <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">setCounter</span><span class="p">(</span><span class="nx">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
    <span class="nf">setCounter</span><span class="p">(</span><span class="nx">counter</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
        <span class="nx">counter</span><span class="p">:</span> <span class="p">{</span><span class="nx">counter</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">add</span> <span class="nx">it</span>     
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// It will display "counter: -1" when click the button.</span>
</code></pre></div></div> <p>It still make sense like this: When you click, React return a snapshot: <code class="language-plaintext highlighter-rouge">counter: 1</code>; After 3 seconds, <code class="language-plaintext highlighter-rouge">setCounter(counter - 1);</code> trigger another render, and the counter is 0 because it used previuos Call Stack. That means it use previous snapshot instead of the current one. But it still trigger a render and create a new snapshot: <code class="language-plaintext highlighter-rouge">counter: -1</code>; In this case, React just manage one memory for this component because it is in the same place.</p> <h3 id="how-to-handle-object-and-array-state">How to handle Object and Array STATE?</h3> <p>Keep stick to this rule: <strong>Treat all state as immutable</strong>. Object and Array is mutable, but we need to handle it asif it is immutable.</p> <h4 id="here-are-some-ways-to-handle-object-state">Here are some ways to handle Object state:</h4> <ul> <li>Copying objects with the <strong>spread syntax</strong>. Like this: ` {…obj, something: ‘newValue’}` object spread syntax to create copies of objects. But Spread syntax is shallow.</li> <li>Using <code class="language-plaintext highlighter-rouge">Immer</code> module for nested object state is a choice. (I don’t recommend Immer, because it looks like break the rule and make thing confused.)</li> <li>Create a new array from the original array in your state by calling its non-mutating methods like <code class="language-plaintext highlighter-rouge">filter()</code> (Removing from an array) and <code class="language-plaintext highlighter-rouge">map()</code>(Transforming an array, Replacing items in an array).</li> </ul> <h4 id="updating-objects-inside-arrays-nested-state">Updating objects inside arrays (nested state)</h4> <p>You don’t have to deep copy all the objects for every update, but you need to create copies from the point where you want to update, and all the way up to the top level. Using <code class="language-plaintext highlighter-rouge">map</code> and spread <code class="language-plaintext highlighter-rouge">...</code> can make it.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialList</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Big Bellies</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lunar Landscape</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Terracotta Army</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">myList</span><span class="p">,</span> <span class="nx">setMyList</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialList</span><span class="p">);</span>
<span class="nf">setMyList</span><span class="p">(</span><span class="nx">myList</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">artwork</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">artworkId</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Create a *new* object with changes</span>
    <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">artwork</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="nx">nextSeen</span> <span class="p">};</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// No changes</span>
    <span class="k">return</span> <span class="nx">artwork</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}));</span>
</code></pre></div></div> <h3 id="why-key-is-matter">Why <code class="language-plaintext highlighter-rouge">key</code> is matter?</h3> <h3 id="why-react-choose-immutable">Why React choose Immutable</h3> <ul> <li>Good for Debugging: If you use console.log and don’t mutate state, your past logs won’t get clobbered by the more recent state changes.</li> <li>Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones.</li> <li>Easy for some implements, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values.</li> <li>Make Implementation simpler. And that is the reason why you can set Object as State.</li> </ul> <blockquote class="block-warning"> <p>Important concept in Immutable: ‘Nested’ Objects are not really nested. Nesting is an inaccurate way to think about how objects behave.</p> </blockquote> <h3 id="do-react-have-component-instance-concept-when-placing-a-component-in-different-place-all-of-them-keep-their-own-states-that-means-react-manage-defferent-instances-of-the-component">Do React have component instance concept? When placing a component in different place, all of them keep their own states. That means React manage defferent instances of the component.</h3>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Hook"/><summary type="html"><![CDATA[State Rules Treat all state in React as immutable. This help React run very fast. State behaves as a snapshot. Setting state does not change the state variable you already have, but instead triggers a re-render. States are a component’s memory. State actually “lives” in React itself (as if on a shelf!) outside of your function. When triggering a render, React calls your component, it gives you a snapshot of the state for that particular render. This snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!]]></summary></entry><entry><title type="html">Chrome DevTools Lighthouse</title><link href="https://benwzj.github.io/blog/2023/network-permance/" rel="alternate" type="text/html" title="Chrome DevTools Lighthouse"/><published>2023-10-14T00:00:00+00:00</published><updated>2023-10-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/network-permance</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/network-permance/"><![CDATA[<p><strong>Lighthouse</strong> is design to help to optimize website speed. It provide two important functions:</p> <ul> <li>It creates a baseline for you to measure subsequent changes against.</li> <li>It gives you actionable tips on what changes will have the most impact.</li> </ul> <h2 id="build-initial-report">Build Initial Report</h2> <p>The baseline is a record of how the site performed before you made any performance improvements. <em>Analyze page load</em> to create a report at the very first.</p> <p>The report will</p> <ul> <li>tell scores for your selected categories.</li> <li>Metric section provides quantitative measurements of the site’s performance. Each metric provides insight into a different aspect of the performance. <ul> <li>Largest Contentful Paint (LCP) measures when the largest content element in the viewport is rendered to the screen. This approximates when the main content of the page is visible to users.</li> </ul> </li> <li>Screenshots section show collection of screenshots that show you how the page looked as it loaded.</li> <li>Opportunities section that provides specific tips on how to improve this particular page’s load performance. For example choose smaller size pictures, compress js files.</li> <li>Diagnostics section provides more information about factors that contribute to the page’s load time.</li> <li>Passed audits section shows you what the site is doing correctly.</li> </ul> <p>Some tips:</p> <ul> <li>Enabling <em>Clear Storage checkbox</em> clears all storage associated with the page, This will audit how first-time visitors experience your site.</li> </ul> <h2 id="actions-according-to-report">Actions according to Report</h2> <h4 id="enable-text-compression">Enable text compression</h4> <p>Go to Network panel to check!</p> <ul> <li>Compare download size anf uncompression size.</li> <li>Search file Response Headers section for a <code class="language-plaintext highlighter-rouge">content-encoding</code> header.</li> </ul> <p>If haven’t compression, then use commpression. For example, if you are using Node Express, then install the Node.js compression middleware via <code class="language-plaintext highlighter-rouge">npm compression</code>.</p> <h4 id="resize-images">Resize images</h4> <p>Create multiple sizes of each image during the build process and then use srcset in your code. At runtime, the browser takes care of choosing what size is best for the device it’s running on.</p> <h4 id="eliminate-render-blocking-resources">Eliminate render-blocking resources</h4> <p>A render-blocking resource is an external JavaScript or CSS file that the browser must download, parse, and execute before it can show the page. The goal is to only run the core CSS and JavaScript code that is required to display the page properly.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">Coverage tab</code> provides an overview of how much of the code in js files,like main.js, bundle.js, jquery.js, and lodash.js is being executed while the page loads. The <code class="language-plaintext highlighter-rouge">Coverage tab</code> can help you analyze your code, line-by-line, and only ship the code that’s needed for page load.</li> <li>The<code class="language-plaintext highlighter-rouge"> Request Blocking tab</code> can show you what happens when resources aren’t available. Which can help you remove the thing we don’t need.</li> </ul> <h4 id="do-less-main-thread-work">Do less main thread work</h4> <p>The main thread is where the browser does most of the work needed to display a page, such as parsing and executing HTML, CSS, and JavaScript.</p> <ul> <li>Diagnostics section in the Lighthouse report will show you the main thread activity.</li> <li>The goal is to use the <code class="language-plaintext highlighter-rouge">Performance panel</code> to analyze what work the main thread is doing while the page loads, and find ways to defer or remove unnecessary work.</li> </ul> <h4 id="improve-largest-contentful-paint-lcp">Improve Largest Contentful Paint (LCP)</h4> <p>LCP represents how quickly the main content of a web page is loaded. Specifically, LCP measures the time from when the user initiates loading the page until the largest image or text block is rendered within the viewport. To provide a good user experience, sites should strive to have an LCP of <strong>2.5 seconds</strong> or less for at least 75% of page visits. To improve LCP, breakdown it and looking at two:</p> <ul> <li>The initial HTML document</li> <li>The LCP resource</li> </ul> <figure> <picture> <img src="/assets/img/a-breakdown-lcp-showing.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Check <a href="https://web.dev/articles/optimize-lcp">here</a> for more info to Optimize LCP.</p> <h4 id="reduce-cumulative-layout-shift-cls">Reduce Cumulative Layout Shift (CLS)</h4> <p>CLS is a measure of the largest burst of layout shift scores for every unexpected layout shift that occurs during the entire lifespan of a page. Check <a href="https://web.dev/articles/cls">here</a> for more info to Optimize CLS.</p> <h2 id="reference">Reference</h2> <p><a href="https://developer.chrome.com/docs/devtools/lighthouse/">Chrome DevTools Doc</a> https://developer.chrome.com/docs/devtools/lighthouse/</p>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Lighthouse"/><summary type="html"><![CDATA[Lighthouse is design to help to optimize website speed. It provide two important functions: It creates a baseline for you to measure subsequent changes against. It gives you actionable tips on what changes will have the most impact.]]></summary></entry><entry><title type="html">React Overview with Function Component</title><link href="https://benwzj.github.io/blog/2023/react-overview/" rel="alternate" type="text/html" title="React Overview with Function Component"/><published>2023-10-12T00:00:00+00:00</published><updated>2023-10-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-overview</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-overview/"><![CDATA[<p>Now React have ditched Class Component and focus on Function Component and Hooks. This Overview focus on Function Component.</p> <p>React allows you to write maintainable and performant code by using concept of component. Components allow you to focus on describing the UI you want, rather than focusing on the details of how the UI actually gets inserted in the page.</p> <h2 id="react-rules">React Rules</h2> <h3 id="component-rules">Component Rules</h3> <ul> <li>Keeping Components Pure.</li> <li>Only call Hooks at the top level.</li> <li>If you can, update all the relevant state in the event handlers.</li> <li>If you want to reset the entire component tree’s state, pass a <strong>different key</strong> to your component.</li> <li>In Strict Mode, React will call some of your functions twice instead of once.</li> </ul> <h3 id="event-rules">Event Rules</h3> <ul> <li>All events <strong>propagate</strong> (or calling bubbles) in React except <code class="language-plaintext highlighter-rouge">onScroll</code>, which only works on the JSX tag you attach it to. But you can prevent an event from reaching parent component by calling <code class="language-plaintext highlighter-rouge">e.stopPropagation()</code>. On the other hand, <code class="language-plaintext highlighter-rouge">onClickCapture</code> is special event, React will travels down, calling all onClickCapture handlers.</li> <li>Some browser events have default behavior associated with them. For example, a <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> submit event, which happens when a button inside of it is clicked, will reload the whole page by default. Calling <code class="language-plaintext highlighter-rouge">e.preventDefault()</code> to prenvent this happen.</li> </ul> <h2 id="component-life-cycle">Component life cycle</h2> <p>Every React component goes through the same lifecycle:</p> <ul> <li>A component <strong>mounts</strong> when it’s added to the screen.</li> <li>A component <strong>updates</strong> when it receives new props or state, usually in response to an interaction.</li> <li>A component <strong>unmounts</strong> when it’s removed from the screen.</li> </ul> <h3 id="render-vs-mount-vs-re-render">Render vs. Mount vs. Re-render</h3> <ul> <li>“Rendering” is any time a function component gets called (or a class-based render method gets called) which returns a set of instructions for creating DOM.</li> <li>“Mounting” is when React “renders” the component for the first time and actually builds the initial DOM from those instructions.</li> <li>A “re-render” is when React calls the function component again to get a new set of instructions on an already mounted component.</li> </ul> <h2 id="react-under-hood">React Under Hood</h2> <h3 id="renderer">Renderer</h3> <p>The renderer is the part of the React ecosystem responsible for displaying React components on specific platforms (Web, Mobile, CLI). There are three officially supported renderers: React Dom, React Native, and React Test. In addition, there are MANY custom renderers.</p> <h3 id="reconciliation">Reconciliation</h3> <p>React’s diffing algorithm is called reconciliation.</p> <p>Underneath, all renderers share some common logic. That shared part is encapsulated in the Reconciler. This is the core algorithm that is independent from any platform. Earlier versions of React were powered by the so-called Stack Reconciler. It has been in use up to version 15 of React. With the release of React 16, we received a greatly improved reconciler algorithm, the Fiber Reconciler.</p> <h3 id="keys">keys</h3> <p>Keys is a way which can help React Reconciliation algorithm to solve the inefficiency issue. Especially in list items.</p> <p>Keys should be stable, predictable, and unique. Unstable keys (like those produced by Math.random()) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.</p> <p>Finding a key for component:</p> <ul> <li>The element you are going to display may already have a unique ID.</li> <li>you can add a new ID property to your model or hash some parts of the content to generate a key. The key only has to be unique among its siblings, not globally unique.</li> <li>As a last resort, you can pass an item’s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.</li> </ul> <h3 id="refs">refs</h3> <p>Refs provide a way to access DOM nodes or React elements created in the render method.</p> <h2 id="react-frameworks">React frameworks</h2> <p>If you want to build a new app or a new website fully with React, use frameworks.</p> <h3 id="why-frameworks">Why Frameworks</h3> <p>If you just want to run React, then what you need just grab react and react-dom from npm. But as a Web App, it still need routing, data fetching, and generating HTML for good performance. Frameworks provide features that most apps and sites eventually need, including routing, data fetching, and generating HTML.</p> <ul> <li><strong>Next.js</strong> is a full-stack React framework</li> <li><strong>Remix</strong> is a full-stack React framework with nested routing</li> <li><strong>Gatsby</strong> is a React framework for fast CMS-backed websites</li> <li><strong>Expo</strong> (for native apps) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.</li> </ul> <h2 id="hooks">Hooks</h2> <p><strong>eslint-plugin-react-hooks</strong>, This ESLint plugin enforces the Rules of Hooks.</p> <h2 id="fqa">FQA</h2> <h2 id="what-rendering-means-in-react">What Rendering means in React</h2> <p>Before your components are displayed on screen, they must be rendered by React.</p> <p>There are 3 steps for the whole rendering process:</p> <ol> <li>Triggering a render.</li> <li><strong>Rendering the component.</strong></li> <li>Committing to the DOM.</li> </ol> <h4 id="step-1-trigger-a-render">Step 1: Trigger a render</h4> <p>There are two reasons for a component to render:</p> <ul> <li>It’s the component’s initial render. By calling <code class="language-plaintext highlighter-rouge">createRoot</code> with the target DOM node, and then calling its render method with the component.</li> <li>The component’s (or one of its ancestors’) state has been updated. Updating the component’s state automatically queues a render.</li> </ul> <h4 id="step-2-react-renders-your-components">Step 2: React renders your components</h4> <blockquote class="block-warning"> <p>‘Rendering’ is React calling your components.</p> </blockquote> <ul> <li>On initial render, React will call the root component.</li> <li>For subsequent renders, React will call the function component whose state update triggered the render.</li> </ul> <blockquote class="block-warning"> <p>The default behavior of rendering will render all components nested within the updated component.</p> </blockquote> <p>This might be not optimal for performance if the updated component is very high in the tree.</p> <h4 id="step-3-react-commits-changes-to-the-dom">Step 3: React commits changes to the DOM</h4> <p>After rendering (calling) your components, React will modify the DOM.</p> <ul> <li>For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.</li> <li>For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.</li> </ul> <p>React only changes the DOM nodes if there’s a difference between renders.</p> <p>After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion throughout the docs.</p> <h3 id="there-are-some-rules-to-follow-for-this-process">There are some rules to follow for this process.</h3> <p>For exemple,</p> <ul> <li>The initialer of useState will just run at the first time.</li> <li>When you call the <code class="language-plaintext highlighter-rouge">set</code> function of useState hook during render, React will re-render that component immediately after your component exits with a <code class="language-plaintext highlighter-rouge">return</code> statement, and before rendering the childre.</li> </ul> <h2 id="how-to-upward-communication">How to Upward Communication</h2> <p>To communicate from a child to a parent component we can pass a function handler from parent to child.</p> <p>Take a look at this child component. Whenever the user clicks on the button, it tries to call a function passed down to it through the props system.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Child</span><span class="p">({</span> <span class="nx">onFunctionFromParent</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">onFunctionFromParent</span><span class="p">(</span><span class="dl">'</span><span class="s1">i am very good!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
 
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Here</span><span class="o">!&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <p>To use this component and be told when a user clicks the button</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Parent</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">handleMessageFromChild</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">message from child is </span><span class="dl">"</span><span class="o">+</span> <span class="nx">message</span><span class="p">)</span>
  <span class="p">}</span>
 
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Child</span> <span class="nx">onFunctionFromParent</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMessageFromChild</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <h2 id="what-is-root-component">What is Root component</h2> <p>The React application begins at a “root” component. Usually, it is created automatically when you start a new project. For example, if you use CodeSandbox or if you use the framework Next.js, the root component is defined in pages/index.js.</p> <h2 id="what-is-defining-a-component">What is Defining a component</h2> <p>React components are regular JavaScript functions, but their names must start with a capital letter or they won’t work! React don’t recommend to use Class components for new code.</p> <h2 id="what-is-export-default">What is <code class="language-plaintext highlighter-rouge">export default</code></h2> <p>The <code class="language-plaintext highlighter-rouge">export default</code> prefix lets you mark the main function in a file so that you can later import it from other files.</p>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Web-page"/><category term="Redux"/><summary type="html"><![CDATA[Now React have ditched Class Component and focus on Function Component and Hooks. This Overview focus on Function Component.]]></summary></entry><entry><title type="html">How to make MarkDown file looks better</title><link href="https://benwzj.github.io/blog/2023/Markdown-looks/" rel="alternate" type="text/html" title="How to make MarkDown file looks better"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-looks</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-looks/"><![CDATA[<p>We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,<code class="language-plaintext highlighter-rouge">#Headline</code> convert to <code class="language-plaintext highlighter-rouge">&lt;h1&gt;Headline&lt;/h1&gt;</code>. But how about the style?</p> <p>There are two ways to style your markdown file:</p> <ol> <li>Embed HTML code in markdown files (Most markdown parsers support).</li> <li>Find a specific markdown perser.</li> </ol> <h2 id="embed-html-code-in-markdown-files">Embed HTML code in markdown files</h2> <h4 id="inline-html">inline HTML</h4> <p>You can use inline HTML in Markdown for styles:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:green;font-weight:700;font-size:20px"</span><span class="nt">&gt;</span>
    markdown color font styles
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div> <p>Your output looks like this:</p> <p><span style="color:green;font-weight:700;font-size:20px"> markdown color font styles </span></p> <h4 id="embed-css-styles">Embed CSS styles</h4> <p>You can use CSS styles in markdown content</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
.heading1 {
    color: red;
    font-weight:700;
    font-size: 35px;
}
.heading3 {
    color: blue;
    font-weight:700;
    font-size: 30px;
}
<span class="nt">&lt;/style&gt;</span>

<span class="gh"># Markdown heading styles </span>
{: .heading1}
<span class="gu">### Markdown heading styles </span>
{: .heading3}  

</code></pre></div></div> <p>Your output looks like this:</p> <style>.heading1{color:red;font-weight:700;font-size:35px}.heading3{color:blue;font-weight:700;font-size:30px}</style> <h1 class="heading1" id="markdown-heading-styles">Markdown heading styles</h1> <h3 class="heading3" id="markdown-heading-styles-1">Markdown heading styles</h3> <h4 id="use-selector">Use selector</h4> <p>Define CSS styles using selector</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
red { color: red }
olive { color: olive }
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;red&gt;</span> red color markdown text<span class="nt">&lt;/red&gt;</span>

<span class="nt">&lt;olive&gt;</span> olive color markdown text<span class="nt">&lt;/olive&gt;</span>
</code></pre></div></div> <p>Your output looks like this:</p> <style>red{color:red}olive{color:olive}</style> <red> red color markdown text</red> <p><br/></p> <olive> olive color markdown text</olive>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><category term="Markdown"/><summary type="html"><![CDATA[We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,#Headline convert to &lt;h1&gt;Headline&lt;/h1&gt;. But how about the style?]]></summary></entry><entry><title type="html">What Markdown can do</title><link href="https://benwzj.github.io/blog/2023/Markdown-can-do/" rel="alternate" type="text/html" title="What Markdown can do"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-can-do</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-can-do/"><![CDATA[<p>Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.</p> <h2 id="it-can-embed-html-tags">It can embed HTML tags</h2> <h4 id="direct-link">Direct link:</h4> <p><a href="https://en.wikipedia.org/">wikipedia</a></p> <h4 id="make-a-list">Make a list</h4> <ul> <li>Milk</li> <li>Bread</li> <li>Yogurt</li> <li>Nappy</li> </ul> <hr/> <h4 id="we-can-quote">We can Quote:</h4> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h4 id="support-images">Support Images:</h4> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>responsive format:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="display-programm-code">Display programm code</h2> <h4 id="you-have-to-do-is-wrap-your-code-in-markdown-code-tags">You have to do is wrap your code in markdown code tags:</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="display-line-number">Display line number</h4> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h4 id="display-liquid-template-code-too">Display liquid template code too</h4> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <h4 id="support-mathjax">Support Mathjax</h4> <p>You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. Example: \(E = mc^2\).</p> <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <h2 id="adding-disqus-comments">Adding DISQUS comments.</h2> <p>Turn <code class="language-plaintext highlighter-rouge">disqus_comments: true</code> on at the Front Matter.</p> <h2 id="adding-table-of-contents">Adding table of contents</h2> <p>To add a table of contents to a post, add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h2 id="customized-blockquotes">customized blockquotes</h2> <p>Like below:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="redirecting-to-another-page">Redirecting to another page</h2> <p>Add below in the front matter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redirect: /assets/pdf/example_pdf.pdf
</code></pre></div></div> <h2 id="display-tables-bootstrap-tables">Display tables Bootstrap Tables</h2> <p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="video">Video</h2> <h4 id="it-supports-local-video-files">It supports local video files.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <h4 id="it-does-also-support-embedding-videos-from-different-sources">It does also support embedding videos from different sources.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h2 id="audio">Audio</h2> <p>It supports local and external audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="Markdown"/><category term="HTML"/><category term="CSS"/><category term="Markdown"/><summary type="html"><![CDATA[Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.]]></summary></entry></feed>