<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-27T01:54:53+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Type in Python</title><link href="https://benwzj.github.io/blog/2024/py-type/" rel="alternate" type="text/html" title="Type in Python"/><published>2024-12-26T00:00:00+00:00</published><updated>2024-12-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-type</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-type/"><![CDATA[<ul> <li>Almost everything in Python is an object, with its properties and methods.</li> <li>JavaScript have primitive type concept. But Python don’t.</li> <li>Python is dynamic type language.</li> <li>Dynamic typing have it’s shortcoming.</li> <li>Python provide library to help type check.</li> <li>Must Clear Concepts that are related to type: <strong>Generic type</strong>, <strong>interface</strong>, <strong>ABC</strong>, <strong>type annotations</strong>.</li> </ul> <h2 id="classes-vs-types">Classes vs Types</h2> <h3 id="history">History</h3> <p>Once upon a time, Python had both types and classes. Types were built-in objects defined in C; classes were what you built when using a class statement. The two were named differently because you couldn’t mix these; classes could not extend types.</p> <p>This difference was artificial, a limitation in the language implementation. Starting with Python 2.2, the developers of Python have slowly moved towards unifying the two concepts, with the difference all but gone in Python 3. Built-in types are now also labelled classes, and you can extend them at will.</p> <h3 id="built-in-function-type">built-in function type()</h3> <h4 id="typeobj">type(obj)</h4> <p><code class="language-plaintext highlighter-rouge">type(obj)</code> built-in function can return the class of the obj.</p> <h4 id="typeclassname-superclasses-attributes_dict">type(classname, superclasses, attributes_dict)</h4> <p><code class="language-plaintext highlighter-rouge">type()</code> can be called with three parameters:</p> <ul> <li>If type is called with three arguments, it will return a new type object. This provides us with a dynamic form of the class statement.</li> <li><code class="language-plaintext highlighter-rouge">classname</code> is a string defining the class name and becomes the name attribute;</li> <li><code class="language-plaintext highlighter-rouge">superclasses</code> is a list or tuple with the superclasses of our class. This list or tuple will become the bases attribute;</li> <li><code class="language-plaintext highlighter-rouge">attributes_dict</code> is a dictionary, functioning as the namespace of our class. It contains the definitions for the class body and it becomes the dict attribute.</li> </ul> <h2 id="type-hints-pep-0483">Type Hints (pep-0483)</h2> <p>https://peps.python.org/pep-0483/ pep-0484</p> <h3 id="type-checkers">type checkers</h3> <p>type checker for Python is third library for now. e.g. Mypy. (PyCharm have type checker as well)</p> <p>It is important for the user to be able to define types in a form that can be understood by type checkers. The goal of this PEP 0483 is to propose such a systematic way of defining types for type annotations of variables and functions using PEP 3107 syntax.</p> <h3 id="gradual-typing">Gradual typing</h3> <ul> <li> <p>dynamic type language, like python, javascript, perl, etc. is very popular, Static type langage, like Java, C++, C#, C is very popular as well, The main reason is both of them have some good points and bad points. They can’t substitute each other.</p> </li> <li> <p>Gradual typing is a type system developed by Jeremy Siek and Walid Taha in 2006</p> </li> <li>Gradual typing allows parts of a program to be dynamically typed and other parts to be statically typed.</li> <li>The programmer controls which parts are which by either leaving out type annotations or by adding them in. Thus leverage desirable aspects of both dynamic and static typing.</li> </ul> <h3 id="subtype-what-is-subtype-relationships">Subtype? what is Subtype relationships?</h3> <p>A crucial notion for static type checker is the subtype relationship.</p> <h4 id="it-arises-from-the-question">It arises from the question:</h4> <p>If first_var has type first_type, and second_var has type second_type, is it safe to assign first_var = second_var? (It is safe when second_type is subtype of first_type)</p> <h4 id="a-strong-criterion-for-when-it-should-be-safe-is">A strong criterion for when it should be safe is:</h4> <ul> <li>every value from second_type is also in the set of values of first_type; and</li> <li>every function from first_type is also in the set of functions of second_type.</li> </ul> <p>By this definition:</p> <ul> <li>Every type is a subtype of itself.</li> <li>The set of values becomes smaller for subtype, while the set of functions becomes larger.</li> </ul> <p>#### Subtype concept Conclusion</p> <ul> <li>If B is subtype of A, then var_A = var_B is safe. </li> <li>The values of subtype will be smaller, but functions will be larger. - Every type is a subtype of itself.</li> <li>Int is subtype of real number.</li> <li>But List[int] is not a subtype of List[float]. Although list[int] value is set of list[float], but  appending a real number only works with List[float]</li> </ul> <h4 id="a-formal-example">A formal example:</h4> <p>Integers are subtype of real numbers. Indeed, every integer is of course also a real number, and integers support more operations, such as, e.g., bitwise shifts « and »</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lucky_number</span> <span class="o">=</span> <span class="mf">3.14</span>    <span class="c1"># type: float
</span><span class="n">lucky_number</span> <span class="o">=</span> <span class="mi">42</span>      <span class="c1"># Safe
</span><span class="n">lucky_number</span> <span class="o">*</span> <span class="mi">2</span>       <span class="c1"># This works
</span><span class="n">lucky_number</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>      <span class="c1"># Fails
</span>
<span class="n">unlucky_number</span> <span class="o">=</span> <span class="mi">13</span>    <span class="c1"># type: int
</span><span class="n">unlucky_number</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>    <span class="c1"># This works
</span><span class="n">unlucky_number</span> <span class="o">=</span> <span class="mf">2.72</span>  <span class="c1"># Unsafe
</span></code></pre></div></div> <p>#### Two widespread approaches to declare subtype information to type checker. In nominal subtyping, the type tree is based on the class tree. But this approach should be used under control of the type checker, because in Python one can override attributes in an incompatible way:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="sh">'</span><span class="s">42</span><span class="sh">'</span> <span class="c1"># type: str
</span><span class="k">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1"># should be marked as error by type checker
</span></code></pre></div></div> <p>In structural subtyping the subtype relation is deduced from the declared methods.</p> <p>#### is-consistent-with vs. is-subtype-of <code class="language-plaintext highlighter-rouge">is-consistent-with</code>, which is similar to <code class="language-plaintext highlighter-rouge">is-subtype-of</code>, except new type <code class="language-plaintext highlighter-rouge">Any</code>. </p> <p>The is-consistent-with relationship is defined by three rules:</p> <ul> <li>A type t1 is consistent with a type t2 if t1 is a subtype of t2. (But not the other way around.)</li> <li>Any is consistent with every type. (But Any is not a subtype of every type.)</li> <li>Every type is consistent with Any. (But every type is not a subtype of Any.)</li> </ul> <h3 id="types-vs-classes">Types vs. Classes</h3> <p>Class is a dynamic, runtime concept.</p> <h4 id="the-distinction-between-classes-and-types-the-following-general-rules-apply">the distinction between classes and types the following general rules apply:</h4> <ul> <li>No types defined below (i.e. Any, Union, etc.) can be instantiated, an attempt to do so will raise TypeError. (But non-abstract subclasses of Generic can be.)</li> <li>No types defined below can be subclassed, except for Generic and classes derived from it.</li> <li>All of these will raise TypeError if they appear in isinstance or issubclass (except for unparameterized generics).</li> </ul> <h4 id="types-appear-in-variable-and-function-type-annotations-can-be-constructed-from-building-blocks-described-below-and-are-used-by-static-type-checkers">types appear in variable and function type annotations, can be constructed from building blocks described below, and are used by static type checkers.</h4> <ul> <li>Any.</li> <li>Union[t1, t2, …].</li> <li>Optional[t1]</li> <li>Tuple[t1, t2, …, tn].</li> <li>Callable[[t1, t2, …, tn], tr]</li> <li>Intersection[t1, t2, … ]</li> </ul> <h2 id="generic-type">Generic type</h2> <h3 id="what-is-generic-programming">What is Generic programming</h3> <p>Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters.</p> <h3 id="why-generic">Why Generic</h3> <ul> <li>Stronger type checks at compile time.</li> <li>Enabling programmers to implement generic algorithms.</li> </ul> <h3 id="what-is-generic-type-in-python">What is Generic type in Python</h3> <ul> <li>Use generic type constructor to construct new types in a generic manner. It is common when a particular class or a function behaves in such a type generic manner.</li> <li>Using Union[t1, t2,…], Callable[[t1, t2, …, tn], tr] or Tuple[t1, t2, …, tn], etc. to construct new types.</li> <li>For example, Tuple can take concrete type float and make a concrete type Vector = Tuple[float, …], Such semantics is known as generic type constructor</li> <li>it is similar to semantics of functions, but a function takes a value and returns a value, while generic type constructor takes a type and “returns” a type.</li> </ul> <h4 id="generic-type-example1">Generic type Example1:</h4> <p>Container classes, such as list or dict, typically contain only values of a particular type. Therefore, a user might want to type annotate them as such:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">users</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># type: List[UserID]
</span><span class="n">users</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">UserID</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span> <span class="c1"># OK
</span><span class="n">users</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Some guy</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># Should be rejected by the type checker
</span>
<span class="n">examples</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># type: Dict[str, Any]
</span><span class="n">examples</span><span class="p">[</span><span class="sh">'</span><span class="s">first example</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span> <span class="c1"># OK
</span><span class="n">examples</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>   
</code></pre></div></div> <p>To allow type annotations in these situations, built-in containers and container abstract base classes are extended with type parameters, so that they behave as generic type constructors. Classes, that behave as generic type constructors are called generic types. Example:</p> <p>from typing import Iterable</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Task</span><span class="p">:</span>
    <span class="bp">...</span>
<span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">todo_list</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="n">Task</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>Here Iterable is a generic type that takes a concrete type Task and returns a concrete type Iterable[Task].</p> <h4 id="generic-function-example">Generic function example:</h4> <p>The following function can take two arguments of type int and return an int, or take two arguments of type float and return a float, etc.:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
<span class="nf">add</span><span class="p">(</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">12</span><span class="sh">'</span>
<span class="nf">add</span><span class="p">(</span><span class="mf">2.7</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">)</span> <span class="o">==</span> <span class="mf">6.2</span>
</code></pre></div></div> <p>Functions that behave in the type generic manner are called generic functions. Type annotations of generic functions are allowed by type variables. Their semantics with respect to generic types is somewhat similar to semantics of parameters in functions. But one does not assign concrete types to type variables, it is the task of a static type checker to find their possible values and warn the user if it cannot find. Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">take_first</span><span class="p">(</span><span class="n">seq</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">:</span> <span class="c1"># a generic function
</span>    <span class="k">return</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">accumulator</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># type: int
</span>
<span class="n">accumulator</span> <span class="o">+=</span> <span class="nf">take_first</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>   <span class="c1"># Safe, T deduced to be int
</span><span class="n">accumulator</span> <span class="o">+=</span> <span class="nf">take_first</span><span class="p">((</span><span class="mf">2.7</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">))</span>  <span class="c1"># Unsafe
</span></code></pre></div></div> <p>Type variables are used extensively in type annotations, also internal machinery of the type inference in type checkers is typically build on type variables</p> <h3 id="type-variables">Type variables</h3> <p><code class="language-plaintext highlighter-rouge">X = TypeVar('X')</code> declares a unique type variable. (TypeVar() is defined in typing.py)</p> <ul> <li>The name must match the variable name.</li> <li>By default, a type variable ranges over all possible types.</li> <li>type variables Example: (it work for PyCharm’s static type checker)</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TypeVar</span>
<span class="n">T</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_nothing</span><span class="p">(</span><span class="n">one_arg</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">other_arg</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="nf">do_nothing</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>               <span class="c1"># OK, T is int
</span><span class="nf">do_nothing</span><span class="p">(</span><span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">,</span> <span class="nc">UserID</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span>  <span class="c1"># also OK, T is object
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Y = TypeVar('Y', t1, t2, ...)</code>. Ditto, constrained to t1, etc. Behaves similar to <code class="language-plaintext highlighter-rouge">Union[t1, t2, ...]</code>.</p> <p>Function type annotation with a constrained type variable:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TypeVar</span>
<span class="n">AnyStr</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">AnyStr</span><span class="sh">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">longest</span><span class="p">(</span><span class="n">first</span><span class="p">:</span> <span class="n">AnyStr</span><span class="p">,</span> <span class="n">second</span><span class="p">:</span> <span class="n">AnyStr</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AnyStr</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">first</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">first</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">second</span><span class="p">)</span> <span class="k">else</span> <span class="n">second</span>

<span class="n">result</span> <span class="o">=</span> <span class="nf">longest</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># The inferred type for result is str
</span><span class="n">result1</span> <span class="o">=</span> <span class="nf">longest</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sa">b</span><span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># Fails static type check
</span></code></pre></div></div> <p>both arguments to <code class="language-plaintext highlighter-rouge">longest()</code> must have the same type (str or bytes)</p> <h3 id="defining-your-own-generic-types">Defining your own generic types</h3> <ul> <li>Users can declare their classes as generic types using the special building block Generic. The definition class MyGeneric(Generic[X, Y, …]): … defines a generic type MyGeneric over type variables X, etc.</li> <li>MyGeneric itself becomes parameterizable, e.g. MyGeneric[int, str, …] is a specific type with substitutions X -&gt; int, etc.</li> </ul> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Generic</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">TypeVar</span>
<span class="n">T</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">CustomQueue</span><span class="p">(</span><span class="n">Generic</span><span class="p">[</span><span class="n">T</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">communicate</span><span class="p">(</span><span class="n">queue</span><span class="p">:</span> <span class="n">CustomQueue</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="bp">...</span>
</code></pre></div></div> <ul> <li>Classes that derive from generic types become generic.</li> <li>A class can subclass multiple generic types.</li> <li>However, classes derived from specific types returned by generics are not generic.</li> </ul> <p>Examples:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TodoList</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="n">Container</span><span class="p">[</span><span class="n">T</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">check_all</span><span class="p">(</span><span class="n">todo</span><span class="p">:</span> <span class="n">TodoList</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># TodoList is generic
</span>    <span class="bp">...</span>

<span class="k">class</span> <span class="nc">URLList</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">bytes</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">scrape_all</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">urls</span><span class="p">:</span> <span class="n">URLList</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bytes</span><span class="p">]</span>  <span class="c1"># URLList is not generic
</span>    <span class="bp">...</span>
</code></pre></div></div> <h3 id="covariance-and-contravariance-concepts">Covariance and Contravariance concepts</h3> <p>If t2 is a subtype of t1, then a generic type constructor GenType is called:</p> <ul> <li>Covariant, if GenType[t2] is a subtype of GenType[t1] for all such t1 and t2.</li> <li>Contravariant, if GenType[t1] is a subtype of GenType[t2] for all such t1 and t2.</li> <li>Invariant, if neither of the above is true.</li> </ul> <h3 id="predefined-generic-types-and-protocols-in-typingpy">Predefined generic types and Protocols in typing.py</h3> <p>Like:</p> <ul> <li>Any.</li> <li>Union[t1, t2, …].</li> <li>Optional[t1]</li> <li>Tuple[t1, t2, …, tn].</li> <li>Callable[[t1, t2, …, tn], tr]</li> <li>Intersection[t1, t2, … ]</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t. Python is dynamic type language. Dynamic typing have it’s shortcoming. Python provide library to help type check. Must Clear Concepts that are related to type: Generic type, interface, ABC, type annotations.]]></summary></entry><entry><title type="html">Functional Programming</title><link href="https://benwzj.github.io/blog/2024/functional-programming/" rel="alternate" type="text/html" title="Functional Programming"/><published>2024-12-25T00:00:00+00:00</published><updated>2024-12-25T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/functional-programming</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/functional-programming/"><![CDATA[<h2 id="what-is-functional-programming">What is Functional Programming</h2> <p>Functional programming decomposes a problem into a set of functions. Ideally, functions only take inputs and produce outputs, and don’t have any internal state that affects the output produced for a given input.</p> <ul> <li>Well-known functional languages include the ML family (Standard ML, OCaml, and other variants) and Haskell.</li> <li>Like List and C++, Python is multi-paradigm language that support several different approaches. You can write programs or libraries that are largely procedural, object-oriented, or functional.</li> <li>In a large program, different sections might be written using different approaches; the GUI might be object-oriented while the processing logic is procedural or functional, for example.</li> <li>Functional style discourages functions with side effects that modify internal state or make other changes that aren’t visible in the function’s return value.</li> <li>Python won’t go to the extreme of avoiding all I/O or all assignments; instead, they’ll provide a functional-appearing interface but will use non-functional features internally. For example, the implementation of a function will still use assignments to local variables, but won’t modify global variables or have other side effects.</li> <li>Functional programming can be considered the opposite of object-oriented programming. But in Python you might combine the two approaches by writing functions that take and return instances representing objects in your application.</li> </ul> <h3 id="some-core-features">Some core features:</h3> <ul> <li>Input data flows through a set of functions. Each function operates on its input and produces some output.</li> <li>Functional programming tries to avoid mutable data types and state changes as much as possible.</li> <li>It works with the data that flow between functions.</li> <li>The use of recursion rather than loops or other structures as a primary flow control structure</li> <li>A focus on lists or arrays processing</li> <li>A focus on what is to be computed rather than on how to compute it</li> <li>The use of pure functions that avoid side effects</li> <li>The use of higher-order functions</li> </ul> <h3 id="why-should-you-avoid-objects-and-side-effects-in-functional-programming">Why should you avoid objects and side effects in Functional programming?</h3> <p>There are theoretical and practical advantages to the functional style: Formal provability. Modularity. Composability. Ease of debugging and testing.</p> <h2 id="iterator-iterable">Iterator, Iterable</h2> <ul> <li>Why iteration need two concepts: iterator and iterable? Because It can decouples the iteration algorithms from container data structures.</li> <li>Maybe we can say there are 3 concepts: iterator, not pure iterable, and pure iterable. iter(pure_iterable) return fresh iterator, iter(not_purt_iterable) return itself.</li> <li>List object is classic iterable, but not iterator.</li> <li>iterator is an important foundation for writing functional-style programs.</li> </ul> <h3 id="iterable-concept-official-document">Iterable concept (official document)</h3> <ul> <li>Any object that supports iter() and return iterator is said to be “iterable.”</li> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an<code class="language-plaintext highlighter-rouge"> __iter__()</code> method or with a <code class="language-plaintext highlighter-rouge">__getitem__()</code> method that implements sequence semantics are iterables.</li> <li>Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(), …).</li> </ul> <h4 id="iter">Iter()</h4> <ul> <li>When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object. This iterator is good for one pass over the set of values.</li> <li>When using iterables, it is usually not necessary to call iter() or deal with iterator objects yourself. The for statement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop.</li> </ul> <h3 id="iterator-concept">Iterator concept</h3> <ul> <li>An iterator object representing a stream of data. Repeated calls to the iterator’s <code class="language-plaintext highlighter-rouge">__next__()</code> method (or passing it to the built-in function next()) return successive items in the stream.</li> <li>Iterator just go forward, never backward.</li> <li>When no more data are available a StopIteration exception is raised instead.</li> <li>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: <ul> <li><code class="language-plaintext highlighter-rouge">iterator.__iter__()</code>,</li> <li><code class="language-plaintext highlighter-rouge">iterator.__next__()</code></li> </ul> </li> <li>Iterators are required to have an <code class="language-plaintext highlighter-rouge">__iter__()</code> method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. (One notable exception is code which attempts multiple iteration passes. )</li> <li>CPython does not consistently apply the requirement that an iterator define <code class="language-plaintext highlighter-rouge">__iter__()</code>.</li> <li>Every iterator is also an iterable, but not every iterable is an iterator. For example, list and string are iterable but they are not iterator.</li> <li>A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. But Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.</li> <li>An iterator can be created from an iterable by using the function <code class="language-plaintext highlighter-rouge">iter()</code>. <code class="language-plaintext highlighter-rouge">s = "GFG"</code> then <code class="language-plaintext highlighter-rouge">s = iter(s)</code> then <code class="language-plaintext highlighter-rouge">next(s) </code></li> <li>Iterators are used to allow user-defined classes to support iteration.</li> <li><code class="language-plaintext highlighter-rouge">__iter__()</code> function returns an iterator for the given object (like list, set, tuple, etc. or custom objects). It creates an object that can be accessed one element at a time using <code class="language-plaintext highlighter-rouge">__next__()</code> function.</li> </ul> <figure> <picture> <img src="/assets/img/iter-next.jpg" class="img-fluid rounded z-depth-1" width="25%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="iterator-vs-iterable">Iterator vs. Iterable</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <h4 id="an-iterable-is">An ITERABLE is:</h4> <ul> <li>an object that defines <strong>iter</strong> that returns a fresh ITERATOR, or it may have a <strong>getitem</strong> method suitable for indexed lookup.</li> </ul> <h4 id="an-iterator-is-an-object">An ITERATOR is an object:</h4> <ul> <li>with a <code class="language-plaintext highlighter-rouge">__next__</code> method that: <ul> <li>returns the next value in the iteration</li> <li>updates the state to point at the next value</li> <li>signals when it is done by raising StopIteration</li> </ul> </li> <li>with state that remembers where it is during iteration,</li> <li>and that is self-iterable (CPython does not consistently apply ).</li> </ul> <h4 id="difference-at-iter">Difference at <strong>iter</strong>()</h4> <p><code class="language-plaintext highlighter-rouge">__iter__()</code> is semantically different for iterables and iterators.</p> <ul> <li>In iterators, the method returns the iterator itself, which must implement a <code class="language-plaintext highlighter-rouge">.__next__() </code>method.</li> <li>In iterables, the method should yield items on demand. It return fresh iterator.</li> </ul> <h4 id="other-differences">Other differences</h4> <ul> <li>Pure iterables typically hold the data themselves.</li> <li>In contrast, iterators don’t hold the data but produce it one item at a time, depending on the caller’s demand.</li> <li>Therefore, iterators are more efficient than iterables in terms of memory consumption.</li> </ul> <h3 id="iteration-example">iteration example:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">countdown</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">start</span><span class="p">):</span>
   <span class="n">self</span><span class="p">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
 <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
   <span class="k">return</span> <span class="nf">countdown_iter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">countdown_iter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
   <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">count</span>
 <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
   <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
     <span class="k">raise</span> <span class="nb">StopIteration</span>
   <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">count</span>
   <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
   <span class="k">return</span> <span class="n">r</span>
</code></pre></div></div> <p>Then:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> countdown<span class="o">(</span>5<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>i <span class="k">in </span>c:
... print<span class="o">(</span>i, <span class="nv">end</span><span class="o">=</span><span class="s1">' '</span><span class="o">)</span>
...
5 4 3 2 1
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div> <ul> <li>c is iterable. 5 is it’s data. <code class="language-plaintext highlighter-rouge">iter(c)</code> will return fresh iterator (without <code class="language-plaintext highlighter-rouge">__iter__</code>).</li> <li><code class="language-plaintext highlighter-rouge">iter(c)</code> is technically not iterator because it have no <code class="language-plaintext highlighter-rouge">__iter__</code>.</li> <li>You can make <code class="language-plaintext highlighter-rouge">iter(c)</code> a iterator when you add def <code class="language-plaintext highlighter-rouge">__iter__(self)</code>: return self to countdown_iter class.</li> </ul> <h3 id="iteration-faq">Iteration FAQ</h3> <h4 id="if-a-object-support-next-but-not-support-iter-is-it-a-iterator">If a object support next(), but not support iter(). is it a iterator?</h4> <p>It is NOT iterator. But CPython doesn’t consistently apply.</p> <h4 id="if-object-a-support-iter-and-iterobjecta-return-an-object-which-just-support-next-but-not-iter-then-object-a-is-still-iterable">If object A support iter() and iter(objectA) return an object which just support next() but not iter(). Then object A is still iterable?</h4> <p>If no iter() then NOT iterator, so not iterable. But CPython doesn’t consistently apply.</p> <h4 id="why-so-many-blogs-conclude-the-differences-between-iterator-and-iterable-when-iterator-is-a-iterable-as-well">Why so many blogs conclude the differences between iterator and iterable, when iterator is a iterable as well?</h4> <p>the differnence is one thing: iterator iter() itself, but iterable iter() another object.</p> <h4 id="iterator-should-not-be-called-as-iterable-even-it-supoort-iter-because-iter-return-itself-instead-of-a-fresh-iterator-or-just-should-not-be-called-as-pure-iterable">Iterator should not be called as iterable even it supoort iter(), Because iter() return itself instead of a fresh iterator? Or just should not be called as pure iterable?</h4> <p>Yes, you can add the pure iterable concept.</p> <h2 id="for-loop-in-python">for loop in Python</h2> <h3 id="the-forin-is-always-used-in-combination-with-an-iterable-object">The <code class="language-plaintext highlighter-rouge">for...in</code> is always used in combination with an iterable object.</h3> <p>The Python for statement iterates over the members of a sequence in order, executing the block each time. It don’t like JavaScript, or C</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
 <span class="c1"># statements
</span></code></pre></div></div> <h3 id="underneath-the-covers">Underneath the covers</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="c1"># Get iterator object
</span><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span> <span class="c1"># Get next item
</span> <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span> <span class="c1"># No more items
</span>   <span class="k">break</span>
 <span class="c1"># statements
</span> <span class="bp">...</span>
</code></pre></div></div> <h3 id="understand-how-forin-loop-iterate-over-a-iterable-object">Understand how <code class="language-plaintext highlighter-rouge">for...in</code> loop iterate over a iterable object:</h3> <ul> <li>What the core point is that it is a lazy processing.</li> <li>I am going to make two example to display how <code class="language-plaintext highlighter-rouge">for...in</code> loop work underneath the cover. First one is loop over a enumerate object, and second one is loop over a range object, it raise error.</li> </ul> <h4 id="first-example">First example:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p>There are No error raising for these codes, but they are not work as expected. the code print: <code class="language-plaintext highlighter-rouge">[1, 3, 5, 7, 9]</code></p> <p><code class="language-plaintext highlighter-rouge">enumerate</code> object is generator object which will yield value from lst. It is lazy process. When <code class="language-plaintext highlighter-rouge">lst</code> change, value from enumerate object change as well, but i is keep going.</p> <p><code class="language-plaintext highlighter-rouge">for...in</code> is equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span> 
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span> 
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">enumerate()</code> is equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h4 id="second-example">Second example:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p>This code will raise IndexError. <code class="language-plaintext highlighter-rouge">range()</code> is iterable, but len(lst) in range() parameter here have been replace with constant value 10. Because len(lst) is not a lazy process. it don’t change any more. So i will up to 9.</p> <p>So the codes are equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <h2 id="generator">Generator</h2> <h3 id="what-is-generator">What is Generator</h3> <ul> <li>Generators are a special class of functions that simplify the task of writing iterators.</li> <li>Generator functions is a convenient shortcut to building iterators.</li> <li>Regular functions compute a value and return it, but generators return an iterator that returns a stream of values.</li> <li>When you call a generator function, it doesn’t return a single value; instead it returns a generator object that supports the iterator protocol.</li> <li>If a container object’s <code class="language-plaintext highlighter-rouge">__iter__()</code> method is implemented as a generator, it will automatically return a generator object supplying the <code class="language-plaintext highlighter-rouge">__iter__()</code> and <code class="language-plaintext highlighter-rouge">__next__()</code> methods.</li> <li>There are two ways to create Generator: generator expression and generator function</li> <li>If you create a list to sum the first n. When n is really big, then it consume lots of memory. Not acceptable. Generator (iterator) will perform the job much better.</li> <li>Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.</li> <li>When you use recursion for generator, you need to clear the subgenerator concept. Otherwise, it won’t work as you expect.</li> </ul> <h3 id="generator-is-not-pure-iterable">Generator is not pure iterable</h3> <p>Generator is iterator, but it is not pure iterable. That means iter(generator) return itself instead of a fresh iterator.</p> <h4 id="basic-example">Basic Example</h4> <p>clone python’s built-in range() function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">start must be smaller than stop</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">step</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">my_range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="create-generator">Create Generator</h3> <h4 id="generator-functions">Generator functions</h4> <p>Generator function is defined similar to normal function but there is only one difference, it is using yield keyword to return value used for each iteration.</p> <p>Any function containing a yield keyword is a generator function; this is detected by Python’s bytecode compiler which compiles the function specially as a result.</p> <p>Generator function return a lazy iterator. This iterator also call generator object.</p> <h4 id="generator-expressionalso-call-generator-comprehension">Generator expression(also call generator comprehension)</h4> <ul> <li>Generator expressions provide an additional shortcut to build generators out of expressions similar to that of list comprehensions.</li> <li>If the generated expressions are more complex, involve multiple steps, or depend on additional temporary state, Using generator function .</li> </ul> <h5 id="generator-comprehension">generator comprehension:</h5> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; nums_squared_gc = (num**2 for num in range(5))</code></p> <h5 id="list-comprehension">List comprehension:</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> nums_squared_lc <span class="o">=</span> <span class="o">[</span>num<span class="k">**</span>2 <span class="k">for </span>num <span class="k">in </span>range<span class="o">(</span>5<span class="o">)]</span>

<span class="o">&gt;&gt;&gt;</span> nums_squared_lc
<span class="o">[</span>0, 1, 4, 9, 16]
<span class="o">&gt;&gt;&gt;</span> nums_squared_gc
&lt;generator object &lt;genexpr&gt; at 0x107fbbc78&gt;
</code></pre></div></div> <h5 id="the-difference">The difference</h5> <p>We can think of list comprehensions as generator expressions wrapped in a list constructor:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list comprehension
</span><span class="n">doubles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">)]</span>
<span class="c1"># same as the list comprehension above
</span><span class="n">doubles</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span>
</code></pre></div></div> <p>The difference between generator and list comprehensions is that generator comprehension create lazy generator. it won’t consume all memory it need at one time. But list comprehension will, because list constructor run through the generator.</p> <h3 id="subgenerator-yield-from">Subgenerator (yield from)</h3> <ul> <li>You can use yield from to read data from an other generator.</li> <li>There is Subgenerator concept, read more at PEP380.</li> <li>When you use recursion in generator you will meet some weird issue. That is because you have no subgenerator concept. You need to use yield from for each subgenerator. Otherwise you need to use for to run over it (sometime works, sometime not works). Because Generator return Generator Object! it is different from normal function.</li> </ul> <h4 id="understand-subgenerator">Understand subgenerator</h4> <ul> <li>A Python generator is a form of coroutine, but has the limitation that it can only yield to its immediate caller. This means that a piece of code containing a yield cannot be factored out and put into a separate function in the same way as other code.</li> <li>Performing such a factoring causes the called function to itself become a generator, and it is necessary to explicitly iterate over this second generator and re-yield any values that it produces.</li> <li>If yielding of values is the only concern, this can be performed without much difficulty using a loop.</li> <li>However, if the subgenerator is to interact properly with the caller in the case of calls to send(), throw() and close(), things become considerably more difficult. As will be seen later, the necessary code is very complicated, and it is tricky to handle all the corner cases correctly.</li> </ul> <h4 id="understand-yield-from">Understand <code class="language-plaintext highlighter-rouge">yield from</code></h4> <ul> <li>yield from is a new syntax. You can check the codes for yield from in PEP380.</li> <li>This new syntax empowers you to refactor generators in a clean way by making it easy to yield every value from an iterator (which a generator conveniently happens to be).</li> <li>yield from also lets you chain generators together so that values bubble up and down the call stack without code having to do anything special.</li> <li>Let’s get one thing out of the way first. The explanation that yield from g is equivalent to for v in g: yield v does not even begin to do justice to what yield from is all about.</li> <li>Because, if all yield from does is expand the for loop, then it does not warrant adding yield from to the language and preclude a whole bunch of new features from being implemented in Python 2.x. PEP380 have the detail.</li> </ul> <h5 id="what-yield-from-does-is-it-establishes-a-transparent-bidirectional-connection-between-the-caller-and-the-sub-generator">What yield from does is it establishes a transparent bidirectional connection between the caller and the sub-generator:</h5> <ul> <li>The connection is “transparent” in the sense that it will propagate everything correctly too, not just the elements being generated (e.g. exceptions are propagated).</li> <li>The connection is “bidirectional” in the sense that data can be both sent from and to a generator.</li> </ul> <h4 id="example-of-using-recursion-in-generator">Example of using recursion in generator:</h4> <p>You can’t print 0,1,2,3,4 from following code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
    
<span class="n">gr</span> <span class="o">=</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">gr</span><span class="p">:</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <p>You need to use yield from:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
</code></pre></div></div> <h3 id="passing-values-into-a-generator">Passing values into a generator</h3> <p>In Python 2.5 there’s a simple way to pass values into a generator. <code class="language-plaintext highlighter-rouge">yield</code> became an expression, returning a value that can be assigned to a variable or otherwise operated on:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
<span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span>
</code></pre></div></div> <p>(Recommend that you always put parentheses around a yield expression.)</p> <p>Values are sent into a generator by calling its .send(value) method. This method resumes the generator’s code and the yield expression returns the specified value.</p> <p>Simple example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">counter</span><span class="p">(</span><span class="n">maximum</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maximum</span><span class="p">:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
        <span class="c1"># If value provided, change counter
</span>        <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">val</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <p>The value of val is always None when regular <code class="language-plaintext highlighter-rouge">__next__()</code> method is called. When <code class="language-plaintext highlighter-rouge">.send(value)</code> is called. the val will be the value</p> <h4 id="how-do-sendvalue-resumes-the-generator">How do send(value) resumes the generator?</h4> <ul> <li>When calling next(), the code resume from the next line which after last yield.</li> <li>When calling <code class="language-plaintext highlighter-rouge">.send(value)</code>, the code resume from the last yield! And also yield a value back to <code class="language-plaintext highlighter-rouge">.send(value)</code> function (like <code class="language-plaintext highlighter-rouge">next()</code> do).</li> <li>You can even can’t send(value) at the very beginning, otherwise get error: TypeError: can’t send non-None value to a just-started generator</li> </ul> <h2 id="built-in-functions-for-iterators">Built-in functions for iterators</h2> <h3 id="map-and-filter-duplicate-the-features-of-generator-expressions">map() and filter() duplicate the features of generator expressions:</h3> <p>map(f, iterA, iterB, …) returns an iterator over the sequence f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ….</p> <h3 id="filterpredicate-iter">filter(predicate, iter)</h3> <p>returns an iterator over all the sequence elements that meet a certain condition, and is similarly duplicated by list comprehensions.</p> <h3 id="enumerateiter-start0">enumerate(iter, start=0)</h3> <p>counts off the elements in the iterable returning 2-tuples containing the count (from start) and each element.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">([</span><span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="sortediterable-keynone-reversefalse">Sorted(iterable, key=None, reverse=False)</h3> <p>collects all the elements of the iterable into a list, sorts the list, and returns the sorted result. The key and reverse arguments are passed through to the constructed list’s sort() method.</p> <h3 id="the-anyiter-and-alliter">The any(iter) and all(iter)</h3> <p>built-ins look at the truth values of an iterable’s contents. any() returns True if any element in the iterable is a true value, and all() returns True if all of the elements are true values</p> <h3 id="zipitera-iterb-">zip(iterA, iterB, …)</h3> <p>takes one element from each iterable and returns them in a tuple</p> <h2 id="itertools-module">itertools module</h2> <p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p> <h3 id="combinatoric-iterators">Combinatoric iterators:</h3> <h4 id="permutationsiterable-rnone">permutations(iterable, r=None)</h4> <ul> <li>Return successive r length permutations of elements in the iterable.</li> <li>Return a iterable object, elements are tuple.</li> <li>Elements are treated as unique based on their position, not on their value.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> print<span class="o">([</span>p <span class="k">for </span>p <span class="k">in </span>permutations<span class="o">(</span><span class="s1">'pro'</span><span class="o">)])</span>
<span class="o">[(</span><span class="s1">'p'</span>, <span class="s1">'r'</span>, <span class="s1">'o'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'p'</span>, <span class="s1">'o'</span>, <span class="s1">'r'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'r'</span>, <span class="s1">'p'</span>, <span class="s1">'o'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'r'</span>, <span class="s1">'o'</span>, <span class="s1">'p'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'o'</span>, <span class="s1">'p'</span>, <span class="s1">'r'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'o'</span>, <span class="s1">'r'</span>, <span class="s1">'p'</span><span class="o">)]</span>
</code></pre></div></div> <h4 id="productiterables-repeat1">product(*iterables, repeat=1)</h4> <p>Cartesian product of input iterables. What Cartesian product do is as following: <code class="language-plaintext highlighter-rouge">product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</code></p> <p><code class="language-plaintext highlighter-rouge">repeat</code> parameter</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">product</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span> <span class="n">means</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="nf">product</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">).</span>
<span class="c1"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
</span></code></pre></div></div> <p>This function is roughly equivalent to the following code, except that the actual implementation does not build up intermediate results in memory:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">pools</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="n">pool</span><span class="p">)</span> <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span> <span class="o">*</span> <span class="n">repeat</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[]]</span>
    <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">pools</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">result</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">pool</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">prod</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
        <span class="k">yield</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">prod</span><span class="p">)</span>
</code></pre></div></div> <h2 id="functools-module">functools module</h2> <p>A higher-order function takes one or more functions as input and returns a new function. The most useful tool in this module is the functools.partial() function.</p> <h3 id="functoolspartial">functools.partial()</h3> <p>The constructor for partial() takes the arguments (function, arg1, arg2, …, kwarg1=value1, kwarg2=value2). The resulting object is callable, so you can just call it to invoke function with the filled-in arguments.</p> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">functools</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">subsystem</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Write the contents of </span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="s"> to the specified subsystem.</span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">%s: %s</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">subsystem</span><span class="p">,</span> <span class="n">message</span><span class="p">))</span>
    <span class="bp">...</span>

<span class="n">server_log</span> <span class="o">=</span> <span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">log</span><span class="p">,</span> <span class="n">subsystem</span><span class="o">=</span><span class="sh">'</span><span class="s">server</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">server_log</span><span class="p">(</span><span class="sh">'</span><span class="s">Unable to open socket</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="functoolsreduce">functools.reduce()</h3> <p><code class="language-plaintext highlighter-rouge">functools.reduce()</code> takes the first two elements A and B returned by the iterator and calculates func(A, B)</p> <p>Syntax: <code class="language-plaintext highlighter-rouge">functools.reduce(func, iterable[, initializer])</code> func must be a function that takes two elements and returns a single value.</p> <p><code class="language-plaintext highlighter-rouge">reduce()</code> is roughly equivalent to the following Python function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">,</span> <span class="n">initializer</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">it</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">initializer</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">initializer</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">it</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div> <p>Example: from functools import reduce</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="k">return</span> <span class="nf">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="nf">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div></div> <h2 id="small-functions-and-the-lambda-expression">Small functions and the lambda expression</h2> <p>When writing functional-style programs, you’ll often need little functions that act as <strong>predicates</strong> or that combine elements in some way.</p> <p>If there’s a Python built-in or a module function that’s suitable</p> <h3 id="operator--standard-operators-as-functions">operator — Standard operators as functions</h3> <p>The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. For example, operator.add(x, y) is equivalent to the expression x+y.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>

<span class="n">student_tuples</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">john</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">jane</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B</span><span class="sh">'</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">dave</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B</span><span class="sh">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
<span class="p">]</span>
<span class="nf">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nf">itemgetter</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="c1"># equal to:
</span><span class="nf">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">student</span><span class="p">:</span> <span class="n">student</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> 
<span class="c1"># [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
</span></code></pre></div></div> <p>one way to write small functions is to use the lambda expression. (not recommend)</p> <p>An alternative is to just use the def statement and define a function in the usual way. (recommend)</p> <h2 id="recursion">Recursion</h2> <h3 id="recursion-introduce">Recursion introduce</h3> <p>In most case, recursion won’t be a good choice.</p> <ul> <li>Recursive implementations often consume more memory than non-recursive ones.</li> <li>In some cases, using recursion may result in slower execution time.</li> </ul> <p>Traversal of tree</p> <ul> <li>Recursion is good for Traversal of tree-like data structures.</li> </ul> <h3 id="recursion-in-python">Recursion in Python</h3> <ul> <li>You can find out what Python’s recursion limit is with a function from the sys module called getrecursionlimit().</li> <li>You can change it, too, with setrecursionlimit()</li> <li>When you call a function in Python, the interpreter creates a new local namespace so that names defined within that function don’t collide with identical names defined elsewhere.</li> </ul> <h2 id="functional-features-functions">functional features functions</h2> <p>Build-in functions: map() filter() reduce().</p> <h3 id="mapfunction-iterable-iterables">map(function, iterable, *iterables)</h3> <ul> <li>Return an iterator that applies function to every item of iterable, yielding the results.</li> <li>If additional iterables arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.</li> <li>With multiple iterables, the iterator stops when the shortest iterable is exhausted.</li> <li>For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().</li> <li>map() is Functional Style in Python. Although it can be replace by for loop.</li> </ul> <p>Advantage</p> <ul> <li>Since map() is written in C and is highly optimized, its internal implied loop can be more efficient than a regular Python for loop.</li> <li>map() returns a map object, which is an iterator that yields items on demand. Using map() is good for memory consumption. This is compare to Python for loop.</li> </ul> <h3 id="filterfunction-iterable">filter(function, iterable)</h3> <p>Construct an iterator from those elements of iterable for which function is true.</p> <ul> <li>Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None.</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>What is the difference between generator and coroutine</li> <li>What is the difference between generator object and generator function?</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><summary type="html"><![CDATA[What is Functional Programming]]></summary></entry><entry><title type="html">Python Function</title><link href="https://benwzj.github.io/blog/2024/py-function/" rel="alternate" type="text/html" title="Python Function"/><published>2024-12-25T00:00:00+00:00</published><updated>2024-12-25T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-function</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-function/"><![CDATA[<h2 id="function-object">Function Object</h2> <h3 id="callable-object">Callable Object</h3> <h4 id="callable-object-including-following">Callable object including following:</h4> <ul> <li>user-defined functions,</li> <li>built-in functions,</li> <li>methods of built-in objects,</li> <li>class objects,</li> <li>methods of class instances,</li> <li>and all objects having a <code class="language-plaintext highlighter-rouge">__call__()</code> method are callable!</li> </ul> <h4 id="user-defined-functions-are-callable-objects">user-defined functions are callable objects</h4> <p>When you define a function, you are using user-defined function type (function class). Function object is instance of function type. All function type is callable type, support <code class="language-plaintext highlighter-rouge">__call__()</code>. You can define your own callable class:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> class Callable<span class="o">(</span>object<span class="o">)</span>:
...     def __init__<span class="o">(</span>self, name<span class="o">)</span>:
...         self.name <span class="o">=</span> name
...     def __call__<span class="o">(</span>self, greeting<span class="o">)</span>:
...         <span class="k">return</span> <span class="s1">'{}, {}!'</span>.format<span class="o">(</span>greeting, self.name<span class="o">)</span>
... 
<span class="o">&gt;&gt;&gt;</span> Callable<span class="o">(</span><span class="s1">'World'</span><span class="o">)(</span><span class="s1">'Hello'</span><span class="o">)</span>
<span class="s1">'Hello, World!'</span>
</code></pre></div></div> <h3 id="function-object-features">Function Object features:</h3> <ul> <li>user-defined Function objects are created by function definitions. The only operation on a function object is to call it: <code class="language-plaintext highlighter-rouge">func(argument-list)</code>.</li> <li>Functions are first class objects In Python, functions behave like any other object, such as an int or a list. That means that you can use functions as arguments to other functions, store functions as dictionary values, or return a function from another function.</li> <li>Two different function object types: built-in functions and user-defined functions. Both support the same operation (to call the function), but the implementation is different.</li> <li>Python creates function objects for you when you use a def statement, or you use a lambda expression:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> def foo<span class="o">()</span>: pass
... 
<span class="o">&gt;&gt;&gt;</span> foo
&lt;<span class="k">function </span>foo at 0x106aafd70&gt;
<span class="nb">type</span><span class="o">(</span>foo<span class="o">)</span>
&lt;class <span class="s1">'function'</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> lambda: None
&lt;<span class="k">function</span> &lt;lambda&gt; at 0x106d90668&gt;
</code></pre></div></div> <h3 id="user-defined-function-have-some-special-attributes">user-defined function have some Special attributes:</h3> <ul> <li><code class="language-plaintext highlighter-rouge">__name__</code>, The function’s name.</li> <li><code class="language-plaintext highlighter-rouge">__module__</code>, The name of the module the function was defined in, or None if unavailable.</li> <li><code class="language-plaintext highlighter-rouge">__code__</code>, The code object representing the compiled function body.</li> <li><code class="language-plaintext highlighter-rouge">__globals__</code>, A reference to the dictionary that holds the function’s global variables</li> <li><code class="language-plaintext highlighter-rouge">__dict__</code>, The namespace supporting arbitrary function attributes.</li> </ul> <h2 id="function-definitions">Function definitions</h2> <p>A function definition defines a user-defined function object.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">funcdef</span>  <span class="p">::</span><span class="o">=</span> <span class="p">[</span><span class="n">decorators</span><span class="p">]</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span> <span class="n">funcname</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span> <span class="p">[</span><span class="n">parameter_list</span><span class="p">]</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span>
               <span class="p">[</span><span class="sh">"</span><span class="s">-&gt;</span><span class="sh">"</span> <span class="n">expression</span><span class="p">]</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span> <span class="n">suite</span>
</code></pre></div></div> <ul> <li>A function definition is an executable statement. Its execution binds the function name in the current local namespace to a function object (a wrapper around the executable code for the function). This function object contains a reference to the current global namespace as the global namespace to be used when the function is called.</li> <li>The function definition does not execute the function body; this gets executed only when the function is called.</li> </ul> <h3 id="decorator">Decorator</h3> <ul> <li>Decorators are used to add some design patterns to a function without changing its structure.</li> <li>When a function returning another function, usually applied as a function transformation using the @wrapper syntax. This is Decorator.</li> <li>To apply a decorator we first define the decorator function.</li> <li>A function definition may be wrapped by one or more decorator expressions.</li> <li>Common examples for decorators are classmethod() and staticmethod().</li> <li>The decorator syntax is merely syntactic sugar, the following two function definitions are semantically equivalent:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
    <span class="bp">...</span>
<span class="n">f</span> <span class="o">=</span> <span class="nf">staticmethod</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</code></pre></div></div> <p>and</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
    <span class="bp">...</span>
</code></pre></div></div> <h4 id="example">Example</h4> <p>we have a decorator function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">uppercase_decorator</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="n">func</span> <span class="o">=</span> <span class="nf">function</span><span class="p">()</span>
        <span class="n">make_uppercase</span> <span class="o">=</span> <span class="n">func</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">make_uppercase</span>

    <span class="k">return</span> <span class="n">wrapper</span>
</code></pre></div></div> <p>Option1:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">say_hi</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">'</span><span class="s">hello there</span><span class="sh">'</span>

<span class="n">decorate</span> <span class="o">=</span> <span class="nf">uppercase_decorator</span><span class="p">(</span><span class="n">say_hi</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">decorate</span><span class="p">())</span> 
<span class="c1">#print HELLO THERE
</span></code></pre></div></div> <p>Option2:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@uppercase_decorator</span>
<span class="k">def</span> <span class="nf">say_hi</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">'</span><span class="s">hello there</span><span class="sh">'</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">say_hi</span><span class="p">())</span>
<span class="c1">#print HELLO THERE
</span></code></pre></div></div> <h3 id="annotation">Annotation</h3> <p>Function annotations are arbitrary python expressions that are associated with various part of functions. These expressions are evaluated at compile time and have no life in python’s runtime environment. Python does not attach any meaning to these annotations.</p> <ul> <li>Function annotations take life only when interpreted by third party libraries, for example, mypy.</li> <li>Python supports dynamic typing and hence no module is provided for type checking. Annotations can provide more information.</li> <li>Support simple parameters, excess parameters, nested parameters, return type.</li> <li>Type annotations introduced in Python 3.0</li> <li>Special attribute <code class="language-plaintext highlighter-rouge">‘__annotations__’</code> outputs the dictionary having a special key <code class="language-plaintext highlighter-rouge">‘return’</code> and other keys having name of the annotated arguments.</li> <li>standard library pydoc, inspect can provide information of all the annotation of a module.</li> </ul> <h4 id="type-hints">Type hints</h4> <p>Annotations were introduced in Python 3.0 originally without any specific purpose. They were simply a way to associate arbitrary expressions to function arguments and return values. Years later, PEP 484 defined how to add type hints to your Python code, based off work that Jukka Lehtosalo had done on his Ph.D. project, Mypy.</p> <ul> <li>Python 3.5 introduced Lib/typing.py (type hints), which you can add to your code using the type annotations introduced in Python 3.0.</li> <li>Now The main purpose of annotation is to add type hints.</li> <li>lib/typing.py — Support for type hints</li> </ul> <h2 id="parameter-argument">Parameter, argument</h2> <p>Parameter refer to reference which appear on the funciton definition. Argument refer to the value which provided for function when it was bind</p> <h3 id="basic-concepts">Basic concepts</h3> <h4 id="python-supports-5-types-of-arguments">Python supports 5 types of arguments:</h4> <ul> <li>Positional arguments.</li> <li>Keyword arguments.</li> <li>Any number of positional arguments (*args)</li> <li>Any number of keyword arguments (**kwargs)</li> <li>Default arguments.</li> </ul> <p>We could define our own function parameters in a way that restricts them to only accept positional arguments, or only keyword arguments by using the characters / and *.</p> <h4 id="by-default">By default</h4> <p>a function must be called with the correct number of arguments. (this is different from JavaScript)</p> <h4 id="positional-arguments">Positional arguments</h4> <p>Arguments that match up parameters based on their position in the invocation expression are called positional arguments.</p> <ul> <li>Python will resolve all the arguments to positional arguments.</li> </ul> <h4 id="keyword-arguments">Keyword Arguments</h4> <p>send arguments with the key = value syntax. This way the order of the arguments does not matter. (JavaScript is not support this feature) def my_function(child3, child2, child1): print(“The youngest child is “ + child3)</p> <p>my_function(child1 = “Emil”, child2 = “Tobias”, child3 = “Linus”)</p> <h4 id="-args">* args</h4> <p>add a * before the parameter name on definition.</p> <ul> <li> <p>This way the function will receive a tuple of arguments, and can access the items accordingly by position. def my_function(*kids): print(“The youngest child is “ + kids[2])</p> </li> <li> <p>Parameters after *args are keyword-only.</p> </li> </ul> <h4 id="kwargs">**kwargs</h4> <p>add two asterisk: ** before the parameter name in the function definition.</p> <p>This way the function will receive a dictionary of arguments, and can access the items accordingly by key:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="o">**</span><span class="n">kid</span><span class="p">):</span>
  <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">His last name is </span><span class="sh">"</span> <span class="o">+</span> <span class="n">kid</span><span class="p">[</span><span class="sh">"</span><span class="s">lname</span><span class="sh">"</span><span class="p">])</span>

<span class="nf">my_function</span><span class="p">(</span><span class="n">fname</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Tobias</span><span class="sh">"</span><span class="p">,</span> <span class="n">lname</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Refsnes</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">**kwargs</code> must be the last parameter.</p> <h4 id="default-parameter-value">Default Parameter Value</h4> <p>When one or more parameters have the form parameter = expression, the function is said to have “default parameter values.” For a parameter with a default value, the corresponding argument may be omitted from a call, in which case the parameter’s default value is substituted:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">country</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Norway</span><span class="sh">"</span><span class="p">):</span>
  <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">I am from </span><span class="sh">"</span> <span class="o">+</span> <span class="n">country</span><span class="p">)</span>

<span class="nf">my_function</span><span class="p">()</span>
</code></pre></div></div> <p>If a parameter has a default value, all following parameters up until the “*” must also have a default value — this is a syntactic restriction that is not expressed by the grammar.</p> <p>Default parameter values are evaluated from left to right when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that the same “pre-computed” value is used for each call. This is especially important to understand when a default parameter value is a mutable object, such as a list or a dictionary. if the function modifies the object, the default parameter value is in effect modified. This is generally not what was intended. So, DO NOT set mutable type as Default value.</p> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">i</span> <span class="o">=</span> <span class="mi">6</span>
<span class="nf">f</span><span class="p">()</span> <span class="c1"># print 5
</span></code></pre></div></div> <p>Another one:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">):</span>
    <span class="n">x</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="nf">f</span><span class="p">()</span>
<span class="nf">f</span><span class="p">()</span>
<span class="nf">f</span><span class="p">([</span><span class="mi">99</span><span class="p">])</span>
<span class="nf">f</span><span class="p">()</span>

<span class="c1"># Print: 
# [1, 2, 3, 1]
# [1, 2, 3, 1, 1]
# [99, 1]
# [1, 2, 3, 1, 1, 1]
</span></code></pre></div></div> <p>Try not to set default parameter value as mutable object. Instead, Using following:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">default_parameter_function</span><span class="p">(</span><span class="n">lst</span> <span class="o">=</span> <span class="n">none</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">lst</span> <span class="o">==</span> <span class="n">none</span><span class="p">:</span>
    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="c1"># ...
</span></code></pre></div></div> <h3 id="all-argument-expressions-are-evaluated-before-the-call-is-attempted">All argument expressions are evaluated before the call is attempted.</h3> <p>All keyword arguments have to follow all positional arguments. That means all positional arguments provide first, then the keyword argument.</p> <h4 id="if-keyword-arguments-are-present-they-are-first-converted-to-positional-arguments">If keyword arguments are present, they are first converted to positional arguments.</h4> <ul> <li>First, a list of unfilled slots is created for the formal parameters. If there are N positional arguments, they are placed in the first N slots.</li> <li>Next, for each keyword argument, the identifier is used to determine the corresponding slot (if the identifier is the same as the first formal parameter name, the first slot is used, and so on). If the slot is already filled, a TypeError exception is raised. Otherwise, the value of the argument is placed in the slot, filling it (even if the expression is None, it fills the slot).</li> <li>When all arguments have been processed, the slots that are still unfilled are filled with the corresponding default value from the function definition. (Default values are calculated, once, when the function is defined; thus, a mutable object such as a list or dictionary used as default value will be shared by all calls that don’t specify an argument value for the corresponding slot; this should usually be avoided.)</li> <li>If there are any unfilled slots for which no default value is specified, a TypeError exception is raised. Otherwise, the list of filled slots is used as the argument list for the call.</li> </ul> <h4 id="expression-argument-implementation-detail">*expression argument implementation detail</h4> <p>If the syntax *expression appears in the function call, expression must evaluate to an iterable. Elements from these iterables are treated as if they were additional positional arguments. For the call f(x1, x2, *y, x3, x4), if y evaluates to a sequence y1, …, yM, this is equivalent to a call with M+4 positional arguments x1, x2, y1, …, yM, x3, x4.</p> <p>A consequence of this is that although the *expression syntax may appear after explicit keyword arguments, it is processed before the keyword arguments (and any **expression arguments). So:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> def f<span class="o">(</span>a, b<span class="o">)</span>:
...     print<span class="o">(</span>a, b<span class="o">)</span>
...
<span class="o">&gt;&gt;&gt;</span> f<span class="o">(</span><span class="nv">b</span><span class="o">=</span>1, <span class="k">*</span><span class="o">(</span>2,<span class="o">))</span>
2 1
<span class="o">&gt;&gt;&gt;</span> f<span class="o">(</span><span class="nv">a</span><span class="o">=</span>1, <span class="k">*</span><span class="o">(</span>2,<span class="o">))</span>
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"&lt;stdin&gt;"</span>, line 1, <span class="k">in</span> &lt;module&gt;
TypeError: f<span class="o">()</span> got multiple values <span class="k">for </span>keyword argument <span class="s1">'a'</span>
<span class="o">&gt;&gt;&gt;</span> f<span class="o">(</span>1, <span class="k">*</span><span class="o">(</span>2,<span class="o">))</span>
1 2
</code></pre></div></div> <h4 id="expression-argument">**expression argument</h4> <p>If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments. If a keyword is already present (as an explicit keyword argument, or from another unpacking), a TypeError exception is raised.</p> <h3 id="what-do-single-slash--asterisk--means-in-parameter">What do single slash /, asterisk * means in parameter.</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func_name</span><span class="p">(</span><span class="n">pos_only</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">pos_or_keyword</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keyword_only</span><span class="p">):</span>
    <span class="c1"># function body
</span></code></pre></div></div> <ul> <li>slash <code class="language-plaintext highlighter-rouge">/</code> denotes that the parameters prior to it are positional-only.</li> <li>asterisk * denotes that after <em>, it accept more optional arguments which must be specified as keyword arguments, but no positional arguments is accepted. (</em>args have same effect as *, it accept keyword arguments only after *args)</li> <li>e.g. built-in sorted function: <code class="language-plaintext highlighter-rouge">sorted(iterable, /, *, key=None, reverse=False)</code></li> <li>e.g. sum built-in function:<code class="language-plaintext highlighter-rouge">sum(iterable, /, start=0)</code>. sum accept up to 2 arguments, the second one don’t have to be keyword argument.</li> </ul> <h2 id="return-value">Return value</h2> <p>A call always returns some value, possibly None, unless it raises an exception. How this value is computed depends on the type of the callable object. If it is</p> <ul> <li>a user-defined function: The code block for the function is executed, passing it the argument list. The first thing the code block will do is bind the formal parameters to the arguments; this is described in section Function definitions. When the code block executes a return statement, this specifies the return value of the function call.</li> <li>a built-in function or method: The result is up to the interpreter; see Built-in Functions for the descriptions of built-in functions and methods.</li> <li>a class object: A new instance of that class is returned.</li> <li>a class instance method: The corresponding user-defined function is called, with an argument list that is one longer than the argument list of the call: the instance becomes the first argument.</li> <li>a class instance: The class must define a <code class="language-plaintext highlighter-rouge">__call__()</code> method; the effect is then the same as if that method was called.</li> </ul> <h2 id="lambda">Lambda</h2> <p>A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.</p> <p>The expression lambda parameters: expression yields a function object. The unnamed object behaves like a function object defined with:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="err">&lt;</span><span class="nf">lambda</span><span class="o">&gt;</span><span class="p">(</span><span class="n">parameters</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">expression</span>
</code></pre></div></div> <p>Note that functions created with lambda expressions cannot contain statements or annotations.</p> <h3 id="name-of-lambda">Name of lambda</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span>
<span class="nf">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">__code__</span><span class="p">.</span><span class="n">co_name</span><span class="p">)</span> <span class="c1"># &lt;lambda&gt;
</span></code></pre></div></div> <p>The word <code class="language-plaintext highlighter-rouge">'&lt;lambda&gt;'</code> can’t be the name of a normal function in Python, since it contains two invalid characters: &lt; and &gt;.</p> <h3 id="why-lambda">Why lambda</h3> <p>The power of lambda is better shown when you use them as an anonymous function inside another function.</p> <h3 id="how-to-use-lambda">How to use lambda</h3> <p>don’t need return keyword.</p> <p>Just like curry function in JavaScript:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="k">return</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">n</span>

<span class="n">mydoubler</span> <span class="o">=</span> <span class="nf">myfunc</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">mytripler</span> <span class="o">=</span> <span class="nf">myfunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">mydoubler</span><span class="p">(</span><span class="mi">11</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">mytripler</span><span class="p">(</span><span class="mi">11</span><span class="p">))</span>
</code></pre></div></div> <p>Or same as high order function:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> student_tuples <span class="o">=</span> <span class="o">[</span>
...     <span class="o">(</span><span class="s1">'john'</span>, <span class="s1">'A'</span>, 15<span class="o">)</span>,
...     <span class="o">(</span><span class="s1">'jane'</span>, <span class="s1">'B'</span>, 12<span class="o">)</span>,
...     <span class="o">(</span><span class="s1">'dave'</span>, <span class="s1">'B'</span>, 10<span class="o">)</span>,
... <span class="o">]</span>
<span class="o">&gt;&gt;&gt;</span> sorted<span class="o">(</span>student_tuples, <span class="nv">key</span><span class="o">=</span>lambda student: student[2]<span class="o">)</span>   <span class="c"># sort by age</span>
<span class="o">[(</span><span class="s1">'dave'</span>, <span class="s1">'B'</span>, 10<span class="o">)</span>, <span class="o">(</span><span class="s1">'jane'</span>, <span class="s1">'B'</span>, 12<span class="o">)</span>, <span class="o">(</span><span class="s1">'john'</span>, <span class="s1">'A'</span>, 15<span class="o">)]</span>
</code></pre></div></div> <h2 id="scopes-and-namespaces">Scopes and Namespaces</h2> <p>Namespace is the mapping from names to objects. Scope is the available variables in the specific area.</p> <h3 id="namespaces">Namespaces</h3> <ul> <li>A namespace is a mapping from names to objects.</li> <li>In a sense the set of attributes of an object also form a namespace.</li> </ul> <p>Namespaces are created at different moments and have different lifetimes:</p> <ul> <li>The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.</li> <li>The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits.</li> <li>The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function. (Of course, recursive invocations each have their own local namespace.)</li> </ul> <h3 id="scopes">Scopes</h3> <h4 id="what-is-scope">What is Scope</h4> <ul> <li>A scope is a region of code where a given set of name bindings is accessible.</li> <li>A scope can be thought of as an area in a script where given variables are available.</li> <li>A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</li> <li>Although scopes are determined statically, they are used dynamically.</li> </ul> <h4 id="how-scope-works">How Scope works</h4> <p>Python follows the LEGB rule to determine what value to resolve a variable with when it’s encountered, or whether to throw an error.</p> <p>LEGB stands for Local, Enclosing, Global and Built-in. This rule simply states the order of scopes in which Python searches for the existence of a given variable.</p> <p>At any time during execution, there are 3 or 4 nested scopes whose namespaces are directly accessible:</p> <ul> <li>the innermost scope, which is searched first, contains the local names</li> <li>the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names</li> <li>the next-to-last scope contains the current module’s global names</li> <li>the outermost scope (searched last) is the namespace containing built-in names</li> </ul> <p><code class="language-plaintext highlighter-rouge">global</code> or <code class="language-plaintext highlighter-rouge">nonlocal</code> statement affect the Scopes</p> <ul> <li>The global statement can be used to indicate that particular variables live in the global scope and should be rebound there;</li> <li>The nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there.</li> </ul> <h3 id="example-1">Example</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">scope_test</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">do_local</span><span class="p">():</span>
        <span class="n">spam</span> <span class="o">=</span> <span class="sh">"</span><span class="s">local spam</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">do_nonlocal</span><span class="p">():</span>
        <span class="k">nonlocal</span> <span class="n">spam</span>
        <span class="n">spam</span> <span class="o">=</span> <span class="sh">"</span><span class="s">nonlocal spam</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">do_global</span><span class="p">():</span>
        <span class="k">global</span> <span class="n">spam</span>
        <span class="n">spam</span> <span class="o">=</span> <span class="sh">"</span><span class="s">global spam</span><span class="sh">"</span>

    <span class="n">spam</span> <span class="o">=</span> <span class="sh">"</span><span class="s">test spam</span><span class="sh">"</span>
    <span class="nf">do_local</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">After local assignment:</span><span class="sh">"</span><span class="p">,</span> <span class="n">spam</span><span class="p">)</span>
    <span class="nf">do_nonlocal</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">After nonlocal assignment:</span><span class="sh">"</span><span class="p">,</span> <span class="n">spam</span><span class="p">)</span>
    <span class="nf">do_global</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">After global assignment:</span><span class="sh">"</span><span class="p">,</span> <span class="n">spam</span><span class="p">)</span>

<span class="nf">scope_test</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">In global scope:</span><span class="sh">"</span><span class="p">,</span> <span class="n">spam</span><span class="p">)</span>
</code></pre></div></div> <p>The output of the example code is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
In global scope: global spam
</code></pre></div></div> <h3 id="python-is-a-lexically-scoped-language">Python is a lexically-scoped language</h3> <p>(Lexically-scoped also known as statically-scoped. ) Many modern programming languages including C, Python, JavaScript, etc. are lexically-scoped languages. They work on a lexical-scoping model.</p> <p>Lexical-scoping implies the fact that names are accessible only where they are defined, not anywhere else.</p> <p>It means that a name is available only in its lexical context i.e the place where it is defined in the source code, not in the calling context (also known as dynamic context).</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>

<span class="k">def</span> <span class="nf">f1</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">f2</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="nf">f1</span><span class="p">()</span>

<span class="nf">f2</span><span class="p">()</span><span class="c1"># 10
</span></code></pre></div></div> <p>The word ‘lexical’ means ‘source code’</p> <h4 id="what-exactly-is-meant-by-the-term-context">What exactly is meant by the term ‘context’.</h4> <p>At any given point in a piece of code, the set of all names available is known as a context. A context is sometimes also referred to as an environment.</p> <p>lexical context example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># outer lexical context of f()
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">20</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
    <span class="c1"># local lexical context
</span>    <span class="n">c</span> <span class="o">=</span> <span class="mi">30</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mi">40</span>
</code></pre></div></div> <p>In contrast, a dynamic context, or an execution context, depends upon the state of a program i.e a particular stage of its execution.</p> <h2 id="code-object">Code Object</h2> <h3 id="what-is-code-object">What is Code object</h3> <p>Code objects are a low-level detail of the CPython implementation. Each one represents a chunk of executable code that hasn’t yet been bound into a function. Code objects represent byte-compiled executable Python code, or bytecode.</p> <h4 id="the-difference-between-a-code-object-and-a-function-object">The difference between a code object and a function object</h4> <p>is that the function object contains an explicit reference to the function’s globals (the module in which it was defined), while a code object contains no context; also the default argument values are stored in the function object, not in the code object (because they represent values calculated at run-time). Unlike function objects, code objects are immutable and contain no references (directly or indirectly) to mutable objects.</p> <h4 id="built-in-function-compile-return-code-object">built-in function <code class="language-plaintext highlighter-rouge">compile()</code> return code object.</h4> <p>example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">code_str</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
print(</span><span class="sh">"</span><span class="s">Hello Code Objects</span><span class="sh">"</span><span class="s">)
</span><span class="sh">"""</span>
<span class="c1"># Create the code object
</span><span class="n">code_obj</span> <span class="o">=</span> <span class="nf">compile</span><span class="p">(</span><span class="n">code_str</span><span class="p">,</span> <span class="sh">'</span><span class="s">&lt;string&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">exec</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># get the code object
</span><span class="nf">print</span><span class="p">(</span><span class="n">code_obj</span><span class="p">)</span>
<span class="c1">#Attributes of code object
</span><span class="nf">print</span><span class="p">(</span><span class="nf">dir</span><span class="p">(</span><span class="n">code_obj</span><span class="p">))</span>
<span class="c1"># The filename
</span><span class="nf">print</span><span class="p">(</span><span class="n">code_obj</span><span class="p">.</span><span class="n">co_filename</span><span class="p">)</span>
<span class="c1"># The first chunk of raw bytecode
</span><span class="nf">print</span><span class="p">(</span><span class="n">code_obj</span><span class="p">.</span><span class="n">co_code</span><span class="p">)</span>
<span class="c1">#The variable Names
</span><span class="nf">print</span><span class="p">(</span><span class="n">code_obj</span><span class="p">.</span><span class="n">co_varnames</span><span class="p">)</span>
</code></pre></div></div> <h3 id="what-is-code-object-of-function">What is Code object of function</h3> <p>A code object describes different aspects of a compiled function, based on its byte code.</p> <ul> <li>They expose various details about a function such as the number of positional arguments it must have; the number of its local variables; its free variables;</li> <li>Every function in Python has a <code class="language-plaintext highlighter-rouge">__code__</code> attribute that holds its code object.</li> </ul> <h3 id="some-attributes-of-code-object">Some attributes of code object.</h3> <p><code class="language-plaintext highlighter-rouge">co_nlocals</code> — is the number of local variables used by the function (including arguments). <code class="language-plaintext highlighter-rouge">co_argcount</code> — is the total number of positional arguments (including positional-only arguments and arguments with default values). <code class="language-plaintext highlighter-rouge">co_varnames</code> — is a tuple containing the names of the local variables (starting with the argument names). <code class="language-plaintext highlighter-rouge">co_names</code> — is a tuple containing the names used by the bytecode. <code class="language-plaintext highlighter-rouge">co_cellvars</code> — is a tuple containing the names of local variables that are referenced by nested functions. <code class="language-plaintext highlighter-rouge">co_freevars</code> — is a tuple containing the names of free variables; co_code is a string representing the sequence of bytecode instructions.</p> <h4 id="free-variable">Free variable</h4> <p>Any non-local, non-global, variable used by a function is referred to as a free variable of the function. x is free variable for bar function at following:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>

    <span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bar</span>

<span class="n">bar_fun</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">bar_fun</span><span class="p">.</span><span class="n">__code__</span><span class="p">.</span><span class="n">co_freevars</span><span class="p">)</span> <span class="c1">#('x',)
</span></code></pre></div></div> <h4 id="cell-variable">cell variable</h4> <p>For a given function, a cell variable is a local variable that is used by a nested function.</p> <p>A cell variable is an idea related to that of a free variable. If a variable x is a free variable for a function bar then that same variable would be a cell variable for a function foo:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>

    <span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bar</span>

<span class="n">bar_fun</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">__code__</span><span class="p">.</span><span class="n">co_cellvars</span><span class="p">)</span> <span class="c1">#('x',)
</span></code></pre></div></div> <h2 id="closure">Closure</h2> <h3 id="what-is-closure">What is closure</h3> <p>A function along with the environment of its enclosing function, are collectively referred to as a closure. (The concept of closure is same with JavaScript. But the implementation should be different)</p> <ul> <li>We can nest functions within functions in Python. Moreover, the inner function might additionally use data defined inside the outer function.</li> <li>A function returned from another function that uses one of its local variables, is a closure.</li> <li>But Essentially, any function that captures its enclosing environment inside its <code class="language-plaintext highlighter-rouge">__closure__</code> attribute is a closure. It don’t have to be returned function (that guy said so).</li> </ul> <h3 id="how-to-implement-closure">How to implement closure</h3> <h4 id="it-is-important-to-understand-cell-variable-and-free-variable">It is important to understand cell variable and free variable</h4> <ul> <li>A local variable is referred to as a cell variable of the function if it’s used by an inner (nested) function. A cell variable, therefore, is simply a variable used in multiple scopes.</li> <li>A free variable is a variable not defined in the local scope of the function, neither a parameter, nor a global. a free variable is a non-local variable of a function, defined in an outer function.</li> </ul> <h4 id="co_freevars-attribute">co_freevars attribute</h4> <p>For a given function, its code object contains a co_freevars attribute that contains the names of all the free variables of the function.</p> <h4 id="__closure__-attribute"><code class="language-plaintext highlighter-rouge">__closure__</code> attribute</h4> <p>Its <code class="language-plaintext highlighter-rouge">__closure__</code> attribute contains a tuple holding the values of each of its free variables; or else the value None. the co_freevars attribute of the function’s code object holds the names of all free variables, while the <code class="language-plaintext highlighter-rouge">__closure__</code> attribute holds their values. And these valueis cell object:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span>

    <span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">bar</span>

<span class="n">bar</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">()</span>
<span class="n">bar</span><span class="p">.</span><span class="n">__closure__</span>
<span class="p">(</span><span class="o">&lt;</span><span class="n">cell</span> <span class="n">at</span> <span class="mh">0x7f9d64c68460</span><span class="p">:</span> <span class="nb">int</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x954f40</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">cell</span> <span class="n">at</span> <span class="mh">0x7f9d643a4eb0</span><span class="p">:</span> <span class="nb">int</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x955080</span><span class="o">&gt;</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">__closure__</code> attribute holds tuple of cell objects — each corresponding to a free variable.</p> <h4 id="what-is-cell-object">What is cell object</h4> <p>“Cell” objects are used to implement variables referenced by multiple scopes. For each such variable, a cell object is created to store the value; the local variables of each stack frame that references the value contains a reference to the cells from outer scopes which also use that variable.</p> <p>When the value is accessed, the value contained in the cell is used instead of the cell object itself. This de-referencing of the cell object requires support from the generated byte-code; these are not automatically de-referenced when accessed.</p> <p>Cell objects are not likely to be useful elsewhere.</p> <h2 id="faq">FAQ</h2> <ul> <li>The difference between namespace and scope concept</li> <li>What is the class for Function object?</li> </ul> <h3 id="what-is-the-relationship-between-function-and-method">What is the relationship between function and method</h3> <p>Methods are functions that are called using the attribute notation.</p> <ul> <li>If you access a method (a function defined in a class namespace) through an instance, you get a special object: a bound method object.</li> <li>When method is called, it will add the self argument to the argument list. Bound methods have two special read-only attributes: <code class="language-plaintext highlighter-rouge">m.__self__</code> is the object on which the method operates, and <code class="language-plaintext highlighter-rouge">m.__func__</code> is the function implementing the method. Calling m(arg-1, arg-2, …, arg-n) is completely equivalent to calling <code class="language-plaintext highlighter-rouge">m.__func__</code>(<code class="language-plaintext highlighter-rouge">m.__self__</code>, arg-1, arg-2, …, arg-n).</li> </ul> <h3 id="what-is-code-objects">What is Code Objects?</h3> <p>Code objects are returned by the built-in compile() function and can be extracted from function objects through their <code class="language-plaintext highlighter-rouge">__code__</code> attribute.</p> <p>Code objects are used by the implementation to represent “pseudo-compiled” executable Python code such as a function body. They differ from function objects because they don’t contain a reference to their global execution environment.</p> <h3 id="what-is-happening-for-the-following-code">What is happening for the following code?</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="p">[]):</span>
    <span class="n">x</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="k">print</span> <span class="nf">f</span><span class="p">()</span>
<span class="k">print</span> <span class="nf">f</span><span class="p">()</span>
<span class="k">print</span> <span class="nf">f</span><span class="p">()</span>
<span class="k">print</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
<span class="k">print</span> <span class="nf">f</span><span class="p">()</span>
<span class="k">print</span> <span class="nf">f</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div></div> <p>Binding of default arguments occurs at function definition. Default parameter values are evaluated from left to right when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that the same “pre-computed” value is used for each call. This is especially important to understand when a default parameter value is a mutable object, such as a list or a dictionary: if the function modifies the object (e.g. by appending an item to a list), the default parameter value is in effect modified. This is generally not what was intended. A way around this is to use None as the default, and explicitly test for it in the body of the function, e.g.:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">whats_on_the_telly</span><span class="p">(</span><span class="n">penguin</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">penguin</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">penguin</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">penguin</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">property of the zoo</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">penguin</span>
</code></pre></div></div> <h3 id="whats-type-hinting">What’s Type Hinting</h3> <p>Type hinting in Python is basically declaring that the parameters in your functions and methods have a certain type. example: Normal function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div> <p>function with type hinting:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</code></pre></div></div> <h3 id="what-is-variable-annotation">What is Variable Annotation</h3> <p>Let’s say you want to not just annotate function parameters but also regular variables. from typing import List</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">odd_numbers</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">:</span>
    <span class="n">odd</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># this is variable annotation
</span>    <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">odd</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">odd</span>
</code></pre></div></div> <h3 id="nonlocal-concept">nonlocal concept</h3> <h4 id="in-python">In Python,</h4> <p>The nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The nonlocal statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p> <p>Following is a nested function inner defined in the scope of another function outer. The variable x is local to outer, but non-local to inner (nor is it global):</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
        <span class="k">nonlocal</span> <span class="n">x</span>
        <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">inner</span>
</code></pre></div></div> <h4 id="in-javascript">In Javascript</h4> <p>In Javascript, the locality of a variable is determined by the closest var statement for this variable. In the following example, x is local to outer as it contains a var x statement, while inner doesn’t. Therefore, x is non-local to inner:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">function</span> <span class="nf">inner</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="Function"/><summary type="html"><![CDATA[Function Object]]></summary></entry><entry><title type="html">Python Class</title><link href="https://benwzj.github.io/blog/2024/py-class/" rel="alternate" type="text/html" title="Python Class"/><published>2024-12-22T00:00:00+00:00</published><updated>2024-12-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-class</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-class/"><![CDATA[<h2 id="basic-concepts-in-class">Basic Concepts in Class</h2> <ul> <li>Each value is an object, and therefore has a class (also called its type). It is stored as <code class="language-plaintext highlighter-rouge">object.__class__</code>.</li> <li>To get the class or the type of object, Python provides us with the type function and <code class="language-plaintext highlighter-rouge">__class__</code> property defined on the object itself.</li> <li>build-in <code class="language-plaintext highlighter-rouge">object</code> is a base for all classes.</li> <li>Each object has a class from which it is instantiated.</li> <li><code class="language-plaintext highlighter-rouge">Metaclass</code> is a class from which classes are instantiated or metaclass is a class of a class.</li> <li><code class="language-plaintext highlighter-rouge">super([type[, object-or-type]])</code> Return a proxy object that delegates method calls to a parent or sibling class of type.</li> <li>Python support aliasing (one object have more than one name).</li> <li>Even built-in types, like <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">float</code>, can be used as base classes for extension by the user.</li> <li>Class definitions, like function definitions (def statements) must be executed before they have any effect. (You could conceivably place a class definition in a branch of an <code class="language-plaintext highlighter-rouge">if</code> statement, or inside a function.)</li> <li>there are many magic function for the object. like<code class="language-plaintext highlighter-rouge"> __init__, __class__, __dict__</code>, etc.</li> <li>The first letter of the name of a class need to be capitalized.</li> <li>The first parameter of all attribute function is self</li> </ul> <h3 id="basic-example">Basic example:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>
</code></pre></div></div> <h2 id="main-concepts">Main Concepts</h2> <h3 id="class-objects">Class Objects</h3> <p>Class objects support two kinds of operations: attribute references and instantiation.</p> <h4 id="attribute-references">Attribute references</h4> <p>The standard syntax used for all attribute references in Python: <code class="language-plaintext highlighter-rouge">obj.name</code>.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">A simple example class</span><span class="sh">"""</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">12345</span>

    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">hello world</span><span class="sh">'</span>
</code></pre></div></div> <p>then <code class="language-plaintext highlighter-rouge">MyClass.i</code> and <code class="language-plaintext highlighter-rouge">MyClass.f</code> are valid attribute references, returning an integer and a function object, respectively.</p> <h4 id="class-instantiation">Class instantiation</h4> <p>Class instantiation uses function notation, (not using new keyword). Just pretend that the class object is a parameterless function that returns a new instance of the class. <code class="language-plaintext highlighter-rouge">x = MyClass()</code></p> <p>When a class defines an <code class="language-plaintext highlighter-rouge">__init__()</code> method, class instantiation automatically invokes <code class="language-plaintext highlighter-rouge">__init__()</code> for the newly-created class instance.</p> <h3 id="instance-objects">Instance Objects</h3> <p>The only operations understood by instance objects are attribute references. <code class="language-plaintext highlighter-rouge">x = MyClass()</code></p> <ul> <li>There are two kinds of valid attribute names: <ul> <li>data attributes and</li> <li>methods.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">x.f</code> is not the same thing as <code class="language-plaintext highlighter-rouge">MyClass.f</code>. It is a method object, not a function object.</li> </ul> <h4 id="what-is-method-objects">What is Method Objects</h4> <p>Method object is not a function object!</p> <ul> <li>In example above, the call <code class="language-plaintext highlighter-rouge">x.f()</code> is exactly equivalent to <code class="language-plaintext highlighter-rouge">MyClass.f(x)</code>.</li> <li>In general, calling a method with a list of arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method’s instance object before the first argument.</li> </ul> <h4 id="understand-method-object">Understand Method object</h4> <p>When a non-data attribute of an instance is referenced, the instance’s class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. (different from JavaScript)</p> <p>When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p> <h3 id="class-and-instance-variables">Class and Instance Variables</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Dog:
    kind <span class="o">=</span> <span class="s1">'canine'</span>       <span class="c">#this is class variable shared by all instances</span>
    def __init__<span class="o">(</span>self, name<span class="o">)</span>:
        self.name <span class="o">=</span> name  <span class="c">#this is instance variable unique to each instance</span>

<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> Dog<span class="o">(</span><span class="s1">'Fido'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> e <span class="o">=</span> Dog<span class="o">(</span><span class="s1">'Buddy'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> d.kind                  <span class="c"># shared by all dogs</span>
<span class="s1">'canine'</span>
<span class="o">&gt;&gt;&gt;</span> e.kind                  <span class="c"># shared by all dogs</span>
<span class="s1">'canine'</span>
<span class="o">&gt;&gt;&gt;</span> d.name                  <span class="c"># unique to d</span>
<span class="s1">'Fido'</span>
<span class="o">&gt;&gt;&gt;</span> e.name                  <span class="c"># unique to e</span>
<span class="s1">'Buddy'</span>
</code></pre></div></div> <ul> <li>instance variables are for data unique to each instance.</li> <li>class variables are for attributes and methods shared by all instances of the class.</li> <li>So, Mutable type, like lists, dictionaries, should not be used as a class variable. It should use an instance variable instead</li> <li>If the same attribute name occurs in both an instance and in a class, then attribute lookup prioritizes the instance.</li> </ul> <h3 id="inheritance">Inheritance</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DerivedClassName</span><span class="p">(</span><span class="n">BaseClassName</span><span class="p">):</span>
    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span>
    <span class="p">.</span>
    <span class="p">.</span>
    <span class="p">.</span>
    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="n">N</span><span class="o">&gt;</span>
</code></pre></div></div> <p>Execution of a derived class definition proceeds the same as for a base class. When the class object is constructed, the base class is remembered. This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is derived from some other class.</p> <ul> <li>Derived classes may override methods of their base classes.</li> <li>Python has two built-in functions that work with inheritance: <ul> <li>Use <code class="language-plaintext highlighter-rouge">isinstance()</code> to check an instance’s type.</li> <li>Use <code class="language-plaintext highlighter-rouge">issubclass()</code> to check class inheritance.</li> </ul> </li> <li>Python supports a form of multiple inheritance: <code class="language-plaintext highlighter-rouge">class DerivedClassName(Base1, Base2, Base3)</code></li> </ul> <h3 id="build-in-object-is-a-base-class-for-all-classes">build-in <code class="language-plaintext highlighter-rouge">object</code> is a base class for all classes</h3> <p>In Python3, all classes implicitly inherit from the built-in object base class. The object class provides some common methods, such as <code class="language-plaintext highlighter-rouge">__init__</code>, <code class="language-plaintext highlighter-rouge">__str__</code>, and <code class="language-plaintext highlighter-rouge">__new__</code>, that can be overridden by the child class. For example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Human</span><span class="p">:</span>
    <span class="k">pass</span>
</code></pre></div></div> <p>Try <code class="language-plaintext highlighter-rouge">dir(Human)</code> and will tell Human class have all the methods of built-in object methods:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="sh">'</span><span class="s">__class__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__delattr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dict__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dir__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__doc__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__eq__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__format__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__ge__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__getattribute__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__gt__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__hash__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__init__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__init_subclass__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__le__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__lt__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__module__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__ne__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__new__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__reduce__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__reduce_ex__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__repr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__setattr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__sizeof__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__str__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__subclasshook__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__weakref__</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <figure> <picture> <img src="/assets/img/py-object-type.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="metaclass">Metaclass</h4> <p>All classes in Python are objects of the type class, and this type class is called Metaclass. Metaclass is a class from which classes are instantiated or metaclass is a class of a class.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">type</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>    <span class="c1"># Output: &lt;class 'type'&gt;
</span><span class="nf">type</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>  <span class="c1"># Output: &lt;class 'type'&gt;
</span>
<span class="c1"># Even type of object class is - type
</span><span class="nf">type</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span> <span class="c1"># Output: &lt;class 'type'&gt;
</span></code></pre></div></div> <p>Thus, the type class is the metaclass of int and float classes. The type class is even the metaclass for the built-in object class, which is the base class for all the classes in Python. As type itself is a class, what is the metaclass of the type class? The type class is a metaclass of itself!</p> <figure> <picture> <img src="/assets/img/py-metaclass.jpg" class="img-fluid rounded z-depth-1" width="25%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="built-in-function-type">Built-in function type()</h4> <ul> <li>type() function With one argument, return the type of an object. The return value is a type object and generally the same object as returned by <code class="language-plaintext highlighter-rouge">object.__class__</code>.</li> <li>type class is metaclass.</li> </ul> <h4 id="build-in-function-object">Build-in function object()</h4> <p>object is a <code class="language-plaintext highlighter-rouge">class.object()</code> return a new featureless object. object is a base for all classes. It has methods that are common to all instances of Python classes. This function does not accept any arguments.</p> <h2 id="instantiation-process">Instantiation process</h2> <p>Object creation in Python is a two-step process.</p> <ul> <li>In the first step, Python creates the object, Python uses the <code class="language-plaintext highlighter-rouge">__new__</code> method (i.e., object creation)</li> <li>and in the second step, it initializes the object. Python uses the <code class="language-plaintext highlighter-rouge">__init__</code> method (i.e., initialization).</li> </ul> <p>If the class does not define these methods, they are inherited from the object base class.</p> <h3 id="first-step-__new__">First step <code class="language-plaintext highlighter-rouge">__new__()</code></h3> <h4 id="__new__-need-to-return-the-object-witch-have-been-created"><code class="language-plaintext highlighter-rouge">__new__()</code> need to return the object witch have been created.</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Human</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">first_name</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># cls is the class using which the object will be created. cls=Human
</span>        <span class="c1"># We MUST call the object class' __new__ to allocate memory
</span>        <span class="n">obj</span> <span class="o">=</span> <span class="nf">super</span><span class="p">().</span><span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span> <span class="c1"># This is equivalent to object.__new__(cls)
</span>
        <span class="c1"># Modify the object created
</span>        <span class="k">if</span> <span class="n">first_name</span><span class="p">:</span>
            <span class="n">obj</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">first_name</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">obj</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Ben</span><span class="sh">"</span>

        <span class="c1"># return the object
</span>        <span class="k">return</span> <span class="n">obj</span>
</code></pre></div></div> <h4 id="cls-is-the-class-using-witch-the-object-will-be-created"><code class="language-plaintext highlighter-rouge">cls</code> is the class using witch the object will be created:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="c1"># Passing Human class reference instead of Animal class reference
</span>        <span class="n">obj</span> <span class="o">=</span> <span class="nf">super</span><span class="p">().</span><span class="nf">__new__</span><span class="p">(</span><span class="n">Human</span><span class="p">)</span> 
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Type of obj: </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># &lt;class '__main__.Human'&gt;
</span>        <span class="k">return</span> <span class="n">obj</span>

<span class="n">cat</span> <span class="o">=</span> <span class="nc">Animal</span><span class="p">()</span>
<span class="nf">type</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>   <span class="c1"># Output: &lt;class '__main__.Human'&gt;
</span></code></pre></div></div> <h3 id="second-step-__init__">Second step <code class="language-plaintext highlighter-rouge">__init__()</code></h3> <p>Once the <code class="language-plaintext highlighter-rouge">__new__</code> method is complete, Python calls the <code class="language-plaintext highlighter-rouge">__init__</code> method with the human_obj object as the first argument. The <code class="language-plaintext highlighter-rouge">__init__</code> method must not return anything.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Human</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">first_name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</code></pre></div></div> <h3 id="understand-the-precess-with-questions">Understand the precess with Questions</h3> <ul> <li>Who calls the <code class="language-plaintext highlighter-rouge">__new__</code> and <code class="language-plaintext highlighter-rouge">__init__</code> method?</li> <li>Who passes the self object to the <code class="language-plaintext highlighter-rouge">__init__</code> method?</li> <li>As the <code class="language-plaintext highlighter-rouge">__init__</code> method is called after the <code class="language-plaintext highlighter-rouge">__new__</code> method, and the <code class="language-plaintext highlighter-rouge">__init__</code> method does not return anything, how does calling the class return the object (i.e., how does calling the Human class return the human_obj object)?</li> </ul> <h4 id="calling-a-class">Calling a Class</h4> <ul> <li>Class is callable! Because class has a <code class="language-plaintext highlighter-rouge">__call__()</code> method.</li> <li>How <code class="language-plaintext highlighter-rouge">__call__</code> method process With CPython implementation, the metaclass type class’ <code class="language-plaintext highlighter-rouge">__call__</code> method definition is defined in C language. If we convert it into Python and simplify it, it will look somewhat like this: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># type's __call__ method which gets called when Human class is called i.e. Human()
</span><span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
  <span class="c1"># cls = Human class
</span>  <span class="c1"># args = ["Virat", "Kohli"]
</span>  <span class="c1"># Calling __new__ method of the Human class, as __new__ method is not defined
</span>  <span class="c1"># on Human, __new__ method of the object class is called
</span>  <span class="n">human_obj</span> <span class="o">=</span> <span class="n">cls</span><span class="p">.</span><span class="nf">__new__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

  <span class="c1"># After __new__ method returns the object, __init__ method will only be called if
</span>  <span class="c1"># 1. human_obj is not None
</span>  <span class="c1"># 2. human_obj is an instance of class Human
</span>  <span class="c1"># 3. __init__ method is defined on the Human class
</span>  <span class="k">if</span> <span class="n">human_obj</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">human_obj</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">human_obj</span><span class="p">,</span> <span class="sh">'</span><span class="s">__init__</span><span class="sh">'</span><span class="p">):</span>
      <span class="c1"># As __init__ is called on human_obj, self will be equal to human_obj in __init__ method
</span>      <span class="n">human_obj</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">human_obj</span>
</code></pre></div> </div> </li> </ul> <figure> <picture> <img src="/assets/img/py-calling-class.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="step-for-creating-an-object">Step for creating an object</h4> <p>Following steps are followed while creating and initializing an object in Python:</p> <ol> <li>Call the Human class - Human(); this internally calls the <strong>call</strong> method of the type class (i.e., type.<strong>call</strong>(Human, “Virat”, “Kohli”)).</li> <li>type.<strong>call</strong> will first call the <strong>new</strong> method defined on the Human class. If the <strong>new</strong> method is not defined on the Human class, the <strong>new</strong> method of the object class will be called.</li> <li>The <strong>new</strong> method will the return the object of type Human i.e. human_obj</li> <li>Now, type.<strong>call</strong> will call the <strong>init</strong> method defined on the Human class with human_obj as the first argument. This human_obj will be self in the <strong>init</strong> method.</li> <li>The <strong>init</strong> method will initialize the human_obj with the first_name as Virat and thelast_name as Kohli. The <strong>init</strong> method will not return anything.</li> <li>In the end, type.<strong>call</strong> will return the human_obj object.</li> </ol> <p>As per the type.<strong>call</strong> definition, whenever we create a new object, the <strong>new</strong> method will always be called, but calling the <strong>init</strong> method depends on the output of the <strong>new</strong> method. The <strong>init</strong> method will be called only if the <strong>new</strong> method returns an object of type Human class or a subclass of the Human class.</p> <h2 id="static--class-method">Static &amp; class method</h2> <p>Static methods, much like class methods, are methods that are bound to a class rather than its object. They do not require a class instance creation. So, they are not dependent on the state of the object.</p> <h3 id="static-method">static method</h3> <p>A static method can be called either on the class (such as <code class="language-plaintext highlighter-rouge">C.f()</code>) or on an instance (such as <code class="language-plaintext highlighter-rouge">C().f()</code>). Moreover, they can be called as regular functions (such as <code class="language-plaintext highlighter-rouge">f()</code>).</p> <h4 id="when-do-you-use-static-methods">When do you use static methods?</h4> <p>Static methods have a limited use case because, like class methods or any other methods within a class, they cannot access the properties of the class itself.</p> <p>when you need a utility function that doesn’t access any properties of a class but makes sense that it belongs to the class, we use static functions.</p> <p>Having a single implementation Static methods are used when we don’t want subclasses of a class change/override a specific implementation of a method.</p> <h3 id="class-method">class method</h3> <p>A class method is a method that is bound to a class rather than its object. It doesn’t require creation of a class instance, much like staticmethod.</p> <ul> <li>built-in function classmethod(), for transforming a method into a class method.</li> <li>A class method can be called either on the class (such as C.f()) or on an instance (such as C().f()). The instance is ignored except for its class.</li> <li>If a class method is called for a derived class, the derived class object is passed as the implied first argument.</li> <li>But no matter what, the class method is always attached to a class with the first argument as the class itself cls. <code class="language-plaintext highlighter-rouge">def classMethod(cls, args...)</code></li> </ul> <h4 id="when-do-you-use-the-class-method">When do you use the class method?</h4> <ol> <li>Factory methods</li> <li>Correct instance creation in inheritance</li> </ol> <h3 id="the-difference-between-a-static-method-and-a-class-method-is">The difference between a static method and a class method is:</h3> <ul> <li>Static method knows nothing about the class and just deals with the parameters.</li> <li>Class method works with the class since its parameter is always the class itself. They can be called both by the class and its object.</li> </ul> <h2 id="abstract-base-classes">Abstract Base Classes</h2> <h3 id="what-is-abstract-base-class-abc">What is abstract base class (abc)</h3> <ul> <li>Abstract classes are classes that are meant to be inherited but avoid implementing specific methods, leaving behind only method signatures that subclasses must implement.</li> <li>ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized by <code class="language-plaintext highlighter-rouge">isinstance()</code> and <code class="language-plaintext highlighter-rouge">issubclass()</code>. (see the abc module documentation.)</li> <li>Python comes with many built-in ABCs for data structures (in the collections.abc module), numbers (in the numbers module), streams (in the io module), import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc module.</li> </ul> <h3 id="why-abc">Why abc</h3> <ul> <li>Abstract classes are useful for defining and enforcing class abstractions at a high level, similar to the concept of interface in typed languages(like TypeScript), without the need for method implementation.</li> <li>With the abc module we can prevent child classes from being instantiated when they fail to override abstract class methods of their parents and ancestors.</li> <li>Abstract base classes complement duck-typing by providing a way to define interfaces when other techniques like <code class="language-plaintext highlighter-rouge">has_attr()</code> would be clumsy or subtly wrong (for example with magic methods).</li> <li>For example, collections.abc module provides abstract base classes that can be used to test whether a class provides a particular interface; for example, whether it is hashable or whether it is a mapping.</li> </ul> <h3 id="abc-concept-example">abc concept Example</h3> <p>from abc import ABC, abstractmethod</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vehicle</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">go_forward</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Truck</span><span class="p">(</span><span class="n">Vehicle</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">press_accelerator</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">press_accelerator</span> <span class="o">=</span> <span class="n">press_accelerator</span>

    <span class="k">def</span> <span class="nf">go_forward</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">press_accelerator</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Driving forward</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Press the accelerator to drive forward</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Truck class have to implement go_forward function.</p> <h3 id="collectionsabc">collections.abc</h3> <p>This module provides abstract base classes that can be used to test whether a class provides a particular interface; for example, whether it is hashable or whether it is a mapping.</p> <p>The collections.abc.Sequence ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Basic Concepts in Class]]></summary></entry><entry><title type="html">Python Common Operation</title><link href="https://benwzj.github.io/blog/2024/py-common-operations/" rel="alternate" type="text/html" title="Python Common Operation"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-common-operations</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-common-operations/"><![CDATA[<h2 id="enumerate">enumerate</h2> <p><code class="language-plaintext highlighter-rouge">enumerate(iterable, start=0)</code></p> <p>Return an <strong>enumerate object</strong>. iterable must be a sequence, an iterator, or some other object which supports iteration. The <code class="language-plaintext highlighter-rouge">__next__()</code> method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seasons</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Spring</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Summer</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Winter</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">list</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">))</span>
<span class="c1">#[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
</span><span class="nf">list</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="c1">#[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
</span></code></pre></div></div> <p>Equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">elem</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h3 id="when-use-enumerate-function">When use enumerate function</h3> <ul> <li>When want something like this: <code class="language-plaintext highlighter-rouge">[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</code>.</li> <li>Using Enumerate Object in Loops.</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">apple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">banana</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cherry</span><span class="sh">'</span><span class="p">]</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="c1"># Output:
# 0 apple
# 1 banana
# 2 cherry
</span></code></pre></div></div> <h2 id="hashobject">hash(object)</h2> <p>Return the hash value of the object (if it has one). Hash values are <strong>integers</strong>. They are used to quickly compare dictionary keys during a dictionary lookup.</p> <blockquote> <p>Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p> </blockquote> <h2 id="sort">Sort</h2> <ul> <li>In Python, Sort topic will focus on list.</li> <li>Python lists have a built-in list.sort() method that modifies the list in-place.</li> <li>There is also a sorted() built-in function that builds a new sorted list from an iterable.</li> </ul> <h3 id="build-in-function-sorted">Build-in function Sorted()</h3> <ul> <li>sorted(iterable, /, *, key=None, reverse=False)</li> <li>sorted() sort iterable and returns a new sorted list.</li> </ul> <h4 id="key-parameter">key parameter</h4> <ul> <li>Both list.sort() and sorted() have a key parameter</li> <li>key parameter specify a function (or other callable) to be called on each list element prior to making comparisons.</li> <li>This function (or other callable) that takes a single argument and returns a key to use for sorting purposes. sorted(“This is a test string from Andrew”.split(), key=str.lower)</li> <li>Python provides convenience functions to make key parameter functions easier and faster. The operator module has itemgetter(), attrgetter(), and a methodcaller() function. Using those functions, the above examples become simpler and faster:</li> </ul> <h4 id="reverse-parameter">reverse parameter</h4> <p>with a boolean value.</p> <h4 id="dictionary-sort">Dictionary Sort</h4> <ul> <li>You can sorted(dic) directly. It will sort by key.</li> <li>Common way to sort value in a dictionary</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">operator</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="n">sorted_l</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">operator</span><span class="p">.</span><span class="nf">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="n">sorted_d</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">sorted_l</span><span class="p">)</span>
</code></pre></div></div> <h2 id="read-and-write-files">Read and Write Files</h2> <h3 id="open">open()</h3> <ul> <li>open(filename, mode, encoding=None)</li> <li>returns a file object, and is most commonly used with two positional arguments and one keyword argument:</li> <li>The first argument is a string containing the filename.</li> <li>The second argument is another string containing a few characters describing the way in which the file will be used.</li> <li>Appending a ‘b’ to the mode opens the file in binary mode.</li> <li>Normally, files are opened in text mode, that means, you read and write strings from and to the file.</li> <li>It is good practice to use the <code class="language-plaintext highlighter-rouge">with</code> keyword when dealing with file objects.</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">workfile</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">read_data</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div></div> <h3 id="freadsize">f.read(size)</h3> <p>To read a file’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode).</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span> 
<span class="sh">'</span><span class="s">This is the entire file.</span><span class="se">\n</span><span class="sh">'</span>
</code></pre></div></div> <h3 id="freadline">f.readline()</h3> <p><code class="language-plaintext highlighter-rouge">f.readline()</code> reads a single line from the file;</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">f</span><span class="p">.</span><span class="nf">readline</span><span class="p">()</span>
  <span class="sh">'</span><span class="s">This is the first line of the file.</span><span class="se">\n</span><span class="sh">'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[enumerate]]></summary></entry><entry><title type="html">Python Sequence Type</title><link href="https://benwzj.github.io/blog/2024/py-sequenece/" rel="alternate" type="text/html" title="Python Sequence Type"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-sequenece</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-sequenece/"><![CDATA[<h2 id="what-is-python-sequence">What is Python Sequence</h2> <p>In Python, when accessing an attribute of an object, Python is <strong>duck-typed</strong>. The object will only be checked to see if it has an attribute at runtime, and only when immediately requested.</p> <p>However, Python also has <strong>nominal typing</strong> features. Nominal typing is where one type is declared to be a subclass of another.</p> <p>When using duck-typing, the definition can be: A sequence(little s) is any ordered collection of objects which supports efficient element access using integer indices via the <code class="language-plaintext highlighter-rouge">__getitem__()</code> special method and defines a <code class="language-plaintext highlighter-rouge">__len__()</code> method that returns the length of the sequence.</p> <p>For Nominal typing, using <code class="language-plaintext highlighter-rouge">collections.abc.Sequence</code> as base class.</p> <p>For example: A numpy array is a sequence, but it is not a Sequence as it is not registered as a subclass of Sequence.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">isinstance</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="n">collections</span><span class="p">.</span><span class="n">abc</span><span class="p">.</span><span class="n">Sequence</span><span class="p">)</span>
<span class="c1"># False 
</span></code></pre></div></div> <h3 id="there-are-three-basic-sequence-types">There are three basic sequence types:</h3> <ul> <li>lists, typically used to store collections of homogeneous items</li> <li>tuples, typically used to store collections of heterogeneous data</li> <li>range objects, represents an immutable sequence of numbers and is commonly used for looping a specific number of times in <code class="language-plaintext highlighter-rouge">for</code> loops.</li> </ul> <h3 id="here-are-more">Here are more:</h3> <ul> <li>Strings: Textual data in Python is handled with <code class="language-plaintext highlighter-rouge">str</code> objects, or strings. Strings are immutable sequences of Unicode code points.</li> <li>Bytes objects: are immutable sequences of single bytes.</li> <li>Bytearray objects: are a mutable counterpart to bytes objects.</li> <li>Immutable sequence types: support for the <code class="language-plaintext highlighter-rouge">hash()</code> built-in.</li> </ul> <h2 id="common-sequence-operations">Common Sequence Operations</h2> <p>The <code class="language-plaintext highlighter-rouge">collections.abc.Sequence</code> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="ow">in</span> <span class="n">s</span>
<span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span>
<span class="n">s</span> <span class="o">+</span> <span class="n">t</span>
<span class="n">s</span> <span class="o">*</span> <span class="n">n</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">:</span><span class="n">k</span><span class="p">]</span>
<span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="nf">min</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="nf">max</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">x</span><span class="p">[,</span> <span class="n">i</span><span class="p">[,</span> <span class="n">j</span><span class="p">]])</span>
<span class="n">s</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h2 id="understand-binary-sequence">Understand Binary Sequence</h2> <p>The core built-in types for manipulating binary data are <code class="language-plaintext highlighter-rouge">bytes</code> and <code class="language-plaintext highlighter-rouge">bytearray</code>. They are supported by <code class="language-plaintext highlighter-rouge">memoryview</code> which uses the buffer protocol to access the memory of other binary objects without needing to make a copy.</p> <ul> <li>Bytes objects: are immutable sequences of single bytes.</li> <li>Bytearray objects: are a mutable counterpart to bytes objects.</li> </ul> <h3 id="why-we-need-bytes-object">Why we need Bytes object</h3> <p>The only thing that a computer can store is bytes. To store anything in a computer, you must first encode it, i.e. convert it to bytes. For example:</p> <ul> <li>If you want to store music, you must first encode it using MP3, WAV, etc.</li> <li>If you want to store a picture, you must first encode it using PNG, JPEG, etc.</li> <li>If you want to store text, you must first encode it using ASCII, UTF-8, etc. MP3, WAV, PNG, JPEG, ASCII and UTF-8 are examples of encodings. An encoding is a format to represent audio, images, text, etc. in bytes.</li> </ul> <p>In Python, everything must be converted to a Binary Sequence before it can be stored in a computer. Binary Sequence, sometime can be represented by a byte string, based on text.</p> <h3 id="bytes-objects-and-ascii-text">Bytes objects and ASCII text</h3> <p>Bytes literals and representations can be based on ASCII text, While it is based on text, Only ASCII characters are permitted in bytes literals. Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.</p> <p>And while Bytes literals based on text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that <code class="language-plaintext highlighter-rouge">0 &lt;= x &lt; 256</code> (attempts to violate this restriction will trigger <code class="language-plaintext highlighter-rouge">ValueError</code>).</p> <p>The syntax for bytes literals is largely the same as that for string literals, except that a <code class="language-plaintext highlighter-rouge">b</code> prefix is added: Single quotes: <code class="language-plaintext highlighter-rouge">b'still allows embedded "double" quotes'</code></p> <h3 id="ways-of-creating-bytes-objects-other-than-literal-forms">Ways of Creating Bytes objects other than literal forms</h3> <p>In addition to the literal forms, bytes objects can be created in a number of other ways:</p> <ul> <li>A zero-filled bytes object of a specified length: <code class="language-plaintext highlighter-rouge">bytes(10)</code></li> <li>From an iterable of integers: <code class="language-plaintext highlighter-rouge">bytes(range(20))</code></li> <li>Copying existing binary data via the buffer protocol: <code class="language-plaintext highlighter-rouge">bytes(obj)</code></li> </ul> <h4 id="classmethod-fromhexstring">classmethod fromhex(string)</h4> <p>This bytes class method returns a bytes object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> bytes.fromhex<span class="o">(</span><span class="s1">'2Ef0 F1f2  '</span><span class="o">)</span>
b<span class="s1">'.\xf0\xf1\xf2'</span>
</code></pre></div></div> <h4 id="hex">hex()</h4> <p>Return a string object containing two hexadecimal digits for each byte in the instance.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\xf0\xf1\xf2'</span>.hex<span class="o">()</span>
<span class="s1">'f0f1f2'</span>
</code></pre></div></div> <h3 id="bytes-and-strings">Bytes and Strings</h3> <p>In Python 3, there is a much cleaner separation between text and binary data. Text is always Unicode and is represented by the <code class="language-plaintext highlighter-rouge">str</code> type, and binary data is represented by the <code class="language-plaintext highlighter-rouge">bytes</code> type. What makes the separation particularly clean is that <code class="language-plaintext highlighter-rouge">str</code> and <code class="language-plaintext highlighter-rouge">bytes</code> can’t be mixed in Python 3 in any implicit way.</p> <ul> <li> <p>The <code class="language-plaintext highlighter-rouge">bytes</code> type is a sequence of bytes that have been encoded and are ready to be stored in memory/disk. There are many types of encodings (utf-8, utf-16, also PNG, JPEG, MP3, WAV etc.), which all handle the bytes differently. The bytes object can be decoded into a <code class="language-plaintext highlighter-rouge">str</code> type or others.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">str</code> type is a sequence of <strong>unicode</strong> characters. The str needs to be encoded to be stored, but is mutable and an abstraction of the bytes logic. (Unicode Sandwich theory!)</p> </li> <li> <p>There is a strong relationship between <code class="language-plaintext highlighter-rouge">str</code> and <code class="language-plaintext highlighter-rouge">bytes</code>. <code class="language-plaintext highlighter-rouge">bytes</code> can be decoded into a <code class="language-plaintext highlighter-rouge">str</code>, and <code class="language-plaintext highlighter-rouge">str</code>s can be encoded into <code class="language-plaintext highlighter-rouge">bytes</code>.</p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="s1">'€20'</span>.encode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
b<span class="s1">'\xe2\x82\xac20'</span>
<span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\xe2\x82\xac20'</span>.decode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
<span class="s1">'€20'</span>
</code></pre></div></div> <h3 id="bytearray-objects">Bytearray Objects</h3> <p>bytearray object share all behavior with bytes except for it’s <strong>mutability</strong>.</p> <p>There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:</p> <ul> <li>Creating an empty instance: <code class="language-plaintext highlighter-rouge">bytearray()</code></li> <li>Creating a zero-filled instance with a given length: <code class="language-plaintext highlighter-rouge">bytearray(10)</code></li> <li>From an iterable of integers: <code class="language-plaintext highlighter-rouge">bytearray(range(20))</code></li> <li>Copying existing binary data via the buffer protocol: <code class="language-plaintext highlighter-rouge">bytearray(b'Hi!')</code></li> </ul> <p>Bytearray Objects Support classmethod <code class="language-plaintext highlighter-rouge">fromhex(string)</code> and <code class="language-plaintext highlighter-rouge">hex()</code> as well. akin to bytes.</p> <h2 id="array">Array</h2> <p>Arrays are sequence types and behave very much like lists, except that <strong>the type of objects stored in them is constrained</strong>. Array represent an array of basic values, like characters, integers, floating-point numbers.</p> <p>The type of the object which Array contain is specified at object creation time by using a <code class="language-plaintext highlighter-rouge">typecode</code>. <code class="language-plaintext highlighter-rouge">typecode</code> is a single character. For example, ‘l’ means <code class="language-plaintext highlighter-rouge">signed long</code>. You can do this: <code class="language-plaintext highlighter-rouge">array('l', [1, 2, 3, 4, 5])</code>.</p> <blockquote> <p>The NumPy package defines another array type.</p> </blockquote> <h2 id="numpy-array">NumPy array</h2> <ul> <li>In Python we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li> <li>The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.</li> <li>NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.</li> <li>NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]])</span>
<span class="n">subarr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">subarr</span><span class="p">)</span> <span class="n">like</span> <span class="n">this</span><span class="p">:</span>
<span class="p">[[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">6</span> <span class="mi">7</span><span class="p">]]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>  <span class="c1"># Output: 78
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>  <span class="c1"># Output: [ 2.5  6.5 10.5]
</span></code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://docs.python.org/3/library/array.html">Python official doc on Array</a>.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="String"/><summary type="html"><![CDATA[What is Python Sequence]]></summary></entry><entry><title type="html">Regular Expression (RE)</title><link href="https://benwzj.github.io/blog/2024/regular-expression/" rel="alternate" type="text/html" title="Regular Expression (RE)"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/regular-expression</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/regular-expression/"><![CDATA[<h2 id="what-is-re">What is RE</h2> <p>A regular expression (shortened as RE or regex or regexp) is essentially a tiny, highly specialized programming language. It is a sequence of characters that specifies a match pattern in text. Usually such patterns are used by string-searching algorithms for “find” or “find and replace” operations on strings, or for input validation.</p> <p>The concept of regular expressions began in the 1950s, when an American mathematician formalized the concept of a regular language. They came into common use with Unix text-processing utilities. Different syntaxes for writing regular expressions have existed since the 1980s, one being the POSIX standard and another, widely used, being the <strong>Perl syntax</strong>.</p> <p>Regular expressions are supported in many programming languages, including Pythong and JavaScript.</p> <h3 id="why-need-re">Why need RE</h3> <p>Regular expressions are particularly useful for defining filters! Regular expressions are used in search engines, in search and replace dialogs of word processors and text editors, in text processing utilities and in lexical analysis.</p> <h2 id="re-in-python">RE in Python</h2> <h3 id="re-in-python-overview">RE in Python Overview</h3> <p>Regular expressions are made available through the <code class="language-plaintext highlighter-rouge">re</code> module.</p> <ul> <li>Match patterns is the core of RE.</li> <li>Python RE patterns follows perl syntax. it is very similar with JavaScript.</li> <li>RE patterns are compiled into a series of bytecodes which are then executed by a matching engine written in C.</li> <li>REs aren’t part of the core Python language.</li> <li>No special syntax was created for expressing RE in Python.</li> </ul> <h4 id="unicode-string-and-bytes">Unicode string and bytes.</h4> <p>Both patterns and strings to be searched can be Unicode strings (str) as well as 8-bit strings (bytes). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</p> <h4 id="in-many-cases-using-string-methods-will-be-better-choice-than-re">In many cases, using String methods will be better choice than re.</h4> <p>Strings have several methods for performing operations with fixed strings and they’re usually much faster, because the implementation is a single small C loop that’s been optimized for the purpose, instead of the large, more generalized regular expression engine.</p> <ul> <li>For Replacing a single fixed string with another one, consider the string <code class="language-plaintext highlighter-rouge">replace()</code> method first.</li> <li>Another common task is deleting every occurrence of a single character from a string or replacing it with another single character. Try string <code class="language-plaintext highlighter-rouge">translate()</code> first.</li> </ul> <h3 id="how-re-works-in-python">How RE works in Python</h3> <p>The <code class="language-plaintext highlighter-rouge">re</code> module provides an interface to the regular expression engine, allowing you to compile REs into objects and then perform matches with them. Pattern objects have methods for various operations such as searching for pattern matches or performing string substitutions.</p> <h3 id="classic-way-to-use-re">Classic way to use RE</h3> <h4 id="firstly-compiling-re-to-pattern-object">Firstly, Compiling RE to Pattern object</h4> <p>Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions.</p> <p>import re p = re.compile(‘ab*’)</p> <ul> <li>RE is handled as string in Python and is passed to re.complie(). No special syntax was created for expressing RE in Python. ( There are special syntax for RE in JavaScript, like /[a-z]/g ) This keep Python simpler, but has one disadvantage: backslash plague! So it is recommend to use raw string r’rawstring’.</li> </ul> <h4 id="secondly-use-pattern-objects-to-perform-matches">Secondly, Use Pattern objects to Perform Matches</h4> <h3 id="using-module-level-functions">Using module-level Functions</h3> <ul> <li>You don’t have to create a pattern object and call its methods; The re module also provides top-level functions called match(), search(), findall(), sub(), and so forth.</li> <li>Under the hood, these functions simply create a pattern object for you and call the appropriate method on it. They also store the compiled object in a cache, so future calls using the same RE won’t need to parse the pattern again and again.</li> <li>Should you use these module-level functions, or should you get the pattern and call its methods yourself? If you’re accessing a regex within a loop, pre-compiling it will save a few function calls. Outside of loops, there’s not much difference thanks to the internal cache.</li> </ul> <h3 id="pattern-object">Pattern Object</h3> <h4 id="match">match()</h4> <p>Return match object. Determine if the RE matches Just at the beginning of the string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = p.match('tempo')
&gt;&gt;&gt; m
&lt;re.Match object; span=(0, 5), match='tempo'&gt;
</code></pre></div></div> <h4 id="search">search()</h4> <p>Return None or match object. Scan through a string, looking for any location where this RE matches.</p> <h4 id="findall">findall()</h4> <p>Return a list of strings or a list of tuples Find all substrings where the RE matches, and returns them as a list. Return all non-overlapping matches of pattern in string, as a list of strings or tuples</p> <h4 id="finditer">finditer()</h4> <p>Find all substrings where the RE matches, and returns them as an iterator.</p> <h4 id="split">split()</h4> <p>String split() only supports splitting by whitespace or by a fixed string. But re.split() provides much more generality in the delimiters.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p.split('This is a test, short and sweet, of split().')
['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', '']
</code></pre></div></div> <p>If capturing parentheses are used in the RE, then the capturing group values are also returned as part of the list. Compare the following calls:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p2 = re.compile(r'(\W+)')
&gt;&gt;&gt; p.split('This... is a test.')
['This', 'is', 'a', 'test', '']
&gt;&gt;&gt; p2.split('This... is a test.')
['This', '... ', 'is', ' ', 'a', ' ', 'test', '.', '']
</code></pre></div></div> <h4 id="subreplacement-string-count0">sub(replacement, string[, count=0])</h4> <p>Returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile('(blue|white|red)')
&gt;&gt;&gt; p.sub('colour', 'blue socks and red shoes')
'colour socks and colour shoes'
</code></pre></div></div> <p>replacement can be a function:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; def repl(m):
...     inner_word = list(m.group(2))
...     random.shuffle(inner_word)
...     return m.group(1) + "".join(inner_word) + m.group(3)
&gt;&gt;&gt; text = "Professor Abdolmalek, please report your absences promptly."
&gt;&gt;&gt; re.sub(r"(\w)(\w+)(\w)", repl, text)
'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'
</code></pre></div></div> <h3 id="match-object">Match object</h3> <p>match(), search() return match object. Match object methods and attributes:</p> <h4 id="groupgroup1-">group(([group1, …]))</h4> <p>Returns one or more subgroups of the match.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
&gt;&gt;&gt; m.group(0)       # The entire match
'Isaac Newton'
&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.
'Isaac'
&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.
'Newton'
&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.
('Isaac', 'Newton')
</code></pre></div></div> <h4 id="groupsdefaultnone">groups(default=None)</h4> <p>Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = re.match(r"(\d+)\.(\d+)", "24.1632")
&gt;&gt;&gt; m.groups()
('24', '1632')
</code></pre></div></div> <h4 id="start">start()</h4> <p>Return the starting position of the match</p> <h4 id="end">end()</h4> <p>Return the ending position of the match</p> <h4 id="span">span()</h4> <p>Return a tuple containing the (start, end) positions of the match</p> <h3 id="re-pattern-syntax">RE Pattern Syntax</h3> <p>metacharacters: . ^ $ * + ? { } [ ] \ | ( )</p> <h4 id="compilation-flag">Compilation Flag</h4> <ul> <li>ASCII, A: Makes several escapes like \w, \b, \s and \d match only on ASCII characters with the respective property. Corresponds to the inline flag (?a)</li> <li>DOTALL, S: Make . match any character, including newlines.</li> <li>IGNORECASE, I: Do case-insensitive matches. (?i)</li> <li>LOCALE, L: Do a locale-aware match. (not recommend in python3, because of using unicode by default)</li> <li>MULTILINE, M: Multi-line matching, affecting ^ and $.</li> <li>VERBOSE, X (for ‘extended’): Enable verbose REs, which can be organized more cleanly and understandably. You can even use comments within a RE. Corresponds to the inline flag (?x)</li> </ul> <h4 id="character-class">Character class</h4> <ul> <li>[ and ]. They’re used for specifying a character class.</li> <li>Metacharacters (except <code class="language-plaintext highlighter-rouge">\</code>) are not active inside classes. For example <code class="language-plaintext highlighter-rouge">[$]</code> can match $.</li> <li>You can match the characters not listed within the class by complementing the set. This is indicated by including a ‘^’ as the first character of the class. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\d  Matches any decimal digit; this is equivalent to the class [0-9].
\D  [^0-9].
\s   Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S  [^ \t\n\r\f\v].
\w  Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W  [^a-zA-Z0-9_].
</code></pre></div> </div> <h4 id="backslash-">backslash <code class="language-plaintext highlighter-rouge">\</code></h4> </li> </ul> <p>Perhaps the most important metacharacter is the backslash, <code class="language-plaintext highlighter-rouge">\</code>.</p> <ul> <li>You can precede metacharacters with a backslash to remove their special meaning.</li> <li>Some of the special sequences beginning with ‘' represent predefined sets of characters.</li> </ul> <p><code class="language-plaintext highlighter-rouge">\w</code> matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class <code class="language-plaintext highlighter-rouge">[a-zA-Z0-9_]</code>. If the regex pattern is a string, <code class="language-plaintext highlighter-rouge">\w</code> will match all the characters marked as letters in the Unicode database provided by the unicodedata module.</p> <h4 id="repeating-things">Repeating Things</h4> <p>Repetitions such as * are greedy; (This part is similar with JavaScript)</p> <ul> <li>do *? work in Python? It works! ``` <blockquote> <blockquote> <blockquote> <p>s = ‘&lt;html&gt;&lt;head&gt;<title>Title</title>’ print(re.match(‘&lt;.*&gt;’, s).group())</p> </blockquote> </blockquote> </blockquote> </li> </ul> <html><head><title>Title</title> &gt;&gt;&gt; print(re.match('&lt;.*?&gt;', s).group()) <html> ``` #### Assertion ``` | Alternation; Crow|Servo will match either 'Crow' or 'Servo', not 'Cro', a 'w' or an 'S', and 'ervo'. ^ Matches at the beginning of lines. $ Matches at the end of a line, \A Matches only at the start of the string. When not in MULTILINE mode, \A and ^ are effectively the same. \Z Matches only at the end of the string. \b Word boundary. \B Another zero-width assertion, this is the opposite of \b ``` #### Grouping Because Frequently you need to obtain more information than just whether the RE matched or not. you need Grouping. - Groups are marked by the '(', ')' - Match object methods all have group 0 as their default - Example: ``` &gt;&gt;&gt; p = re.compile('(a(b)c)d') &gt;&gt;&gt; m = p.match('abcd') &gt;&gt;&gt; m.group(0) 'abcd' &gt;&gt;&gt; m.group(1) 'abc' &gt;&gt;&gt; m.group(2) 'b' &gt;&gt;&gt; m.group(2,1,2) ('b', 'abc', 'b') ``` - The groups() method returns a tuple containing the strings for all the subgroups, from 1 up to however many there are. ``` &gt;&gt;&gt; m.groups() ('abc', 'b') ``` - Repetition will repeat the whole group.: ``` &gt;&gt;&gt; p = re.compile('(ab)*') &gt;&gt;&gt; print(p.match('ababababab').span()) (0, 10) ``` - Backreferences in a pattern allow you to specify that the contents of an earlier capturing group must also be found at the current location in the string. ``` &gt;&gt;&gt; p = re.compile(r'\b(\w+)\s+\1\b') &gt;&gt;&gt; p.search('Paris in the the spring').group() 'the the' ``` Backreferences are very useful when performing string substitutions. #### Non-capturing Groups Sometimes you’ll want to use a group to denote a part of a regular expression, but aren’t interested in retrieving the group’s contents. You can make this fact explicit by using a non-capturing group: (?:...), where you can replace the ... with any other regular expression. ``` &gt;&gt;&gt; m = re.match("([abc])+", "abc") &gt;&gt;&gt; m.groups() ('c',) &gt;&gt;&gt; m = re.match("(?:[abc])+", "abc") &gt;&gt;&gt; m.groups() () ``` Except for not retrieving the content, a non-capturing group behaves exactly the same as a capturing group. #### Named Groups The syntax for a named group is one of the Python-specific extensions: `(?P<name>...)`. ``` &gt;&gt;&gt; p = re.compile(r'(?P<word>\b\w+\b)') &gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' ) &gt;&gt;&gt; m.group('word') 'Lots' &gt;&gt;&gt; m.group(1) 'Lots' ``` It’s obviously much easier to retrieve group. - backreferences can like this: (?P=name) indicates that the contents of the group called name should again be matched at the current point. ``` &gt;&gt;&gt; p = re.compile(r'\b(?P<word>\w+)\s+(?P=word)\b') &gt;&gt;&gt; p.search('Paris in the the spring').group() 'the the' ``` #### Lookahead Assertions (?=...) Positive lookahead assertion. (?!...) Negative lookahead assertion. For example, simple pattern to match a filename and split it apart into a base name and an extension, separated by a . In news.rc, news is the base name, and rc is the filename’s extension. The pattern to match this is quite simple: `.*[.].*$` Now, consider complicating the problem a bit; what if you want to match filenames where the extension is not bat or exe? `.*[.](?!bat$|exe$)[^.]*$` ### Questions - JavaScript support /g flag, but Python don’t. How to search whole string? Python use findall() to search globally. search() just match once. - JavaScript support /u flag, but Python don’t. How do Python implement unicode? - Python support A, X flag, but JavaScript don’t. ## RE in JavaScript In JavaScript, regular expressions are objects. ### JavaScript RegExp Object JavaScript use RegExp object to implement Regular Expression. There are some String methods which support regExp. But all the actual implementations come from corresponsed method of RegExp. #### create a RegExp Object in two ways: 1, Using a regular expression literal: let re = /ab+c/; 2, Or calling the constructor function : let re = new RegExp('ab+c'); #### Instance property - lastIndex lastIndex is a read/write integer property of RegExp instances that specifies the index at which to start the next match. Note that lastIndex is not a property of the RegExp prototype but is instead only exposed from RegExp instances. #### Methods test() and exec() ### RegExp related Methods #### RegExp Method - test() The test() method executes a search for a match between a regular expression and a specified string. Returns true or false. ```js const str = 'hello world!'; const result = /^hello/.test(str); // true ``` #### RegExp Method - exec() The exec() method executes a search for a match in a string. Returns a result array, or null. - JavaScript RegExp objects are stateful when they have the global or sticky flags set. They store a lastIndex from the previous match. Using this internally, exec() can be used to iterate over multiple matches in a string of text (with capture groups) - If the match succeeds, the exec() method returns an array (with extra properties index, input, and if the d flag is set, indices;) and updates the lastIndex property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text. - If your regular expression uses the "g" flag, you can use the exec() method multiple times to find successive matches in the same string. (Using string.matchAll() looks easier) ```js let myRe = /ab*/g; let str = 'abbcdefabh'; let myArray; while ((myArray = myRe.exec(str)) !== null) { let msg = 'Found ' + myArray[0] + '. '; msg += 'Next match starts at ' + myRe.lastIndex; console.log(msg); } //Found abb. Next match starts at 3 //Found ab. Next match starts at 9 ``` #### String method - match() - matchAll() #### match() - The match() method retrieves an array containing matchings in the string against a regular expression. - Return null if no matches are found. - Return an Array whose contents depend on the presence or absence of the global (g) flag. - If the g flag is used, all results matching the complete regular expression will be returned, but capturing groups will not. If you want to obtain capture groups and the global flag is set, you need to use RegExp.exec() or String.prototype.matchAll() instead. - If the g flag is NOT used, only the first complete match and its related capturing groups are returned. In this case, the returned item will have additional properties, like group, index, input. (with no g flag, str.match() return the same result as RegExp.exec().) - The implementation of `String.prototype.match` comes from `RegExp.prototype[@@match]`. #### matchAll() - The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups. - The actual implementation comes from `RegExp.prototype[@@matchAll]`. #### String method - replace() - replaceAll() replace() The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. - The original string is left unchanged. - The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. - If pattern is a string, only the first occurrence will be replaced. - If pattern is RegExp: ```js let re = /(\w+)\s(\w+)/; let str = 'John Smith'; let newstr = str.replace(re, '$2, $1'); console.log(newstr); // Smith, John ``` - If a function as the second parameter. the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. The arguments to the function are as follows: `match, p1, p2.., offset, string, groups`. ```js function replacer(match, p1, p2, p3, offset, string) { // p1 is non-digits, p2 digits, and p3 non-alphanumerics return [p1, p2, p3].join(' - '); } let newString = 'abc12345#$*%'.replace(/([^\d]*)(\d*)([^\w]*)/, replacer); console.log(newString); // abc - 12345 - #$*% ``` #### replaceAll() The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. #### String method - search() The search() method executes a search for a match between a regular expression and this String object. Return the index of the first match between the regular expression and the given string, or -1 if no match was found. #### String method - split() The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array. ### Regular expression pattern #### Flag **Sticky flag ‘y’**: The "y" flag indicates that it matches only from the exact index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later or earlier indexes). A regular expression defined as both sticky and global ignores the global flag. **‘d’ flag** Generate indices for substring matches. The "d" flag indicates that the result of a regular expression match should contain the start and end indices of the substrings of each capture group. ```js const str1 = 'foo bar foo'; const regex1 = new RegExp('foo', 'gd'); console.log(regex1.exec(str1).indices[0]); // Output: Array [0, 3] console.log(regex1.exec(str1).indices[0]); // Output: Array [8, 11] ‘d’ flag equal to RegExp.prototype.hasIndices ``` **‘u’ flag** `u` flag indicates a string must be considered as a series of Unicode code points. For `\p` or `\u{hhhh}` to work, a regular expression must use the u flag. **‘s’ flag** ‘.’ matches any single character except line terminators: \n, \r, \u2028 or \u2029. ES2018 added the s "dotAll" flag, which allows the dot to also match line terminators. Means that, dot will match all single character when using ‘s’ flag. #### Charactar classes Character classes, [], distinguish kinds of characters such as, for example, distinguishing between letters and digits. `[abcd], [0-9], [-_.]`: A character class. Find all the lowcase letters and put them in an Array: ```js const paragraph = 'The quick mps..'; const regex = /[a-z]/g; const found = paragraph.match(regex); //Array ["h", "e", "q", "u", "i", "c", "k", "m", "p", "s"] ``` `[^abcd]`: it matches anything that is not enclosed in the brackets. `.` : Has one of the following meanings: 1. Matches any single character except line terminators: \n, \r, \u2028 or \u2029. For example, /.y/ matches "my" and "ay", but not "yes", in "yes make my day". 2. Inside a character class, [.], the dot loses its special meaning and matches a literal dot. `\d` Matches any digit (Arabic numeral). Equivalent to [0-9]. `\D` : Equivalent to [^0-9]. `\w` Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to `[A-Za-z0-9_]` `[\w-]` is the same as `[A-Za-z0-9_-]` `\W` : Equivalent to `[^A-Za-z0-9_]`, opposite to `/w` `\s` Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to `[ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]`. `\S` : opposite to `/s` `\xhh` : Matches the character with the code hh (two hexadecimal digits). `\uhhhh` : Matches a UTF-16 code-unit with the value hhhh (four hexadecimal digits). `\u{hhhh}` or `\u{hhhhh}` : (Only when the u flag is set.) Matches the character with the Unicode value U+hhhh or U+hhhhh (hexadecimal digits). `\` : Indicates that the following character should be treated specially, or "escaped". `x|y` : Disjunction: Matches either "x" or "y". #### Unicode property escapes `\p{UnicodeProperty}`, `\P{UnicodeProperty}` Unicode property escapes RE allows for matching characters based on their Unicode properties. To match, for example, emoji characters, or Japanese katakana characters, or Chinese/Japanese Han/Kanji characters, punctuations, letters (even letters from specific languages or scripts), etc. ##### What is Unicode property? A character is described by several properties which are either binary ("boolean-like") or non-binary. Some Unicode properties encompasses many more characters than some character classes (such as \w which matches only latin letters, a to z) but the latter is better supported among browsers. The Unicode Standard assigns various properties to each Unicode character and code point. The properties can be used to handle characters (code points) in processes, like in line-breaking, script direction right-to-left or applying controls. Some "character properties" are also defined for code points that have no character assigned and code points that are labeled like `"<not a="" character="">"`. Properties are displayed in the following order: `[code];[name];[gc];[cc];[bc];[decomposition];;;[nv];[bm];[alias];;;;` #### Boundary-type Assertions `^` : Matches the beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, /^A/ does not match the "A" in "an A", but does match the first "A" in "An A". `$` : Matches the end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, /t$/ does not match the "t" in "eater", but does match it in "eat". `\b` : Matches a word boundary. Indicate the beginnings and endings of lines and words. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space. Examples can help to understand this assertion: - `/\bm/` matches the "m" in "moon". - `/oo\b/` does not match the "oo" in "moon", because "oo" is followed by "n" which is a word character. - `/oon\b/` matches the "oon" in "moon", because "oon" is the end of the string, thus not followed by a word character. - `/\w\b\w/` will never match anything, because a word character can never be followed by both a non-word and a word character. - `/\b\d{4}\b/g`, the first `\b` means start matching at the beginning of a word, the second `\b` means end matching at the end of a word. `\B` : Matches a non-word boundary. This is a position where the previous and next character are of the same type: Either both must be words, or both must be non-words, for example between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match. For example, /\Bon/ matches "on" in "at noon", and /ye\B/ matches "ye" in "possibly yesterday". #### Look-ahead Look-behind assertion `x(?=y)`: Lookahead assertion, Matches "x" only if "x" is followed by "y". `x(?!y)`: Negative lookahead assertion, Matches "x" only if "x" is not followed by "y". `(?&lt;=y)x`: Lookbehind assertion, Matches "x" only if "x" is preceded by "y". `(?&lt;!y)x`: Negative lookbehind assertion, Matches "x" only if "x" is not preceded by "y". #### Groups and backreferences Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression. `(x)`: Capturing group: Matches x and remembers the match. For example, `/(foo)/` matches and remembers "foo" in "foo bar". ```js const personList = `First_Name: John, Last_Name: Doe First_Name: Jane, Last_Name: Smith`; const regexpNames = /First_Name: (\w+), Last_Name: (\w+)/mg; for (const match of personList.matchAll(regexpNames)) { console.log(`Hello ${match[1]} ${match[2]}`); } &gt; "Hello John Doe" &gt; "Hello Jane Smith" ``` `matchAll ()` method return capturing groups information and store in the returned array. `match[0]` store the matched text. match[1] store the submatched text 1 which refer to the first parentheses. Why need capturing group? provide sub-matched information. You can even name a capturing Group `(?<Name>x)`: Name-capturing group You can match and does not remember the match `(?:x)`: Non-capturing group back reference `\n` n, positive number. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, `/apple(,)\sorange\1/` matches "apple, orange," in "apple, orange, cherry, peach". `\k<Name>` A back reference to the last substring matching the Named capture group specified by `<Name>`. #### Quantifiers (Repetitions) - following ‘x’, just refer to one letter - Repetitions such as *, + are greedy; `x+`: Matches the preceding item "x" 1 or more times. Equivalent to {1,}. For example, /a+/ matches the "a" in "candy" and all the "a"'s in "caaaaaaandy". `x*`: Matches the preceding item "x" 0 or more times. Equivalent to {0,}. For example, /bo*/ matches "boooo" in "A ghost booooed" and "b" in "A bird warbled", but nothing in "A goat grunted". `x?`: Matches the preceding item "x" 0 or 1 times. Equivalent to {0,1}. For example, /e?le?/ matches the "el" in "angel" and the "le" in "angle." If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy. (quantifiers are always greedy by default) `?` following quantifiers example: ```js const regex1 = /&lt;.*&gt;/ const str1 = 'some <foo> <bar> new </bar> </foo> thing'; console.log(str1.match(regex1)) // &gt; Array ["<foo> <bar> new </bar> </foo>"] const regex2 = /&lt;.*?&gt;/ console.log(str1.match(regex2)) // Array ["<foo>"] ``` `x{n}`: matches exactly "n" occurrences of the preceding item "x". For example, /a{2}/ doesn't match the "a" in "candy", but it matches all of the "a"'s in "caandy", and the first two "a"'s in "caaandy". `x{n,}`: matches at least "n" occurrences of the preceding item "x". For example, /a{2,}/ doesn't match the "a" in "candy", but matches all of the a's in "caandy" and in "caaaaaaandy". `x{n,m}`: m &gt; n, matches at least "n" and at most "m" occurrences of the preceding item "x". ### Questions - Why use string methods to implement RegExp function? Why not use RegExp object methods to complete all function? - Why it won’t work for \p (Unicode property escape) without ‘u’ flag? #### `\uhhhh vs. \u{hhhh}` `\uhhhh` : hhhh is UTF-16 code-unit value. It works even without u flag. `\u{hhhh}` or `\u{hhhhh}` : (Only when the u flag is set.) U+hhhh or U+hhhhh is Unicode value. `u` flag indicates a string must be considered as a series of Unicode code points. </foo></Name></Name></Name></not></word></word></name></html></head></html>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><category term="RE"/><summary type="html"><![CDATA[What is RE]]></summary></entry><entry><title type="html">Python String</title><link href="https://benwzj.github.io/blog/2024/py-string/" rel="alternate" type="text/html" title="Python String"/><published>2024-12-14T00:00:00+00:00</published><updated>2024-12-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-string</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-string/"><![CDATA[<p>Textual data in Python is handled with <code class="language-plaintext highlighter-rouge">str</code> objects, or call strings. Strings are immutable sequences of Unicode code points.</p> <ul> <li>Like JavaScript, strings in Python are arrays of bytes representing unicode characters.</li> <li>Square brackets can be used to access elements of the string.</li> <li>You can loop through a string.</li> <li>Using <code class="language-plaintext highlighter-rouge">len()</code> to get length of a string.</li> <li>Support keyword in, not in.</li> <li>Python doesn’t have character type, a single character is simply a string with a length of 1.</li> <li>You can assign a multiline string to a variable by using three quotes.</li> <li>Python has a set of built-in methods that you can use on strings.</li> </ul> <h2 id="basic-operation">Basic Operation</h2> <h3 id="string-slice-syntax">String slice syntax</h3> <p>string slice is a convenient way to operate string.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>    <span class="c1">#"l"
</span><span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>  <span class="c1">#"llo"
</span><span class="n">b</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1">#reverse a string: "!dlroW ,olleH"
</span></code></pre></div></div> <h3 id="split-string">split string</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">))</span> <span class="c1"># ['Hello', ' World!']
</span></code></pre></div></div> <h3 id="join-string">join string</h3> <p>opposite of split(), joins the elements in the given list together.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> World!</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">a</span><span class="p">))</span> <span class="c1"># "Hello, World!"
</span></code></pre></div></div> <h3 id="replace">replace</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">H</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">J</span><span class="sh">"</span><span class="p">))</span> <span class="c1"># "Jello, World!"
</span></code></pre></div></div> <h3 id="find-and-rfind">find() and rfind()</h3> <p>find() return the index of the first location. rfine() return the index of last one.</p> <h3 id="slower-supper">s.lower(), s.upper()</h3> <p>returns the lowercase or uppercase version of the string</p> <h3 id="translate">translate()</h3> <p>The <code class="language-plaintext highlighter-rouge">translate()</code> method returns a string where some specified characters are replaced with the character described in a dictionary, or in a mapping table.</p> <ul> <li>Use the str.maketrans() method to create a mapping table.</li> </ul> <h2 id="str-object">str Object</h2> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">str</span><span class="p">(</span><span class="nb">object</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">str</span><span class="p">(</span><span class="nb">object</span><span class="o">=</span><span class="sa">b</span><span class="sh">''</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">'</span><span class="s">strict</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Return a string version of object. If object is not provided, returns the empty string. Otherwise, the behavior of <code class="language-plaintext highlighter-rouge">str()</code> depends on whether encoding or errors is given.</p> <p><code class="language-plaintext highlighter-rouge">print("20 days are " + str(20*24*60*60) +" seconds")</code></p> <h2 id="string-module">String module</h2> <p>string module is a built-in module and we have to import it before using any of its constants and classes. Because str class, String module have been old. and you should not use.</p> <h2 id="string-format">String format</h2> <p>There are several way to format, manipulate string:</p> <ul> <li>printf-style, template, str.format() have been old style way.</li> <li>f-string is the latest way and recommend use.</li> </ul> <h3 id="printf-style-string-formatting-old-sytle">printf-style String Formatting (old sytle)</h3> <p>String objects have one unique built-in operation: the % operator (modulo). The effect is similar to using the sprintf() in the C language. Example:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="err">'</span><span class="o">%</span><span class="p">(</span><span class="n">language</span><span class="p">)</span><span class="n">s</span> <span class="n">has</span> <span class="o">%</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="mo">03</span><span class="n">d</span> <span class="n">quote</span> <span class="n">types</span><span class="p">.</span><span class="err">'</span> <span class="o">%</span>
      <span class="p">{</span><span class="err">'</span><span class="n">language</span><span class="err">'</span><span class="o">:</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"number"</span><span class="o">:</span> <span class="mi">2</span><span class="p">})</span>
<span class="c1">// Python has 002 quote types.</span>
</code></pre></div></div> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dec2hexstring</span><span class="p">(</span><span class="n">dec</span><span class="p">):</span>
    <span class="n">decimal</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>
    <span class="n">hexa</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%#X</span><span class="sh">'</span> <span class="o">%</span> <span class="n">decimal</span>
    <span class="k">return</span> <span class="n">hexa</span>
</code></pre></div></div> <p>But recommend to use the newer formatted string literals, the str.format() interface, or template strings. f-String is latest way to format string!</p> <h3 id="strformatargs-kwargs">str.format(*args, **kwargs)</h3> <p>Perform a string formatting operation. (Format string means create string, make string.) The string on which this method is called can contain literal text or replacement fields delimited by braces {}.</p> <ul> <li>Introduced in Python 2.6.</li> <li>str.format(), when deal with multiple arguments, and long strings. it will looks verbose.</li> </ul> <p><code class="language-plaintext highlighter-rouge">"The sum of 1 + 2 is {0}".format(1+2)</code> get <code class="language-plaintext highlighter-rouge">'The sum of 1 + 2 is 3'</code></p> <p><code class="language-plaintext highlighter-rouge">'{2}, {1}, {0}'.format('a', 'b', 'c')</code> get <code class="language-plaintext highlighter-rouge">'c, b, a'</code></p> <h4 id="format-string-syntax">Format String Syntax:</h4> <p><code class="language-plaintext highlighter-rouge">replacement_field ::= "{" [field_name] ["!" conversion] [":" format_spec] "}"</code></p> <p><code class="language-plaintext highlighter-rouge">field_name</code> can be 0, 1, 2… which is positional of the parameters. or be nothing, which still positional. or be key name of the dic which is the parameter. or be attribute of object which is the parameter.</p> <p><code class="language-plaintext highlighter-rouge">conversion</code> have three options: !s, !r, !a <code class="language-plaintext highlighter-rouge">"repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')</code> get <code class="language-plaintext highlighter-rouge">"repr() shows quotes: 'test1'; str() doesn't: test2"</code></p> <p><code class="language-plaintext highlighter-rouge">format_spec</code> is a Mini-Languag! Start from ‘:’. For example display in Hexadecimal, or octal, binary. It can do more, specify the type, fill, align, width, precision :</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>align, text <span class="k">in </span>zip<span class="o">(</span><span class="s1">'&lt;^&gt;'</span>, <span class="o">[</span><span class="s1">'left'</span>, <span class="s1">'center'</span>, <span class="s1">'right'</span><span class="o">])</span>:
...     <span class="s1">'{0:{fill}{align}16}'</span>.format<span class="o">(</span>text, <span class="nv">fill</span><span class="o">=</span>align, <span class="nv">align</span><span class="o">=</span>align<span class="o">)</span>
...
<span class="s1">'left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'</span>
<span class="s1">'^^^^^center^^^^^'</span>
<span class="s1">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;right'</span>
</code></pre></div></div> <p>Using the comma as a thousands separator:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="s1">'{:,}'</span>.format<span class="o">(</span>1234567890<span class="o">)</span>
<span class="s1">'1,234,567,890'</span>
</code></pre></div></div> <p>Nesting arguments:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">align</span><span class="p">,</span> <span class="n">text</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;^&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">center</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">]):</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">{:{fill}{align}30}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">align</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="n">align</span><span class="p">))</span>
</code></pre></div></div> <h3 id="template-strings">Template strings</h3> <p>Template strings is very simple string formatting tool which focus on substitutions.</p> <p>A primary use case for template strings is for internationalization (i18n) since in that context, the simpler syntax and functionality makes it easier to translate than other built-in string formatting facilities in Python. The string module provides a Template class that implements these rules. Main methods is <code class="language-plaintext highlighter-rouge">substitute()</code>, and <code class="language-plaintext highlighter-rouge">safe_substitute()</code></p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">string</span> <span class="kn">import</span> <span class="n">Template</span>
<span class="n">s</span> <span class="o">=</span> <span class="nc">Template</span><span class="p">(</span><span class="sh">'</span><span class="s">$who likes $what</span><span class="sh">'</span><span class="p">)</span>
<span class="n">s1</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">substitute</span><span class="p">(</span><span class="n">who</span><span class="o">=</span><span class="sh">'</span><span class="s">tim</span><span class="sh">'</span><span class="p">,</span> <span class="n">what</span><span class="o">=</span><span class="sh">'</span><span class="s">kung pao</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c1">#'tim likes kung pao'
</span></code></pre></div></div> <h3 id="formatted-string-literal--f-strings-python-36-new-syntax">formatted string literal / f-Strings (Python 3.6+ new syntax)</h3> <ul> <li>(f-String are similar to JavaScript’s Template Literal)</li> <li>A formatted string literal or f-string is a string literal that is prefixed with ‘f’ or ‘F’.</li> <li>These strings may contain replacement fields, which are expressions delimited by curly braces {}.</li> <li>While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</li> <li>f-strings are a great new way to format strings. Not only are they more readable, more concise, and less prone to error than other ways of formatting, but they are also faster!</li> <li>format syntax is similar to str.format()</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Fred</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="s">He said his name is </span><span class="si">{</span><span class="n">name</span><span class="si">!r}</span><span class="s">.</span><span class="sh">"</span>
<span class="sh">"</span><span class="s">He said his name is </span><span class="sh">'</span><span class="s">Fred</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="s">He said his name is </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span>
<span class="sh">"</span><span class="s">He said his name is Fred.</span><span class="sh">"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number</span><span class="si">:</span><span class="c1">#0x</span><span class="si">}</span><span class="sh">"</span>  <span class="c1"># using integer format specifier
</span><span class="sh">'</span><span class="s">0x400</span><span class="sh">'</span>
</code></pre></div></div> <ul> <li>Support triple quote mark. So it is easy to support Multiline f-Strings</li> <li>f-string support function</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> def to_lowercase<span class="o">(</span>input<span class="o">)</span>:
...     <span class="k">return </span>input.lower<span class="o">()</span>

<span class="o">&gt;&gt;&gt;</span> name <span class="o">=</span> <span class="s2">"Eric Idle"</span>
<span class="o">&gt;&gt;&gt;</span> f<span class="s2">"{to_lowercase(name)} is funny."</span>
<span class="s1">'eric idle is funny.'</span>
</code></pre></div></div> <h2 id="unicode-support">Unicode Support</h2> <p>Great presentation about Unicode: https://nedbatchelder.com/text/unipain.html</p> <h3 id="overview">Overview</h3> <p>Strings can either be represented in bytes or unicode code points. Byte strings and unicode strings each have a method to convert it to the other type of string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unicode .encode() → bytes
bytes .decode() → unicode
</code></pre></div></div> <p>In Python 2, a string is by default a binary string and you need to use u’’ to mark a string as a Unicode string. If you try to perform a string operation that combines a unicode string with a byte string, Python 2 try to be helpful, it will implicitly decode the byte string to produce a second unicode string, then complete the operation. But the conversion from int to float can’t fail, while byte string to unicode string can.</p> <p>In Python 3, a string by default is a Unicode string (You don’t need to know HOW Python deal with it), and you need to use b’’ to explicitly mark a string as a binary string. bytes and str are different types. In Python3, they are not converted to each other implicitly. You need to handle both types by yourself.</p> <p>The default encoding for Python source code is UTF-8, so you can simply include a Unicode character (or use u escape) in a string literal:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print<span class="o">(</span><span class="s2">"Fichier non trouvé"</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s2">"</span><span class="se">\u</span><span class="s2">0394"</span>     <span class="c"># Using a 16-bit hex value</span>
<span class="s1">'\u0394'</span>
</code></pre></div></div> <p>Python 3 also supports using Unicode characters in identifiers. (JavaScript support as well)</p> <h3 id="unicode-sandwich-theory">Unicode Sandwich theory</h3> <figure> <picture> <img src="/assets/img/python-string-unicode.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>A good practice is to decode your bytes in UTF-8 (or an encoder that was used to create those bytes) as soon as they are loaded from a file. Run your processing on unicode code points through your Python code, and then write back into bytes into a file using UTF-8 encoder in the end.</p> <p>Python3 handles Unicode strings with unicode code points. You don’t need to know HOW. This is the job of Python 3. You can just take it as a black box. Python3 make sure you can use all the methods of str type. Just remember the Sandwich mode! What you need to handle is decode as soon as possible, and encode at the end.</p> <h3 id="5-fact-of-life-about-unicode-string-in-python">5 fact of life about unicode string in Python</h3> <ol> <li> <p>everything in a computer is bytes. Files on disk are a series of bytes, and network connections only transmit bytes.</p> </li> <li> <p>The world needs more than 256 symbols</p> </li> <li>Bytes and Unicode, Need to keep them straight, Need to deal with both. <ul> <li>You can’t pretend that everything is bytes, or everything is unicode. You need to use each for their purpose, and explicitly convert between them as needed.</li> <li>So Python 2’s pain is deferred: you think your program is correct, and find out later that it fails with exotic characters.</li> <li>With Python 3, your code fails immediately, so even if you are only handling ASCII, you have to explicitly deal with the difference between bytes and unicode.</li> </ul> </li> <li> <p>Encoding is out-of-band. You cannot infer the encoding of bytes. You must be told, or you have to guess.</p> </li> <li>Data is dirty. Sometimes you are told wrong.</li> </ol> <h3 id="3-pro-tips">3 Pro tips</h3> <ul> <li>Unicode Sandwich</li> <li>Know what you have! Bytes or Unicode? If bytes, what encoding?</li> <li>Test Unicode</li> </ul> <h3 id="reading-files">Reading files</h3> <p>In Python 3, the two modes produce different results. When you open a file in text mode, either with “r”, or by defaulting the mode entirely, the data read from the file is implicitly decoded into Unicode, and you get str objects. If you open a file in binary mode, by supplying “rb” as the mode, then the data read from the file is bytes, with no processing done on them.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hello.txt"</span>, <span class="s2">"r"</span><span class="o">)</span>.read<span class="o">()</span>
<span class="s1">'Hello, world!\n'</span>
<span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hello.txt"</span>, <span class="s2">"rb"</span><span class="o">)</span>.read<span class="o">()</span>
b<span class="s1">'Hello, world!\n'</span>
</code></pre></div></div> <p>To get the file read properly, you should specify an encoding to use. The open() function now has an optional encoding parameter.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hi_utf8.txt"</span>, <span class="s2">"r"</span>, <span class="nv">encoding</span><span class="o">=</span><span class="s2">"utf-8"</span><span class="o">)</span>.read<span class="o">()</span>
<span class="s1">'Hi \u2119\u01b4\u2602\u210c\xf8\u1f24'</span>
<span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hi_utf8.txt"</span>, <span class="s2">"r"</span><span class="o">)</span>.read<span class="o">()</span> <span class="c"># wrong encoding</span>
<span class="s1">'Hi \xe2\u201e\u2122\xc6\xb4\xe2\u02dc\u201a\xe2\u201e\u0152\xc3\xb8\xe1\xbc\xa4'</span>
</code></pre></div></div> <h3 id="internal-representations-for-unicode-strings">Internal representations for Unicode strings</h3> <p>Even the default encoding for Python source code is UTF-8. But for Unicode strings, Python uses three kinds of internal representations : 1 byte per char (Latin-1 encoding) 2 bytes per char (UCS-2 encoding) 4 bytes per char (UCS-4 encoding)</p> <p>If all characters in a string can fit in ASCII range, then they are encoded using 1-byte Latin-1 encoding. But if there are any char which need two bytes, then Python will encoding all to UCS-2. same</p> <p>This is because each character in a string must take up an equivalent number of bytes! otherwise, operations such as indexing, slicing would be inaccurate.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s0 <span class="o">=</span> <span class="s1">'a'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s0+<span class="s1">'b'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s0<span class="o">))</span>
<span class="o">&gt;</span>1
s1 <span class="o">=</span> <span class="s1">'你'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'你'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>2
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'你a'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>4
s1 <span class="o">=</span> <span class="s1">'🐍'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'🐍你'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>8
</code></pre></div></div> <p>Within CPython, unicode characters are stored as PyUnicodeObject instances. We can view the format of a PyUnicodeObject by looking at the source code:</p> <figure> <picture> <img src="/assets/img/PyUnicodeObject.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="build-in-function-chr-ord">build-in function chr(), ord()</h3> <p>Convert between One-character Unicode strings and code point value. These tow functions do nothing about encoding.</p> <h4 id="chr">chr()</h4> <p>takes code point value(integers) and returns a Unicode string of length 1 that contains the corresponding code point.</p> <h4 id="ord">ord()</h4> <p>takes a one-character Unicode string and returns the code point value (integers).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># '\u0041' == 'A'</span>
<span class="o">&gt;&gt;&gt;</span> chr<span class="o">(</span>65<span class="o">)</span>
<span class="s1">'\u0041'</span>
<span class="o">&gt;&gt;&gt;</span> ord<span class="o">(</span><span class="s1">'\u0041'</span><span class="o">)</span>
65
</code></pre></div></div> <h3 id="unicode-literals-in-python-source-code">Unicode Literals in Python Source Code</h3> <p>In Python source code, specific Unicode code points can be written using the \u escape sequence, which is followed by four hex digits giving the code point. The \U escape sequence is similar, but expects eight hex digits, not four:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> s <span class="o">=</span> <span class="s2">"a</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\u</span><span class="s2">1234</span><span class="se">\u</span><span class="s2">20ac</span><span class="se">\U</span><span class="s2">00008000"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">[</span>ord<span class="o">(</span>c<span class="o">)</span> <span class="k">for </span>c <span class="k">in </span>s]
<span class="o">[</span>97, 172, 4660, 8364, 32768]
</code></pre></div></div> <h3 id="bytesdecode-and-strencode">bytes.decode() and str.encode()</h3> <h4 id="bytesdecode-can-create-a-string">bytes.decode() can create a string.</h4> <p>This method takes an encoding argument, such as UTF-8, and optionally an errors argument. (\xNN escape sequence means that NN is Hexadecimal value)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\x41'</span>.decode<span class="o">(</span><span class="s2">"utf-8"</span><span class="o">)</span>
A
<span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\x41\x00'</span>.decode<span class="o">(</span><span class="s2">"utf-16"</span><span class="o">)</span>
A
</code></pre></div></div> <h4 id="strencode">str.encode()</h4> <p>returns a bytes representation of the Unicode string, encoded in the requested encoding. (opposite method of bytes.decode())</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> u <span class="o">=</span> chr<span class="o">(</span>65<span class="o">)</span> + <span class="s1">'abcd'</span> + chr<span class="o">(</span>66<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> u.encode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
b<span class="s1">'AabcdB'</span>
<span class="o">&gt;&gt;&gt;</span> u.encode<span class="o">(</span><span class="s1">'utf-16'</span><span class="o">)</span>
b<span class="s1">'\xff\xfeA\x00a\x00b\x00c\x00d\x00B\x00'</span>
</code></pre></div></div> <ul> <li>Unicode code point for emoji 🖐 is U+1F590</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">((</span><span class="sh">"</span><span class="s">你好🖐</span><span class="sh">"</span><span class="p">).</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">unicode_escape</span><span class="sh">"</span><span class="p">))</span>
<span class="sa">b</span><span class="sh">'</span><span class="se">\\</span><span class="s">u4f60</span><span class="se">\\</span><span class="s">u597d</span><span class="se">\\</span><span class="s">U0001f590</span><span class="sh">'</span>

<span class="nf">print</span><span class="p">((</span><span class="sh">"</span><span class="s">你好🖐</span><span class="sh">"</span><span class="p">).</span><span class="nf">encode</span><span class="p">())</span> 
<span class="sa">b</span><span class="sh">'</span><span class="se">\xe4\xbd\xa0\xe5\xa5\xbd\xf0\x9f\x96\x90</span><span class="sh">'</span>
</code></pre></div></div> <h3 id="codecs-module">codecs module</h3> <p>The low-level routines for registering and accessing the available encodings are found in the codecs module. Implementing new encodings also requires understanding the codecs module.</p> <h2 id="unicode-in-javascript">Unicode in JavaScript</h2> <ul> <li>While a JavaScript source file can have any kind of encoding, JavaScript will then convert it internally to UTF-16 before executing it.</li> <li>JavaScript strings are all UTF-16 sequences, as the ECMAScript standard says: When a String contains actual textual data, each element is considered to be a single UTF-16 code unit.</li> <li>UTF-16 encoding need to use with surrogate pairs. For the code points which bigger than U+FFFF.</li> <li>Example (use u escape):</li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">the heart eyes emoji is </span><span class="se">\</span><span class="s1">ud83d</span><span class="se">\</span><span class="s1">ude0d</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">//&gt; the heart eyes emoji is 😍</span>
</code></pre></div></div> <h3 id="tips-for-writing-unicode-aware-programs">Tips for Writing Unicode-aware Programs</h3> <ul> <li>Software should only work with Unicode strings internally,</li> <li>decoding the input data as soon as possible and,</li> <li>encoding the output only at the end.</li> </ul> <h2 id="string-interning">String interning</h2> <p>String interning is a method of storing only one copy of each distinct string value in memory, which must be immutable.</p> <ul> <li>String interning concept is akin to shared object concept! shared object is more popular in immutable object.</li> <li>String Interning can Saving Memory, Fast Comparisons, Fast Dictionary Lookups.</li> </ul> <h3 id="implicit-string-interning">Implicit String interning</h3> <p>Implicitly intern string depends on several factors:</p> <ul> <li>All empty strings and strings of length 1 are interned.</li> <li>Up until version 3.7, Python used peephole optimization, and all strings longer than 20 characters were not interned. However, now it uses the AST optimizer, and (most) strings up to 4096 characters are interned.</li> <li>Names of functions, class, variables, arguments, etc. are implicitly interned.</li> <li>The keys of dictionaries used to hold module, class, or instance attributes are interned.</li> <li>Strings are interned only at compile-time, this means that they will not be interned if their value can’t be computed at compile-time.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 <span class="o">=</span> <span class="s1">'iambenwen'</span>
s2 <span class="o">=</span> <span class="s1">'iambenwen'</span>
print<span class="o">(</span>s1 is s2<span class="o">)</span>
<span class="o">&gt;</span><span class="nb">true</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s2">"strin"</span>+<span class="s2">"g"</span> is <span class="s2">"string"</span>
True
</code></pre></div></div> <h4 id="python-wont-intern-all-the-string">Python won’t intern all the string.</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> <span class="s1">'Y'</span><span class="k">*</span>4097
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> <span class="s1">'Y'</span><span class="k">*</span>4097
<span class="o">&gt;&gt;&gt;</span> c is d
<span class="nb">false

</span>s1 <span class="o">=</span> <span class="s2">"wen"</span>.join<span class="o">([</span><span class="s2">"b"</span>, <span class="s2">"e"</span>, <span class="s2">"n"</span><span class="o">])</span>
s2 <span class="o">=</span> <span class="s2">"wen"</span>.join<span class="o">([</span><span class="s2">"b"</span>, <span class="s2">"e"</span>, <span class="s2">"n"</span><span class="o">])</span>
print<span class="o">(</span>s1 is s2<span class="o">)</span>
<span class="o">&gt;</span><span class="nb">false</span>

<span class="o">&gt;&gt;&gt;</span> s1 <span class="o">=</span> <span class="s2">"strin"</span>
<span class="o">&gt;&gt;&gt;</span> s2 <span class="o">=</span> <span class="s2">"string"</span>
<span class="o">&gt;&gt;&gt;</span> s1+<span class="s2">"g"</span> is s2
False
</code></pre></div></div> <h4 id="dont-rely-on-the-implicit-string-interning">Don’t Rely on the Implicit String Interning</h4> <p>Because the rules of the implicit string interning could be different according to different compiler, interpreter. For example, up until the version of Python 3.7, the peephole optimization is used for string interning and all strings longer than 20 characters will not be interned. However, the algorithm was changed to the AST optimizer then, and the length is equal to 4096 rather than 20.</p> <h3 id="explicit-interning">Explicit interning</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> import sys
<span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> sys.intern<span class="o">(</span><span class="s1">'Y'</span><span class="k">*</span>4097<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> sys.intern<span class="o">(</span><span class="s1">'Y'</span><span class="k">*</span>4097<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> c is d
True
</code></pre></div></div> <p>In practice, we should use the == operator to compare strings. If we need to speed up the comparison, intern the strings explicitly.</p> <h3 id="disadvantages-of-string-interning">Disadvantages of String Interning</h3> <ul> <li>Memory Cost.</li> <li>Time Cost: The call to intern() function is expensive as it has to manage the interned table.</li> <li>not friendly for Multi-threaded Environments .</li> </ul> <h3 id="the-following-comparison-returns-true-because-of-shared-objects">The following comparison returns True because of shared objects.</h3> <p>CPython loads the Latin-1 range of characters unicode decimals 0 to 255, inclusive, as shared objects every time Python is initialized. Any calls to values in this range are referred to those pre-existing objects.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s3</span> <span class="o">=</span> <span class="sh">'</span><span class="s">levin</span><span class="sh">'</span>
<span class="n">s4</span> <span class="o">=</span> <span class="sh">'</span><span class="s">elise</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s3</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="n">s4</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="c1">#&gt;true
</span></code></pre></div></div> <h2 id="string-questions">String Questions</h2> <h3 id="if-using-u-escape-sequence-follow-by-code-point-can-display-unicode-string-why-need-encoding">If using u escape sequence follow by code point can display Unicode string. why need encoding?</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\u0041\u1234\u20ac\u8000\U0002070E</span><span class="sh">"</span>

<span class="nf">print</span><span class="p">([</span><span class="nf">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">])</span> <span class="c1"># get unicode’s integer value:
#&gt;[65, 4660, 8364, 32768, 132878]
</span>
<span class="nf">print</span><span class="p">([</span><span class="nf">chr</span><span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">])</span> <span class="c1"># get one-character string: 
#&gt;['A', 'ሴ', '€', '耀', '𠜎']
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get actually bytes of utf-8 encoding: 
#&gt;41e188b4e282ace88080f0a09c8e
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-16</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get utf-16
#&gt;fffe41003412ac20008041d80edf
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-32</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get utf-32
#&gt;fffe00004100000034120000ac200000008000000e070200
</span></code></pre></div></div> <p>(The Unicode character U+FEFF is used as a byte-order mark (BOM), and is often written as the first character of a file in order to assist with auto detection of the file’s byte ordering. )</p> <ul> <li> <p>ONE important concept is that, in Python, only refer to store or transmit strings when talking about encodings.</p> </li> <li>Using code point can display unicode string! utf-32 can be represented by codepoint totally. But this encoding have some shortcoming. like consuming too many space, byte ordering issue.</li> <li>Python say it represent string with code point internally. it is possible and it is good to support string methods. The encoding can be ASCII, or USC2, or USC4. But user can store or transmit string by UTF-8</li> </ul> <h3 id="how-to-change-str-encoding">How to change str encoding.</h3> <p>In Python, str type is Unicode string. str’s encoding just for store or transmission. str.encode() support around 100 encoding type.</p> <h3 id="how-to-know-the-encoding-of-one-string-how-do-python-identify-the-encoding-of-one-string">How to know the encoding of one String? How do Python identify the encoding of one string?</h3> <p>Encoding is out-of-band. You cannot infer the encoding of bytes. You must be told, or you have to guess.</p> <h3 id="how-to-judge-the-string-if-we-just-get-part-of-the-string">How to judge the string if we just get part of the string?</h3> <p>UTF-8 performing better at this issue.</p> <h3 id="how-to-indexing-slicing-getting-length-of-a-unicode-string">How to indexing, slicing, getting length of a Unicode String?</h3> <p>Variable length encoding can make indexing slicing getting length fail. Python’s string type is using Unicode, but internal encoding is vary which depending on what characters the string contains.</p> <h3 id="what-is-the-relationship-between-string-interning-and-encoding">What is the relationship between string interning and encoding?</h3> <p>Not relative</p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="String"/><summary type="html"><![CDATA[Textual data in Python is handled with str objects, or call strings. Strings are immutable sequences of Unicode code points.]]></summary></entry><entry><title type="html">Python Collection Overview</title><link href="https://benwzj.github.io/blog/2024/py-collection/" rel="alternate" type="text/html" title="Python Collection Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-collection</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-collection/"><![CDATA[<h2 id="concepts-of-containers-collections-sequences-mappings">Concepts of Containers, Collections, Sequences, Mappings</h2> <ul> <li>Containers &gt; Collections &gt; Sequences</li> <li>Container concept is under the context of Object: Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</li> <li>Collection: data structures that store and organize data. They are container data types that allow you to add, remove, and iterate over items. Python has 4 built-in data structures that can be used to hold a collection of objects, they are <ul> <li>list</li> <li>tuple</li> <li>set</li> <li>dictionary</li> </ul> </li> <li>Containers or Collections are objects that are used to store different objects and provide a way to access the contained objects and iterate over them. <ul> <li>Python Standard Library provide <strong>collections module</strong> to implement specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.</li> <li>You can use the <code class="language-plaintext highlighter-rouge">counter</code> function to count the number of occurrences of each element in a container.</li> </ul> </li> <li>A sequence is an <strong>ordered</strong> collection. They maintain the order of the things in them. (set, dict are NOT sequence). Sequences are a special type of iterable that can be indexed using square brackets <code class="language-plaintext highlighter-rouge">[...]</code> to get items by their position. You can also ask sequences for their length to see how many things are inside them. <ul> <li>List</li> <li>Tuple</li> <li>string</li> <li>byte</li> <li>range</li> </ul> </li> <li>A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary.</li> </ul> <h2 id="list">List</h2> <ul> <li>List is ordered and mutable, Allows duplicate members, similar to array in JavaScript.</li> <li>Lists are created using square brackets. Example: <code class="language-plaintext highlighter-rouge">list1 = ["abc", 34, True, 40, "male"]</code></li> <li>If you want to determine something inside of a List, that is big O(n) time complexity. It look over most of the elements of the list. But for Set or Dict, it is constant time complexity.</li> <li>If you pop the last element of the list, it is constant time operation. But remove the first element, then it is O(n) operation.</li> <li>If you need to have an order collection of elements, you want to pop at the end or beginning or middle of it. You should use the following two data structure: from collections import deque, queue</li> </ul> <h3 id="list-comprehension-syntax">list comprehension syntax</h3> <p>List comprehension is an elegant way to create lists based on existing lists.</p> <p>Syntax:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span> <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="bp">True</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.</li> <li>The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</code> get: <code class="language-plaintext highlighter-rouge">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</code></li> <li>Key point: the first for loop is outer loop. But you can use bracket to wrap expression and for loop together, and make second for loop outside:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]]</span>
<span class="c1"># Flat 2D list to [1, 2, 3, 4, 5, 6, 7, 8]:
</span><span class="nf">print</span><span class="p">([</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">i</span><span class="p">])</span>
<span class="c1"># Transpose to [1, 3, 5, 7], [2, 4, 6, 8]]:
</span><span class="nf">print</span><span class="p">([[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)])</span>
</code></pre></div></div> <h4 id="the-condition-is-like-a-filter-and-it-is-optional">The condition is like a filter, and it is optional:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># ['apple', 'banana', 'mango']
</span></code></pre></div></div> <h4 id="the-expression-can-also-contain-conditions-not-like-a-filter-but-as-a-way-to-manipulate-the-outcome">The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># fruits = ["apple", "orange", "cherry", "kiwi", "mango"]
</span></code></pre></div></div> <h4 id="support-nested-list-comprehension">Support nested list comprehension</h4> <h3 id="list-methods">List methods</h3> <h4 id="access-list-items">Access List items</h4> <ul> <li><code class="language-plaintext highlighter-rouge">s[i]</code> ith item of s, origin 0</li> <li><code class="language-plaintext highlighter-rouge">s[i:j]</code> slice of s from i to j</li> <li><code class="language-plaintext highlighter-rouge">s[i:j:k]</code> slice of s from i to j with step k</li> </ul> <h4 id="modifying-list">Modifying List</h4> <ul> <li><code class="language-plaintext highlighter-rouge">append()</code> method</li> <li><code class="language-plaintext highlighter-rouge">insert()</code> method</li> <li>support operator: +, *, +=, *=</li> </ul> <h4 id="remove-list-items">Remove List Items</h4> <ul> <li>remove() method removes the specified item</li> <li>pop() method removes the specified index.</li> <li>The del keyword also removes the specified index</li> <li>clear() method empties the list.</li> </ul> <h4 id="reverse">reverse()</h4> <h4 id="sort">sort()</h4> <ul> <li>It will sort the list alphanumerically, ascending, by default.</li> <li>Sort the list descending: <code class="language-plaintext highlighter-rouge">lst.sort(reverse = True)</code></li> </ul> <h4 id="copy-a-list">Copy a list</h4> <p>Thre are 3 ways to copy a list:</p> <ol> <li>newlst = lst.copy()</li> <li>newlst = list(lst)</li> <li>newlst = [i for i in lst]</li> </ol> <h4 id="join-two-list">Join two list</h4> <ol> <li>list3 = list1 + list2</li> <li>Another way to join two lists is by appending all the items from list2 into list1, one by one.</li> <li>Use the extend() method to add list2 at the end of list1 <code class="language-plaintext highlighter-rouge">list1.extend(list2)</code></li> </ol> <h4 id="multi-dimensional-arrays-operation">Multi-Dimensional Arrays Operation</h4> <p>(When deal with Multi-Dimensional Arrays, it is good to use NumPy. ) What do X[:,1] means?</p> <ul> <li>X is a numpy array, and it is Multi-Dimensional Array.</li> <li>Say Here X have n rows and n columns</li> <li>so by doing x=x[:,1] we get all the rows in x present at index 1.</li> </ul> <p>For example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span> <span class="p">[</span><span class="mf">0.69859393</span><span class="p">,</span> <span class="mf">0.1042432</span> <span class="p">],</span>
         <span class="p">[</span><span class="mf">0.55138493</span><span class="p">,</span> <span class="mf">0.18639614</span><span class="p">],</span>
         <span class="p">[</span><span class="mf">0.27338772</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">]])</span>

<span class="n">x</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span><span class="mf">0.1042432</span> <span class="p">,</span> <span class="mf">0.18639614</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">])</span>
</code></pre></div></div> <h3 id="understanding-lists-in-python">Understanding Lists in Python</h3> <h4 id="what-is-array-in-python">What is Array in Python</h4> <ul> <li>An array is a set of elements which <ul> <li>have the same size,</li> <li>located in memory one after another, without gaps.</li> </ul> </li> <li>Since the “get value by address” memory operation takes constant time, selecting an array item by index also takes O(1).</li> </ul> <h4 id="array-vs-list">Array vs. List</h4> <figure> <picture> <img src="/assets/img/python-list.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="list-is-kind-of-array">List is kind of array</h4> <p>The list is based on the array.</p> <h5 id="list--array-of-pointers">List = Array of Pointers</h5> <ul> <li>The list instantly retrieves an item by index (O(1)), because it has an array inside.</li> <li>And the array is so fast because all the elements are the same size.</li> </ul> <p>For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span><span class="o">])</span>
64
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span>,<span class="s1">'2'</span><span class="o">])</span>
72
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'a long long long string'</span><span class="o">])</span>
64
</code></pre></div></div> <h5 id="list--dynamic-array">List = Dynamic Array</h5> <ul> <li>The list juggles arrays all the time so that we don’t have to do it . For example, if array is full, it will allocate new memory for all elements.</li> <li>You can even check all detail in Python c code.</li> </ul> <h5 id="these-operations-are-o1">these operations are O(1):</h5> <ul> <li>select an item by index lst[idx]</li> <li>count items len(lst)</li> <li>add an item to the end of the list .append(item)</li> <li>remove an item from the end of the list .pop()</li> </ul> <h5 id="operations-are-slow">operations are “slow”:</h5> <ul> <li>Insert or delete an item by index. <code class="language-plaintext highlighter-rouge">.insert(idx, item)</code> and <code class="language-plaintext highlighter-rouge">.pop(idx)</code> take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they shift all the elements after the target one.</li> <li>Search or delete an item by value. item in lst, <code class="language-plaintext highlighter-rouge">.index(item)</code> and <code class="language-plaintext highlighter-rouge">.remove(item)</code> take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they iterate over all the elements.</li> <li>Select a slice of k elements. <code class="language-plaintext highlighter-rouge">lst[from:to]</code> takes <code class="language-plaintext highlighter-rouge">O(k)</code>.</li> </ul> <h3 id="list-questions">List questions</h3> <h4 id="why-memory-of-list-is-like-that-it-depond-on-how-many-members-instead-of-how-big-of-the-members">why Memory of list is like that: it depond on how many members instead of how big of the members?</h4> <p>Because List = Array of Pointers.</p> <h4 id="why-some-operations-are-quick-but-some-are-slow">why some operations are quick, but some are slow?</h4> <p>Understand from List = Array of Pointers.</p> <h4 id="do-python-allocate-new-memory-for-the-following-variable-small_list">Do Python allocate new memory for the following variable small_list?</h4> <p><code class="language-plaintext highlighter-rouge">big_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code> <code class="language-plaintext highlighter-rouge">small_list = big_list[:5]</code> Ask yourself if you modify small_list, do big_list modify as well? if not, then new memory.</p> <h2 id="tuple">Tuple</h2> <h3 id="what-is-tuple">What is Tuple</h3> <ul> <li>A tuple is a sequence which is ordered and Immutable, Allows duplicate.</li> <li>Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created. However, if a member of the tuple is list, list content can be changed.</li> <li>But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.</li> <li>Tuples are written with round brackets: tuple1 = (“abc”, 34, True, 40, “male”)</li> </ul> <h3 id="tuple-features">Tuple Features</h3> <ul> <li>Tuple is immutable, but it will instantiated without checking memory. It don’t like many immutable, e.g. int, float, check memory for same value instance.</li> <li>Tuple have quirk syntax when it contain 0 or 1 items. t = ()<br/> t = (1,)</li> </ul> <h3 id="access-tuple">Access Tuple.</h3> <ul> <li>using [].</li> <li>using keyword ‘in’.</li> </ul> <h3 id="update-tuple">Update Tuple</h3> <p>Convert the tuple into a list, update, and convert it back into a tuple.</p> <h3 id="unpacking-a-tuple">Unpacking a Tuple</h3> <p>When create a tuple, normally assign values to it. This is called “packing” a tuple. Tuple allowed to extract the values back into variables. This is called “unpacking”. (Call destructuring assignment in JavaScript)</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <p>Add an * to the variable name and the values will be assigned to the variable as a list:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">strawberry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">raspberry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="o">*</span><span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <h3 id="you-join-tuples-by-using--multiply-tuples-by-using-">You join Tuples by using ‘+’, multiply Tuples by using ‘*’</h3> <h2 id="set">Set</h2> <ul> <li>A set object is an unordered collection of distinct hashable objects.</li> <li>Like other collections, sets support <code class="language-plaintext highlighter-rouge">x in set</code>, <code class="language-plaintext highlighter-rouge">len(set)</code>, and <code class="language-plaintext highlighter-rouge">for x in set</code>.</li> <li>Python have set and frozen set.</li> <li>Set support comprehension syntax as well, similar to list comprehension.</li> </ul> <h3 id="when-use-set">When use Set</h3> <ul> <li>membership testing,</li> <li>removing duplicates from a sequence,</li> <li>Provide computing mathematical operations such as intersection, union, difference, and symmetric difference.</li> </ul> <h3 id="set-and-frozenset">set and frozenset</h3> <h4 id="set-1">set</h4> <p>These represent a mutable — the contents can be changed using methods like <code class="language-plaintext highlighter-rouge">add()</code> and <code class="language-plaintext highlighter-rouge">remove()</code>.</p> <blockquote> <p>Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set.</p> </blockquote> <ul> <li>We cannot change the items after the set has been created. but you can remove items and add new items.</li> <li>Sets are written with curly brackets: <code class="language-plaintext highlighter-rouge">set1 = {"abc", 34, True, 40, "male"}</code></li> </ul> <h4 id="frozenset">frozenset</h4> <p>These represent an immutable set. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</p> <h3 id="some-operations-are-supported-by-set-and-frozenset">Some operations are supported by set and frozenset.</h3> <p>Like:</p> <ul> <li><code class="language-plaintext highlighter-rouge">len(s)</code> : Return the number of elements in set s (cardinality of s).</li> <li><code class="language-plaintext highlighter-rouge">x in s</code> : Test x for membership in s.</li> <li><code class="language-plaintext highlighter-rouge">isdisjoint(other)</code></li> <li><code class="language-plaintext highlighter-rouge">issubset(other)</code>: <code class="language-plaintext highlighter-rouge">set &lt;= other</code></li> <li><code class="language-plaintext highlighter-rouge">union(*others)</code></li> <li><code class="language-plaintext highlighter-rouge">copy()</code> etc.</li> </ul> <h3 id="operations-available-for-set-but-not-frozenset">operations available for set, but not frozenset</h3> <p>Like:</p> <ul> <li><code class="language-plaintext highlighter-rouge">update(*others)</code></li> <li><code class="language-plaintext highlighter-rouge">add(elem)</code> etc.</li> </ul> <h3 id="can-set-contains-mutable-type-like-list">Can Set contains mutable type, like list?</h3> <p>NO, elements in set, key in dictionary, have to be <strong>hashable</strong>. That means it can’t be list or other mutable type. Tuple can be elements of set if it haven’t mutable member.</p> <h2 id="dictionary">Dictionary</h2> <ul> <li>Dictionaries are used to store data values in <code class="language-plaintext highlighter-rouge">key:value</code> pairs.</li> <li>A dictionary is a collection which is ordered, mutable and do not allow duplicates.</li> </ul> <h3 id="features">Features</h3> <ul> <li>keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</li> <li>As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.</li> <li>Use curl bracket.</li> <li>The dict() constructor builds dictionaries directly from sequences of key-value pairs: <code class="language-plaintext highlighter-rouge">dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])</code> get <code class="language-plaintext highlighter-rouge">{'sape': 4139, 'guido': 4127, 'jack': 4098}</code></li> <li>dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: <code class="language-plaintext highlighter-rouge">{x: x**2 for x in (2, 4, 6)}</code> get <code class="language-plaintext highlighter-rouge">{2: 4, 4: 16, 6: 36}</code></li> </ul> <h3 id="accessing-items">Accessing Items</h3> <ul> <li>Dictionary is in order. But have no idea to access it by order. Access directly: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div> </div> </li> <li>using square bracket [] is equivalent to <code class="language-plaintext highlighter-rouge">__getitem__()</code></li> <li>if visit key that doesn’t exist, It will raise KeyError. But you can override the <code class="language-plaintext highlighter-rouge">__missing__(self, key)</code> method defines the behavior of a dictionary subclass if you access a non-existent key. More specifically, Python’s <code class="language-plaintext highlighter-rouge">__getitem__()</code> dictionary method internally calls the <code class="language-plaintext highlighter-rouge">__missing__()</code> method if the key doesn’t exist. The return value of <code class="language-plaintext highlighter-rouge">__missing__()</code> is the value to be returned when trying to access a non-existent key.</li> <li>keys(), values(), items()</li> <li>return view objects for corresponded things.</li> <li>Dictionary view object provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes.</li> <li>Keys views are set-like!</li> <li>If all values are hashable, then the items view is also set-like.</li> <li>Values views are not treated as set-like.</li> <li> <p>For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, &lt;, or ^).</p> </li> <li>setdefault(key[, default]) Returns the value of the specified key. If the key does not exist: insert the key, with the specified value. <ul> <li>keyname is required</li> <li>value is Optional. If the key exist, value has no effect. If the key does not exist, this value becomes the key’s value. Default value None. <code class="language-plaintext highlighter-rouge">print(thisdict.setdefault("model","Focus"))</code></li> </ul> </li> <li>get(key[, default]) Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None. <ul> <li>get() is different function from <code class="language-plaintext highlighter-rouge">__getitem__()</code>. They have no connection.</li> </ul> </li> </ul> <h3 id="remove-items">Remove items</h3> <ul> <li>pop() The pop() method removes the item with the specified key name.</li> <li>popitem() The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):</li> <li>del keyword Can delete items or the dictionary</li> <li>clear() Clear the dictionary</li> </ul> <h3 id="add-items-change-items">Add items, Change items</h3> <ul> <li>add item directly, change directly (list can’t add item directly, but dict can) <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">color</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">red</span><span class="sh">"</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Focus</span><span class="sh">"</span>
</code></pre></div> </div> </li> <li>using square bracket [] is equivalent to <code class="language-plaintext highlighter-rouge">__setitem__()</code></li> </ul> <h3 id="update">update()</h3> <p>The <code class="language-plaintext highlighter-rouge">update()</code> method inserts the specified items to the dictionary.</p> <ul> <li><code class="language-plaintext highlighter-rouge">update()</code> can overwrite the exist key and it’s value.</li> <li>can concatenate dictionarys.</li> <li>can concatenate key value pair iterable object.</li> </ul> <p><code class="language-plaintext highlighter-rouge">dictionary.update(iterable)</code> <code class="language-plaintext highlighter-rouge">iterable</code> can be A dictionary or an iterable object with key value pairs, that will be inserted to the dictionary.</p> <h3 id="dict-not-support-operator-">dict NOT support operator +</h3> <p>But <code class="language-plaintext highlighter-rouge">Counter</code> can.</p> <h3 id="create-dictionary">Create Dictionary</h3> <p>The <code class="language-plaintext highlighter-rouge">fromkeys()</code> method returns a dictionary with the specified keys and the specified value.</p> <ul> <li><code class="language-plaintext highlighter-rouge">dict.fromkeys(keys, value)</code> <ul> <li>keys: Required. An iterable specifying the keys of the new dictionary</li> <li>value: Optional. The value for all keys. Default value is None</li> </ul> </li> <li> <p>an example of how to use dict as an ordered set to filter out duplicate items while preserving order, thereby emulating an ordered set: <code class="language-plaintext highlighter-rouge">keywords = ['foo', 'bar', 'bar', 'foo', 'baz', 'foo']</code> <code class="language-plaintext highlighter-rouge">list(dict.fromkeys(keywords))</code> <code class="language-plaintext highlighter-rouge">['foo', 'bar', 'baz']</code></p> </li> <li><code class="language-plaintext highlighter-rouge">zip()</code> <code class="language-plaintext highlighter-rouge">zip()</code> returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument iterables. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">#FF0000</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">#008000</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">#0000FF</span><span class="sh">'</span><span class="p">]</span>
<span class="n">color_dictionary</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">values</span><span class="p">))</span>
</code></pre></div> </div> </li> </ul> <h3 id="copy-dictionary">Copy Dictionary</h3> <ul> <li> <p><code class="language-plaintext highlighter-rouge">copy()</code> Dictionary method copy() can create a new dict according to the current dict.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">dict()</code> Another way to make a copy is to use the built-in function dict().</p> </li> <li> <p>Loop over dict</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">thisdict</span><span class="p">:</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div> </div> <p>x is the key! no value.</p> </li> </ul> <h3 id="question">Question</h3> <ul> <li>How to get the first item of a dict?</li> </ul> <h2 id="time-complexity-of-collections">Time Complexity of Collections</h2> <h3 id="list-1">list</h3> <ul> <li>Internally, a list is represented as an array;</li> <li>The largest costs come from growing beyond the current allocation size (because everything must move), or from inserting or deleting somewhere near the beginning (because everything after that must move).</li> <li>If you need to add/remove at both ends, consider using a collections.deque instead.</li> </ul> <figure> <picture> <img src="/assets/img/python-list-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="30%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="dict">dict</h3> <ul> <li>There is a fast-path for dicts that (in practice) only deal with str keys;</li> <li>Python have a typical space-time tradeoff in dictionaries and lists. It means we can decrease the time necessary for our algorithm but we need to use more space in memory for dictionaries.</li> <li>time complexity x in s operation for dict is O(1); But for list if O(n).</li> </ul> <figure> <picture> <img src="/assets/img/python-dict-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="40%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="set-2">set</h3> <p>See dict – the implementation is intentionally very similar.</p> <figure> <picture> <img src="/assets/img/python-set-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="70%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="collectionsdeque">collections.deque</h3> <p>A deque (double-ended queue) is represented internally as a doubly linked list. (Well, a list of arrays rather than objects, for greater efficiency.) Both ends are accessible, but even looking at the middle is slow, and adding to or removing from the middle is slower still.</p> <figure> <picture> <img src="/assets/img/python-deque-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="40%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Concepts of Containers, Collections, Sequences, Mappings]]></summary></entry><entry><title type="html">Python Data Model Overview</title><link href="https://benwzj.github.io/blog/2024/py-data-model/" rel="alternate" type="text/html" title="Python Data Model Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-data-model</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-data-model/"><![CDATA[<h2 id="object">Object</h2> <p>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (Everything in python is object) Every object has an identity, a type and a value.</p> <h3 id="every-object-has-an-identity-a-type-and-a-value">Every object has an identity, a type and a value.</h3> <ul> <li>An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. <ul> <li>The <code class="language-plaintext highlighter-rouge">is</code> operator compares the identity of two objects;</li> <li>the <code class="language-plaintext highlighter-rouge">id()</code> function returns an integer representing its identity.</li> </ul> </li> <li>An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. <ul> <li>The <code class="language-plaintext highlighter-rouge">type()</code> function returns an object’s type (which is an object itself).</li> <li>Like its identity, an object’s type is also unchangeable.</li> </ul> </li> <li>An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.</li> </ul> <h3 id="container">Container</h3> <p>Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</p> <h2 id="data-type">Data Type</h2> <h3 id="none-notimplemented-ellipsis">None, NotImplemented, Ellipsis</h3> <p>The following data type have a single value. There is a single object with this value, And These objects are accessed through a built-in name None, NotImplemented, Ellipsis (or …): None, NotImplemented, Ellipsis</p> <h3 id="numbers-module">Numbers module</h3> <p>The numbers module defines a hierarchy of numeric abstract base classes which progressively define more operations. None of the types defined in this module are intended to be instantiated.</p> <h4 id="class-numbersnumber">class numbers.Number</h4> <p>The root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number).</p> <h4 id="class-numbersintegral">class numbers.Integral</h4> <p>There are two types of integers:</p> <ul> <li>Integers (int) - These represent numbers in an unlimited range, subject to available (virtual) memory only. It is a whole number, positive or negative, without decimals, of unlimited length.</li> <li>Booleans (bool) - The two objects representing the values False and True are the only Boolean objects. (False and True are keyword in Python) <h4 id="numbersreal-float">numbers.Real (float)</h4> <p>Float represent machine-level double precision floating point numbers. You are at the mercy of the underlying machine architecture (and C or Java implementation) for the accepted range and handling of overflow.</p> <h4 id="numberscomplex-complex">numbers.Complex (complex)</h4> </li> </ul> <h3 id="sequences-types">Sequences types</h3> <ul> <li>Sequences represent finite ordered sets indexed by non-negative numbers.</li> <li>Sequences are distinguished according to their mutability: Immutable sequences, like Strings, Bytes, Tuples, Mutable sequences, like Lists, Byte Arrays.</li> </ul> <h4 id="common-sequences-operations">Common Sequences operations</h4> <ul> <li>The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items of a sequence.</li> <li>Item i of sequence a is selected by <code class="language-plaintext highlighter-rouge">a[i]</code></li> <li>Sequences also support slicing: <code class="language-plaintext highlighter-rouge">a[i:j:step]</code></li> <li>When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <code class="language-plaintext highlighter-rouge">enumerate()</code> function.</li> </ul> <h3 id="set-types">Set types</h3> <p>These represent unordered, finite sets of unique, immutable(we can’t change the content of items, but you can add or remove items) objects. There are currently two intrinsic set types:</p> <ul> <li>Sets These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add().</li> <li>Frozen sets These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</li> </ul> <h3 id="mappings">Mappings</h3> <p>These represent finite sets of objects indexed by arbitrary index sets. The subscript notation <code class="language-plaintext highlighter-rouge">a[k]</code> selects the item indexed by k from the mapping a; this can be used in expressions and as the target of assignments or del statements. The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items in a mapping.</p> <h4 id="dictionary">Dictionary</h4> <ul> <li>Dictionaries are used to store data values in key:value pairs.</li> <li>A dictionary is a collection which is ordered, changeable and not allow duplicates.</li> <li>Dictionaries are written with curly brackets, and have keys and values</li> <li>The only types of values not acceptable as keys are values containing lists or dictionaries or other mutable types that are compared by value rather than by object identity, the reason being that the efficient implementation of dictionaries requires a key’s hash value to remain constant.</li> </ul> <h3 id="callable-types">Callable types</h3> <p>These are the data types to which the function call operation can be applied:</p> <h4 id="user-defined-functions">User-defined functions</h4> <p>A user-defined function object is created by a function definition.</p> <ul> <li>It’s Special attributes: like <code class="language-plaintext highlighter-rouge">__name__</code>, <code class="language-plaintext highlighter-rouge">__module__</code>, <code class="language-plaintext highlighter-rouge">__defaults__</code>, <code class="language-plaintext highlighter-rouge">__code__</code>, <code class="language-plaintext highlighter-rouge">__closure__</code>, etc. <code class="language-plaintext highlighter-rouge">__code__</code> refer to The code object representing the compiled function body.</li> <li>Function objects also support getting and setting arbitrary attributes, which can be used, for example, to attach metadata to functions.</li> <li>Lambda: A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.</li> </ul> <h4 id="instance-methods">Instance methods</h4> <p>An instance method object combines a class, a class instance and any callable object (normally a user-defined function).</p> <h4 id="generator-functions">Generator functions</h4> <p>A function or method which uses the yield statement (see section The yield statement) is called a generator function. Such a function, when called, always returns an iterator object which can be used to execute the body of the function: calling the iterator’s iterator<code class="language-plaintext highlighter-rouge">.__next__()</code> method will cause the function to execute until it provides a value using the yield statement. When the function executes a return statement or falls off the end, a StopIteration exception is raised and the iterator will have reached the end of the set of values to be returned.</p> <h4 id="coroutine-functions">Coroutine functions</h4> <p>A function or method which is defined using async def is called a coroutine function. Such a function, when called, returns a coroutine object. It may contain await expressions, as well as async with and async for statements.</p> <h4 id="asynchronous-generator-functions">Asynchronous generator functions</h4> <p>A function or method which is defined using async def and which uses the yield statement is called a asynchronous generator function. Such a function, when called, returns an asynchronous iterator object which can be used in an async for statement to execute the body of the function.</p> <h4 id="built-in-functions">Built-in functions</h4> <p>A built-in function object is a wrapper around a C function. Examples of built-in functions are len() and math.sin() (math is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes: <code class="language-plaintext highlighter-rouge">__doc__</code> is the function’s documentation string, or None if unavailable; <code class="language-plaintext highlighter-rouge">__name__</code> is the function’s name; <code class="language-plaintext highlighter-rouge">__self__</code> is set to None (but see the next item); <code class="language-plaintext highlighter-rouge">__module__</code> is the name of the module the function was defined in or None if unavailable.</p> <h4 id="built-in-methods">Built-in methods</h4> <p>This is really a different disguise of a built-in function, this time containing an object passed to the C function as an implicit extra argument. An example of a built-in method is alist.append(), assuming alist is a list object. In this case, the special read-only attribute <code class="language-plaintext highlighter-rouge">__self__</code> is set to the object denoted by alist.</p> <h4 id="classes">Classes</h4> <p>Classes are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override <code class="language-plaintext highlighter-rouge">__new__()</code>. The arguments of the call are passed to <code class="language-plaintext highlighter-rouge">__new__()</code> and, in the typical case, to <code class="language-plaintext highlighter-rouge">__init__()</code> to initialize the new instance.</p> <h4 id="class-instances">Class Instances</h4> <p>Instances of arbitrary classes can be made callable by defining a <code class="language-plaintext highlighter-rouge">__call__()</code> method in their class.</p> <h3 id="modules">Modules</h3> <p>Modules are a basic organizational unit of Python code, and are created by the import system as invoked either by the import statement, or by calling functions such as importlib.<code class="language-plaintext highlighter-rouge">import_module()</code> and built-in <code class="language-plaintext highlighter-rouge">__import__()</code>.</p> <ul> <li>A module object has a namespace implemented by a dictionary object (this is the dictionary referenced by the <code class="language-plaintext highlighter-rouge">__globals__</code> attribute of functions defined in the module). Attribute references are translated to lookups in this dictionary, e.g., m.x is equivalent to <code class="language-plaintext highlighter-rouge">m.__dict__["x"]</code>.</li> <li>A module object does not contain the code object used to initialize the module.</li> <li>To create a module just save the code you want in a file with the file extension .py.</li> </ul> <h4 id="datetime-math-json-regex-os-etc-are-built-in-modules">Datetime, Math, JSON, RegEx, os, etc. are built-in modules.</h4> <p>For example, you want to handle files in your hard disk. You can use os modules which provide functions to help you out.</p> <h4 id="pip">PIP</h4> <p>PIP is a package manager for Python packages. Just like npm for JavaScript. You can use pip to instal third party packages, like django, etc.</p> <ul> <li>A package contains all the files you need for a module.</li> <li>Modules are Python code libraries you can include in your project.</li> </ul> <p>For example: openpyxl help you to handle excel file: <code class="language-plaintext highlighter-rouge">$pip3 install openpyxl</code></p> <p>Use the list command to list all the packages installed on your system: <code class="language-plaintext highlighter-rouge">$pip3 list</code></p> <h3 id="custom-classes">Custom classes</h3> <p>Custom class types are typically created by class definitions.</p> <p>Basic class Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

  <span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello my name is </span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, age is </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="p">))</span>

<span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>
<span class="n">p1</span><span class="p">.</span><span class="nf">myfunc</span><span class="p">()</span>
</code></pre></div></div> <h4 id="init-function"><strong>init</strong>() Function</h4> <p>All classes have a function called <code class="language-plaintext highlighter-rouge">__init__()</code>, which is always executed when the class is being initiated.</p> <ul> <li>The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.</li> <li>Can change property value, can delete property.</li> </ul> <h4 id="inheritance">Inheritance</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span> <span class="o">=</span> <span class="n">year</span>

  <span class="k">def</span> <span class="nf">welcome</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Welcome</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span> <span class="sh">"</span><span class="s">to the class of</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">super()</code> function will make the child class inherit all the methods and properties from its parent.</p> <h3 id="class-instances-1">Class instances</h3> <p>A class instance is created by calling a class object.</p> <h3 id="io-objects">I/O objects</h3> <p>(also known as file objects)</p> <ul> <li>A file object represents an open file. Various shortcuts are available to create file objects: the open() built-in function, and also os.popen(), os.fdopen(), and the makefile() method of socket objects</li> <li>The objects sys.stdin, sys.stdout and sys.stderr are initialized to file objects corresponding to the interpreter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface defined by the io.TextIOBase abstract class.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Object]]></summary></entry></feed>