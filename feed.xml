<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-03T10:49:03+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Spread and Rest Syntax</title><link href="https://benwzj.github.io/blog/2024/spread-js/" rel="alternate" type="text/html" title="Spread and Rest Syntax"/><published>2024-02-24T00:00:00+00:00</published><updated>2024-02-24T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/spread-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/spread-js/"><![CDATA[<h2 id="spread-syntax">Spread Syntax</h2> <p>Spread syntax can be used when all elements from an object or array need to be included in a new array or object, or should be applied one-by-one in a function call’s arguments list. There are 3 distinct places that accept the spread syntax:</p> <ol> <li>Function arguments list (<code class="language-plaintext highlighter-rouge">myFunction(a, ...iterableObj, b)</code>)</li> <li>Array literals (<code class="language-plaintext highlighter-rouge">[1, ...iterableObj, '4', 'five', 6]</code>)</li> <li>Object literals (<code class="language-plaintext highlighter-rouge">{ ...obj, key: 'value' }</code>)</li> </ol> <h3 id="overview">Overview</h3> <ul> <li> <p>Spread syntax allows an <strong>iterable</strong>, such as an array expression or string to be expanded in places where arguments(for function calls) or elements (for array literals) are expected.</p> </li> <li> <p>Spread syntax allows an <strong>object</strong> expression to be expanded in places where key-value pairs (for object literals) are expected. For object, Objects themselves are not iterable, but they become iterable when used in an Array, or with iterating functions such as <code class="language-plaintext highlighter-rouge">map()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code>, and <code class="language-plaintext highlighter-rouge">assign()</code>.</p> </li> </ul> <h3 id="spread-object">Spread Object</h3> <h4 id="merging-object">Merging Object</h4> <p>When merging 2 objects together with the spread operator, it is assumed another iterating function is used when the merging occurs. So following work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span><span class="na">abc</span><span class="p">:</span><span class="mi">123</span><span class="p">,</span> <span class="na">def</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="na">ghi</span><span class="p">:</span> <span class="mi">32321</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="na">abc</span><span class="p">:</span><span class="dl">'</span><span class="s1">new one</span><span class="dl">'</span><span class="p">,</span> <span class="na">def</span><span class="p">:</span> <span class="dl">'</span><span class="s1">re new one</span><span class="dl">'</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">obj1</span><span class="p">,</span> <span class="p">...</span><span class="nx">obj2</span><span class="p">}</span> <span class="c1">//=&gt; Object { abc: "new one", def: "re new one", ghi: 32321 }</span>
</code></pre></div></div> <p>But below code do not work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">key1</span><span class="dl">'</span><span class="p">:</span> <span class="mi">323243</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">obj</span><span class="p">];</span> <span class="c1">// TypeError: obj is not iterable </span>
</code></pre></div></div> <h4 id="obj-vs-objectassign"><code class="language-plaintext highlighter-rouge">...obj</code> vs <code class="language-plaintext highlighter-rouge">Object.assign()</code></h4> <ul> <li><code class="language-plaintext highlighter-rouge">Object.assign()</code> can be used to mutate an object, whereas spread syntax can’t.</li> <li><code class="language-plaintext highlighter-rouge">Object.assign()</code> triggers <strong>setters</strong> on the target object, whereas spread syntax does not.</li> </ul> <h4 id="conditionally-adding-properties-to-an-object">Conditionally adding properties to an object</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isSummer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apple</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">banana</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="p">...(</span><span class="nx">isSummer</span> <span class="p">?</span> <span class="p">{</span> <span class="na">watermelon</span><span class="p">:</span> <span class="mi">30</span> <span class="p">}</span> <span class="p">:</span> <span class="p">{}),</span>
<span class="p">};</span>
</code></pre></div></div> <h4 id="spread-array-instead-of-object">spread Array instead of object.</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">,</span> <span class="na">x</span><span class="p">:</span> <span class="mi">42</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">baz</span><span class="dl">"</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">13</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">objects</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="p">...</span><span class="nx">objects</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">mergedObj</span> <span class="o">=</span> <span class="nf">merge</span><span class="p">(</span><span class="nx">obj1</span><span class="p">,</span> <span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }</span>
</code></pre></div></div> <p>Check Rest parameter syntax!</p> <h3 id="spread-array">Spread Array</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nf">unshift </span><span class="p">(</span> <span class="p">...</span><span class="nx">arr</span> <span class="p">);</span><span class="c1">// equal to : arr1.unshift ( 1, 2, 3 ); not: arr1.unshift ( 1 ); arr1.unshift ( 2); arr1.unshift ( 3 );</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log </span><span class="p">(</span> <span class="nx">arr1</span> <span class="p">);</span> <span class="c1">// Array [1, 2, 3, 4, 5, 6]  </span>

<span class="c1">//Array.prototype.unshift.apply( arr1, arr); // Array [1, 2, 3, 4, 5, 6]</span>

<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nf">push </span><span class="p">(</span> <span class="p">...</span><span class="nx">arr</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log </span><span class="p">(</span> <span class="nx">arr2</span> <span class="p">);</span> <span class="c1">// Array [4, 5, 6,1,2,3], </span>
</code></pre></div></div> <p>Below code won’t work:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">...</span><span class="nx">b</span><span class="p">;</span> <span class="c1">// Error: Unexpected token '...'</span>
</code></pre></div></div> <p>There are <strong>ONLY</strong> 3 distinct places that accept the spread syntax.</p> <h4 id="conditionally-adding-values-to-an-array-or-an-object">Conditionally adding values to an array or an object</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isSummer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="p">...(</span><span class="nx">isSummer</span> <span class="p">?</span> <span class="p">[</span><span class="dl">"</span><span class="s2">watermelon</span><span class="dl">"</span><span class="p">]</span> <span class="p">:</span> <span class="p">[])];</span>
<span class="c1">// ['apple', 'banana']</span>
</code></pre></div></div> <p>Much better than:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="nx">isSummer</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">watermelon</span><span class="dl">"</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">];</span>
<span class="c1">// ['apple', 'banana', undefined]</span>
</code></pre></div></div> <h2 id="rest-syntax">Rest Syntax</h2> <p>Rest syntax looks exactly like spread syntax, but is used for destructuring arrays and objects. rest syntax is the <strong>opposite</strong> of spread syntax.</p> <h3 id="rest-parameter-syntax">Rest parameter syntax</h3> <p>The rest parameter syntax allows a function to accept an indefinite number of arguments as an <strong>array</strong>, providing a way to represent variadic functions in JavaScript.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">myFun</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">manyMoreArgs</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">manyMoreArgs</span><span class="dl">"</span><span class="p">,</span> <span class="nx">manyMoreArgs</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">myFun</span><span class="p">(</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">four</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">five</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">six</span><span class="dl">"</span><span class="p">);</span><span class="c1">// manyMoreArgs, ["three", "four", "five", "six"]</span>
</code></pre></div></div> <h4 id="rest-parameters-vs-the-arguments-object">rest parameters vs the arguments object</h4> <p>One word: The arguments object is array-like object, it is not a real array, while rest parameters are Array instances.</p> <p>The Differences detail:</p> <ul> <li>The arguments object is array-like object, it is not a real array, while rest parameters are Array instances, meaning methods like <code class="language-plaintext highlighter-rouge">sort()</code>, <code class="language-plaintext highlighter-rouge">map()</code> or<code class="language-plaintext highlighter-rouge"> pop()</code> can be applied on it directly.</li> <li>The arguments object has the additional (deprecated) callee property.</li> <li>In a non-strict function with simple parameters, the arguments object syncs its indices with the values of parameters. The rest parameter array never updates its value when the named parameters are re-assigned.</li> <li>The rest parameter bundles all the extra parameters into a single array, but does not contain any named argument defined before the <code class="language-plaintext highlighter-rouge">...restParam</code>. The arguments object contains all of the parameters — including the parameters in the <code class="language-plaintext highlighter-rouge">...restParam</code> array — bundled into one array-like object.</li> </ul> <h3 id="destructuring-assignment-syntax">destructuring assignment syntax</h3> <p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from <strong>arrays</strong>, or properties from <strong>objects</strong>, into distinct variables.</p> <blockquote> <p>Rest parameters is one of the implement of Destructuring. And Destructuring assignment syntax can used in many situation.</p> </blockquote> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">rest</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
<span class="c1">// Expected output: 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
<span class="c1">// Expected output: 20</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">);</span>
<span class="c1">// Expected output: Array [30, 40, 50]</span>
</code></pre></div></div> <p>Similarly, you can destructure objects on the left-hand side of the assignment.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
<span class="c1">// is equivalent to:</span>
<span class="c1">// const a = obj.a;</span>
<span class="c1">// const b = obj.b;</span>
</code></pre></div></div> <h4 id="binding-and-assignment">Binding and assignment</h4> <p>For both object and array destructuring, there are two kinds of destructuring patterns: binding pattern and assignment pattern, with slightly different syntaxes.</p> <ul> <li>In <strong>binding</strong> patterns, the pattern starts with a declaration keyword (var, let, or const). Then, each individual property must either be bound to a variable or further destructured. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">a</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// a is constant</span>
<span class="kd">let</span> <span class="p">{</span>
<span class="na">b</span><span class="p">:</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="nx">d</span> <span class="p">},</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// d is re-assignable</span>
</code></pre></div> </div> </li> <li>In <strong>assignment</strong> patterns, the pattern does not start with a keyword. Each destructured property is assigned to a target of assignment — which may either be declared beforehand with var or let, or is a property of another object — in general, anything that can appear on the left-hand side of an assignment expression. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>
<span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="na">b</span><span class="p">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">);</span>
<span class="c1">// The properties `a` and `b` are assigned to properties of `numbers`</span>
<span class="c1">// The parentheses ( ... ) around the assignment statement are required when using object literal destructuring assignment without a declaration.</span>
</code></pre></div> </div> </li> </ul> <h4 id="array-destructuring">Array destructuring</h4> <ul> <li>Swapping variables <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">];</span>
</code></pre></div> </div> </li> <li>Unpacking values from a regular expression match. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">parseProtocol</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">parsedURL</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">:</span><span class="se">\/\/([^/]</span><span class="sr">+</span><span class="se">)\/(</span><span class="sr">.*</span><span class="se">)</span><span class="sr">$/</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">parsedURL</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">parsedURL</span><span class="p">);</span>
<span class="c1">// ["https://developer.mozilla.org/en-US/docs/Web/JavaScript",</span>
<span class="c1">// "https", "developer.mozilla.org", "en-US/docs/Web/JavaScript"]</span>
<span class="kd">const</span> <span class="p">[,</span> <span class="nx">protocol</span><span class="p">,</span> <span class="nx">fullhost</span><span class="p">,</span> <span class="nx">fullpath</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parsedURL</span><span class="p">;</span>
<span class="k">return</span> <span class="nx">protocol</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span>
<span class="nf">parseProtocol</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://developer.mozilla.org/en-US/docs/Web/JavaScript</span><span class="dl">"</span><span class="p">),</span>
<span class="p">);</span>
<span class="c1">// "https"</span>
</code></pre></div> </div> </li> <li>Using array destructuring on any iterable. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">([</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// [1, 2] [3, 4]</span>
</code></pre></div> </div> </li> <li>The rest binding is eagerly evaluated and creates a <strong>new array</strong>! <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
<span class="o">*</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">v</span> <span class="k">of</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="k">yield</span> <span class="nx">v</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">},</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// Logs 0 1 2 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">);</span> <span class="c1">// [2, 3] (an array)</span>
</code></pre></div> </div> </li> </ul> <h4 id="object-destructuring">Object destructuring</h4> <ul> <li>Unpacking properties from objects passed as a function parameter. <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">id</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
<span class="na">displayName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jdoe</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
<span class="c1">// The parameter value { id } indicates that the id property of the object passed to the function should be unpacked into a variable with the same name, which can then be used within the function.</span>
<span class="kd">function</span> <span class="nf">userId</span><span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">id</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">userId</span><span class="p">(</span><span class="nx">user</span><span class="p">));</span> <span class="c1">// 42</span>
</code></pre></div> </div> </li> <li>Nested object and array destructuring <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Scratchpad</span><span class="dl">"</span><span class="p">,</span>
<span class="na">translations</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">locale</span><span class="p">:</span> <span class="dl">"</span><span class="s2">de</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">localizationTags</span><span class="p">:</span> <span class="p">[],</span>
    <span class="na">lastEdit</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2014-04-14T08:43:37</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/de/docs/Tools/Scratchpad</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">JavaScript-Umgebung</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">],</span>
<span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/en-US/docs/Tools/Scratchpad</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span>
<span class="na">title</span><span class="p">:</span> <span class="nx">englishTitle</span><span class="p">,</span> <span class="c1">// rename</span>
<span class="na">translations</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="nx">localeTitle</span><span class="p">,</span> <span class="c1">// rename</span>
  <span class="p">},</span>
<span class="p">],</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">metadata</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">englishTitle</span><span class="p">);</span> <span class="c1">// "Scratchpad"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">localeTitle</span><span class="p">);</span> <span class="c1">// "JavaScript-Umgebung"</span>
</code></pre></div> </div> </li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">mdn doc</a></p>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><summary type="html"><![CDATA[Spread Syntax]]></summary></entry><entry><title type="html">CSS Animations</title><link href="https://benwzj.github.io/blog/2024/css-animation/" rel="alternate" type="text/html" title="CSS Animations"/><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-animation</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-animation/"><![CDATA[<p>CSS allows animation of HTML elements without using JavaScript!</p> <p>You can use CSS to create animation by <strong>CSS Animation</strong> and <strong>CSS Transition</strong>. But CSS Animation can create more more complex, multi-step animation.</p> <h2 id="css-animations">CSS Animations</h2> <p>An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want.</p> <blockquote class="block-warning"> <p>To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times.</p> </blockquote> <h3 id="basic-example">Basic example</h3> <p>Basic example show you how CSS Animations work.</p> <p>The animation will last for 4 seconds, and it will gradually change the background-color of the <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> element from “red” to “yellow”:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* The animation code */</span>
<span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="nt">from</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="nt">to</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
<span class="c">/* The element to apply the animation to */</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">animation-name</span><span class="p">:</span> <span class="n">example</span><span class="p">;</span>
  <span class="nl">animation-duration</span><span class="p">:</span> <span class="m">4s</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>It uses @keyframes rule, and some animation properties.</p> <h2 id="use-css-animations">Use CSS Animations</h2> <h3 id="animation-properties">animation properties</h3> <ul> <li><code class="language-plaintext highlighter-rouge">animation-name</code>: Specifies the name of the @keyframes animation</li> <li><code class="language-plaintext highlighter-rouge">animation-duration</code>: Specifies how long time an animation should take to complete one cycle</li> <li><code class="language-plaintext highlighter-rouge">animation-delay</code>: Specifies a delay for the start of an animation</li> <li><code class="language-plaintext highlighter-rouge">animation-iteration-count</code>: Specifies the number of times an animation should be played</li> <li><code class="language-plaintext highlighter-rouge">animation-direction</code>: Specifies whether an animation should be played forwards, backwards or in alternate cycles</li> <li><code class="language-plaintext highlighter-rouge">animation-timing-function</code>: Specifies the <strong>speed</strong> curve of the animation.</li> <li><code class="language-plaintext highlighter-rouge">animation-fill-mode</code>: Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)</li> <li><code class="language-plaintext highlighter-rouge">animation</code>: A shorthand property for setting all the animation properties. Like: <code class="language-plaintext highlighter-rouge">animation: example 5s linear 2s infinite alternate;</code></li> </ul> <h3 id="the-keyframes-rule">The @keyframes Rule</h3> <p>When you specify CSS styles inside the <code class="language-plaintext highlighter-rouge">@keyframes</code> rule, the animation will gradually change from the current style to the new style at certain times.</p> <p>Some features:</p> <ul> <li><code class="language-plaintext highlighter-rouge">@keyframes</code> rule is quite simple to understand. It is similar to CSS Transition.</li> <li>To get an animation to work, you must bind the animation to an element.</li> <li>JavaScript can access the <code class="language-plaintext highlighter-rouge">@keyframes</code> at-rule with the CSS object model interface <code class="language-plaintext highlighter-rouge">CSSKeyframesRule</code>.</li> <li>Properties that can’t be animated in keyframe rules are ignored, but supported properties will still be animated.</li> </ul> <p>Basic one like this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="nt">from</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="nt">to</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <p>same as:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="err">0</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="err">100</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Also you can do this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="n">example</span> <span class="p">{</span>
  <span class="err">0</span><span class="o">%</span>   <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;}</span>
  <span class="err">25</span><span class="o">%</span>  <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;}</span>
  <span class="err">50</span><span class="o">%</span>  <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;}</span>
  <span class="err">100</span><span class="o">%</span> <span class="p">{</span><span class="nl">background-color</span><span class="p">:</span> <span class="no">green</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="css-animations-vs-transition">CSS Animations vs Transition</h2> <p>Both CSS transitions and animations can be used to write animation. Transitions are used for simple, one-step property changes, while animations are used for more complex, multi-step animations.</p> <p>They each have their own user scenarios:</p> <ul> <li>CSS transitions provide an easy way to make animations occur between the current style and an end CSS state, e.g., a resting button state and a hover state. Even if an element is in the middle of a transition, the new transition starts from the current style immediately instead of jumping to the end CSS state.</li> <li>CSS animations, on the other hand, allow developers to make animations between a set of starting property values and a final set rather than between two states. CSS animations consist of two components: a style describing the CSS animation, and a set of key frames that indicate the start and end states of the animation’s style, as well as possible intermediate points.</li> </ul> <p>A little conclusion:</p> <ul> <li>In terms of performance, there is no difference between implementing an animation with CSS transitions or animations. Both of them are classified under the same CSS-based umbrella in this article.</li> <li>A transition is just one that is performed between two distinct states - i.e. a start state and an end state. Like a drawer menu, the start state could be open and the end state could be closed, or vice versa.</li> <li>If you want to perform something that does not specifically involve a start state and an end state, or you need more fine-grained control over the keyframes in a transition, then you’ve got to use an animation.</li> <li>Animations also have the ability to loop, play in reverse, and be controlled through JavaScript.</li> <li>transition usually Require a trigger to run (like mouse hover).</li> <li>Transition run only one. CSS Animations can run infinitely.</li> </ul> <h2 id="css-vs-js-in-animation">CSS vs JS in Animation</h2> <h3 id="js-animation">JS Animation</h3> <p>The <code class="language-plaintext highlighter-rouge">requestAnimationFrame()</code> API provides an efficient way to make animations in JavaScript. The callback function of the method is called by the browser before the next repaint on each frame. Compared to <code class="language-plaintext highlighter-rouge">setTimeout()</code>/<code class="language-plaintext highlighter-rouge">setInterval()</code>, which need a specific delay parameter, <code class="language-plaintext highlighter-rouge">requestAnimationFrame() </code>is much more efficient. Developers can create an animation by changing an element’s style each time the loop is called (or updating the Canvas draw, or whatever.)</p> <blockquote> <p>Note: Like CSS transitions and animations, requestAnimationFrame() pauses when the current tab is pushed into the background.</p> </blockquote> <h3 id="performance-comparison">Performance comparison</h3> <p>in most cases, the performance of CSS-based animations is almost the same as JavaScripted animations.</p> <blockquote> <p>You can use the Browser FPS tools to test the animation performance.</p> </blockquote> <h3 id="in-summary">In summary</h3> <p>we should always try to create our animations using CSS transitions/animations where possible. If your animations are really complex, you may have to rely on JavaScript-based animations instead.</p> <h2 id="how-browser-render-animation">How Browser render Animation</h2> <p>Modern browsers can animate two CSS properties cheaply: <code class="language-plaintext highlighter-rouge">transform</code> and <code class="language-plaintext highlighter-rouge">opacity</code>. If you animate anything else, the chances are you’re not going to hit a silky smooth 60 frames per second (FPS). Why? Simply say, Because this two properties is composite properties, which browser easier to handle when animate things.</p> <p>Here are some concepts:</p> <ul> <li>frame rate,</li> <li>rendering pipeline,</li> <li>layout,</li> <li>paint,</li> <li>composite,</li> <li>layer.</li> </ul> <h3 id="animation-performance-and-frame-rate">Animation performance and frame rate</h3> <p>It is widely accepted that a frame rate of <strong>60 FPS</strong> is the target when animating anything on the web. This frame rate will ensure that your animations look smooth. On the web a frame is the time that it takes to do all of the work required to update and repaint the screen. If each frame does not complete within 16.7ms (1000ms / 60 ≈ 16.7), then users will perceive the delay.</p> <h3 id="the-rendering-pipeline">The rendering pipeline</h3> <p>To display something on a webpage the browser has to go through the following sequential steps:</p> <ol> <li>Style: Calculate the styles that apply to the elements.</li> <li>Layout: Generate the geometry and position for each element.</li> <li>Paint: Fill out the pixels for each element into layers.</li> <li>Composite: Draw the layers to the screen.</li> </ol> <p>These four steps are known as the browser’s rendering pipeline.</p> <p>When you animate something on a page that has already loaded these steps have to happen again. This process begins from the step that has to be changed in order to allow the animation to take place.</p> <p>As mentioned before, these steps are sequential. For example, if you animate something that changes layout, the paint and composite steps also have to run again. Animating something that changes layout is therefore more expensive than animating something that only changes compositing.</p> <h4 id="animating-layout-properties">Animating layout properties</h4> <p>Layout changes involve calculating the geometry (position and size) of all the elements affected by the change. If you change one element, the geometry of other elements may need to be recalculated. For example, if you change the width of the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element any of its children may be affected. Due to the way elements overflow and affect one another, changes further down the tree can sometimes result in layout calculations all the way back up to the top.</p> <p>The larger the tree of visible elements, the longer it takes to perform layout calculations.</p> <h4 id="animating-paint-properties">Animating paint properties</h4> <p>Paint is the process of determining in what order elements should be painted to the screen. It is often the longest-running of all tasks in the pipeline.</p> <p>The majority of painting in modern browsers is done in software rasterizers. Depending on how the elements in your app are grouped into layers, other elements besides the one that changed may also need to be painted.</p> <h4 id="animating-composite-properties">Animating composite properties</h4> <p>Compositing is the process of separating the page into layers, converting the information about how the page should look into pixels (rasterization), and putting the layers together to create a page (compositing).</p> <p>This is why the <code class="language-plaintext highlighter-rouge">opacity</code> property is included in the list of things which are cheap to animate. As long as this property is in its own layer, changes to it can be handled by the GPU during the compositing step. Chromium-based browsers and WebKit create a new layer for any element which has a CSS transition or animation on <code class="language-plaintext highlighter-rouge">opacity</code>.</p> <h3 id="what-is-a-layer">What is a layer?</h3> <p>By placing the things that will be animated or transitioned onto a new layer, the browser only needs to repaint those items and not everything else. You may be familiar with Photoshop’s concept of a layer which contains a bunch of elements that can be moved together. Browser rendering layers are similar to that idea.</p> <p>While the browser does a good job of making decisions about what elements should be on a new layer, if it misses one there are ways to force layer creation. You can find out about that in How to create high-performance animations. However, creating new layers should be done with care because each layer uses memory. On devices with limited memory creating new layers may cause more of a performance problem than the one you are trying to solve. In addition, each layer’s textures need to be uploaded to the GPU. Therefore you may well hit constraints of bandwidth between the CPU and GPU.</p> <h3 id="css-vs-javascript-performance">CSS vs JavaScript performance</h3> <p>CSS-based animations, and Web Animations (in the browsers that support the API), are typically handled on a thread known as the compositor thread. This is different from the browser’s main thread, where styling, layout, painting, and JavaScript are executed. This means that if the browser is running some expensive tasks on the main thread, these animations can keep going without being interrupted.</p> <p>As explained in this article, other changes to <code class="language-plaintext highlighter-rouge">transforms</code> and <code class="language-plaintext highlighter-rouge">opacity</code> can, in many cases, also be handled by the compositor thread.</p> <p>If any animation triggers paint, layout, or both, the main thread will be required to do work. This is true for both CSS and JavaScript animations, and the overhead of layout or paint will likely dwarf any work associated with CSS or JavaScript execution, rendering the question moot.</p> <h2 id="high-performance-animations">High-performance Animations</h2> <p>How Create High-performance Animations? There are some point need to know:</p> <ul> <li>Where possible restrict animations to <strong><code class="language-plaintext highlighter-rouge">opacity</code></strong> and <strong><code class="language-plaintext highlighter-rouge">transform</code></strong> in order to keep animations on the compositing stage of the rendering path.</li> <li>If you must use a property that triggers layout or paint, it is unlikely that you will be able to make the animation smooth and high-performance.</li> <li>You can Use DevTools to check which stage of the path is being affected by your animations. <ul> <li>Check if an animation do layout work. Using Performance panel to check, for example in Chrome, if there are <code class="language-plaintext highlighter-rouge">Rendering</code> in the Summary tab, it may mean that your animation is causing the browser to do layout work.</li> <li>Check if an animation triggers paint. In Chrome, Using Rendering tab -&gt; Paint Flashing. The <a href="https://developer.chrome.com/docs/devtools/performance/reference#paint-profiler">paint profiler</a> to see if any paint operations are particularly expensive. If you find anything, see if a different CSS property will give the same look and feel with better performance.</li> </ul> </li> <li>By placing elements on a new layer they can be repainted without also requiring the rest of the layout to be repainted. you can manually force layer creation with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change"><code class="language-plaintext highlighter-rouge">will-change</code></a> property. But Use the <code class="language-plaintext highlighter-rouge">will-change</code> property sparingly, and only if you encounter a performance issue.</li> </ul> <h3 id="move-an-element">Move an element</h3> <p>👎 Don’t do this, because it trigger layout and paint.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="n">move</span> <span class="m">3s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@keyframes</span> <span class="n">move</span> <span class="p">{</span>
  <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
     <span class="nl">top</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vh</span> <span class="n">-</span> <span class="m">160px</span><span class="p">);</span>
     <span class="nl">left</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vw</span> <span class="n">-</span> <span class="m">200px</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>👍 Do this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="n">move</span> <span class="m">3s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@keyframes</span> <span class="n">move</span> <span class="p">{</span>
  <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
     <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="n">calc</span><span class="p">(</span><span class="m">90vw</span> <span class="n">-</span> <span class="m">200px</span><span class="p">),</span> <span class="n">calc</span><span class="p">(</span><span class="m">90vh</span> <span class="n">-</span> <span class="m">160px</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Using <code class="language-plaintext highlighter-rouge">opacity</code> and <code class="language-plaintext highlighter-rouge">transform</code> you can also rotate an element, Resize an element, Change an element’s visibility etc.</p> <h2 id="reference">Reference</h2> <ul> <li><a href="https://web.dev/articles/animations-overview">web.dev animations overview</a></li> <li><a href="https://web.dev/articles/animations-guide">web.dev animations guide</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance">MDN animation_performance</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="Animation"/><category term="JavaScript"/><summary type="html"><![CDATA[CSS allows animation of HTML elements without using JavaScript!]]></summary></entry><entry><title type="html">CSS Transitions and Transforms</title><link href="https://benwzj.github.io/blog/2024/css-transition/" rel="alternate" type="text/html" title="CSS Transitions and Transforms"/><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-transition</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-transition/"><![CDATA[<h2 id="css-transitions">CSS Transitions</h2> <p>CSS transitions allows you to change property values smoothly, over a given duration.</p> <p>To create a transition effect, you must specify two things:</p> <ul> <li>the CSS property you want to add an effect to</li> <li>the duration of the effect</li> </ul> <blockquote> <p>Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.</p> </blockquote> <p>Here are some features:</p> <ul> <li>Basic idea is that, told Browser the origial properties, final properties value and duraton time, Browser can transit them smoothly. Or, There are even some options to tell browser how to transit.</li> <li>Not all properties support transitions.</li> <li>CSS transitions is one way to create animation!</li> <li>CSS transitions and animations are <strong>expensive operations</strong> for most CSS properties—except <code class="language-plaintext highlighter-rouge">opacity</code> and <code class="language-plaintext highlighter-rouge">transform</code>.</li> </ul> <h3 id="basic-example">Basic example:</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span> 
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">2s</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;p&gt;</span>Hover over the div element below, to see the transition effect:<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</code></pre></div></div> <h3 id="transition-properties">Transition Properties</h3> <ul> <li><code class="language-plaintext highlighter-rouge">transition</code> A shorthand property for setting the four transition properties into a single property</li> <li><code class="language-plaintext highlighter-rouge">transition-delay</code> Specifies a delay (in seconds) for the transition effect</li> <li><code class="language-plaintext highlighter-rouge">transition-duration</code> Specifies how many seconds or milliseconds a transition effect takes to complete</li> <li><code class="language-plaintext highlighter-rouge">transition-property</code> Specifies the name of the CSS property the transition effect is for</li> <li><code class="language-plaintext highlighter-rouge">transition-timing-function</code> Specifies the speed curve of the transition effect</li> </ul> <h2 id="transforms">Transforms</h2> <p>There are 2D and 3D transform.</p> <h3 id="2d-transforms">2D Transforms</h3> <p>CSS 2D transforms allow you to move, rotate, scale, and skew elements.</p> <p>Example:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span><span class="nf">#myDiv</span> <span class="p">{</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">skewY</span><span class="p">(</span><span class="m">20deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div&gt;</span>
This a normal div element.
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"myDiv"</span><span class="nt">&gt;</span>
This div element is skewed 20 degrees along the Y-axis.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h4 id="2d-transform-properties">2D Transform Properties</h4> <ul> <li><code class="language-plaintext highlighter-rouge">transform</code> Applies a 2D or 3D transformation to an element</li> <li><code class="language-plaintext highlighter-rouge">transform-origin</code> Allows you to change the position on transformed elements</li> </ul> <h4 id="2d-transform-methods">2D Transform Methods</h4> <ul> <li><code class="language-plaintext highlighter-rouge">matrix(n,n,n,n,n,n)</code> Defines a 2D transformation, using a matrix of six values</li> <li><code class="language-plaintext highlighter-rouge">translate(x,y)</code> Defines a 2D translation, moving the element along the X- and the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">translateX(n)</code> Defines a 2D translation, moving the element along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">translateY(n)</code> Defines a 2D translation, moving the element along the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">scale(x,y)</code> Defines a 2D scale transformation, changing the elements width and height</li> <li><code class="language-plaintext highlighter-rouge">scaleX(n)</code> Defines a 2D scale transformation, changing the element’s width</li> <li><code class="language-plaintext highlighter-rouge">scaleY(n)</code> Defines a 2D scale transformation, changing the element’s height</li> <li><code class="language-plaintext highlighter-rouge">rotate(angle)</code> Defines a 2D rotation, the angle is specified in the parameter</li> <li><code class="language-plaintext highlighter-rouge">skew(x-angle,y-angle)</code> Defines a 2D skew transformation along the X- and the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">skewX(angle)</code> Defines a 2D skew transformation along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">skewY(angle)</code> Defines a 2D skew transformation along the Y-axis</li> </ul> <h3 id="3d-transforms">3D Transforms</h3> <h4 id="basic-example-1">Basic Example</h4> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#myDiv</span> <span class="p">{</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">rotateZ</span><span class="p">(</span><span class="m">90deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div&gt;</span>
This a normal div element.
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"myDiv"</span><span class="nt">&gt;</span>
This div element is rotated 90 degrees around the z axle.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h4 id="3d-transform-properties">3D transform properties:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">transform</code> Applies a 2D or 3D transformation to an element</li> <li><code class="language-plaintext highlighter-rouge">transform-origin</code> Allows you to change the position on transformed elements</li> <li><code class="language-plaintext highlighter-rouge">transform-style</code> Specifies how nested elements are rendered in 3D space</li> <li><code class="language-plaintext highlighter-rouge">perspective</code> Specifies the perspective on how 3D elements are viewed</li> <li><code class="language-plaintext highlighter-rouge">perspective-origin</code> Specifies the bottom position of 3D elements</li> <li><code class="language-plaintext highlighter-rouge">backface-visibility</code> Defines whether or not an element should be visible when not facing the screen</li> </ul> <h4 id="3d-transform-methods">3D Transform Methods</h4> <ul> <li><code class="language-plaintext highlighter-rouge">matrix3d (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</code> Defines a 3D transformation, using a 4x4 matrix of 16 values</li> <li><code class="language-plaintext highlighter-rouge">translate3d(x,y,z)</code> Defines a 3D translation</li> <li><code class="language-plaintext highlighter-rouge">translateX(x)</code> Defines a 3D translation, using only the value for the X-axis</li> <li><code class="language-plaintext highlighter-rouge">translateY(y)</code> Defines a 3D translation, using only the value for the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">translateZ(z)</code> Defines a 3D translation, using only the value for the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">scale3d(x,y,z)</code> Defines a 3D scale transformation</li> <li><code class="language-plaintext highlighter-rouge">scaleX(x)</code> Defines a 3D scale transformation by giving a value for the X-axis</li> <li><code class="language-plaintext highlighter-rouge">scaleY(y)</code> Defines a 3D scale transformation by giving a value for the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">scaleZ(z)</code> Defines a 3D scale transformation by giving a value for the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">rotate3d(x,y,z,angle)</code> Defines a 3D rotation</li> <li><code class="language-plaintext highlighter-rouge">rotateX(angle)</code> Defines a 3D rotation along the X-axis</li> <li><code class="language-plaintext highlighter-rouge">rotateY(angle)</code> Defines a 3D rotation along the Y-axis</li> <li><code class="language-plaintext highlighter-rouge">rotateZ(angle)</code> Defines a 3D rotation along the Z-axis</li> <li><code class="language-plaintext highlighter-rouge">perspective(n)</code> Defines a perspective view for a 3D transformed element</li> </ul> <h2 id="transition-and-transform">Transition and Transform</h2> <p>Usually, transition and transform work together to make animation.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span> 
<span class="nt">div</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">2s</span><span class="p">,</span> <span class="n">height</span> <span class="m">2s</span><span class="p">,</span> <span class="n">transform</span> <span class="m">2s</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">div</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180deg</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;p&gt;</span>Hover over the div element below:<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="Animation"/><summary type="html"><![CDATA[CSS Transitions]]></summary></entry><entry><title type="html">Using Icon in React</title><link href="https://benwzj.github.io/blog/2024/icon-react/" rel="alternate" type="text/html" title="Using Icon in React"/><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/icon-react</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/icon-react/"><![CDATA[<h2 id="react-icons">react-icons</h2> <p>‘react-icons’ is a plug-in which utilizes ES6 imports that allows you to include only the icons that your project is using.</p> <p>Install:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install react-icons --save
</code></pre></div></div> <p>Usage:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FaBeer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-icons/fa</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">class</span> <span class="nc">Question</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span> <span class="nx">Lets</span> <span class="nx">go</span> <span class="k">for</span> <span class="nx">a</span> <span class="o">&lt;</span><span class="nx">FaBeer</span> <span class="o">/&gt;</span><span class="p">?</span> <span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>You download all the files to your project. But This method has the trade-off that it takes a long time to install the package, and take big space. Install:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install @react-icons/all-files --save
</code></pre></div></div> <p>Usage:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FaBeer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@react-icons/all-files/fa/FaBeer</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Question</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span> <span class="nx">Lets</span> <span class="nx">go</span> <span class="k">for</span> <span class="nx">a</span> <span class="o">&lt;</span><span class="nx">FaBeer</span> <span class="o">/&gt;</span><span class="p">?</span> <span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="font-awesome">Font Awesome</h2> <p>Use Font Awesome Kit</p> <ul> <li> <p>Firstly, create an account in Font Awesome, and login, then you can create Font Awesome Kit. You can choose to create JS embeded code or CSS embeded code. Both of them are downloadable.</p> </li> <li>Secondly, install the kit into your project: For example, you can copy the JS embeded code and paste it in <code class="language-plaintext highlighter-rouge">&lt;scripe&gt;</code> tag to the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> of your index.html. Something like this: <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script
</span><span class="na">src=</span><span class="s">"https://kit.fontawesome.com/228dfc1a0b.js"</span>
<span class="na">crossorigin=</span><span class="s">"anonymous"</span>
<span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div> </div> </li> <li>Now you can use icon in you project: <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;i</span> <span class="na">className=</span><span class="s">"fas fa-trash"</span><span class="nt">&gt;&lt;/i&gt;</span>
</code></pre></div> </div> </li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Icon"/><category term="CSS"/><summary type="html"><![CDATA[react-icons ‘react-icons’ is a plug-in which utilizes ES6 imports that allows you to include only the icons that your project is using.]]></summary></entry><entry><title type="html">Implement CSS in React</title><link href="https://benwzj.github.io/blog/2024/React-css/" rel="alternate" type="text/html" title="Implement CSS in React"/><published>2024-02-17T00:00:00+00:00</published><updated>2024-02-17T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/React-css</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/React-css/"><![CDATA[<p>The bese way to use CSS in React, should be using CSS files.</p> <h2 id="inline-styling">Inline Styling</h2> <ul> <li>Using two sets of curly braces <code class="language-plaintext highlighter-rouge">{{}}</code>.</li> <li>CSS properties with hyphen separators, like background-color, must be written with camel case syntax: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">return </span><span class="p">(</span>
  <span class="o">&lt;&gt;</span>
    <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">style</span><span class="o">=</span><span class="p">{{</span><span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lightblue</span><span class="dl">"</span><span class="p">}}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Style</span><span class="o">!&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Use JavaScript Object: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">myStyle</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">DodgerBlue</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">fontFamily</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Sans-Serif</span><span class="dl">"</span>
<span class="p">};</span>
<span class="k">return </span><span class="p">(</span>
  <span class="o">&lt;&gt;</span>
    <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">myStyle</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Style</span><span class="o">!&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> </div> </li> </ul> <h2 id="css-file">CSS file</h2> <p>The bese way in Using CSS files. You can write your CSS styling in a separate file, just save the file with the <code class="language-plaintext highlighter-rouge">.css</code> file extension, and import it in your application.</p> <p>Define your styles in a separate *.css file as usual and refer to them using <code class="language-plaintext highlighter-rouge">className</code>.</p> <p>Create a file called “App.css” and insert some CSS code in it. Import the stylesheet in your application:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">./Components/css/App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is common for CSS classes to depend on the component props or state:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">menu</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">isActive</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">className</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1"> menu-active</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">className</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Menu</span><span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <h2 id="css-modules">CSS Modules</h2> <p>A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). CSS Modules allows us to use the same class name in multiple files without clashes.</p> <blockquote class="block-warning"> <p>The CSS inside a module is available only for the component that imported it.</p> </blockquote> <ol> <li>Create the CSS module with the <code class="language-plaintext highlighter-rouge">.module.css</code> extension, example: <code class="language-plaintext highlighter-rouge">my-style.module.css</code>. my-style.module.css: <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.bigblue</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="n">DodgerBlue</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="n">Sans-Serif</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Import the stylesheet in your component: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./my-style.module.css</span><span class="dl">'</span><span class="p">;</span> 
<span class="kd">const</span> <span class="nx">Car</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">bigblue</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Car</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">Car</span><span class="p">;</span>
</code></pre></div> </div> <p>Because it is referenced as a js object, so No clashes from other <code class="language-plaintext highlighter-rouge">.bigblue</code> class names</p> </li> </ol> <h2 id="css-in-js">CSS-in-JS</h2> <p>“CSS-in-JS” refers to a pattern where CSS is composed using JavaScript instead of defined in external files. This functionality is not a part of React, but provided by third-party libraries. Like styled-components: <code class="language-plaintext highlighter-rouge">npm install styled-components</code> But I do not recommend.</p> <h2 id="using-sass-in-react">Using Sass in React</h2> <p>If you use the <code class="language-plaintext highlighter-rouge">create-react-app</code> in your project, you can easily install and use Sass in your React projects. Install SASS: <code class="language-plaintext highlighter-rouge">npm i sass</code> After Sass installation, you can include Sass files in the React project. SASS file:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="nt">myColor</span><span class="o">:</span> <span class="nt">red</span><span class="o">;</span>
<span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="err">$</span><span class="n">myColor</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>React:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">./my-sass.scss</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Style</span><span class="o">!&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="nx">a</span> <span class="nx">little</span> <span class="nx">style</span><span class="o">!</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="React"/><category term="CSS"/><category term="JavaScript"/><category term="React"/><category term="Sass"/><summary type="html"><![CDATA[The bese way to use CSS in React, should be using CSS files.]]></summary></entry><entry><title type="html">About Timer in JavaScript</title><link href="https://benwzj.github.io/blog/2024/timeout-javascript/" rel="alternate" type="text/html" title="About Timer in JavaScript"/><published>2024-02-03T00:00:00+00:00</published><updated>2024-02-03T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/timeout-javascript</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/timeout-javascript/"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">setTimeout()</code> and <code class="language-plaintext highlighter-rouge">setInterval()</code> methods allow authors to schedule timer-based callbacks.</p> <ul> <li>Timers can be nested; after five such nested timers, however, the interval is forced to be at least four milliseconds.</li> <li>This API does not guarantee that timers will run exactly on schedule. Delays due to CPU load, other tasks, nested level, inactive tab, etc, are to be expected.</li> <li>Non-number <code class="language-plaintext highlighter-rouge">delay</code> values are silently coerced into numbers.</li> <li>You can include a string instead of a function, which is compiled and executed when the timer expires. This syntax is not recommended for the same reasons that make using <code class="language-plaintext highlighter-rouge">eval()</code> a security risk.</li> </ul> <p>I am not gonna talk about how to use it. But trying to dig a bit deepper.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> and <code class="language-plaintext highlighter-rouge">setInterval()</code> methods work in a very similiar machanism.</p> <h2 id="how-it-work-underhood">How it work underhood</h2> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> is web API which means there are standards to define how it work. Becaue it need to make sure all browsers work consistently. Timers are described in the timers section of <a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html">HTML Living Standard</a>.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code>s are the functions (a subset) that are common to all workers and to the main thread. They are from <code class="language-plaintext highlighter-rouge">WindowOrWorkerGlobalScope</code>. Objects that implement the <code class="language-plaintext highlighter-rouge">WindowOrWorkerGlobalScope</code> mixin have a map of active timers, which is a map, initially empty. Each key in this map is an identifier for a timer, and each value is a <code class="language-plaintext highlighter-rouge">DOMHighResTimeStamp</code>, representing the expiry time for that timer.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> will run the <a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps">timer initialization steps</a> and put entries into the map of active timers. In completionStep, an algorithm step, which <strong>queues a global task</strong> on the timer task source given global to run task.</p> <h2 id="the-this-problem">The “this” problem</h2> <p>Code executed by setTimeout() is called from an execution context separate from the function from which setTimeout was called. If you have not set <code class="language-plaintext highlighter-rouge">this</code> in the call or with bind, it will default to the window (or global) object. It will not be the same as the <code class="language-plaintext highlighter-rouge">this</code> value for the function that called setTimeout.</p> <p>Solutions:</p> <ul> <li>A common way to solve the problem is to use a wrapper function that sets <code class="language-plaintext highlighter-rouge">this</code> to the required value.</li> <li>Alternatively, you can use bind() to set the value of this for all calls to a given function</li> </ul> <h2 id="settimeout-and-recursion">setTimeout and Recursion</h2> <p>The act of a function calling itself, recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (resumes recursion).</p> <p>To understand Recursion, you need to understand closure, call stack, etc.</p> <p>In JavaScript, Recursion is limited by stack size. It is easy to explode call stack. For example: Function below returns the maximum size of the call stack available in the JavaScript runtime in which the code is run.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getMaxCallStackSize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">getMaxCallStackSize</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">getMaxCallStackSize</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</code></pre></div></div> <p>But if call function itself in setTimeout(), it is still Recursion? just like below:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="nx">count</span> <span class="o">--</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">currentTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">getMilliseconds</span><span class="p">();</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="nf">setTimeout </span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="kd">let</span> <span class="nx">executionTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">getMilliseconds</span><span class="p">();</span>
      <span class="nf">writeLog</span><span class="p">(</span><span class="nx">currentTime</span><span class="p">,</span> <span class="nx">executionTime</span><span class="p">);</span>
      <span class="nf">timer</span><span class="p">();</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is still called recursion, or called nested setTimeout. But their implement is different.</p> <h2 id="understand-the-execution-order">Understand the execution order</h2> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">wait</span> <span class="o">=</span> <span class="nx">ms</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
<span class="nf">wait</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
<span class="nf">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
<span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> 

<span class="c1">// When execute this script, the order of log will be: "1, 2, 3, 4, 5"</span>
</code></pre></div></div> <p>Promise and setTimeout() both are using event loop, callback queue. But they have some difference.</p> <h3 id="microtask-macrotask-concept">microtask, macrotask concept</h3> <p>There are <strong>microtask queue</strong> and <strong>macrotask queue</strong> in JS. Callbacks of Promise objects will be microtasks.</p> <ul> <li> <p>The macrotasks, or just call tasks, which is any JavaScript scheduled to be run by the standard mechanisms such as initially starting to execute a program, an event triggering a callback, and so forth. Other than by using events (like <code class="language-plaintext highlighter-rouge">onClick</code>), you can enqueue a task by using <code class="language-plaintext highlighter-rouge">setTimeout()</code> or <code class="language-plaintext highlighter-rouge">setInterval()</code>.</p> </li> <li> <p>The microtasks, which are programmed for things that should happen immediately after the script that is currently running, such as performing something asynchronous without supporting the penalty of creating a new macrotask. These microtasks are <strong>glued</strong> into the microtask queue which is processed after the macrotasks and at the end of the execution of each macrotask provided there is no Javascript running. Among the microtask are the callbacks of Promise objects. If we add new microtasks to microtask queue during the execution of the microtasks, they are also executed.</p> </li> </ul> <p>So, As a corollary of this sequence we could say that two macrotasks cannot be executed one after the other if, in between, the microtasks tail has elements.</p> <h2 id="the-setinterval">The <code class="language-plaintext highlighter-rouge">setInterval()</code></h2> <p>The <code class="language-plaintext highlighter-rouge">setInterval()</code> function is commonly used to set a delay for functions that are executed again and again, such as animations. You can cancel the interval using <code class="language-plaintext highlighter-rouge">clearInterval()</code>.</p> <p>Ensure that execution duration is shorter than interval frequency when using <code class="language-plaintext highlighter-rouge">setInterval()</code>. If there is a possibility that your logic could take longer to execute than the interval time, it is recommended that you recursively call a named function using <code class="language-plaintext highlighter-rouge">setTimeout()</code>.</p> <p>For example, if using <code class="language-plaintext highlighter-rouge">setInterval()</code> to poll a remote server every 5 seconds, network latency, an unresponsive server, and a host of other issues could prevent the request from completing in its allotted time. As such, you may find yourself with queued up XHR requests that won’t necessarily return in order.</p> <p>In these cases, a recursive <code class="language-plaintext highlighter-rouge">setTimeout()</code> pattern is preferred:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Your logic here</span>

    <span class="nf">loop</span><span class="p">();</span>
  <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div> <p>loop() is recursively called inside setTimeout() after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing.</p> <h2 id="common-using-way-in-react">Common using way in React</h2> <ul> <li>Using <code class="language-plaintext highlighter-rouge">ref</code> to mark intervalID.</li> <li><code class="language-plaintext highlighter-rouge">clearInterval(theOldInterval)</code> before start a new interval.</li> </ul> <p>Example: building a stopwatch</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Stopwatch</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">setStartTime</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">now</span><span class="p">,</span> <span class="nx">setNow</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">intervalRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleStart</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">setStartTime</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>
    <span class="nf">setNow</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>

    <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
    <span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">setNow</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>
    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">handleStop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">secondsPassed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">startTime</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">now</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">secondsPassed</span> <span class="o">=</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">passed</span><span class="p">:</span> <span class="p">{</span><span class="nx">secondsPassed</span><span class="p">.</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleStart</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Start</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleStop</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Stop</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="fqa">FQA</h2> <h3 id="what-happen-if-not-clearinterval">What happen if not <code class="language-plaintext highlighter-rouge">clearInterval()</code></h3> <h2 id="reference">Reference</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/setTimeout">MDN doc</a></li> <li><a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html">html.spec</a></li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="Web-API"/><category term="Timer"/><category term="Recursion"/><summary type="html"><![CDATA[The setTimeout() and setInterval() methods allow authors to schedule timer-based callbacks.]]></summary></entry><entry><title type="html">Virtual DOM Concept</title><link href="https://benwzj.github.io/blog/2024/Virtual-DOM/" rel="alternate" type="text/html" title="Virtual DOM Concept"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/Virtual-DOM</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/Virtual-DOM/"><![CDATA[<h2 id="dom-rendering">DOM rendering</h2> <p>Let’s get to know a bit about DOM rendering first. In traditional rendering, the Browser does the following tasks:</p> <ul> <li>The browser parses our HTML and stores it in memory as a <strong>tree structure</strong> of a document, which is also known as DOM (Document Object Model) or sometimes as Real DOM. DOM methods allow programmatic access to the tree. With them, you can change the document’s structure, style, or content.</li> <li>The browser uses DOM to create a render tree. Render Tree represents everything that will be rendered on the browser.</li> <li><strong>Layout</strong> Render Tree by calculating the geometry of all elements (sizes &amp; positioning) and placing them.</li> <li><strong>painting</strong> all individual nodes.</li> </ul> <blockquote class="block-warning"> <h5 id="the-premise-of-virtual-dom">The Premise of Virtual DOM:</h5> <p>Real DOM updation is a slow process (due to reflow and repainting).</p> </blockquote> <h2 id="why-virtual-dom-can-help">Why Virtual DOM can help</h2> <p>Modern browsers are efficient enough to update only the required elements in the DOM. For example, if I have two ‘p’ tags and I change the text in one of the p tags using a button click, then only that p tag will be updated by safari (you can verify this using paint flashing).</p> <p>Then why we still need Virtual DOM?</p> <p>Virtual DOM is not magic, but it make writing WebApp easier. For example, if there are many tags you need to update when a state change, you will have a headache to figure out what tags to change and how to change. Rebuild the whole DOM can be easier, but it is slow process. Virtual DOM is one way to fix this.</p> <p>There are two arguments for React’s Virtual DOM being <strong>easier</strong> to build WebApp (not faster):</p> <ul> <li>It updates ONLY those elements that actually need to be updated (using <strong>diff</strong>).</li> <li>It <strong>batches</strong> the updates and hence we update the real DOM only a single time. Thus the repainting is also done only once which otherwise would have been done multiple times.</li> </ul> <p>Here some points need to be clear:</p> <ul> <li>You can drop into raw DOM operations and DOM API calls and beat React if you wanted to. This way can be more efficient. But it can be too trivial to do that in real App.</li> <li>Batching updates is actually the basic for every WebApp. Virtual DOM just make batching is much easier for us.</li> </ul> <h2 id="what-is-react-virtual-dom">What is React Virtual DOM</h2> <p>React renders JSX components to the Browser DOM, but keeps a copy of the actual DOM to itself. This copy is the Virtual DOM. We can think of it as the twin brother of the real or Browser DOM. The following actions take place in React:</p> <ul> <li>React stores a copy of Browser DOM which is called Virtual DOM.</li> <li>When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one.</li> <li>Comparison is done by <strong>Diffing Algorithm</strong>. The cool fact is all these comparisons take place in the memory and nothing is yet changed in the Browser.</li> <li>After comparing, React goes ahead and creates a new Virtual DOM having the changes. It is to be noted that as many as 200,000 virtual DOM nodes can be produced in a second.</li> <li>Then it updates the Browser DOM with the least number of changes possible without rendering the entire DOM again. This changes the efficiency of an application tremendously.</li> </ul> <p>It’s important to understand that virtual DOM isn’t a feature for React. It’s a means to an end, the end being <strong>declarative</strong>, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is generally good enough. That means less buggy code, and more time spent on creative tasks instead of tedious ones.</p> <h3 id="reconciliation">Reconciliation</h3> <p>To get a better understanding, we need to discuss some terminologies before discussing the whole Reconciliation process.</p> <p>Reconciliation is the process of keeping 2 DOM Trees in sync by a library like ReactDOM. It is done by using <strong>Reconciler</strong> and a <strong>Renderer</strong>.</p> <p><strong>Reconciler</strong> uses Diffing Algorithm to find differences between Current Tree and Work in Progress Tree and sends computed changes to the Renderer.</p> <p>The <strong>Renderer</strong> is the one that updates the app’s UI. Different devices can have different Renderers while sharing the same Reconciler.</p> <p>Before React 16, React used to work on Call Stack to keep track of the program’s execution. Hence old reconciler has been given the name Stack Reconciler. In React 16, they created a new Reconciler from scratch which uses a new data structure called fiber. Hence it is called <strong>Fiber Reconciler</strong>. The main aim was to make the reconciler asynchronous and smarter by executing work on the basis of priority.</p> <p>In <a href="https://www.youtube.com/watch?v=aS41Y_eyNrU">Dan Abramov’s Youtube Video</a>, he explained the motivation of 2 Virtual DOM trees came from The Double Buffering Technique that was used in the earlier days for Game Development.</p> <h2 id="svelte">Svelte</h2> <p>Many people reckon VDOM cut down the performance. Svelte is an example to ditch VDOM.</p> <p>Svelte regards <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">Virtual DOM is pure overhead</a>.</p> <p>Firstly, The <strong>diffing</strong> isn’t free. Svelte believe the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip the diffing.</p> <blockquote> <p>Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.</p> </blockquote> <p>Secondly, the greater overhead is in the <strong>components themselves</strong>. You’d be carelessly recalculating value on every update, regardless of whether props.foo had changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">StrawManComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nf">expensivelyCalculateValue</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">the</span> <span class="nx">value</span> <span class="nx">is</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <p>Or we’re generating a new array of virtual <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> elements — each with their own inline event handler — on every state change, regardless of whether props.items has changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MoreRealisticComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">selected</span><span class="p">,</span> <span class="nx">setSelected</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Selected</span> <span class="p">{</span><span class="nx">selected</span> <span class="p">?</span> <span class="nx">selected</span><span class="p">.</span><span class="nx">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">nothing</span><span class="dl">'</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">setSelected</span><span class="p">(</span><span class="nx">item</span><span class="p">)}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Svelte achieve a similar programming model without using virtual DOM.</p> <figure> <picture> <img src="/assets/img/svelte-VS-react.avif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="React"/><category term="JavaScript"/><category term="DOM"/><category term="SPA"/><category term="Svelte"/><summary type="html"><![CDATA[DOM rendering]]></summary></entry><entry><title type="html">Should TypeScript be ditched</title><link href="https://benwzj.github.io/blog/2023/dropping-ts/" rel="alternate" type="text/html" title="Should TypeScript be ditched"/><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/dropping-ts</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/dropping-ts/"><![CDATA[<p>Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?</p> <p>Now the people begin talk about dropping TypeScript. Why?</p> <p>The main reasons looks like this:</p> <blockquote> <p>Not just because it requires an explicit compile step, but because it pollutes the code with type gymnastics that add ever so little joy to my development experience, and quite frequently considerable grief. Things that should be easy become hard, and things that are hard become <code class="language-plaintext highlighter-rouge">any</code>.</p> </blockquote> <p>One of the longest running schisms in programming is that of static vs dynamic typing. There were a million arguments from both sides throughout these years, but seen very few of them ever convinced anyone of anything. As rationalizations masquerading as reason rarely do in matters of faith.</p> <p>We know that types are always there, but the difference is that they are in your codes or in your mind.</p> <h2 id="jsdoc">JSDoc</h2> <p>Both TypeScript and JSDoc aim to improve the development experience and enhance JavaScript codebases.</p> <p>TypeScript introduces a type system to JavaScript, enabling developers to catch errors at compile-time rather than runtime.</p> <p>What is JSDoc? JSDoc is a markup language and a documentation tool for JavaScript. It allows developers to add structured comments to their JavaScript code, providing valuable information about the codebase. Here are some notable aspects of JSDoc:</p> <ul> <li>Type Annotations: JSDoc supports type annotations similar to TypeScript, allowing developers to document the expected types of variables, parameters, and return values.</li> <li>Code Documentation: JSDoc allows developers to document functions, classes, objects, and their members, providing information about their purpose, usage, and expected behavior.</li> <li>Tool Integration: JSDoc-generated documentation can be utilized by various tools and IDEs to provide context-aware help, autocompletion suggestions, and inline documentation.</li> <li>Custom Tags: JSDoc supports custom tags, which enable developers to extend the existing set of annotations and document additional information specific to their codebase or project.</li> </ul> <h3 id="jsdoc-vs-typescript">JSDoc vs TypeScript</h3> <ul> <li>Type Checking: TypeScript performs static type checking during compilation, catching type-related errors before runtime. JSDoc, on the other hand, is primarily a documentation tool and does not provide type checking by itself.</li> <li>Language Features: TypeScript introduces additional language features like interfaces, classes, and modules, while JSDoc focuses on providing documentation annotations for existing JavaScript code.</li> <li>Ecosystem and Tooling: TypeScript has a mature ecosystem with strong tooling support, including IDE integrations, build systems, and popular frameworks. JSDoc, being a documentation tool, complements existing JavaScript development workflows and is commonly used alongside other tools.</li> </ul> <h2 id="some-libraries-turn-around">Some libraries turn around</h2> <p>So big libraries like Turbo, Svelte, Drizzle are deciding to ditch TypeScript from their code bases. Are there more to ditch TypeScript in the future?</p> <p>TypeScripte become popular since it come out at 2012 from MicroSoft. The fact is not changed, the pros and cons of TypeScript are not changend. But people can change.</p> <p>Let us enjoy JavaScript in the glorious spirit it was originally designed: Free of strong typing.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><summary type="html"><![CDATA[Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?]]></summary></entry><entry><title type="html">ExpressJS vs. NestJS</title><link href="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/" rel="alternate" type="text/html" title="ExpressJS vs. NestJS"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/ExpressJS-NestJS</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/"><![CDATA[<p>Both of them are Server side application frameworks for NodeJS.</p> <h2 id="expressjs">ExpressJS</h2> <p>Express is the most popular Node web framework, and is the underlying library for a number of other popular Node web frameworks (including NestJS).</p> <p>According to ExpressJS official website, ExpressJS is Fast, unopinionated, minimalist web framework for Node.js. The strengths of Express is its strong community and the number of available plugins.</p> <p>It provides mechanisms to:</p> <ul> <li>Write handlers for requests with different HTTP verbs at different URL paths (routes).</li> <li>Integrate with “view” rendering engines in order to generate responses by inserting data into templates.</li> <li>Set common web application settings like the port to use for connecting, and the location of templates that are used for rendering the response.</li> <li>Add additional request processing “middleware” at any point within the request handling pipeline.</li> </ul> <p>While Express itself is fairly minimalist, developers have created compatible <strong>middleware</strong> packages to address almost any web development problem. There are libraries to work with cookies, sessions, user logins, URL parameters, POST data, security headers, and many more. You can find a list of middleware packages maintained by the Express team at <a href="https://expressjs.com/en/resources/middleware.html">Express Middleware</a> (along with a list of some popular 3rd party packages).</p> <blockquote> <p>Because of flexibility, Express need more knowledge, understanding to work with.</p> </blockquote> <h2 id="nestjs">NestJS</h2> <p>Nest is a progressive framework. It is built with TypeScript and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming).</p> <p>Under the hood, Nest makes use of ExpressJS. The architecture of NestJS is heavily inspired by Angular. NestJS is opinionated on purpose.</p> <h2 id="expressjs-vs-nestjs">ExpressJS vs. NestJS</h2> <p>The biggest difference between these frameworks is that NestJS is opinionated, and ExpressJS is not.</p> <p>It means Express gives developers the freedom to make multiple possibilities and implement code as per the need, as it doesn’t have a set of pre-defined rules to follow. Such a flexibility is appreciated by many developers, and it’s beneficial for smaller flexible teams, but once team size and app’s complexity grows, the lack of structure becomes a problem.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><category term="JavaScript"/><category term="NodeJS"/><category term="Framework"/><summary type="html"><![CDATA[Both of them are Server side application frameworks for NodeJS.]]></summary></entry><entry><title type="html">Ref in React</title><link href="https://benwzj.github.io/blog/2023/react-ref/" rel="alternate" type="text/html" title="Ref in React"/><published>2023-11-01T00:00:00+00:00</published><updated>2023-11-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-ref</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-ref/"><![CDATA[<h2 id="what-is-refs">What is Refs</h2> <blockquote class="block-warning"> <h5 id="the-definition">The Definition</h5> <p>When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a <code class="language-plaintext highlighter-rouge">ref</code>.</p> </blockquote> <p>You can access the current value of that ref through the <code class="language-plaintext highlighter-rouge">ref.current</code> property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)</p> <p>Refs are a generic concept, but most often you’ll use them to hold DOM elements.</p> <blockquote class="block-warning"> <p>But you should always keep this in mind: <code class="language-plaintext highlighter-rouge">ref</code> is escape hatch. Using it sparingly.</p> </blockquote> <h3 id="ref-vs-state">Ref vs State</h3> <ul> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">ref</code> could point to anything: a string, an object, or even a function.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are live outside of your component.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are retained by React between re-renders.</li> <li>Mutating <code class="language-plaintext highlighter-rouge">state</code> cause re-render. Mutating <code class="language-plaintext highlighter-rouge">ref</code> won’t.</li> <li><code class="language-plaintext highlighter-rouge">state</code> works as snapshot for each render, You can’t get latest state from an asynchronous operation; But <code class="language-plaintext highlighter-rouge">ref</code> won’t be affected by render, you can read the latest ref anytime.</li> <li><code class="language-plaintext highlighter-rouge">state</code> is ”Immutable” — you must use the state setting function to modify state variables to queue a re-render; <code class="language-plaintext highlighter-rouge">ref</code> is mutable, it is a <strong>plain</strong> JavaScript object that you can read and modify.</li> <li>You shouldn’t read (or write) the <code class="language-plaintext highlighter-rouge">ref.current</code> value during rendering. But You can read <code class="language-plaintext highlighter-rouge">state</code> any time.</li> </ul> <h2 id="using-ref">Using <code class="language-plaintext highlighter-rouge">ref</code></h2> <h3 id="example-alerting-how-many-click-have-happen">Example: alerting how many click have happen.</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">You clicked </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> times!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="nx">Click</span> <span class="nx">me</span><span class="o">!</span>
    <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="debouncedbutton-component">DebouncedButton component</h3> <p>If you keep clicking the button, it will ignore the click event, untill you stop and wait a second. This is called <strong>Debounced</strong>. <code class="language-plaintext highlighter-rouge">ref</code> is good way to implement this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">useRef</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">DebouncedButton</span><span class="p">({</span> <span class="nx">onClick</span><span class="p">,</span> <span class="nx">children</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">timeoutID</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">clearTimeout</span><span class="p">(</span><span class="nx">timeoutID</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
      <span class="nx">timeoutID</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">onClick</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">}}</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="when-to-use-refs">When to use refs</h2> <p>Typically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:</p> <ul> <li>Storing and manipulating <strong>DOM elements</strong> (the most common use case).</li> <li>Storing <strong>timeout IDs</strong></li> <li>Storing other objects that aren’t necessary to calculate the JSX.</li> </ul> <p>If your component needs to store some value, but it doesn’t impact the rendering logic, choose refs.</p> <h2 id="best-practices-for-refs">Best practices for refs</h2> <p>Following these principles will make your components more predictable:</p> <ul> <li><strong>Treat refs as an escape hatch</strong>. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.</li> <li><strong>Don’t read or write <code class="language-plaintext highlighter-rouge">ref.current</code> during rendering</strong>. If some information is needed during rendering, use state instead. Since React doesn’t know when <code class="language-plaintext highlighter-rouge">ref.current</code> changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like <code class="language-plaintext highlighter-rouge">if (!ref.current) ref.current = new Thing()</code> which only sets the ref once during the first render.)</li> </ul> <h2 id="manipulating-the-dom-with-refs">Manipulating the DOM with Refs</h2> <p>React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. <strong>However</strong>, sometimes you might need access to the DOM elements managed by React, for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a <code class="language-plaintext highlighter-rouge">ref</code> to the DOM node.</p> <p>You can instruct React to put a DOM node into <code class="language-plaintext highlighter-rouge">myRef.current</code> by passing <code class="language-plaintext highlighter-rouge">&lt;div ref={myRef}&gt;</code>. Once the element is removed from the DOM, React will update <code class="language-plaintext highlighter-rouge">myRef.current</code> to be <code class="language-plaintext highlighter-rouge">null</code>.</p> <h3 id="getting-a-ref-to-the-node">Getting a <code class="language-plaintext highlighter-rouge">ref</code> to the node</h3> <p>To access a DOM node managed by React:</p> <ul> <li>first, import the useRef Hook: <code class="language-plaintext highlighter-rouge">import { useRef } from 'react';</code></li> <li>Then, use it to declare a ref inside your component: <code class="language-plaintext highlighter-rouge">const myRef = useRef(null);</code></li> <li>Finally, pass your <code class="language-plaintext highlighter-rouge">ref</code> as the <code class="language-plaintext highlighter-rouge">ref</code> attribute to the JSX tag for which you want to get the DOM node: <code class="language-plaintext highlighter-rouge">&lt;div ref={myRef}&gt;</code></li> </ul> <p>The <code class="language-plaintext highlighter-rouge">useRef</code> Hook returns an object with a single property called current. Initially, <code class="language-plaintext highlighter-rouge">myRef.current</code> will be <code class="language-plaintext highlighter-rouge">null</code>.</p> <p>When React creates a DOM node for this<code class="language-plaintext highlighter-rouge"> &lt;div&gt;</code>, React will put a reference to this node into <code class="language-plaintext highlighter-rouge">myRef.current</code>. You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it. Then:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// You can use any browser APIs, for example:</span>
<span class="nx">myRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">();</span>
</code></pre></div></div> <h3 id="the-ref-callback">The <code class="language-plaintext highlighter-rouge">ref</code> callback</h3> <p>Sometimes you might need a <code class="language-plaintext highlighter-rouge">ref</code> to each item in the list, and you don’t know how many you will have.</p> <p><code class="language-plaintext highlighter-rouge">ref</code> callback can let you manage a list of refs!</p> <blockquote class="block-warning"> <h5 id="the-basic-idea-is-like-this">The Basic Idea is like this:</h5> <p><code class="language-plaintext highlighter-rouge">ref</code> doesn’t hold a single DOM node. Instead, it holds a <code class="language-plaintext highlighter-rouge">Map</code> from item ID to a DOM node. The <code class="language-plaintext highlighter-rouge">ref</code> callback on every list item takes care to update the Map.</p> </blockquote> <p>You can pass a callback function to the <code class="language-plaintext highlighter-rouge">ref</code> attribute. And then React will call your <code class="language-plaintext highlighter-rouge">ref</code> callback with the DOM node when it’s time to set the <code class="language-plaintext highlighter-rouge">ref</code>, and with <code class="language-plaintext highlighter-rouge">null</code> when it’s time to clear it. This lets you maintain your own array or a Map, and access any <code class="language-plaintext highlighter-rouge">ref</code> by its index or some kind of ID.</p> <blockquote class="block-warning"> <h5 id="the-tricky-thing-is">The tricky thing is</h5> <p>React will call your <code class="language-plaintext highlighter-rouge">ref</code> callback with the DOM node when it’s time to set the <code class="language-plaintext highlighter-rouge">ref</code>.</p> </blockquote> <p>It works liks this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. define ref</span>
<span class="kd">const</span> <span class="nx">itemsRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="c1">// 2. get ref.current reference.</span>
<span class="kd">function</span> <span class="nf">getMap</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Initialize the Map on first usage.</span>
    <span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 3. tell React how to arrange the ref to nodes list.</span>
<span class="kd">const</span> <span class="nx">catList</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">catList</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="na">imageUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://placekitten.com/250/200?image=</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">i</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">catList</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">cat</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">li</span>
              <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
              <span class="nx">ref</span><span class="o">=</span><span class="p">{(</span><span class="nx">node</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">getMap</span><span class="p">();</span>
                <span class="k">if </span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                  <span class="nx">map</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
                <span class="p">}</span>
              <span class="p">}}</span>
            <span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">img</span>
                <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">cat</span><span class="p">.</span><span class="nx">imageUrl</span><span class="p">}</span>
                <span class="nx">alt</span><span class="o">=</span><span class="p">{</span><span class="dl">'</span><span class="s1">Cat #</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>          <span class="p">))}</span>
        <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>

<span class="c1">// 4. now you can access individual DOM nodes from the Map according to ID:.</span>
<span class="kd">function</span> <span class="nf">getNodeByID</span><span class="p">(</span><span class="nx">itemId</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">getMap</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">itemId</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="accessing-components-dom-nodes">Accessing component’s DOM nodes</h3> <p>When you put a <code class="language-plaintext highlighter-rouge">ref</code> on a <strong>built-in</strong> component that outputs a browser element like <code class="language-plaintext highlighter-rouge">&lt;input /&gt;</code>, React will set that <code class="language-plaintext highlighter-rouge">ref</code>’s <code class="language-plaintext highlighter-rouge">current</code> property to the corresponding DOM node (such as the actual <code class="language-plaintext highlighter-rouge">&lt;input /&gt;</code> in the browser).</p> <p>However, if you try to put a <code class="language-plaintext highlighter-rouge">ref</code> on your own component, like <code class="language-plaintext highlighter-rouge">&lt;MyInput /&gt;</code>, by default you will get <code class="language-plaintext highlighter-rouge">null</code>. This is <strong>intentional</strong>.</p> <p>Accessing component’s DOM nodes, you should use <code class="language-plaintext highlighter-rouge">React.forwardRef()</code></p> <h4 id="reactforwardref">React.forwardRef()</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">forwardRef</span><span class="p">,</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyInput</span> <span class="o">=</span> <span class="nf">forwardRef</span><span class="p">((</span><span class="nx">props</span><span class="p">,</span> <span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Form</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">inputRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">inputRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">focus</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyInput</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputRef</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Focus</span> <span class="nx">the</span> <span class="nx">input</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <p>This is how it works:</p> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;MyInput ref={inputRef} /&gt;</code> tells React to put the corresponding DOM node into inputRef.current. However, it’s up to the MyInput component to opt into that—by default, it doesn’t.</li> <li>The MyInput component is declared using <code class="language-plaintext highlighter-rouge">forwardRef</code>. This opts it into receiving the inputRef from above as the second <code class="language-plaintext highlighter-rouge">ref</code> argument which is declared after props.</li> <li>MyInput itself passes the <code class="language-plaintext highlighter-rouge">ref</code> it received to the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> inside of it.</li> </ul> <blockquote> <p><code class="language-plaintext highlighter-rouge">useImperativeHandle()</code> This function can restrict the exposed functionality of the <code class="language-plaintext highlighter-rouge">ref</code></p> </blockquote> <h3 id="when-react-attaches-the-refs">When React attaches the refs</h3> <p>In React, every update is split in two phases:</p> <ol> <li>During render, React calls your components to figure out what should be on the screen.</li> <li>During commit, React applies changes to the DOM.</li> </ol> <p>React sets <code class="language-plaintext highlighter-rouge">ref.current</code> during the commit. Before updating the DOM, React sets the affected ref.current values to null. After updating the DOM, React immediately sets them to the corresponding DOM nodes.</p> <p>In general, you don’t want to access <code class="language-plaintext highlighter-rouge">refs</code> during rendering. That goes for <code class="language-plaintext highlighter-rouge">refs</code> holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so <code class="language-plaintext highlighter-rouge">ref.current</code> will be <code class="language-plaintext highlighter-rouge">null</code>. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.</p> <p>But some rare cases, you may want React to update the DOM synchronously. For example, you add a ‘todo’ to ‘todoslist’, and after adding, show that ‘todo’:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setTodos</span><span class="p">([</span> <span class="p">...</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">newTodo</span><span class="p">]);</span>
<span class="nx">listRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">();</span>
</code></pre></div></div> <p>The code above won’t work. Because the new todo item haven’t added to the DOM node. One way to fix this issue can be:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">flushSync</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="nf">flushSync</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTodos</span><span class="p">([</span> <span class="p">...</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">newTodo</span><span class="p">]);</span>
<span class="p">});</span>
<span class="nx">listRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">();</span>
</code></pre></div></div> <p>Flushing state updates synchronously with <code class="language-plaintext highlighter-rouge">flushSync</code></p> <h3 id="best-practices-for-dom-manipulation-with-refs">Best practices for DOM manipulation with refs</h3> <ul> <li> <p>Refs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.</p> </li> <li> <p>If you stick to <strong>non-destructive</strong> actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.</p> </li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://react.dev/learn/referencing-values-with-refs">React official doc</a></p>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Ref"/><summary type="html"><![CDATA[What is Refs]]></summary></entry></feed>