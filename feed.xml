<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-04T01:24:46+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">How to make MarkDown file looks better</title><link href="https://benwzj.github.io/blog/2023/Markdown-looks/" rel="alternate" type="text/html" title="How to make MarkDown file looks better"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-looks</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-looks/"><![CDATA[<p>We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example,<code class="language-plaintext highlighter-rouge"> # Headline</code> convert to <code class="language-plaintext highlighter-rouge">&lt;h1&gt;Headline&lt;/h1&gt;</code>. But how about the style?</p> <p>There are two ways:</p> <ol> <li>Embed HTML code in markdown files (Most markdown parsers support).</li> <li>Find a specific markdown perser.</li> </ol> <h2 id="embed-html-code-in-markdown-files">Embed HTML code in markdown files</h2> <ul> <li>You can use inline HTML in Markdown for styles: <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:green;font-weight:700;font-size:20px"</span><span class="nt">&gt;</span>
  markdown color font styles
<span class="nt">&lt;/span&gt;</span>
</code></pre></div> </div> </li> <li>you can use CSS styles in markdown content</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
.heading1 {
    color: red;
    font-weight:700;
    font-size: 35px;
}
.heading2 {
    color: blue;
    font-weight:700;
    font-size: 30px;
}
<span class="nt">&lt;/style&gt;</span>

<span class="gh"># Markdown heading styles {#identifier .heading1}</span>
<span class="gu">## Markdown heading styles {#identifier .heading2}</span>

</code></pre></div></div> <ul> <li>Define CSS styles using selector</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
red { color: red }
yellow { color: yellow }
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;red&gt;</span> red color markdown text<span class="nt">&lt;/red&gt;</span>
<span class="nt">&lt;yellow&gt;</span> red color markdown text<span class="nt">&lt;/yellow&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="HTML"/><category term="markdown"/><category term="MD"/><category term="CSS"/><summary type="html"><![CDATA[We know that, there are a markdown parsers to convert markdown file into HTML. Markdown have it’s own syntax for the transform. For example, # Headline convert to &lt;h1&gt;Headline&lt;/h1&gt;. But how about the style?]]></summary></entry><entry><title type="html">What Markdown can do</title><link href="https://benwzj.github.io/blog/2023/Markdown-can-do/" rel="alternate" type="text/html" title="What Markdown can do"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Markdown-can-do</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Markdown-can-do/"><![CDATA[<p>Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.</p> <h2 id="it-can-embed-html-tags">It can embed HTML tags</h2> <h4 id="direct-link">Direct link:</h4> <p><a href="https://en.wikipedia.org/">wikipedia</a></p> <h4 id="make-a-list">Make a list</h4> <ul> <li>Milk</li> <li>Bread</li> <li>Yogurt</li> <li>Nappy</li> </ul> <hr/> <h4 id="we-can-quote">We can Quote:</h4> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h4 id="support-images">Support Images:</h4> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>responsive format:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="display-programm-code">Display programm code</h2> <h4 id="you-have-to-do-is-wrap-your-code-in-markdown-code-tags">You have to do is wrap your code in markdown code tags:</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="display-line-number">Display line number</h4> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h4 id="display-liquid-template-code-too">Display liquid template code too</h4> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <h4 id="support-mathjax">Support Mathjax</h4> <p>You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. Example: \(E = mc^2\).</p> <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <h2 id="adding-disqus-comments">Adding DISQUS comments.</h2> <p>Turn <code class="language-plaintext highlighter-rouge">disqus_comments: true</code> on at the Front Matter.</p> <h2 id="adding-table-of-contents">Adding table of contents</h2> <p>To add a table of contents to a post, add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h2 id="customized-blockquotes">customized blockquotes</h2> <p>Like below:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="redirecting-to-another-page">Redirecting to another page</h2> <p>Add below in the front matter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redirect: /assets/pdf/example_pdf.pdf
</code></pre></div></div> <h2 id="display-tables-bootstrap-tables">Display tables Bootstrap Tables</h2> <p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="video">Video</h2> <h4 id="it-supports-local-video-files">It supports local video files.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <h4 id="it-does-also-support-embedding-videos-from-different-sources">It does also support embedding videos from different sources.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h2 id="audio">Audio</h2> <p>It supports local and external audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="HTML"/><category term="markdown"/><category term="MD"/><summary type="html"><![CDATA[Markdown was designed for the web, and also easy be read as plaintext. Basically, we need a parser to transfer markdown into HTML. There are many parsers for markdown, like kramdown, Python Markdown, etc. So, they might work differently.]]></summary></entry><entry><title type="html">Introduce Liquid Template</title><link href="https://benwzj.github.io/blog/2023/Liquid-template/" rel="alternate" type="text/html" title="Introduce Liquid Template"/><published>2023-09-19T00:00:00+00:00</published><updated>2023-09-19T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Liquid%20template</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Liquid-template/"><![CDATA[<h2 id="what-is-liquid">What is Liquid</h2> <p>Liquid is an open-source template language integrated. It can be used to add dynamic content to webpages, and to create a wide variety of custom web templates.</p> <p>Liquid uses a combination of <strong>objects</strong>, <strong>tags</strong>, and <strong>filters</strong> inside template files to display dynamic content.</p> <p>It use fileters a lot, for example, using filter to get size of array.</p> <h2 id="what-is-object">What is object</h2> <p>Objects contain the content that Liquid displays on a page. Objects and variables are displayed when enclosed in double curly braces: <code class="language-plaintext highlighter-rouge">{ {</code> and <code class="language-plaintext highlighter-rouge">} }</code>.</p> <p>Liquid objects can be one of six types:</p> <ul> <li>String</li> <li>Number</li> <li>Boolean</li> <li>Nil</li> <li>Array</li> <li>EmptyDrop</li> </ul> <p>You can initialize Liquid variables using assign or capture tags.</p> <h2 id="what-is-tag">What is tag</h2> <p>Tags create the logic and control flow for templates. The curly brace percentage delimiters <code class="language-plaintext highlighter-rouge">{ %</code> and <code class="language-plaintext highlighter-rouge">% }</code> and the text that they surround do not produce any visible output when the template is rendered. This lets you assign variables and create conditions or loops without showing any of the Liquid logic on the page.</p> <h2 id="what-is-filter">What is filter</h2> <p>Filters change the output of a Liquid object or variable. They are used within double curly braces <code class="language-plaintext highlighter-rouge">{ { } }</code> and variable assignment, and are separated by a pipe character <code class="language-plaintext highlighter-rouge">|</code>.</p> <h2 id="arrays-in-liquid">ARRAYS IN LIQUID</h2> <p>The first element of an array is accessed with an index of 0.</p> <p>Always use the “split” filter when you create an array in Liquid or else you’ll not create an array but rather a string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ %- assign example_array =  "value1, value2, value3" | split: ", " -% }

</code></pre></div></div> <ul> <li>Use COMPACT filter to compact an array,</li> <li>Use CONCAT filter to concatenate two arrays.</li> <li>Use FIRST filter to return the first item in an array.</li> <li>Use JOIN filter to combine all of the items in an array into a single string, separated by a space.</li> <li>Use LAST filter to return the last item in an array.</li> <li>Use the MAP filter to create a new array that contains only the specific string and store them in a new array.</li> <li>Use REVERSE filter to reverse the order of the items in an array.</li> <li>Use SIZE filter to return the size of an array.</li> <li>Use SORT filter to sort the items in an array in case-sensitive alphabetical or numerical order.</li> <li>Use SORT NATURAL filter to sort the items in an array in case-insensitive alphabetical order.</li> <li>Use SUM filter to sum all array values and returns the result.</li> </ul>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="Template"/><summary type="html"><![CDATA[What is Liquid]]></summary></entry><entry><title type="html">Introduce MathJax</title><link href="https://benwzj.github.io/blog/2023/Mathjax/" rel="alternate" type="text/html" title="Introduce MathJax"/><published>2023-09-14T00:00:00+00:00</published><updated>2023-09-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Mathjax</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Mathjax/"><![CDATA[<h2 id="what-is-mathjax">What is MathJax</h2> <ul> <li>MathJax is a cross-browser JavaScript library</li> <li>MathJax displays <strong>mathematical notation</strong> in web browsers</li> <li>MathJax uses CSS with web fonts or SVG, instead of bitmap images or Flash</li> <li>MathJax using MathML, LaTeX and ASCIIMathML markup</li> <li>MathJax is highly modular on input and output. Use MathML, TeX, and ASCIImath as input and produce HTML+CSS, SVG, or MathML as output</li> <li>MathJax works with screenreaders &amp; provides expression zoom and interactive exploration. You also can copy equations into Office, LaTeX, wikis, and other software.</li> </ul> <h2 id="what-is-mjx-container">What is mjx-container?</h2> <p>mjx-container is specific style class for MathJax content.</p> <h3 id="example">Example</h3> <p>This will also provide display-mode math with scroll bars if they are too long. If you want to do this only for inline math, then use mjx-container:not([display]) instead.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">mjx-container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-grid</span><span class="p">;</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">overflow-y</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:15em; border: 1px solid; padding: 3px 5px"</span><span class="nt">&gt;</span>
This is some text with a long in-line math expression
\(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\)
that we hope will have a scroll bar!  This math \(x+y+z\) should not.
Long display math also gets a scroll bar:
\[a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\]
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div> <p>just test, make git action is working</p>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="SVG"/><summary type="html"><![CDATA[What is MathJax]]></summary></entry><entry><title type="html">Build your own personal brand</title><link href="https://benwzj.github.io/blog/2023/BuildPersonalBrand/" rel="alternate" type="text/html" title="Build your own personal brand"/><published>2023-08-31T00:00:00+00:00</published><updated>2023-08-31T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/BuildPersonalBrand</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/BuildPersonalBrand/"><![CDATA[<p>Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!</p> <p>What is your persoanl brand? <strong><em>It is your reputation!</em></strong></p> <p>How to build your personal brand? I believe the following advices is good one.</p> <h2 id="1-figure-out-your-goal">#1 Figure out your goal.</h2> <p>What do you want your personal brand to help you accomplish? Are you change job, or transition into a new industry? No matter what it is, Write it down, make it specific so that you are working toward to a clear outcome.</p> <h2 id="2-get-clear-on-what-you-want-to-be-known-for">#2 Get Clear on What you want to be known for.</h2> <p>In another word, How do you want other people to describe you as a professional. No matter what type your professional is, What you need to do is dig deep on What, How and Why behind your work! So that you can make it concrete and <strong>easy to remember</strong>. Just make sure no confusion. Try to think about this:</p> <ul> <li>What are the things that make you unique?</li> <li>Are there specific talents and expertise you’ve acquired?</li> <li>What do you know more about than most people.</li> </ul> <p>Sit down and make a list!</p> <h2 id="3-know-your-audience">#3 Know your Audience.</h2> <p>Who you want to share your personal brand with? <strong>The reality is, your personal brand is not about you! It is about the people you want to educate with the skills, knowledge and value you provide.</strong></p> <p>Who you want to focus on should be based on two things:</p> <ul> <li>The goal of your personal brand and</li> <li>The people who can best benefit from your skills.</li> </ul> <p>Answer this questions:</p> <ul> <li>Who can most gain benefit from your share? and</li> <li>How exactly can you see yourself helping them?</li> </ul> <h2 id="4-creat-a-misson-statement">#4 Creat a Misson statement</h2> <p>Let’s pull all your answers into a <strong>single</strong> mission statement that describe:</p> <ul> <li>Who you are</li> <li>What you do</li> <li>Who you do it for</li> <li>The transformation you create</li> </ul> <p>Let’s make a concrete example (Project manager):</p> <blockquote> <p>My name is Jennifer, I’m a project manager for a sustainable fashion company. I work with teams across different deparments to plan, organize and direct Annovative marketing campaigns that engage customers while also increasing brand loyalty.</p> </blockquote> <p>The mission statement can be very different, depending on your career. But no matter what is it, <strong>Write it down and put it somewhere prominent.</strong> You can use it to make decision about how you speak about yourself when you first meet someone, or to the communities you want to share it with.</p> <h2 id="5-build-your-personal-brand-online">#5 Build your personal brand online</h2> <p>There are two ways to do this online: your own website, and social media.</p> <ul> <li>Website is very professional!</li> <li>Don’t choose too many social media!</li> </ul>]]></content><author><name></name></author><category term="Personal"/><category term="personal"/><category term="career"/><category term="professional"/><summary type="html"><![CDATA[Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!]]></summary></entry><entry><title type="html">Iterable Iterator concept in Python</title><link href="https://benwzj.github.io/blog/2023/Iterable,-Iterator-concept-in-Python/" rel="alternate" type="text/html" title="Iterable Iterator concept in Python"/><published>2023-05-13T00:00:00+00:00</published><updated>2023-05-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/Iterable,%20Iterator%20concept%20in%20Python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/Iterable,-Iterator-concept-in-Python/"><![CDATA[<p><strong>In short:</strong> Iterbale support <strong>iter</strong>, and maintain the data. Iterator support <strong>next</strong>, and reach the data.</p> <h2 id="iterable">Iterable</h2> <h3 id="official-defination">Official defination</h3> <p>Any object that supports <em>iter()</em> and return iterator is said to be “iterable.” example:</p> <ul> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an <strong>iter</strong>() method or with a <strong>getitem</strong>() method that implements sequence semantics are iterables.</li> </ul> <p>Iterables can be used in a for loop and in many other places where a sequence is needed.<br/> built-in function iter(), it returns an iterator for the object.</p> <h2 id="iterator">Iterator</h2> <h3 id="official-definition">Official definition</h3> <p>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: iterator.<strong>iter</strong>() return itself. iterator.<strong>next</strong>() return one data and maintain state.</p> <p><strong>But CPython doesn’t consistently apply</strong></p> <h2 id="iterable-vs-iterator">Iterable vs. Iterator</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <p>An iterable can returns a <strong>fresh</strong> ITERATOR. An iterator can return itself. And iterator also is an object with a <strong>next</strong> method that returns the next value in the iteration and updates the state to point at the next value</p> <h2 id="pure-iterables">Pure iterables</h2> <p>Maybe we can produce a pure iterable concept. Pure iterable typically hold the data itself, and return fresh iterator. In contrast, iterator is not pure iterable that fetch data and return itself.</p> <h2 id="conclusion">Conclusion</h2> <p>Many people say iterators are iterables as well, and iterables don’t have to be iterators. But they also say iterators and iterables are different, like iterators are more effecient in memory consumsion. That is confusing concept. I reckon iterator don’t have to support <strong>iter</strong>(). That means iterator don’t have to be iterable. Just like JavaScript.</p>]]></content><author><name></name></author><category term="Python"/><category term="Iterable"/><category term="Iterator"/><summary type="html"><![CDATA[In short: Iterbale support iter, and maintain the data. Iterator support next, and reach the data.]]></summary></entry><entry><title type="html">How for loop iterate an iterable in Python</title><link href="https://benwzj.github.io/blog/2023/How-for-loop-iterate-an-iterable-in-Python/" rel="alternate" type="text/html" title="How for loop iterate an iterable in Python"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/How%20for%20loop%20iterate%20an%20iterable%20in%20Python</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/How-for-loop-iterate-an-iterable-in-Python/"><![CDATA[<p><strong>In short:</strong> it is a lazy processing.</p> <p>I am going to make two example to display how <em>for…in</em> loop work underneath the cover.<br/> First one is loop over a enumerate object, and second one is loop over a range object. Both of them will modify the list inside the loop.</p> <h1 id="first-example">First example:</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p><strong>There are No error raising for these codes, but they are not work as expected.</strong></p> <p>The code print below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 3, 5, 7, 9]
</code></pre></div></div> <p>enumerate object is generator object which will yield value from <em>lst</em>. It is lazy process. When <em>lst</em> change, <em>value</em> from enumerate object change as well, but <em>i</em> is keep going.</p> <p><strong>for…in is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><strong>enumerate() is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h1 id="second-example">Second example:</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p><strong>This code will raise IndexError</strong></p> <p><em>range()</em> is iterable, but <em>len(lst)</em>, the parameter of <em>range()</em>, have been replace with constant value 10. Because <em>len(lst)</em> is not a lazy process. It don’t change any more. So <em>i</em> will up to 9.</p> <p><strong>The codes are equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[In short: it is a lazy processing.]]></summary></entry><entry><title type="html">Talk about Context in React</title><link href="https://benwzj.github.io/blog/2022/context-react/" rel="alternate" type="text/html" title="Talk about Context in React"/><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2022/context-react</id><content type="html" xml:base="https://benwzj.github.io/blog/2022/context-react/"><![CDATA[<h2 id="what-is-context">What is Context</h2> <p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p> <p>In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application.</p> <h2 id="use-context">Use Context</h2> <p>Usually you create, provide, and consume context, here it is:</p> <p>Firstly, You’ll usually have one file that uses createContext and exports a Provider wrapper:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">createContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Context</span> <span class="o">=</span> <span class="nf">createContext</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Provider</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">({})</span>

  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">state</span><span class="p">,</span>
    <span class="nx">setState</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Context</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Context.Provider</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div> <p>Secondly, you’ll wrap whatever component needs access to the Context state with the Provider:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Context</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConsumingComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./ConsumingComponent</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Page</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Provider</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ConsumingComponent</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now you can consume. the consuming component can use the <code class="language-plaintext highlighter-rouge">useContext</code> hook to access the data:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Context</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Context</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ConsumingComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">state</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useContext</span><span class="p">(</span><span class="nx">Context</span><span class="p">)</span>

  <span class="k">return</span> <span class="kc">null</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">useContext(MyContext)</code> is equivalent to <code class="language-plaintext highlighter-rouge">static contextType = MyContext</code> in a class, or to <code class="language-plaintext highlighter-rouge">&lt;MyContext.Consumer&gt;</code>.</p> <h2 id="use-react-context-system-to-replace-redux">use React Context system to replace Redux</h2> <p>It is not recomment, but you can do something like Redux:</p> <ol> <li>you can create a react component as a store. and use this component to wrap all children component which need to share information inside them.</li> <li>use myContext.Provider in the Store component to wrap children components.</li> <li>design state as object which contain functions. Then children can use function reference to change states.</li> </ol> <p>In a very small application, you might be able to get away with just using Context for most of your global data storage needs, but in a large-scale production environment, you’re likely using Redux for global state management. Redux still provides improved performance, improved debugging capabilities, architectural consistency, the ability to use middleware. Therefore, Context is not a replacement for a proper global state management system.</p> <h2 id="important-caveats">Important Caveats</h2> <p>Context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">MyContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nx">Toolbar</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/MyContext.Provider</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>How to fix it? Using global reference, like state.</p> <h3 id="think-more-before-apply-context">Think more before apply context</h3> <p>We should apply context sparingly because it make components reuse more difficult. If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context. And even render props is another option.</p> <blockquote> <p><strong>Inversion of control</strong>: Using component composition, you can wrap the deepest component as prop, then other components don’t need to know what is passing down. This inversion of control can make your code cleaner.</p> </blockquote>]]></content><author><name></name></author><category term="React"/><category term="Context"/><category term="Redux"/><summary type="html"><![CDATA[What is Context]]></summary></entry><entry><title type="html">Asynchronous Programming in JS</title><link href="https://benwzj.github.io/blog/2021/Asynchronous-js/" rel="alternate" type="text/html" title="Asynchronous Programming in JS"/><published>2021-06-12T00:00:00+00:00</published><updated>2021-06-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2021/Asynchronous-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2021/Asynchronous-js/"><![CDATA[<p>JavaScript is a single thread language. It use event loop to build Asynchronous programming. Callbacks used to be the main way asynchronous functions were implemented in JavaScript. Now Promise is the main one. Check another blogs for callback and promise concepts.</p> <h2 id="asyncawait">async/await</h2> <h3 id="what-is-asyncawait">What is async/await</h3> <p>The async and await keywords make it easier to build an operation from a series of consecutive promises calls, avoiding the need to create explicit promise chains, and allowing you to write code that looks just like synchronous code.</p> <ul> <li> <p>Making it easier to write async code and easier to understand async code.</p> </li> <li> <p>async function is just the syntax sugar, which is build on top of promise. The purpose of async/await is to simplify the syntax necessary to consume promise-based APIs. The behavior of async/await is similar to combining generators and promises.</p> </li> </ul> <h3 id="features">Features</h3> <ul> <li>Async functions always return a promise. If the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">return</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="p">...</span><span class="nx">is</span> <span class="nx">similar</span> <span class="nx">to</span><span class="p">:</span>
<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div> </div> <p>But they are not equivalent. An async function will return a different reference, whereas Promise.resolve returns the same reference if the given value is a promise.</p> </li> <li> <p>async function run synchronously without await. But always run asynchronously with await. await can be put in front of any async promise-base function and pause your code on line until the promise fulfilled, then return the resulting value.</p> </li> <li> <p>Code after each await expression can be thought of as existing in a .then callback.</p> </li> <li> <p>And await only works inside of async function.</p> </li> <li>Promise.protoytype.then() block can be a long chain to promise-base methods. Now we can just add one await keyword before the the methods call. Just like a promise chain, await forces asynchronous operations to be completed in series. The return value forms the final link in the chain.</li> </ul> <h3 id="common-mistake-when-using-asyncawait">Common mistake when using async/await:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">fetchProducts</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://mdn.github.io/products.json</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="s2">`HTTP error: </span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">json</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="nf">fetchProducts</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">json</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">);</span>   <span class="c1">// json is a Promise object, so this will not work</span>
</code></pre></div></div> <p>Changing last two lines will work:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">jsonPromise</span> <span class="o">=</span> <span class="nf">fetchProducts</span><span class="p">();</span>
<span class="c1">// Ben think it should use asyncPromise instead of jsonPromise as variable. </span>
<span class="c1">// The whole async function is a promise. </span>
<span class="nx">jsonPromise</span><span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">json</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">json</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">));</span>
</code></pre></div></div> <p>But we usually use it like follow:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">fetchProducts</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://mdn.github.io/products.json</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="s2">`HTTP error: </span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">json</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="async-functions-and-execution-order">Async functions and execution order</h3> <p>When there are many promise and many await in async function. The execution order will follow the promise.then order. If want parallel the promise, need to use Promise.all().</p> <p>Rewriting a Promise chain with an async function Rewriting a Promise chain with async function will it easier to understand.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getProcessedData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">downloadData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="c1">// returns a promise</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nf">downloadFallbackData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>  <span class="c1">// returns a promise</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nf">processDataInWorker</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>  <span class="c1">// returns a promise</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div> <p>Rewrite to:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">getProcessedData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">downloadData</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">downloadFallbackData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nf">processDataInWorker</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="worker">Worker</h2> <h3 id="what-is-worker">What is Worker</h3> <p>Workers give you the ability to run some tasks in a different thread, so you can start the task, then continue with other processing (such as handling user actions).</p> <ul> <li>Worker is part of APIs which provided by runtime.</li> <li>Worker is wrote by JavaScript. Usually they are in different .js file.</li> <li>Workers and the main code run in completely separate worlds, and only interact by sending each other messages which are received by the other side as message events.</li> <li> <p>Worker can’t access all the APIs that the main application can, and in particular can’t access the DOM.</p> </li> <li>Workers may in turn spawn new workers, as long as those workers are hosted within the same origin as the parent page.</li> <li>In addition, workers may use XMLHttpRequest for network I/O, with the exception that the responseXML and channel attributes on XMLHttpRequest always return null.</li> </ul> <h3 id="using-worker-is-very-simple">Using Worker is very simple</h3> <p>A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread;</p> <p>Basic step:</p> <ol> <li>In main.js var myWorker = new Worker(‘worker.js’); myWorker.postMessage(‘Ali’); myWorker.addEventListener(‘message’, message =&gt; { document.querySelector(‘#output’).textContent = <code class="language-plaintext highlighter-rouge">${message.data}</code>; });</li> <li>In worker.js addEventListener(“message”, message =&gt; { doSometing(message.data); //message.data is ‘Ali’ postMessage(‘Done with Ali’); });</li> </ol> <h3 id="qa">Q&amp;A</h3> <ul> <li>Is worker a part of JavaScript? No, worker is web API. It run outside of the event loop, outside of the JavaScript Runtime.</li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="Call-back"/><category term="Promise"/><category term="Queue"/><category term="Asynchronous"/><summary type="html"><![CDATA[JavaScript is a single thread language. It use event loop to build Asynchronous programming. Callbacks used to be the main way asynchronous functions were implemented in JavaScript. Now Promise is the main one. Check another blogs for callback and promise concepts.]]></summary></entry><entry><title type="html">Understand Promise in JS</title><link href="https://benwzj.github.io/blog/2021/promise-js/" rel="alternate" type="text/html" title="Understand Promise in JS"/><published>2021-06-11T00:00:00+00:00</published><updated>2021-06-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2021/promise-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2021/promise-js/"><![CDATA[<h2 id="what-is-promises">What is Promises</h2> <p>Firstly, Why Promise? It make using callback easier.</p> <p>A promise represents the completion of an asynchronous function. It is an object that might return a value in the future. It accomplishes the same basic goal as a callback function, but with many additional features and a more readable syntax.</p> <h3 id="a-promise-is-in-one-of-these-states">A Promise is in one of these states:</h3> <ul> <li>pending: initial state, and keep in this state untill fulfilled or rejected.</li> <li>fulfilled: meaning that the operation completed successfully.</li> <li>rejected: meaning that the operation failed.</li> </ul> <h3 id="promise-and-thenable">Promise and thenable</h3> <p>“promise” is an object or function with a then method whose behavior conforms to the specification. <a href="https://promisesaplus.com/">“thenable”</a> is an object or function that defines a then method.</p> <p>A promise must provide a then method to access its current or eventual value or reason. A promise’s then method accepts two arguments:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span>
</code></pre></div></div> <p>A Promise is a proxy for a value not necessarily known when the promise is created. The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</p> <h3 id="i-conclude-some-promise-features">I conclude some promise features:</h3> <ul> <li>We can define a Promise as an object that can produce a single value at some time in the future, either a value or the reason why it could not be resolved.</li> <li>A promise is an object returned by an asynchronous function, which represents the current state of the operation.</li> <li>At the time the promise is returned to the caller, the operation often isn’t finished, but the promise object provides methods to handle the eventual success or failure of the operation.</li> <li>A great feature is chaining. Need to have a good understanding of then().</li> <li>Promises are the foundation of asynchronous programming in modern JavaScript.</li> <li>Compare to callback, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.</li> <li>The main tricky thing of promise is that, it can resolve promise with a specific value, or another promise!</li> <li>Promise VS old fashioned Callback, promise have some greater features: <ul> <li>guarantees: A, Callback never call before current run; B, callback added with then(); C, multi callback can be added;</li> <li>chaining: call back can be called one by one by one…</li> <li>chaining after catch: It can be chain after failure. Using catch().then()</li> </ul> </li> </ul> <h2 id="promise-constructor">Promise constructor</h2> <p>The Promise constructor is primarily used to wrap a function and make it as part of promise. Write a promise constructor yourself, it is not what you imagine! The executor behavior is weird. Let’s make it clearer step by step.</p> <p>Promise constructor syntax: <code class="language-plaintext highlighter-rouge">new Promise(executor)</code> You need to Understand executor.</p> <h3 id="what-is-executor">What is executor</h3> <p><code class="language-plaintext highlighter-rouge">executor</code> is a function that is passed with TWO arguments: <strong>resolve function</strong> and <strong>reject function</strong>. This two arguments were passed by <code class="language-plaintext highlighter-rouge">then()</code> function. They can’t be pass by function name or reference directly. The <code class="language-plaintext highlighter-rouge">executor</code> function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). The <code class="language-plaintext highlighter-rouge">executor</code> is executed immediately. But <code class="language-plaintext highlighter-rouge">resolve</code> or <code class="language-plaintext highlighter-rouge">reject</code> function was not executed at the moment (because they still not pass in). All other code will executed.</p> <h3 id="some-main-points-about-executor">Some main points about executor:</h3> <ul> <li>If there are more than one resolve handler, it just queue the first one.</li> <li>About the executor, it’s important to understand the following: <ol> <li>The executor return value is ignored.</li> <li>If an error is thrown in the executor, the promise is rejected.</li> </ol> </li> </ul> <h3 id="why-second-and-third-time-of-resolve-are-missing-in-below-code">Why ‘second and third time of resolve’ are missing in below code?</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">start</span> <span class="k">of</span> <span class="nx">executor</span><span class="dl">'</span><span class="s1">)
  resolve (</span><span class="dl">'</span><span class="nx">first</span> <span class="nx">time</span> <span class="k">of</span> <span class="nx">resolve</span><span class="dl">'</span><span class="s1">);
  resolve (</span><span class="dl">'</span><span class="nx">second</span> <span class="nx">time</span> <span class="k">of</span> <span class="nx">resolve</span><span class="dl">'</span><span class="s1">);
  setTimeout(() =&gt; {
    resolve(</span><span class="dl">'</span><span class="nx">third</span> <span class="nx">time</span> <span class="k">of</span> <span class="nx">resolve</span><span class="dl">'</span><span class="s1">);
  }, 1000);
  console.log(</span><span class="dl">'</span><span class="nx">end</span> <span class="k">of</span> <span class="nx">executor</span><span class="dl">'</span><span class="s1">)
});

promise1.then((value) =&gt; {
  console.log(value);
});

&gt; "start of executor"
&gt; "end of executor"
&gt; "first time of resolve"
</span></code></pre></div></div> <p>Because there is mechanism by which the code within the executor has effect is as follows:</p> <ol> <li>At the time when the constructor generates the new Promise object, it also generates a corresponding pair of functions for resolutionFunc and rejectionFunc; these are “tethered” to the Promise object.</li> <li>The code within the executor has the opportunity to perform some operation and then reflect the operation’s outcome (if the value is not another Promise object) as either “resolved” or “rejected”, by terminating with an invocation of either the resolutionFunc or the rejectionFunc, respectively.</li> <li>In other words, the code within the executor communicates via the side effect caused by resolutionFunc or rejectionFunc. The side effect is that the Promise object either becomes “resolved”, or “rejected”.</li> </ol> <p>Briefly, what executor do is,</p> <ol> <li>tether two function with the created promise object.</li> <li>have opportunity to perform operation and to reflect outcome as resolved or rejected.</li> </ol> <h3 id="but-why-this-one-run-like-this">But why this one run like this…</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Let</span> <span class="nx">prom</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">resolved now</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">this is ending</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
  <span class="p">});</span>
<span class="nx">prom</span><span class="p">.</span><span class="nf">then </span><span class="p">(</span><span class="nx">message</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">message</span><span class="p">));</span>
<span class="o">&gt;</span> <span class="k">this</span> <span class="nx">is</span> <span class="nx">ending</span>
<span class="o">&gt;</span> <span class="nx">resolved</span> <span class="nx">now</span>
</code></pre></div></div> <h3 id="summary-of-the-executor-typical-flow">Summary of the executor typical flow:</h3> <p>1, The operation within executor is asynchronous and provides a callback. 2, The callback is defined within the executor code. 3, The callback terminates by invoking resolutionFunc. 4, The invocation of resolutionFunc includes a value parameter. 5, The value is passed back to the tethered Promise object. 6, The Promise object (asynchronously) invokes any associated .then(handleResolved). 7, The value received by .then(handleResolved) is passed to the invocation of handleResolved as an input parameter.</p> <h3 id="executor-return-value">Executor return value</h3> <p>When called via new, the Promise constructor returns a promise object.</p> <ul> <li>The promise object will become “resolved” when either of the functions resolutionFunc or rejectionFunc are invoked.</li> <li>Note that if you call resolutionFunc or rejectionFunc inside of the executor and pass another Promise object as an argument, you can say that it is “resolved”, but still cannot be said to be “settled”.</li> </ul> <p>The executor normally initiates some asynchronous work, and then, once that completes, either calls the resolutionFunc to resolve the promise or call rejectionFunc to reject. (no matter which one you invoke, after the invocation, the executor terminated. You can just call one of them!)</p> <h3 id="basic-sample">Basic Sample:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myFirstPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something asynchronous which eventually calls either:</span>
  <span class="c1">//</span>
  <span class="c1">//   resolve(someValue)        // fulfilled</span>
  <span class="c1">// or</span>
  <span class="c1">//   reject("failure reason")  // rejected</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="simple-basic-example">Simple basic example:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Let</span> <span class="nx">prom</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">resolved now</span><span class="dl">"</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">this is ending</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
  <span class="p">});</span>
<span class="nx">prom</span><span class="p">.</span><span class="nf">then </span><span class="p">(</span><span class="nx">message</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">message</span><span class="p">));</span>
<span class="o">&gt;</span> <span class="k">this</span> <span class="nx">is</span> <span class="nx">ending</span>
<span class="o">&gt;</span> <span class="nx">resolved</span> <span class="nx">now</span>
</code></pre></div></div> <h3 id="provide-a-function-with-promise-functionality-have-it-return-a-promise">Provide a function with promise functionality, have it return a promise:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">myAsyncFunction</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Return</span> <span class="k">new</span> <span class="nc">Promise </span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">()</span> 
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> 
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span> 
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">)</span> 
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">()</span> 
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="understand-then">Understand then()</h2> <p>(<code class="language-plaintext highlighter-rouge">Promise.prototype.then()</code> is the <strong>core</strong> function of promise. )</p> <p><code class="language-plaintext highlighter-rouge">then()</code> itself returns a promise, which will be completed with the result of the handler function that was passed to it.</p> <p>It takes up to two arguments: callback functions for the success and failure cases of the Promise. And each callback function has a input argument! Syntax:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">p</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// fulfillment</span>
<span class="p">},</span> <span class="nx">reason</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// rejection</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="rule-of-returned-value-from-handler-function">Rule of returned value from handler function</h3> <p>When a value is returned from within a then handler, it will effectively return <code class="language-plaintext highlighter-rouge">Promise.resolve(&lt;value returned by whichever handler was called&gt;)</code>.</p> <p>There is a specific set of rules: if handler …</p> <ul> <li>returns a value, the promise returned by then gets resolved with the returned value as its value.</li> <li>returns another pending promise object, the resolution/rejection of the promise returned by then will be subsequent to the resolution/rejection of the promise returned by the handler. Also, the resolved value of the promise returned by then will be the same as the resolved value of the promise returned by the handler.</li> <li>returns an already fulfilled promise, the promise returned by then gets fulfilled with that promise’s value as its value.</li> <li>returns an already rejected promise, the promise returned by then gets rejected with that promise’s value as its value.</li> <li>doesn’t return anything, the promise returned by then gets resolved with an undefined value.</li> <li>throws an error, the promise returned by then gets rejected with the thrown error as its value.</li> </ul> <h2 id="promise-terminology">Promise terminology</h2> <p>Terminologies include <strong>pending</strong>; <strong>fulfilled</strong>; <strong>rejected, settled, resolved</strong>.</p> <p>This Promise terminology is come from this Wonderful Blog: <a href="https://thenewtoys.dev/blog/2021/02/08/lets-talk-about-how-to-talk-about-promises/">Let’s talk about how to talk about promises</a>.</p> <p>A promises’s primary <strong><em>state</em></strong> is one of three mutually-exclusive values:</p> <ul> <li><strong>pending</strong> - the initial state of most promises, it hasn’t been fulfilled or rejected</li> <li><strong>fulfilled</strong> - the promise has been fulfilled with a fulfillment value</li> <li><strong>rejected</strong> - the promise has been rejected with a rejection reason (saying why the promise can’t be fulfilled)</li> </ul> <p><strong>“settled”</strong> is the collective term which means <strong>“fulfilled or rejected.”</strong>. Till now we know pending, fulfilled, rejected, settled. And they are easy to understand. But How about <strong>“resolved”</strong>.</p> <h3 id="what-is-resolved">What is “resolved”.</h3> <p>When you resolve a promise, you determine what will happen to that promise from then on. <strong><em>“resolved”</em></strong> is NOT a state of a promise.</p> <p>When you resolve a promise with something like <code class="language-plaintext highlighter-rouge">42</code> or <code class="language-plaintext highlighter-rouge">"answer"</code> or <code class="language-plaintext highlighter-rouge">{"example": "result"}</code>, yes, you do fulfill the promise with that value. But if you resolve your promise to another promise (or more generally a thenable), you’re telling your promise to follow that other promise and do what it does:</p> <ul> <li>If the other promise is fulfilled, your original promise will fulfill itself with the other promise’s fulfillment value</li> <li>If the other promise is rejected, your original promise will reject itself with the other promise’s rejection reason</li> <li>If the other promise never settles, your original promise won’t either</li> </ul> <p>Regardless of what happens, though, there’s nothing further you can do to the promise to affect the outcome. The promise is resolved to the other promise, irrevocably. Any attempt to resolve it again, or to reject it, will have no effect.</p> <p>Now I try to make it simple to remember: A promise is resolved if it is settled, <strong>OR</strong> if it has been “locked in” to follow the state of another promise. So, it is contrary to popular belief, resolving a promise doesn’t necessarily change its primary state. In fact, it often doesn’t. Promise resolution is a separate concept from promise fulfillment.</p> <h3 id="why-use-the-word-resolved-when-things-are-still-up-in-the-air">“Why use the word ‘resolved’ when things are still up in the air?”</h3> <p>It’s because of the irrevocability: once a promise is resolved, nothing can change what’s going to happen to it. If it’s resolved with a non-promise value, it’s fulfilled with that value and that’s that. If it’s resolved to a promise, it’s going to follow that other promise and that’s that. You can’t change its resolution, or reject it directly.</p> <h3 id="three-ways-to-resolve-a-promise">Three ways to resolve a promise</h3> <ol> <li>calling the resolve function you get from new Promise and</li> <li>returning a value from a promise handler callback.</li> <li>A third way you resolve a promise is by using Promise.resolve. Promise.resolve creates a promise that’s resolved to what you pass into it. One of its primary use cases is where you don’t know what you’re going to receive — a native promise, a non-native promise from a library like Q or jQuery, a thenable, or a non-thenable value. By passing any those through Promise.resolve and consuming the resulting promise, you can treat them all the same way: <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
<span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="c1">// ...</span>
<span class="p">})</span>
</code></pre></div> </div> <h3 id="understand-what-does-the-following-code-mean-step-by-step">Understand what does the following code mean step by step</h3> <p>(assuming first() and second return will return promise):</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">doStuff</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">return</span> <span class="nf">first</span><span class="p">()</span>
 <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">firstResult</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nf">second</span><span class="p">(</span><span class="nx">firstResult</span><span class="p">);</span>
 <span class="p">});</span>
<span class="p">}</span>
<span class="c1">// ...</span>
<span class="nf">doStuff</span><span class="p">()</span>
<span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="c1">// ...use `result`...</span>
<span class="p">});</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="c1">// ...handle/report error...</span>
<span class="p">});</span>
</code></pre></div> </div> </li> <li>When you call doStuff, it calls first which creates and returns a promise (Promise A).</li> <li>When you call then on that promise, then creates and returns another promise, the one that doStuff returns (Promise B).</li> <li>Let’s assume that at some point, the promise from first is fulfilled. The fulfillment handler in doStuff calls second with that fulfillment value and returns the promise second gives it (Promise C). That resolves Promise B to Promise C. From that point forward, Promise B follows Promise C and does what it does.</li> </ol> <h3 id="understand-the-async-code-same-issue-with-above-code">Understand the async code, same issue with above code:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">doStuff</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">firstResult</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">first</span><span class="p">();</span>
    <span class="k">return</span> <span class="nf">second</span><span class="p">(</span><span class="nx">firstResult</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>If the promise from first is fulfilled, doStuff calls second and then resolves its promise to the promise second returns. At that point, until/unless second’s promise is settled, the promise from doStuff is both pending and resolved. It will fulfill itself, or reject itself, when/if second’s promise settles.</p> <h2 id="promise-and-event-loop">Promise and event loop</h2> <p>No Surprise, Promise use event loop, callback queue!</p> <p>First, Adding some concepts: there are microtasks and macrotasks in JS. And there are microtask queue and macrotask queue in JS. <strong>Callbacks</strong> of Promise objects will be microtasks.</p> <ul> <li> <p>The macrotasks, or just call tasks, which is any JavaScript scheduled to be run by the standard mechanisms such as initially starting to execute a program, an event triggering a callback, and so forth. Other than by using events (like onClick), you can enqueue a task by using setTimeout() or setInterval().</p> </li> <li> <p>The microtasks, which are programmed for things that should happen immediately after the script that is currently running, such as performing something asynchronous without supporting the penalty of creating a new macrotask. These microtasks are glued into the microtask queue which is processed after the macrotasks and at the end of the execution of each macrotask provided there is no Javascript running. Among the microtask are the callbacks of Promise objects. If we add new microtasks to microtask queue during the execution of the microtasks, they are also executed.</p> </li> </ul> <p>As a corollary of this sequence we could say that two macrotasks cannot be executed one after the other if, in between, the microtasks tail has elements.</p> <h3 id="example">example:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>   
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">timeout); 
}, 0);
Promise.resolve()
  .then(function() {   
    console.log(</span><span class="dl">'</span><span class="nx">promise</span><span class="dl">'</span><span class="s1">); 
  })
console.log(</span><span class="dl">'</span><span class="nx">start</span><span class="dl">'</span><span class="s1">);
// start
// promise
// timeout
</span></code></pre></div></div> <p>Why promise run before timeout, because the script itself is treated as a macrotask so that at the end the enqueued microtasks are executed.</p> <h3 id="task-vs-microtask">task vs. microtask</h3> <p>The difference between the task queue and the microtask queue is simple but very important:</p> <ul> <li>When executing tasks from the task queue, the runtime executes each task that is in the queue at the moment a new iteration of the event loop begins. Tasks added to the queue after the iteration begins will not run until the next iteration.</li> <li>Each time a task exits, and the execution context stack is empty, each microtask in the microtask queue is executed, one after another. The difference is that execution of microtasks continues until the queue is empty—even if new ones are scheduled in the interim. In other words, microtasks can enqueue new microtasks and those new microtasks will execute before the next task begins to run, and before the end of the current event loop iteration.</li> </ul> <h2 id="promise-methods">Promise methods</h2> <h3 id="promiseresolvevalue">Promise.resolve(value)</h3> <p>Promise.resolve(value) returns a promise object, and the object is resolved with a given value:</p> <ol> <li>if value is a promise, exact the same promise is returned;</li> <li>if value is a thenable, the return promise will follow that thenable, adopting its eventual state;</li> <li>otherwise, the return promise will be fulfilled with the value. <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">Success</span><span class="dl">'</span><span class="p">).</span><span class="nf">then </span><span class="p">(</span>
 <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// "Success"</span>
 <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// not called</span>
<span class="p">}</span>
<span class="p">);</span>
</code></pre></div> </div> <p>Why we need Promise.resolve?</p> </li> <li> <p>This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.</p> </li> <li>turn thenable (i.e. has a “then” method) object into Promise, the returned promise will “follow” that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Resolving a thenable object</span>
<span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">({</span> 
 <span class="na">then</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">onFulfill</span><span class="p">,</span> <span class="nx">onReject</span><span class="p">)</span> <span class="p">{</span> <span class="nf">onFulfill</span><span class="p">(</span><span class="dl">'</span><span class="s1">fulfilled!</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nb">Promise</span><span class="p">)</span> <span class="c1">// true, object casted to a Promise</span>
</code></pre></div> </div> </li> </ol> <p>Promise constructor vs. Promise.resolve.</p> <ul> <li>They all return a promise.</li> <li>resolve() in following is in event queue. <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">().</span><span class="nf">then </span><span class="p">(</span><span class="nx">resolve</span><span class="p">);</span> <span class="c1">// this resolve will be put in microtask event queue.</span>
</code></pre></div> </div> </li> <li>In constructor, the executor is called before the Promise constructor even returns the created object. <strong>That means if you call resolve() directly in executor, the resolve() ignite synchronously.</strong> Oh no, it is wrong, that is tricky: executor is executed, except the resolve()! even you call resolve() directly. Resolve() is not ignite until .then(). It looks be put in microtask as well.</li> </ul> <h3 id="promiseprototypecatch">Promise.prototype.catch()</h3> <p>In practice, it is often desirable to catch rejected promises rather than use then’s two case syntax:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">()</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Makes .then() return a rejected promise</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Oh no!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">onRejected function called: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">I am always called even if the prior then's promise rejects</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});.</span>
</code></pre></div></div> <p>in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)).</p> <h3 id="promiseall">Promise.all()</h3> <p>Sometimes you need all the promises to be fulfilled, but they don’t depend on each other. In a case like that it’s much more efficient to start them all off together, then be notified when they have all fulfilled. The Promise.all() method is what you need here. It takes an array of promises, and returns a single promise.</p> <p>The promise returned by Promise.all() is:</p> <ul> <li>fulfilled when and if all the promises in the array are fulfilled. In this case the then() handler is called with an array of all the responses, in the same order that the promises were passed into all()</li> <li>rejected when and if any of the promises in the array are rejected. In this case the catch() handler is called with the error thrown by the promise that rejected.</li> </ul> <h3 id="promiseany">Promise.any()</h3> <p>Sometimes you might need any one of a set of promises to be fulfilled, and don’t care which one. In that case you want Promise.any().</p> <h3 id="promisereject">Promise.reject()</h3> <p>is similar with Promise.resolve(). Returning a promise object which then() function just activate reject parameter.</p> <h3 id="promiserace">Promise.race()</h3> <ul> <li>It’s parameter is An iterable object, such as an Array.</li> <li>Return value A pending Promise that asynchronously yields the value of the first promise in the given iterable to fulfill or reject.</li> <li>example: <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="dl">'</span><span class="s1">one</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="kd">const</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="dl">'</span><span class="s1">two</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nb">Promise</span><span class="p">.</span><span class="nf">race</span><span class="p">([</span><span class="nx">promise1</span><span class="p">,</span> <span class="nx">promise2</span><span class="p">]).</span><span class="nf">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// expected output: "two" ; Both resolve, but promise2 is faster</span>
<span class="p">});</span>
</code></pre></div> </div> </li> </ul> <h2 id="promise-conclusion">Promise conclusion</h2> <ul> <li>Understand promise is a object. This object wraps the async code which still not completed when the object was created. The object provide callback functions handler which tethered with the async code.</li> <li>If you resolved promise A to promise B, then A follows B and does what it does. (actually at this point, promise A === promise B)</li> <li>One great feature of Promise is chaining. Simple promise chains are best kept flat without nesting, as nesting can be a result of careless composition.(But nesting limits the scope of inner error handlers, help catch error precisely)</li> <li>Promise constructor’s executor is a specific function, it works in different way from normal function.</li> <li> <p>The passed-in function of the promise is put on microtasks queu, which means it runs later (only after the function which created it exits, and when the JavaScript execution stack is empty), just before control is returned to the event loop;</p> </li> <li>Usually, in our daily promise usage is consume promise.</li> <li>Using Promise constructor to implement promise.</li> <li>Miscrotask queue is the underneath support of promise. It enqueue all promise callbacks to miscrotask queue.</li> </ul> <h2 id="fqa">FQA</h2> <h3 id="what-is-the-relationship-between-asynchronous-programming-and-event-loop">What is the relationship between asynchronous programming and event loop.</h3> <p>In JavaScript, all asynchronous programming is running with event loop. They are using either macrotask queue or microtask queue. For example, setTimeout() is using macrotask. Promise is using microtask.</p> <h3 id="why-promise-can-solve-callback-hell-problem">Why promise can solve callback hell problem?</h3> <p>promise chaining can flat ever-increasing levels of indentation when we need to make consecutive asynchronous function calls.</p> <h3 id="callbacks-vs-event-loop">callbacks vs. event loop?</h3> <p>If the callbacks don’t use event loop and callback queue, they are just synchronous. Your callback functions run in the same thread of your main function. For example defines two functions in JS and pass one function as parameter to another function and run. This kind of callback is synchronous. When your callbacks is APIs and run in other thread and it will setup your callback function into callback queue and event loop. Then it is async.</p> <h3 id="what-is-the-thenable-object">What is the thenable object</h3> <p>usually refer to the thenable object. Looks like:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="nl">then</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{...}</span> 
<span class="p">}</span>
</code></pre></div></div> <p>just like the then function.</p> <blockquote class="block-warning"> <p>Pay attention to thenable fucntion ‘s parameters: TWO of them: first one is success, second one is fail. Just like the constructor : new Promise(executor)</p> </blockquote> <p>Example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Promise.resolve() cast thenable object into a promise.</span>
<span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">({</span> 
  <span class="na">then</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">onFulfill</span><span class="p">,</span> <span class="nx">onReject</span><span class="p">)</span> <span class="p">{</span> <span class="nf">onFulfill</span><span class="p">(</span><span class="dl">'</span><span class="s1">fulfilled!</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nb">Promise</span><span class="p">)</span> <span class="c1">// true, object casted to a Promise</span>
		
<span class="c1">// this promise object's then () function works following thenable object:</span>
<span class="nx">p1</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span> <span class="c1">// "fulfilled!"</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// not called</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="promise-and-settimeout-which-first-promise-why">Promise and setTimeout, which first? promise! why?</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Timeout</span><span class="dl">'</span><span class="p">)},</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">promise</span><span class="dl">'</span><span class="p">).</span><span class="nf">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span> <span class="dl">'</span><span class="s1">now</span><span class="dl">'</span> <span class="p">);</span>
<span class="c1">// get: </span>
<span class="o">&gt;</span> <span class="dl">"</span><span class="s2">now</span><span class="dl">"</span>
<span class="o">&gt;</span> <span class="dl">"</span><span class="s2">promise</span><span class="dl">"</span>
<span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Timeout</span><span class="dl">"</span>
</code></pre></div></div> <h3 id="did-you-know">Did you know…</h3> <ul> <li>that “fulfilling” a promise and “resolving” a promise aren’t the same thing?</li> <li>that a promise can be both “pending” and “resolved” at the same time?</li> <li>that lots of your code is creating these pending resolved promises?</li> <li>that when you resolve a promise you might be rejecting it rather than fulfilling it (or neither)?</li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="Promise"/><category term="Asynchronous"/><summary type="html"><![CDATA[What is Promises]]></summary></entry></feed>