<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-22T10:53:28+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Joins and Subqueries in SQL</title><link href="https://benwzj.github.io/blog/2024/sql-joint-subquery/" rel="alternate" type="text/html" title="Joins and Subqueries in SQL"/><published>2024-11-21T00:00:00+00:00</published><updated>2024-11-21T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/sql-joint-subquery</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/sql-joint-subquery/"><![CDATA[<h2 id="understand-joins">Understand Joins</h2> <p>Joins clause in SQL used to combine records from two or more tables. These tables are linked through common fields, and a join operation fetches data based on specified conditions.</p> <p>Joins can be of various types. Here’s a brief overview:</p> <ul> <li>INNER JOIN: Returns only the rows that have matching values in both tables.</li> <li>OUTER JOIN: Returns all rows from both tables, including unmatched rows.</li> <li>LEFT(OUTER) JOIN: Returns all records from the left table, and the matched records from the right table</li> <li>RIGHT(OUTER) JOIN: Returns all records from the right table, and the matched records from the left table</li> <li>CROSS JOIN: Produces a Cartesian product of the two tables, resulting in a combination of all rows.</li> </ul> <p>This Figures do a good job on showing the difference:</p> <figure> <picture> <img src="/assets/img/sql-joins.webp" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Joins are specified in the FROM clause of a query and can significantly enhance the efficiency of data retrieval. They are essential for fetching data from multiple tables based on relationships.</p> <p>Usually we just use INNER JOIN and LEFT(OUTER) JOIN.</p> <h3 id="the-inner-join-usually-can-be-written-without-join-keyword">The INNER JOIN usually can be written without JOIN keyword:</h3> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderID</span><span class="p">,</span> <span class="n">Customers</span><span class="p">.</span><span class="n">CustomerName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderDate</span>
<span class="k">FROM</span> <span class="n">Orders</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Customers</span> <span class="k">ON</span> <span class="n">Orders</span><span class="p">.</span><span class="n">CustomerID</span><span class="o">=</span><span class="n">Customers</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">;</span>
</code></pre></div></div> <p>same with:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderID</span><span class="p">,</span> <span class="n">Customers</span><span class="p">.</span><span class="n">CustomerName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderDate</span>
<span class="k">FROM</span> <span class="n">Orders</span><span class="p">,</span> <span class="n">Customers</span>
<span class="k">where</span> <span class="n">Orders</span><span class="p">.</span><span class="n">CustomerID</span><span class="o">=</span><span class="n">Customers</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">;</span>
</code></pre></div></div> <h3 id="understand-full-join">Understand Full Join</h3> <p>Full join means list all rows in tow table, if the rows meet condition, then join them together. But some popular DB like MySQL does not support the FULL OUTER JOIN syntax.</p> <h3 id="what-is-self-join">What is self join</h3> <p>A self join is a regular join, but the table is joined with itself.</p> <p>The following SQL statement matches customers that are from the same city:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">A</span><span class="p">.</span><span class="n">CustomerName</span> <span class="k">AS</span> <span class="n">CustomerName1</span><span class="p">,</span> <span class="n">B</span><span class="p">.</span><span class="n">CustomerName</span> <span class="k">AS</span> <span class="n">CustomerName2</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span>
<span class="k">FROM</span> <span class="n">Customers</span> <span class="n">A</span><span class="p">,</span> <span class="n">Customers</span> <span class="n">B</span>
<span class="k">WHERE</span> <span class="n">A</span><span class="p">.</span><span class="n">CustomerID</span> <span class="o">&lt;&gt;</span> <span class="n">B</span><span class="p">.</span><span class="n">CustomerID</span>
<span class="k">AND</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">City</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span><span class="p">;</span>
</code></pre></div></div> <h2 id="what-is-a-subquery">What is a Subquery</h2> <p>A Subquery, also known as an Inner query or Nested query, is a query nested within another SQL query. It is enclosed within the WHERE clause and serves various purposes, such as filtering rows, calculating values, or retrieving data conditionally. Subqueries can be used in conjunction with SELECT, INSERT, UPDATE, DELETE, or CREATE VIEW statements.</p> <h2 id="joins-vs-subqueries">JOINs vs Subqueries</h2> <p>Usually, Subqueries are the logically correct way to solve problems. Subqueries are more readable than JOINs. However, it always comes down to performance. Although optimisers are getting better, in most cases JOINs are faster than subqueries.</p> <p>Important factors:</p> <ul> <li>There are different DBMSs</li> <li>Size matters</li> <li>There are different forms of sub-queries</li> </ul> <p>Historically, explicit joins usually win, hence the established wisdom that joins are better, but optimisers are getting better all the time, and so I prefer to write queries first in a logically coherent way, and then restructure if performance constraints warrant this.</p> <h3 id="how-dbms-process-sql-query">How DBMS process SQL query</h3> <p>The journey of an SQL query starts with parsing and tokenization, where the query is broken down into individual elements such as keywords (e.g., SELECT, FROM, WHERE) and operators (e.g., =, &gt;, &lt;). Following this, the database management system (DBMS) analyzes the query to devise optimal execution plans for data retrieval. With the execution plan in place, the DBMS begins the process of data retrieval. If the query involves multiple tables, the DBMS performs join operations to combine the relevant data. Subsequently, filtering conditions specified in the WHERE clause are applied to assess each row’s eligibility based on user-defined criteria. Additionally, common aggregation functions like SUM, MIN, MAX, AVG are utilized to perform calculations on grouped data. Upon completion of these operations, the DBMS generates the final result set, culminating the query execution process.</p> <figure> <picture> <img src="/assets/img/sql-process.webp" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Join operations are seamlessly integrated within the query execution steps. However, when using a subquery, the process involves executing the entire inner query first. Afterward, the table generated from this query is utilized in the WHERE clause to execute the outer query. This fundamental difference underscores why joins are favored over subqueries, particularly when dealing with large volumes of data. Sometimes, though, subqueries are preferred over joins when dealing with smaller datasets or when the complexity of the data requires it, mainly because they offer easier readability.</p> <h2 id="references">References</h2> <ul> <li>w3schools: <a href="https://www.w3schools.com/sql/sql_join.asp">SQL Join Doc</a></li> <li>stackoverflow topic: <a href="https://stackoverflow.com/questions/2577174/join-vs-sub-query">join-vs-sub-query</a></li> </ul>]]></content><author><name></name></author><category term="Database"/><category term="SQL"/><category term="Database"/><summary type="html"><![CDATA[Understand Joins]]></summary></entry><entry><title type="html">Next.js Caching introduction</title><link href="https://benwzj.github.io/blog/2024/nextjs-cache/" rel="alternate" type="text/html" title="Next.js Caching introduction"/><published>2024-10-22T00:00:00+00:00</published><updated>2024-10-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-cache</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-cache/"><![CDATA[<h2 id="caching-overview">Caching Overview</h2> <p>Next.js is a framework, it provide the whole cache solusion. It use React Cache machinisum, also it provide it own machinisum. Basically it can be divided into 4 categories: There are 4 different caching mechanisms:</p> <ul> <li>Request Memoization: based on React extand <code class="language-plaintext highlighter-rouge">fetch</code> function</li> <li>Data Cache: based on Next.js extand <code class="language-plaintext highlighter-rouge">fetch</code> function</li> <li>Full Route Cache: Next.js prepare this at <strong>Build-Time</strong>, at Sever-side</li> <li>Client-side Router Cache: Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to at Client side. Simply say using <code class="language-plaintext highlighter-rouge">&lt;link/&gt;</code></li> </ul> <h2 id="some-concepts">Some Concepts</h2> <ul> <li><code class="language-plaintext highlighter-rouge">fetch</code> API</li> <li>React cache</li> <li>Next.js <code class="language-plaintext highlighter-rouge">unstable_cache</code></li> <li>Server Rendering Strategies <ul> <li><strong>Static Rendering (Default)</strong>: With Static Rendering, routes are rendered at build time, or in the background after data revalidation. The result is cached and can be pushed to a Content Delivery Network (CDN).</li> <li><strong>Dynamic Rendering</strong>: With Dynamic Rendering, routes are rendered for each user at request time. During rendering, if a <em>Dynamic API</em> or <em>uncached data</em> request is discovered, Next.js will <em>switch</em> to dynamically rendering the whole route.</li> <li><strong>Streaming</strong>: Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.</li> <li>As a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when to <strong>cache</strong> or <strong>revalidate</strong> specific data, and you may choose to stream parts of your UI.</li> <li>Dynamic APIs: like <code class="language-plaintext highlighter-rouge">cookies</code>, <code class="language-plaintext highlighter-rouge">headers</code>, or reading the incoming <code class="language-plaintext highlighter-rouge">searchParams</code> from the page props etc. which will automatically make the page render dynamically.</li> </ul> </li> <li>RSC Payload and data are cached separately.</li> </ul> <h2 id="nextjs-caching-foundation">Next.js Caching Foundation</h2> <p>If you use <code class="language-plaintext highlighter-rouge">next dev</code> to run the application. it won’t cache the response. But when you run a production build by using <code class="language-plaintext highlighter-rouge">next build</code>, even for the server components, they will be revaluated during the build, and they will be set to be prerendered by default. (The same thing is applied for route handler.)</p> <p>It can switch to Dynamic Rendering if a <code class="language-plaintext highlighter-rouge">Dynamic API</code> or <code class="language-plaintext highlighter-rouge">uncached data</code> request is discovered.</p> <p>APIs and data caching affect whether a route is statically or dynamically rendered:</p> <figure> <picture> <img src="/assets/img/sever-rendering-switch.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="example-of-using-caching-when-fetching">Example of Using Caching when fetching</h2> <h3 id="fetching-data-on-the-server-with-the-fetch-api">Fetching data on the server with the fetch API</h3> <p>If you are using <code class="language-plaintext highlighter-rouge">fetch</code>, <code class="language-plaintext highlighter-rouge">requests</code> are automatically memoized. This means you can safely call the same URL with the same options, and only one <code class="language-plaintext highlighter-rouge">request</code> will be made. The response from fetch will be automatically cached: <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog')</code> If you do not want to cache the response from fetch, you can do the following: <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog', { cache: 'no-store' })</code></p> <h3 id="caching-data-with-an-orm-or-database">Caching data with an ORM or Database</h3> <p>You can use the <code class="language-plaintext highlighter-rouge">unstable_cache</code> API to cache the response to allow pages to be prerendered when running <code class="language-plaintext highlighter-rouge">next build</code>.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">unstable_cache</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/cache</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">db</span><span class="p">,</span> <span class="nx">posts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/lib/db</span><span class="dl">'</span>
 
<span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="nf">unstable_cache</span><span class="p">(</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nf">select</span><span class="p">().</span><span class="k">from</span><span class="p">(</span><span class="nx">posts</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">{</span> <span class="na">revalidate</span><span class="p">:</span> <span class="mi">3600</span><span class="p">,</span> <span class="na">tags</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>
<span class="p">)</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">allPosts</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getPosts</span><span class="p">()</span>
 
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">allPosts</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">post</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tag posts which can then be invalidated with Incremental Static Regeneration.</p> <h2 id="in-depth-look">In-depth Look</h2> <p>There are 4 different caching mechanisms:</p> <ul> <li>Request Memoization</li> <li>Data Cache</li> <li>Full Route Cache</li> <li>Client-side Router Cache</li> </ul> <p>And they will interact with each other.</p> <p>Here’s a high-level overview:</p> <figure> <picture> <img src="/assets/img/caching-overview.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <blockquote> <p>By default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes are statically rendered and data requests are cached unless you opt out.</p> </blockquote> <h3 id="request-memoization">Request Memoization</h3> <p>This is a React feature, not a Next.js feature. React extends the <code class="language-plaintext highlighter-rouge">fetch</code> API to automatically memoize requests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once.</p> <p>The memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it.</p> <h3 id="data-cache">Data Cache</h3> <p>Next.js has a built-in Data Cache that persists the result of data fetches across incoming server requests and deployments. This is possible because Next.js extends the native <code class="language-plaintext highlighter-rouge">fetch</code> API to allow each request on the <strong>server</strong> to set its own persistent caching semantics.</p> <blockquote> <p>Good to know: In the browser, the <code class="language-plaintext highlighter-rouge">cache</code> option of <code class="language-plaintext highlighter-rouge">fetch</code> indicates how a request will interact with the browser’s HTTP cache, in Next.js, the <code class="language-plaintext highlighter-rouge">cache</code> option indicates how a server-side request will interact with the server’s Data Cache.</p> </blockquote> <p>The Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out.</p> <ul> <li>revalidate: <ul> <li>Time-based Revalidation: <code class="language-plaintext highlighter-rouge">fetch('https://api.example.app/blog', { next: { revalidate: 3600 } })</code></li> <li>On-demand Revalidation: Data can be revalidated on-demand by path (<code class="language-plaintext highlighter-rouge">revalidatePath</code>) or by cache tag (<code class="language-plaintext highlighter-rouge">revalidateTag</code>).</li> </ul> </li> <li>opt-out: using <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog', { cache: 'no-store' })</code>.</li> </ul> <h4 id="other-than-fetch">Other than fetch</h4> <p>If you are fetch data at server side or using 3rd party lib, you can use <code class="language-plaintext highlighter-rouge">unstable_cache</code> function.</p> <h4 id="differences-between-the-data-cache-and-request-memoization">Differences between the Data Cache and Request Memoization</h4> <p>While both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request.</p> <h3 id="full-route-cache">Full Route Cache</h3> <p>Next.js automatically renders and caches routes at <strong>build time</strong>. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads.</p> <h4 id="how-the-full-route-cache-works">How the Full Route Cache works</h4> <p>To understand how the Full Route Cache works, it’s helpful to look at how React handles rendering, and how Next.js caches the result.</p> <ol> <li>React Rendering on the Server: The rendering work is split into chunks: by individual routes segments and Suspense boundaries.</li> <li>Next.js Caching on the Server (Full Route Cache): The default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation.</li> <li>React Hydration and Reconciliation on the Client: At request time, on the client: <ul> <li>The HTML is used to <strong>immediately show</strong> a fast non-interactive initial preview of the Client and Server Components.</li> <li>The RSC Payload is used to <strong>reconcile</strong> the Client and rendered Server Component trees, and update the DOM.</li> <li>The JavaScript instructions are used to <strong>hydrate</strong> Client Components and make the application interactive.</li> </ul> </li> <li>Next.js Caching on the Client (Router Cache): This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes.</li> <li>Subsequent Navigations: On subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server.</li> </ol> <h4 id="static-and-dynamic-rendering">Static and Dynamic Rendering</h4> <p>This diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data:</p> <figure> <picture> <img src="/assets/img/static-and-dynamic-routes.avif" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="client-side-router-cache">Client-side Router Cache</h3> <p>Next.js has an in-memory client-side router cache that stores the RSC payload of route segments, split by layouts, loading states, and pages.</p> <p>When a user navigates between routes, Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to. This results in instant back/forward navigation, no full-page reload between navigations, and preservation of React state and browser state.</p> <h4 id="duration-and-invalidation">Duration and Invalidation</h4> <p>The cache is stored in the browser’s temporary memory. While a page refresh will clear all cached segments.</p> <p>There are two ways you can invalidate the Router Cache:</p> <ul> <li>In a Server Action: <ul> <li>Revalidating data on-demand by path with (<code class="language-plaintext highlighter-rouge">revalidatePath</code>) or by cache tag with (<code class="language-plaintext highlighter-rouge">revalidateTag</code>)</li> <li>Using <code class="language-plaintext highlighter-rouge">cookies.set</code> or <code class="language-plaintext highlighter-rouge">cookies.delete</code> invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).</li> </ul> </li> <li>Calling <code class="language-plaintext highlighter-rouge">router.refresh</code> will invalidate the Router Cache and make a new request to the server for the current route.</li> </ul> <h2 id="nextjs-apis-affect-caching">Next.js APIs affect caching</h2> <h3 id="link"><code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code></h3> <p>By default, the <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache.</p> <h3 id="routerprefetch"><code class="language-plaintext highlighter-rouge">router.prefetch</code></h3> <p>The prefetch option of the useRouter hook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache.</p> <h3 id="routerrefresh"><code class="language-plaintext highlighter-rouge">router.refresh</code></h3> <p>The refresh option of the useRouter hook can be used to manually refresh a route.</p> <h3 id="fetch"><code class="language-plaintext highlighter-rouge">fetch</code></h3> <p>Data returned from fetch is automatically cached in the Data Cache.</p> <h3 id="fetch-optionscache"><code class="language-plaintext highlighter-rouge">fetch options.cache</code></h3> <p>You can opt individual fetch into caching by setting the cache option to force-cache</p> <h3 id="fetch-optionsnextrevalidate"><code class="language-plaintext highlighter-rouge">fetch options.next.revalidate</code></h3> <p>You can use the next.revalidate option of fetch to set the revalidation period (in seconds) of an individual fetch request. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server.</p> <h3 id="fetch-optionsnexttags-and-revalidatetag"><code class="language-plaintext highlighter-rouge">fetch options.next.tags and revalidateTag</code></h3> <p>Next.js has a cache tagging system for fine-grained data caching and revalidation.</p> <h3 id="revalidatepath"><code class="language-plaintext highlighter-rouge">revalidatePath</code></h3> <p>revalidatePath allows you manually revalidate data and re-render the route segments below a specific path in a single operation. Calling the revalidatePath method revalidates the Data Cache, which in turn invalidates the Full Route Cache.</p> <h3 id="dynamic-apis">Dynamic APIs</h3> <p>Dynamic APIs like <code class="language-plaintext highlighter-rouge">cookies</code> and <code class="language-plaintext highlighter-rouge">headers</code>, and the <code class="language-plaintext highlighter-rouge">searchParams</code> prop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered.</p> <h3 id="segment-config-options">Segment Config Options</h3> <p>The Route Segment Config options can be used to override the route segment defaults or when you’re not able to use the fetch API (e.g. database client or 3rd party libraries).</p> <h3 id="generatestaticparams"><code class="language-plaintext highlighter-rouge">generateStaticParams</code></h3> <p>For dynamic segments (e.g. app/blog/[slug]/page.js), paths provided by generateStaticParams are cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren’t known at build time the first time they’re visited.</p> <h3 id="react-cache-function">React <code class="language-plaintext highlighter-rouge">cache</code> function</h3> <p>The React <code class="language-plaintext highlighter-rouge">cache</code> function allows you to memoize the return value of a function on the server, allowing you to call the same function multiple times while only executing it once.</p> <h2 id="references">References</h2> <ul> <li><a href="https://nextjs.org/docs/app/building-your-application/caching">next.js doc for caching</a></li> </ul>]]></content><author><name></name></author><category term="Next.js"/><category term="Next.js"/><category term="React"/><category term="Router"/><summary type="html"><![CDATA[Caching Overview]]></summary></entry><entry><title type="html">Handle Error in JavaScript</title><link href="https://benwzj.github.io/blog/2024/error-js/" rel="alternate" type="text/html" title="Handle Error in JavaScript"/><published>2024-09-19T00:00:00+00:00</published><updated>2024-09-19T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/error-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/error-js/"><![CDATA[<p>Using <code class="language-plaintext highlighter-rouge">Error</code>, <code class="language-plaintext highlighter-rouge">try/catch</code>, <code class="language-plaintext highlighter-rouge">throw</code> to make code easier to debug. They can also make the code structure clearer.</p> <h2 id="error-overview">Error Overview</h2> <p>Here are some conclusions:</p> <ul> <li><code class="language-plaintext highlighter-rouge">Error</code> is Standard built-in objects.</li> <li><code class="language-plaintext highlighter-rouge">Error</code> objects are thrown when runtime errors occur.</li> <li>Usually you create an <code class="language-plaintext highlighter-rouge">Error</code> object with the intention of raising it using the <code class="language-plaintext highlighter-rouge">throw</code> keyword. You can handle the error using the <code class="language-plaintext highlighter-rouge">try...catch</code> construct.</li> <li>Error types: Besides the <strong>generic <code class="language-plaintext highlighter-rouge">Error</code> constructor</strong>, there are still: EvalError, TypeError, etc. in JavaScript.</li> <li>The <code class="language-plaintext highlighter-rouge">Error</code> object can also be used as a base object for user-defined exceptions.</li> </ul> <blockquote> <p>A cleaner and more consistent error handling way is that define your own error types deriving from <code class="language-plaintext highlighter-rouge">Error</code> to be able to throw new <code class="language-plaintext highlighter-rouge">MyError()</code> and use <code class="language-plaintext highlighter-rouge">instanceof MyError</code> to check the kind of error in the exception handler. This results in cleaner and more consistent error handling code.</p> </blockquote> <h2 id="error-instance">Error Instance</h2> <h3 id="errorprototypeconstructor">Error.prototype.constructor</h3> <p>syntax: <code class="language-plaintext highlighter-rouge">new Error(message, options)</code> JavaScript only tries to read <code class="language-plaintext highlighter-rouge">options.cause</code> if <code class="language-plaintext highlighter-rouge">options</code> is an object.</p> <blockquote> <p>Note: Error() can be called with or without new. Both create a new Error instance.</p> </blockquote> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">I was created using a function call!</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// above has the same functionality as following</span>
<span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">I was constructed via the "new" keyword!</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <h3 id="errorprototypename">Error.prototype.name</h3> <p>The <code class="language-plaintext highlighter-rouge">name</code> data property of <code class="language-plaintext highlighter-rouge">Error.prototype</code> is shared by all Error instances. It represents the name for the type of error.</p> <h3 id="errorcause">Error.cause</h3> <p>The <code class="language-plaintext highlighter-rouge">cause</code> data property of an Error instance indicates the specific original cause of the error.</p> <p>It is used when catching and re-throwing an error with a more-specific or useful error message in order to still have access to the original error.</p> <p>The value of cause can be of any type.</p> <h3 id="error-message">Error: message</h3> <p>The <code class="language-plaintext highlighter-rouge">message</code> data property of an Error instance is a human-readable description of the error.</p> <p>The <code class="language-plaintext highlighter-rouge">message</code> property combined with the <code class="language-plaintext highlighter-rouge">name</code> property is used by the <code class="language-plaintext highlighter-rouge">Error.prototype.toString()</code> method to create a string representation of the Error.</p> <h3 id="errorprototypestack">Error.prototype.stack</h3> <p>This feature is non-standard, but it is de facto implemented by all major JavaScript engines, and the JavaScript standards committee is looking to standardize it.</p> <ul> <li>The value of <code class="language-plaintext highlighter-rouge">stack</code> is <strong>string</strong>.</li> <li>you can assume it exists and use it for <strong>debugging</strong> purposes.</li> <li>The <code class="language-plaintext highlighter-rouge">stack</code> property of an Error instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments.</li> <li>The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.</li> <li>Each JavaScript engine uses its own format for stack traces, but they are fairly consistent in their high-level structure.</li> </ul> <p>Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">trace</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">trace() failed</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">b</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">trace</span><span class="p">();</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">a</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">b</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="dl">"</span><span class="se">\n\n</span><span class="dl">"</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="nf">a</span><span class="p">(</span><span class="dl">"</span><span class="s2">first call, firstarg</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">output</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">stack</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>then you can see in <code class="language-plaintext highlighter-rouge">output</code> element:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: trace() failed
    at trace (&lt;anonymous&gt;:2:9)
    at b (&lt;anonymous&gt;:5:3)
    at a (&lt;anonymous&gt;:8:3)
    at &lt;anonymous&gt;:11:3
    at init (https://live.mdnplay.dev/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack/runner.html?id=using_the_stack_property:133:23)
    at https://live.mdnplay.dev/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack/runner.html?id=using_the_stack_property:146:17
</code></pre></div></div> <h2 id="how-to-differentiate-between-similar-errors">How to Differentiate between similar errors</h2> <p>Sometimes a block of code can fail for reasons that require different handling, but which throw very similar errors (i.e. with the same type and message).</p> <p>If you don’t have control over the original errors that are thrown, one option is to catch them and throw new Error objects that have more specific messages.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">doWork</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nf">doFailSomeWay</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed in some way</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">cause</span><span class="p">:</span> <span class="nx">err</span> <span class="p">});</span>
  <span class="p">}</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nf">doFailAnotherWay</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed in another way</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">cause</span><span class="p">:</span> <span class="nx">err</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nf">doWork</span><span class="p">();</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">Failed in some way</span><span class="dl">"</span><span class="p">:</span>
      <span class="nf">handleFailSomeWay</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">cause</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">Failed in another way</span><span class="dl">"</span><span class="p">:</span>
      <span class="nf">handleFailAnotherWay</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">cause</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="a-good-way-to-extend-error">A good way to extend Error</h2> <p>Read more at <a href="https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript">stackoverflow</a>.</p> <p>Best way is using class and extend. But you can still use function.</p> <h3 id="use-class">Use class</h3> <p>Use <code class="language-plaintext highlighter-rouge">class</code> and <code class="language-plaintext highlighter-rouge">extend</code> keywords to subclass Error constructor:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyError</span> <span class="kd">extends</span> <span class="nc">Error</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">MyError</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>There is no need for <code class="language-plaintext highlighter-rouge">this.stack = (new Error()).stack;</code> trick thanks to <code class="language-plaintext highlighter-rouge">super()</code> call.</p> <p>For ease of maintaining, use <code class="language-plaintext highlighter-rouge">this.name = this.constructor.name;</code> instead. Try this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyError</span> <span class="kd">extends</span> <span class="nc">Error</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
    <span class="c1">//this.name = 'MyError';</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kd">constructor</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="use-function">Use function</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MyError</span> <span class="p">(</span><span class="nx">message</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">MyError</span><span class="dl">'</span><span class="p">;</span>
  <span class="nb">Error</span><span class="p">.</span><span class="nf">captureStackTrace</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// does the same magic as extends keyword</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">setPrototypeOf</span><span class="p">(</span><span class="nx">MyError</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nb">Error</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</code></pre></div></div> <h3 id="test-result">Test result</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nc">MyError</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is test</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
  <span class="c1">// true</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// true</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">MyError</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="throw">throw</h2> <p>The <code class="language-plaintext highlighter-rouge">throw</code> statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won’t be executed), and control will be passed to the <strong>first</strong> <code class="language-plaintext highlighter-rouge">catch</code> block in the call stack. If no <code class="language-plaintext highlighter-rouge">catch</code> block exists among caller functions, the program will terminate.</p> <p>Usually, <code class="language-plaintext highlighter-rouge">throw</code> statement throw an Error instance:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getRectArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nf">isNaN</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span> <span class="o">||</span> <span class="nf">isNaN</span><span class="p">(</span><span class="nx">height</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Parameter is not a number!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nf">getRectArea</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="c1">// Expected output: Error: Parameter is not a number!</span>
<span class="p">}</span>
</code></pre></div></div> <p>But it can throw any object. and <code class="language-plaintext highlighter-rouge">catch</code> statement can catch that object.</p> <h2 id="trycatch">try…catch</h2> <p>The <code class="language-plaintext highlighter-rouge">try...catch</code> statement is comprised of a <code class="language-plaintext highlighter-rouge">try</code> block and either a <code class="language-plaintext highlighter-rouge">catch</code> block, a <code class="language-plaintext highlighter-rouge">finally</code> block, or both. The code in the try block is executed first, and if it throws an exception, the code in the <code class="language-plaintext highlighter-rouge">catch</code> block will be executed. The code in the <code class="language-plaintext highlighter-rouge">finally</code> block will always be executed before control flow exits the entire construct.</p> <p>A common use case for this is to only catch (and silence) a small subset of expected errors, and then re-throw the error in other cases:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="nf">myRoutine</span><span class="p">();</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">RangeError</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// statements to handle this very common expected error</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">e</span><span class="p">;</span> <span class="c1">// re-throw the error unchanged</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="execute-order-in-nested-try-blocks">Execute order in Nested try blocks</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">oops</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">finally</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">outer</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// Logs:</span>
<span class="c1">// "finally"</span>
<span class="c1">// "outer" "oops"</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">oops</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">inner</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">finally</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">outer</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// Logs:</span>
<span class="c1">// "inner" "oops"</span>
<span class="c1">// "finally"</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">oops</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">inner</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
    <span class="k">throw</span> <span class="nx">ex</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">finally</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">outer</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// Logs:</span>
<span class="c1">// "inner" "oops"</span>
<span class="c1">// "finally"</span>
<span class="c1">// "outer" "oops"</span>
</code></pre></div></div> <h2 id="faq">FAQ</h2> <ul> <li>what is <code class="language-plaintext highlighter-rouge">stack</code> proerpty.</li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><summary type="html"><![CDATA[Using Error, try/catch, throw to make code easier to debug. They can also make the code structure clearer.]]></summary></entry><entry><title type="html">Vite Overview</title><link href="https://benwzj.github.io/blog/2024/vite/" rel="alternate" type="text/html" title="Vite Overview"/><published>2024-08-13T00:00:00+00:00</published><updated>2024-08-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/vite</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/vite/"><![CDATA[<p>There are many blogs which compare Vite and Webpack. But Vite is just a front web application tool which is similar to Create-React-App. Vite is using esbuild and Rollup to bundle resource while CRA is using webpack.</p> <h2 id="why-vite">Why Vite</h2> <p>Before ES modules were available in browsers, developers had no native mechanism for authoring JavaScript in a modularized fashion. This is why we are all familiar with the <strong>concept of “bundling”</strong>: using tools that crawl, process and concatenate our source modules into files that can run in the browser.</p> <p>Over time we have seen tools like webpack, Rollup and Parcel, which greatly improved the development experience for frontend developers.</p> <p>Main problems:</p> <ul> <li> <p>Slow Server Start: When cold-starting the dev server, a bundler-based build setup has to eagerly crawl and build your entire application before it can be served.</p> </li> <li> <p>Slow Updates: When a file is edited in a bundler-based build setup, it is inefficient to rebuild the whole bundle for an obvious reason: the update speed will degrade linearly with the size of the app.</p> </li> </ul> <h2 id="what-vite-provide">What Vite provide</h2> <h3 id="improve-slow-server-start">Improve Slow Server Start</h3> <p>Vite improves the dev server start time by first dividing the modules in an application into two categories: dependencies and source code.</p> <ul> <li> <p><strong>Dependencies</strong> are mostly plain JavaScript that do not change often during development. Vite pre-bundles dependencies using esbuild.</p> </li> <li> <p><strong>Source code</strong> often contains non-plain JavaScript that needs transforming (e.g. JSX, CSS or Vue/Svelte components), and will be edited very often. Also, not all source code needs to be loaded at the same time (e.g. with route-based code-splitting). Vite serves source code over native ESM. This is essentially letting the browser take over part of the job of a bundler: Vite only needs to transform and serve source code on demand, as the browser requests it.</p> </li> </ul> <figure> <picture> <img src="/assets/img/Bundle-based.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/es-mould.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="improve-slow-updates">Improve Slow Updates</h3> <p>When a file is edited in a bundler-based build setup, it is inefficient to rebuild the whole bundle for an obvious reason: the update speed will degrade linearly with the size of the app.</p> <blockquote> <p>Hot Module Replacement (HMR): allowing a module to “hot replace” itself without affecting the rest of the page.</p> </blockquote> <p>In Vite, HMR is performed over native ESM. When a file is edited, Vite only needs to precisely invalidate the chain between the edited module and its closest HMR boundary (most of the time only the module itself), making HMR updates consistently fast regardless of the size of your application.</p>]]></content><author><name></name></author><category term="Website"/><category term="React"/><category term="Next.js"/><category term="Webpack"/><category term="Vite"/><summary type="html"><![CDATA[There are many blogs which compare Vite and Webpack. But Vite is just a front web application tool which is similar to Create-React-App. Vite is using esbuild and Rollup to bundle resource while CRA is using webpack.]]></summary></entry><entry><title type="html">JavaScript Module</title><link href="https://benwzj.github.io/blog/2024/module-js/" rel="alternate" type="text/html" title="JavaScript Module"/><published>2024-08-07T00:00:00+00:00</published><updated>2024-08-07T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/module-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/module-js/"><![CDATA[<p>Today there are two module systems that are actively being used. CommonJS (CJS) is what Node.js has used historically. ESM (EcmaScript modules) is a newer system which has been added to the JavaScript specification. Browsers already support ES modules, and Node is adding support.</p> <h2 id="commonjs-and-esm">CommonJS and ESM</h2> <p>CommonJS was primarily intended for server-side development with Node.js. It is named ServerJS before. CommonJS’s specification of how modules should work is widely used today for <strong>server-side</strong> JavaScript with Node.js. It is also used for browser-side JavaScript, but that code must be packaged with a transpiler since browsers don’t support CommonJS.</p> <p>The other major module specification in use is the ECMAScript (ES) modules specification (ES6 modules aka ES2015 modules). CommonJS can be recognized by the use of the <code class="language-plaintext highlighter-rouge">require()</code> function and <code class="language-plaintext highlighter-rouge">module.exports</code>, while ES modules use <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code> statements for similar (though not identical) functionality.</p> <h3 id="commonjs-and-es-modules-have-different-syntax">CommonJS and ES modules have different syntax.</h3> <p>CommonJS module that exports two functions:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> 
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></div></div> <p>We can also import the public functions into another Node.js script using require, just as we do here:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./util</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 5</span>
</code></pre></div></div> <p>ES modules:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can then import both functions using the import statement:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./util.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">// 5</span>
</code></pre></div></div> <h3 id="commonjs-vs-ecmascript-modules">CommonJS vs ECMAScript modules</h3> <ul> <li>Node.js support for ES modules too.</li> <li>CommonJS offers flexibility with module imports.</li> <li>CommonJS loads modules synchronously, ES modules are asynchronous.</li> <li>All in all, ECMAScript modules are the future of JavaScript.</li> </ul> <h2 id="ecmascript-modules-syntax">ECMAScript modules Syntax</h2> <h3 id="export">Export</h3> <p>After the <code class="language-plaintext highlighter-rouge">export</code> keyword, you can use <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code>, and <code class="language-plaintext highlighter-rouge">var</code> declarations, as well as <code class="language-plaintext highlighter-rouge">function</code> or <code class="language-plaintext highlighter-rouge">class</code> declarations. You can also use the <code class="language-plaintext highlighter-rouge">export { name1, name2 }</code> syntax to export a list of names declared elsewhere.</p> <blockquote> <p>Note that <code class="language-plaintext highlighter-rouge">export {}</code> does not export an empty object — it’s a no-op declaration that exports nothing (an empty name list).</p> </blockquote> <p>JS have default export and named export. JS have <code class="language-plaintext highlighter-rouge">export from</code> syntax as well.</p> <h4 id="default-exports">Default exports</h4> <p>Default export is used to export a single value as the default value for a module. This value can be a variable, function, class, or any other JavaScript entity. When importing a default export, you can assign it any name you want in the importing module.</p> <p>Example:</p> <pre><code class="language-JS">// moduleA.js
const myDefault = 'Default Value';
export default myDefault;

// moduleB.js
import myAlias from './moduleC';
</code></pre> <h4 id="named-exports">Named exports</h4> <p>Named exports allow you to export multiple values from a module and give each of them a specific name. You can import these values by using their respective names when importing in another module.</p> <p>Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleC.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Foo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// function implementation</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">foobar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">FooBar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="p">{</span><span class="nx">foobar</span><span class="p">};</span>

<span class="c1">// moduleD.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">foobar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./moduleA</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <h4 id="mix-them">Mix them</h4> <p>you can mix both named and default exports in the same module:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// moduleE.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">namedExport</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Named Export</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">defaultExport</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Default Export</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">defaultExport</span><span class="p">;</span>

<span class="c1">// moduleF.js</span>
<span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="p">{</span> <span class="nx">namedExport</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./moduleE</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>More info at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">here</a>.</p> </blockquote> <h3 id="import">Import</h3> <p>The static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.</p> <p>There are four forms of import declarations:</p> <ul> <li>Named import: <code class="language-plaintext highlighter-rouge">import { export1, export2 } from "module-name";</code></li> <li>Default import: <code class="language-plaintext highlighter-rouge">import defaultExport from "module-name";</code></li> <li>Namespace import: <code class="language-plaintext highlighter-rouge">import * as name from "module-name";</code></li> <li>Side effect import: <code class="language-plaintext highlighter-rouge">import "module-name";</code></li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">myModule</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// or</span>
<span class="k">import</span> <span class="p">{</span> <span class="k">default</span> <span class="nx">as</span> <span class="nx">myDefault</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// or</span>
<span class="k">import</span> <span class="nx">myDefault</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/modules/my-module.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <h2 id="deep-dive-module">Deep dive module</h2> <h3 id="what-problem-do-modules-solve">What problem do modules solve</h3> <p>When you think about it, coding in JavaScript is all about managing variables. It’s all about assigning values to variables, or adding numbers to variables, or combining two variables together and putting them into another variable.</p> <p>Because so much of your code is just about changing variables, how you organize these variables is going to have a big impact on how well you can code and how well you can maintain that code.</p> <p>Having just a few variables to think about at one time makes things easier.</p> <p>JavaScript has a way of helping you do this, called scope. It also has a downside, though. It does make it hard to share variables between different functions. The common way to handle this is to put it on a scope above you, for example, on the global scope. This makes maintaining code tricky. And because these variables are on the global scope, every part of the code that’s inside of that global scope can change the variable.</p> <h3 id="how-do-modules-help">How do modules help</h3> <p>Modules give you a better way to organize these variables and functions. With modules, you group the variables and functions that make sense to go together. But unlike function scopes, module scopes have a way of making their variables available to other modules as well.</p> <p>When something is made available to other modules, it’s called an export. Once you have an export, other modules can explicitly say that they depend on that variable, class or function.</p> <p>Once you have the ability to export and import variables between modules, it makes it a lot easier to break up your code into small chunks that can work independently of each other.</p> <h3 id="how-es-modules-work">How ES modules work</h3> <p>When you’re developing with modules, you build up a graph of dependencies. The connections between different dependencies come from any import statements that you use.</p> <h2 id="references">References</h2> <ul> <li><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/">es-modules-a-cartoon deep dive</a></li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript"/><category term="CommonJS"/><summary type="html"><![CDATA[Today there are two module systems that are actively being used. CommonJS (CJS) is what Node.js has used historically. ESM (EcmaScript modules) is a newer system which has been added to the JavaScript specification. Browsers already support ES modules, and Node is adding support.]]></summary></entry><entry><title type="html">Router in React</title><link href="https://benwzj.github.io/blog/2024/react-router/" rel="alternate" type="text/html" title="Router in React"/><published>2024-07-25T00:00:00+00:00</published><updated>2024-07-25T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/react-router</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/react-router/"><![CDATA[<h2 id="overview">Overview</h2> <p>Routing is the skeleton of every web application. Many React framework come with router, like Next.js. If you are using Create React App, It doesn’t include page routing. React Router is the most popular solution. Nowaday, Using React framework is a popular way to write React app. So React Router create their framework as well. It is called Remix.</p> <p>You can write your own Router if your appllication is small and simple.</p> <h2 id="write-your-own-router">Write your own Router</h2> <p>Basic ideas are:</p> <ul> <li>using <code class="language-plaintext highlighter-rouge">Context</code>.</li> <li>Using APIs: <code class="language-plaintext highlighter-rouge">window.location.pathname</code>, <code class="language-plaintext highlighter-rouge">window.addEventListener('popstate', handler)</code>, <code class="language-plaintext highlighter-rouge">window.removeEventListener('popstate', handler);</code>, <code class="language-plaintext highlighter-rouge">window.history.pushState({}, '', to);</code></li> <li>Create a Context and wrap all components in the application inside <code class="language-plaintext highlighter-rouge">Context.Provider</code>.</li> <li>This Context value like this <code class="language-plaintext highlighter-rouge">{ currentPath, navigate }</code>. Marking down current path and provide function <code class="language-plaintext highlighter-rouge">navigate</code> to route to next URL.</li> </ul> <h2 id="react-router">React Router</h2> <h3 id="what-is-react-router">What is React Router</h3> <p>React Router is a collection of navigational components within your application. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps the UI in sync with the URL.</p> <h3 id="why-react-router-popular-in-the-past">Why React Router popular in the past?</h3> <p>In the past, Create React App (CRA) was the simplest way to bootstrap a React application. It handled and hid the complexity of setting up webpack and Babel, and when new features were added to React, <code class="language-plaintext highlighter-rouge">react-scripts</code> supported them from the beginning.</p> <p>However, CRA didn’t provide a router, a data fetching solution, or any of the features listed above. That wasn’t the purpose of CRA. It was a simple React app starter that allowed you to use whatever libraries from the React ecosystem you liked. Many projects bootstrapped with CRA use React Router for routing, which means there are a large number of “CRA apps” that are also “React Router apps”.</p> <h3 id="how-about-now">How about now</h3> <p>These days CRA is no longer a recommended way to create React applications. And the React docs don’t even recommend using it.</p> <p>At the same time, Vite has risen substantially in popularity, offering a fast dev experience, optimized builds, and a rich plugin ecosystem and authoring experience.</p> <p>Now The React Router team create a React Framework call Remix. You can even think <code class="language-plaintext highlighter-rouge">Remix = React Router + Vite</code>.</p> <h3 id="the-react-router-package">The React Router package</h3> <p>The <code class="language-plaintext highlighter-rouge">react-router</code> package is the heart of React Router and provides all the core functionality for both <code class="language-plaintext highlighter-rouge">react-router-dom</code> and <code class="language-plaintext highlighter-rouge">react-router-native</code>.</p> <h3 id="basic-usage">Basic Usage</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">BrowserRouter</span> <span class="nx">as</span> <span class="nx">Router</span><span class="p">,</span>
    <span class="nx">Routes</span><span class="p">,</span>
    <span class="nx">Route</span><span class="p">,</span>
    <span class="nx">Link</span><span class="p">,</span>
    <span class="nx">useNavigate</span><span class="p">,</span>
    <span class="nx">Outlet</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Home</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span>
                 <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Go</span> <span class="nx">to</span> <span class="nx">Contact</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">About</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">About</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">nav</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">team</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Our</span> <span class="nx">Team</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">company</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Our</span> <span class="nx">Company</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Outlet</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Contact</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Contact</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">const</span> <span class="nx">Team</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Team</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">const</span> <span class="nx">Company</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Company</span> <span class="nx">Page</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span><span class="err">;
</span><span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">nav</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Home</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">About</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Contact</span><span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">About</span> <span class="o">/&gt;</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">team</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Team</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">company</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Company</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/Route</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/contact</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Contact</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://reactrouter.com/">React Router website</a></li> <li><a href="https://remix.run/">Remix</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Router"/><category term="Remix"/><category term="Next.js"/><category term="Vite"/><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Kotlin Introduce</title><link href="https://benwzj.github.io/blog/2024/kotlin/" rel="alternate" type="text/html" title="Kotlin Introduce"/><published>2024-07-09T00:00:00+00:00</published><updated>2024-07-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/kotlin</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/kotlin/"><![CDATA[<h2 id="packages-and-imports">Packages and imports</h2> <p>A source file should start with a package declaration:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">org.example</span>

<span class="k">fun</span> <span class="nf">printMessage</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span>
<span class="kd">class</span> <span class="nc">Message</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span>
</code></pre></div></div> <p>All the contents, such as classes and functions, of the source file are included in this package. So, in the example above, the full name of printMessage() is <code class="language-plaintext highlighter-rouge">org.example.printMessage</code>, and the full name of Message is <code class="language-plaintext highlighter-rouge">org.example.Message</code>.</p> <ul> <li>A number of packages are imported into every Kotlin file by default.</li> <li>Apart from the default imports, each file may contain its own import directives.</li> </ul> <h2 id="classes">Classes</h2> <ul> <li>A class in Kotlin has a primary constructor and possibly one or more secondary constructors.</li> <li>If the primary constructor does not have any annotations or visibility modifiers, the constructor keyword can be omitted.</li> <li>Kotlin does not have a <code class="language-plaintext highlighter-rouge">new</code> keyword.</li> <li>Class members: <ul> <li>Constructors and initializer blocks</li> <li>Functions;</li> <li>Properties</li> <li>Nested and inner classes</li> <li>Object declarations</li> </ul> </li> </ul> <h3 id="abstract-class">Abstract Class</h3> <ul> <li>Abstract classes may or may not contain abstract methods.</li> <li>Abstract classes cannot be instantiated.</li> <li>To use an abstract class, you have to inherit it from another class, provide implementations to the abstract methods in it.</li> <li>If you inherit an abstract class, you have to provide implementations to all the abstract methods in it.</li> </ul> <h3 id="interfaces">Interfaces</h3> <p>Interfaces in Kotlin can contain declarations of abstract methods, as well as method implementations.</p> <h4 id="interfaces-vs-abstract-class">Interfaces vs Abstract Class</h4> <p>What makes them different from abstract classes is that interfaces cannot store state. They can have properties, but these need to be abstract or provide accessor implementations.</p> <h4 id="functional-sam-interfaces">Functional (SAM) interfaces</h4> <p>An interface with only one abstract method is called a functional interface, or a Single Abstract Method (SAM) interface. The functional interface can have several non-abstract members but only one abstract member.</p> <h2 id="object">Object</h2> <h3 id="object-expressions">Object expressions</h3> <p>Such classes are useful for one-time use. Object expressions start with the object keyword.</p> <h2 id="functions">Functions</h2> <ul> <li>Infix notation: <code class="language-plaintext highlighter-rouge">infix fun Int.shl(x: Int): Int { ... }</code>, calling the function using the infix notation: <code class="language-plaintext highlighter-rouge">1 shl 2</code></li> <li>Local functions: Kotlin supports local functions, which are functions inside other functions.</li> <li>Member functions: A member function is a function that is defined inside a class or object.</li> <li>Generic functions: Functions can have generic parameters, which are specified using angle brackets before the function name: <code class="language-plaintext highlighter-rouge">fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; { /*...*/ }</code></li> <li>Single-expression function: <code class="language-plaintext highlighter-rouge">fun double(x: Int): Int = x * 2</code>.</li> <li>Higher-order functions: a function that takes functions as parameters, or returns a function. A good examplevis the functional programming idiom <code class="language-plaintext highlighter-rouge">fold</code> for collections. (it is similar to <code class="language-plaintext highlighter-rouge">reduce()</code> in JS)</li> <li>Function types: Kotlin uses function types, such as <code class="language-plaintext highlighter-rouge">(Int) -&gt; String</code>.</li> <li>A lambda expression: <code class="language-plaintext highlighter-rouge">{ a, b -&gt; a + b }</code>.</li> <li>An anonymous function: <code class="language-plaintext highlighter-rouge">fun(s: String): Int { return s.toIntOrNull() ?: 0 }</code>.</li> <li>Function literals: Lambda expressions and anonymous functions are function literals. They are functions that are not declared but are passed immediately as an expression.</li> <li>Function literals with receiver: Function types with receiver, such as <code class="language-plaintext highlighter-rouge">A.(B) -&gt; C,</code> can be instantiated with a special form of function literals.</li> </ul> <h3 id="lambda">lambda</h3>]]></content><author><name></name></author><category term="Kotlin"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[Packages and imports]]></summary></entry><entry><title type="html">Kotlin Annotation</title><link href="https://benwzj.github.io/blog/2024/kotlin-annotation/" rel="alternate" type="text/html" title="Kotlin Annotation"/><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/kotlin-annotation</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/kotlin-annotation/"><![CDATA[<h2 id="what-is-annotations">What is Annotations</h2> <p>Annotations are means of attaching metadata to code.</p> <p>Annotations are a form of metadata that provide data about the program but are not part of the program itself. Annotations have <strong>no direct effect on the operation</strong> of the code they annotate. Instead, they are used by the compiler and various tools during the build process, and can also be accessed at runtime through reflection. Kotlin annotations can be applied to classes, functions, properties, property accessors, parameters, and constructors.</p> <p>Kotlin comes with a set of built-in annotations. You can define your own custom annotations.</p> <p>There are three main mechanisms that handle annotations:</p> <ul> <li>annotation processing,</li> <li>reflection, and</li> <li>lint.</li> </ul> <h3 id="purposes">Purposes</h3> <p>Annotations can be used for a wide range of purposes, from marking code as deprecated, to influencing how data is serialized, or even modifying the behavior of frameworks and libraries.</p> <ul> <li>influencing the compiler’s behavior</li> <li>guiding the use of frameworks or libraries</li> <li>providing metadata for runtime reflection</li> <li>enforcing coding standards</li> </ul> <h3 id="built-in-annotations">Built-in Annotations</h3> <p>Kotlin, like Java, comes with a set of built-in annotations. One commonly used annotation is <code class="language-plaintext highlighter-rouge">@Deprecated</code>, which marks a program element as deprecated. For example:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Deprecated</span><span class="p">(</span><span class="s">"This function will be removed in future releases."</span><span class="p">)</span>
<span class="k">fun</span> <span class="nf">oldFunction</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div> <h3 id="declaring-an-custom-annotation">Declaring an custom Annotation</h3> <p>To declare an annotation, put the annotation modifier in front of a class:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Fancy</span>
</code></pre></div></div> <h3 id="using-annotations">Using Annotations</h3> <p>Once declared, this annotation can be used to annotate various program elements. For example:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Fancy</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span> <span class="p">}</span>
<span class="nd">@Fancy</span> <span class="k">fun</span> <span class="nf">myFunction</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div> <h3 id="features">Features</h3> <ul> <li>Support Annotation Parameters</li> <li>Java Interoperability</li> <li>Enhancing Code Readability and Maintainability: It better then comment in some circumstance, because it can, for example influencing the compiler’s behavior.</li> <li>Enforcing Coding Conventions and Safety, either at compile-time or runtime.</li> <li>Integration with Frameworks and Libraries: Many frameworks and libraries leverage annotations to allow developers to configure behavior or integrate custom logic seamlessly. By creating custom annotations, developers can extend these frameworks in powerful and flexible ways.</li> <li>Simplifying Configuration.</li> </ul> <h2 id="example">Example</h2> <h3 id="specify-annotation-targets">Specify Annotation Targets</h3> <p>By default, a Kotlin annotation can be used on any declaration. However, you might want to restrict your annotation to certain types of declarations (e.g., functions, classes, properties). You can do this using the <code class="language-plaintext highlighter-rouge">@Target</code> meta-annotation.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="p">(</span><span class="nc">AnnotationTarget</span><span class="p">.</span><span class="nc">FUNCTION</span><span class="p">,</span> <span class="nc">AnnotationTarget</span><span class="p">.</span><span class="nc">CLASS</span><span class="p">)</span>
<span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Loggable</span>
</code></pre></div></div> <p>In this example, <code class="language-plaintext highlighter-rouge">@Loggable</code> can only be applied to functions and classes.</p> <h3 id="add-parameters-to-your-annotation">Add Parameters to Your Annotation</h3> <p>Annotations can have parameters to allow for more flexible and detailed configuration. Parameters are declared in the primary constructor of the annotation class.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">annotation</span> <span class="kd">class</span> <span class="nc">Loggable</span><span class="p">(</span><span class="kd">val</span> <span class="py">level</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"INFO"</span><span class="p">)</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">@Loggable</code> includes an optional level parameter that specifies the logging level, with a default value of “INFO”.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Loggable</span><span class="p">(</span><span class="n">level</span> <span class="p">=</span> <span class="s">"DEBUG"</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">UserService</span>
</code></pre></div></div> <h3 id="retention-policy">Retention Policy</h3> <p>The retention policy of an annotation determines at which point the annotation is discarded during the compilation and execution of your program. Both Kotlin and Java support three types of retention policies:</p> <p>Source: The annotation is only available in the source code and is discarded by the compiler. Binary: The annotation is retained in the compiled class files but not available at runtime. Runtime: The annotation is available at runtime through reflection. In Kotlin, you specify the retention policy using the @Retention annotation:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="p">(</span><span class="nc">AnnotationRetention</span><span class="p">.</span><span class="nc">SOURCE</span><span class="p">)</span>
<span class="k">annotation</span> <span class="kd">class</span> <span class="nc">DebugLog</span>
</code></pre></div></div> <p>This @DebugLog annotation is only available in the source code, making it useful for annotations that are intended to be processed by tools that analyze the source code.</p> <h3 id="use-reflection">use reflection</h3> <p>Reflection: read annotations at runtime. To check if a function is annotated with @Loggable and print a message accordingly, you might use reflection like this:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">checkLoggable</span><span class="p">(</span><span class="n">function</span><span class="p">:</span> <span class="nc">KFunction</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="n">function</span><span class="p">.</span><span class="n">findAnnotation</span><span class="p">&lt;</span><span class="nc">Loggable</span><span class="p">&gt;()</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Function ${function.name} is loggable with level ${it.level}."</span><span class="p">)</span> 
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="c1">// Usage</span>
<span class="nf">checkLoggable</span><span class="p">(</span><span class="o">::</span><span class="n">updateUser</span><span class="p">)</span>
</code></pre></div></div> <h2 id="annotation-processing">Annotation Processing</h2> <p>Annotation processors are compiler plugins that generate code based on annotations at compile time. You know a third-party library includes an annotation processor when it requires using <code class="language-plaintext highlighter-rouge">annotationProcessor</code>, <code class="language-plaintext highlighter-rouge">kapt</code> or <code class="language-plaintext highlighter-rouge">ksp</code> instead of implementation as its build.gradle dependency configuration. Popular libraries that rely on annotation processing include Dagger (<code class="language-plaintext highlighter-rouge">@Provides</code>, <code class="language-plaintext highlighter-rouge">@Inject</code>), Moshi (<code class="language-plaintext highlighter-rouge">@Json</code>), and Room (<code class="language-plaintext highlighter-rouge">@Entity</code>, <code class="language-plaintext highlighter-rouge">@Dao</code>).</p> <p>An annotation processor must be registered to the compiler for it to run during compilation. The most common way to register one is via Google’s AutoService library — just annotate your processor with <code class="language-plaintext highlighter-rouge">@AutoService(Processor.class)</code>.</p> <h2 id="references">References</h2> <ul> <li><a href="https://kotlinlang.org/docs/annotations.html">annotation official doc</a></li> </ul>]]></content><author><name></name></author><category term="Android"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[What is Annotations]]></summary></entry><entry><title type="html">Jetpack Compose Overview</title><link href="https://benwzj.github.io/blog/2024/jetpack-compose/" rel="alternate" type="text/html" title="Jetpack Compose Overview"/><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/jetpack-compose</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/jetpack-compose/"><![CDATA[<h2 id="what-is-jetpack-compose">What is Jetpack Compose</h2> <p>XML has been a staple in Android development since the early days. Jetpack Compose represents a paradigm shift in Android UI development. The first preview of Jetpack Compose was announced in May 2019, and the framework was made ready for production in July 2021.</p> <ul> <li>Jetpack Compose is Android’s recommended modern toolkit for building native <strong>UI</strong>.</li> <li>You can think Jetpack Compose do the same job as React.js. It is declarative, update View according states, etc.</li> <li>You won’t be editing any XML layouts or using the Layout Editor.</li> <li>You will call composable functions to define what elements you want, and the Compose compiler will do the rest.</li> <li>In Jetpack compose you write declarative code that describes how data should be displayed as UI.</li> </ul> <h2 id="composable-functions">Composable functions</h2> <p>Jetpack Compose is built around composable functions. These functions let you define your app’s UI programmatically by describing how it should look and providing data dependencies, rather than focusing on the process of the UI’s construction (initializing an element, attaching it to a parent, etc.).</p> <p>To create a composable function, just add the <code class="language-plaintext highlighter-rouge">@Composable</code> annotation to the function name. The annotation tells the Kotlin compiler that this function is used by Jetpack Compose to convert data into UI.</p> <p>Composable functions are the building blocks of UI in Compose. This encouraging you to break your UI into a library of reusable elements.</p> <h3 id="hello-world-example">Hello World example</h3> <p>Create a new project: In The <code class="language-plaintext highlighter-rouge">MainActivity.kt</code> file</p> <ul> <li>Notice there are some automatically generated functions in this code, specifically the <code class="language-plaintext highlighter-rouge">onCreate()</code> and the <code class="language-plaintext highlighter-rouge">setContent()</code> functions.</li> <li>The <code class="language-plaintext highlighter-rouge">onCreate()</code> function is the entry point to this Android app and calls other functions to build the user interface.</li> <li>The <code class="language-plaintext highlighter-rouge">setContent()</code> function within the <code class="language-plaintext highlighter-rouge">onCreate()</code> function is used to define your layout through composable functions. All functions marked with the <code class="language-plaintext highlighter-rouge">@Composable</code> annotation can be called from the <code class="language-plaintext highlighter-rouge">setContent()</code> function or from other Composable functions.</li> </ul> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContent</span> <span class="p">{</span>
            <span class="nc">MessageCard</span><span class="p">(</span><span class="s">"Android"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">MessageCard</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Hello $name!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="basic-staff">Basic staff</h3> <ul> <li><code class="language-plaintext highlighter-rouge">mutableStateOf(value)</code> creates a <code class="language-plaintext highlighter-rouge">MutableState</code>, which is an observable type in Compose. Any changes to its value will schedule recomposition of any composable functions that read that value.</li> <li><code class="language-plaintext highlighter-rouge">remember</code> stores objects in the composition, and forgets the object when the composable that called <code class="language-plaintext highlighter-rouge">remember</code> is removed from the composition.</li> <li><code class="language-plaintext highlighter-rouge">rememberSaveable</code> retains the state across configuration changes by saving it in a Bundle.</li> </ul> <h3 id="recomposition">Recomposition</h3> <p>In an imperative UI model, to change a widget, you call a setter on the widget to change its internal state. In Compose, you call the composable function again with new data. Doing so causes the function to be recomposed–the widgets emitted by the function are redrawn, if necessary, with new data. The Compose framework can intelligently recompose only the components that changed.</p> <h3 id="composable-functions-just-like-react-components">Composable functions Just like React components</h3> <ul> <li>Composable functions can execute in any order</li> <li>Composable functions can run in parallel</li> <li>Recomposition skips as much as possible</li> <li>Recomposition is optimistic</li> <li>Composable functions might run quite frequently</li> </ul> <h2 id="layout">Layout</h2> <p>Constraints and Modifiers are keys to understand Compose Layout.</p> <h3 id="three-phases-in-compose">Three Phases in Compose</h3> <p>There are three phases in the process of transforming data into UI:</p> <ul> <li><strong>composition</strong>(What to Show): transforme composable functions into a UI tree.</li> <li><strong>layout</strong>(Where to Show): use this UI tree as input, the collection of layout nodes contain all the information needed to eventually decide on each node’s size and location in 2D space. during the layout phase the tree is reversed using the following three-step algorithm: <ul> <li>first a node <strong>measures</strong> its children if any and</li> <li>then based on those measurements it <strong>decides</strong> on its own size and,</li> <li>finally it <strong>places</strong> its children relative to its own position. At the end of the phase each layout note will have an assigned width and height and an x y coordinate of where it should be drawn. each node only visited once.</li> </ul> </li> <li><strong>drawing</strong>(How to Show): now we know the sizes and XY coordinates of all of our layout nodes. the tree is traversed again from top to bottom and each node draws itself on the screen.</li> </ul> <p>We are focus on Layout here.</p> <h3 id="how-to-use-modifier">How to use Modifier</h3> <p>We can chain multiple modifiers, like <code class="language-plaintext highlighter-rouge">Modifier.clip(CircleShape).size(40.dp),</code>. Each modifier node wraps the rest of the chain and the layout node Within. For example when we chain a clip in a size modifier, the clip modifier node wraps the size modifier node which then wraps the image layout node in the layout phase:</p> <figure> <picture> <img src="/assets/img/android-modifier.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="understand-constraints">Understand Constraints</h3> <p>Modifier will decide the positin, size, etc for the node. And Jetpack compose use ‘Constraints’ which come from parent’s node to layout nodes. that means Modifier and Constraint will work together to layout nodes. The Constraint can affect the size of composables, and Modifier(depend on which modifier) affect the Constraints.</p> <h3 id="how-constraint-affect-modifier">How Constraint affect Modifier?</h3> <ul> <li>For example, the passing in constraint is <code class="language-plaintext highlighter-rouge">w:0-300; h:0-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(50)</code>, then the modifier pass constraint <code class="language-plaintext highlighter-rouge">w:50; h:50</code> to next node.</li> <li>The passing in constraint is <code class="language-plaintext highlighter-rouge">w:0-300; h:0-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(500)</code>, then the modifier will adapt to constriant to be <code class="language-plaintext highlighter-rouge">w:300; h:400</code>.</li> <li>If the passing in constraint is <code class="language-plaintext highlighter-rouge">w:50-300; h:50-400</code>, modifier is <code class="language-plaintext highlighter-rouge">size(40)</code>, modifier will adapt to constriant to be <code class="language-plaintext highlighter-rouge">w:50; h:50</code>.</li> <li>If you don’t want node adhere to passing in constraint, you can use <code class="language-plaintext highlighter-rouge">requiredSize()</code>.</li> <li><code class="language-plaintext highlighter-rouge">fillMaxSize()</code> will pass constraint <code class="language-plaintext highlighter-rouge">w:300; h:400</code> in.</li> <li><code class="language-plaintext highlighter-rouge">wrapContentSize()</code> will reset the minium constraint. And also can put it’s child to the center.</li> </ul> <h3 id="how-modifier-adapt-constraint">How Modifier adapt constraint?</h3> <p>After the node get size, location etc, then it will pass the size, etc. back up the tree. The parent will decide the final size and location. Following is a good way to understand the interaction between modifier and contraint:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Image</span><span class="p">(</span>
    <span class="nf">painterResource</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">hero</span><span class="p">),</span>
    <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
    <span class="nc">Modifier</span>
        <span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="nc">CircleShape</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div> <figure> <picture> <img src="/assets/img/jetpack-compose-modifier-constraint.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Here is the process:</p> <ul> <li>The clip modifier does not change the constraints.</li> <li>The padding modifier lowers the maximum constraints.</li> <li>The size modifier sets all constraints to 100dp.</li> <li>The Image adheres to those constraints and reports a size of 100 by 100dp.</li> <li>The padding modifier adds 10dp on all sizes, so it increases the reported width and height by 20dp.</li> <li>Now in the drawing phase, the clip modifier acts on a canvas of 120 by 120dp. So, it creates a circle mask of that size.</li> <li>The padding modifier then insets its content by 10dp on all sizes, so it lowers the canvas size to 100 by 100dp.</li> <li>The Image is drawn in that canvas. The image is clipped based on the original circle of 120dp, so the output is a non-round result.</li> </ul> <h2 id="material-design">Material Design</h2> <p>Compose is built to support Material Design principles. Many of its UI elements implement Material Design out of the box.</p> <h3 id="how-to-use">How to use</h3> <p>Jetpack Compose provides an implementation of Material Design 3 and its UI elements out of the box.</p> <blockquote> <p>Note: the Empty Compose Activity template generates a default theme for your project that allows you to customize MaterialTheme.</p> </blockquote> <p>For example, improving the appearance of <code class="language-plaintext highlighter-rouge">MessageCard</code> composable using Material Design styling.</p> <ol> <li>To start, wrap the <code class="language-plaintext highlighter-rouge">MessageCard</code> function with the Material theme created in your project, <code class="language-plaintext highlighter-rouge">YourProjectTheme</code>, as well as a <code class="language-plaintext highlighter-rouge">Surface</code>.</li> <li>Material Design is built around three pillars: Color, Typography, and Shape. You will add them one by one. <ul> <li>Color: Use MaterialTheme.colorScheme to style with colors from the wrapped theme.</li> <li>Typography: Material Typography styles are available in the MaterialTheme, just add them to the Text composables.</li> </ul> </li> </ol> <h2 id="faq">FAQ</h2> <ul> <li>Why not use HTML, CSS and JavaScript for UI?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://developer.android.com/">android developer website</a></li> <li><a href="https://developer.android.com/develop/ui/compose/layouts/constraints-modifiers">constraints and modifiers order</a></li> </ul>]]></content><author><name></name></author><category term="Android"/><category term="Android"/><category term="Kotlin"/><summary type="html"><![CDATA[What is Jetpack Compose]]></summary></entry><entry><title type="html">Auth Concepts Overview</title><link href="https://benwzj.github.io/blog/2024/all-about-auth/" rel="alternate" type="text/html" title="Auth Concepts Overview"/><published>2024-06-15T00:00:00+00:00</published><updated>2024-06-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/all-about-auth</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/all-about-auth/"><![CDATA[<p>Try to clear the main Auth concepts from higher perspective.</p> <h2 id="term-overview">Term Overview</h2> <h3 id="oauth-vs-openid-vs-oidc">OAuth vs OpenID vs OIDC</h3> <ul> <li>OpenID is based on a simple idea: a user authenticates with an identity provider (IDP), who then provides the user with a <strong>unique identifier</strong> (called an OpenID). This identifier can then be used to authenticate the user with any website that supports OpenID.</li> <li>OAuth(Open Authorization), Originally designed to for applications to get access to APIs. grants access to Other resources via <strong>Access Tokens</strong>.</li> <li>OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.0 framework. It allows third-party applications to verify the identity of the end-user and to obtain basic user profile information. OIDC uses JWTs, which you can obtain using flows conforming to the OAuth 2.0 specifications. Simply saying, it adds an <strong>additional token</strong> called <strong>ID Token</strong>.</li> </ul> <h4 id="anology">Anology</h4> <p>Let’s understand that like this: a Guest check at a hotel reception with ID card, then reception give him a digit key which can unlock a hotel room, or visit gym, swiming pool, etc. Hotel room lock just accept the key and don’t care who use it. Guest is User, Reception is OpenID IDP(Authentication), digit card is Access token. Now, there is a apecial service, kid care, which need digit key, and User information to show up as well. OAuth can do nothing about this, but OIDC can do it!</p> <h3 id="oidc-and-jwt">OIDC and JWT</h3> <p>Each time you need to log in to a website using OIDC, you are redirected to your OpenID site where you log in, and then taken back to the website. For example, if you chose to sign in to Auth0 using your Google account then you used OIDC. Once you successfully authenticate with Google and authorize Auth0 to access your information, Google sends information back to Auth0 about the user and the authentication performed. This information is returned in a JWT. You’ll receive an access token and if requested, an ID token.</p> <p>The OIDC specification defines a set of standard claims for JWT. The set of standard claims include name, email, gender, birth date, and so on. However, if you want to capture information about a user and there currently isn’t a standard claim that best reflects this piece of information, you can create custom claims and add them to your tokens.</p> <h3 id="how-is-oidc-different-from-openid20">How is OIDC different from OpenID2.0?</h3> <p>OIDC has many architectural similarities to OpenID 2.0, and in fact the protocols solve a very similar set of problems. However, OpenID 2.0 used <strong>XML</strong> and a custom message signature scheme that in practice sometimes proved difficult for developers to get right, with the effect that OpenID 2.0 implementations would sometimes mysteriously refuse to interoperate. OAuth 2.0, the substrate for OpenID Connect, outsources the necessary encryption to the Web’s built-in TLS (also called HTTPS or SSL) infrastructure, which is universally implemented on both client and server platforms. OpenID Connect uses standard <strong>JWT</strong> data structures when signatures are required. This makes OpenID Connect dramatically easier for developers to implement, and in practice has resulted in much better interoperability.</p> <h3 id="more-concrete-way-to-understand-the-concepts">More concrete way to understand the concepts</h3> <ul> <li>Authentication = Identifying user</li> <li>Authorization = Accessing APIs</li> </ul> <h2 id="jwt-overview">JWT Overview</h2> <p>JSON Web Token (JWT) defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally <strong>signed</strong>.</p> <ul> <li>JWTs can be <strong>signed</strong> using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.</li> <li>Although JWT can be encrypted to also provide secrecy between parties, It will focus on <strong>signed</strong> tokens.</li> <li>Because most of JWTS are not encrypted, you can read them.</li> <li>It need to be used with HTTPS connection.</li> </ul> <h3 id="two-common-usage-scenarios">TWO common usage scenarios</h3> <ul> <li><strong>Authorization</strong>: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.</li> <li><strong>Information Exchange</strong>: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed — for example, using public/private key pairs — you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn’t been tampered with.</li> </ul> <h3 id="jwt-structure">JWT structure</h3> <p>Three parts separated by dots (.), which are:</p> <ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Like this:</p> <figure> <picture> <img src="/assets/img/encoded-jwt3.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Header and Payload are just plain text that get encoded, but not encrypted. So everyone can read them. JWT just focus on signed.</p> <h3 id="client-sidestateless-sessions">Client-side/Stateless Sessions</h3> <p>The so-called stateless sessions are in fact nothing more than client-side data. Most of the time sessions need only be signed. In other words, there is no security or privacy concern when data stored in them is read by third parties. client-side data can be suffered Security attack like, Signature Stripping, CSRF, XSS. Use JWT propertly can protect. For example adding CSRF mitigation techniques. Sometime a certain balance between client-side data and database lookups in the backend is necessary.</p> <h3 id="one-concrete-example">One Concrete Example</h3> <p>Here copy a example to show how to use JWT.</p> <p>For example we will make a simple shopping application. The user’s shopping cart will be stored client-side. In this example, there are multiple JWTs present. Our shopping cart will be one of them.</p> <ul> <li>One JWT for the ID token, a token that carries the user’s profile information, useful for the UI.</li> <li>One JWT for interacting with the API backend (the access token).</li> <li>One JWT for our client-side state: the shopping cart. Here’s how the shopping cart looks when decoded: <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="mi">4</span><span class="w">
  </span><span class="p">],</span><span class="w">
</span><span class="nl">"iat"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493139659</span><span class="p">,</span><span class="w">
</span><span class="nl">"exp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493143259</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> <p>Each item is identified by a numeric ID. The encoded and signed JWT looks like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpdGVtcyI6WzAsMiw0XSwiaWF0IjoxNDkzMTM5NjU5LCJleHAiOjE0OTMxNDMyNTl9.
932ZxtZzy1qhLXs932hd04J58Ihbg5_g_rIrj-Z16Js
</code></pre></div> </div> <p>To render the items in the cart, the frontend only needs to retrieve it from its cookie:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">populateCart</span><span class="p">()</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">cartElem</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cart</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">cartElem</span><span class="p">.</span><span class="nf">empty</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">cartToken</span> <span class="o">=</span> <span class="nx">Cookies</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cartToken</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">cart</span> <span class="o">=</span> <span class="nf">jwt_decode</span><span class="p">(</span><span class="nx">cartToken</span><span class="p">).</span><span class="nx">items</span><span class="p">;</span>
<span class="nx">cart</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">itemId</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">itemId</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">cartElem</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s2">`&lt;li&gt;</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">);</span>
<span class="p">});</span>
<span class="p">}</span>
</code></pre></div> </div> <p>The actual checks are performed by the backend. All JWTs are verified. Here is the backend check for the validity of the cart JWT implemented as an Express middleware:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cartValidator</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">items</span><span class="p">:</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">verify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
      <span class="nx">cartVerifyJwtOptions</span><span class="p">).</span><span class="nx">items</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> </div> <p>When items are added, the backend constructs a new JWT with the new item in it and a new signature:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected/add_item</span><span class="dl">'</span><span class="p">,</span> <span class="nx">idValidator</span><span class="p">,</span> <span class="nx">cartValidator</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nf">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">newCart</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
<span class="nx">cartSignJwtOptions</span><span class="p">);</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">,</span> <span class="nx">newCart</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Item ID </span><span class="p">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2"> added to cart.`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> <p>Note that locations prefixed by /protected are also protected by the API access token. This is setup using express-jwt:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span> <span class="nf">expressJwt</span><span class="p">({</span>
<span class="na">secret</span><span class="p">:</span> <span class="nx">jwksClient</span><span class="p">.</span><span class="nf">expressJwtSecret</span><span class="p">(</span><span class="nx">jwksOpts</span><span class="p">),</span>
<span class="na">issuer</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_ISSUER</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_AUDIENCE</span><span class="p">,</span>
<span class="na">requestProperty</span><span class="p">:</span> <span class="dl">'</span><span class="s1">accessToken</span><span class="dl">'</span><span class="p">,</span>
<span class="na">getToken</span><span class="p">:</span> <span class="nx">req</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">[</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">];</span>
<span class="p">}</span>
<span class="p">}));</span>
</code></pre></div> </div> <p>In other words, the <code class="language-plaintext highlighter-rouge">/protected/add_item</code> endpoint must first pass the access token validation step before validating the cart. One token validates access (authorization) to the API and the other token validates the integrity of the client side data (the cart). The access token and the ID token are assigned by Auth0 to our application. This requires setting up a client and an API endpoint using the Auth0 dashboard. These are then retrieved using the Auth0 JavaScript library, called by our frontend:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Auth0 Client ID</span>
<span class="kd">const</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">t42WY87weXzepAdUlwMiHYRBQj9qWVAT</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//Auth0 Domain</span>
<span class="kd">const</span> <span class="nx">domain</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">speyrott.auth0.com</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">auth0</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">.</span><span class="nx">auth0</span><span class="p">.</span><span class="nc">WebAuth</span><span class="p">({</span>
<span class="na">domain</span><span class="p">:</span> <span class="nx">domain</span><span class="p">,</span>
<span class="na">clientID</span><span class="p">:</span> <span class="nx">clientId</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span>
<span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">openid profile purchase</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">id_token token</span><span class="dl">'</span><span class="p">,</span>
<span class="na">redirectUri</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000/auth/</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseMode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">form_post</span><span class="dl">'</span>
<span class="p">});</span>
<span class="c1">//(...)</span>
<span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#login-button</span><span class="dl">'</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">auth0</span><span class="p">.</span><span class="nf">authorize</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div> </div> <p>The audience claim must match the one setup for your API endpoint using the Auth0 dashboard. The Auth0 authentication and authorization server displays a login screen with our settings and then redirects back to our application at a specific path with the tokens we requested. These are handled by our backend which simply sets them as cookies:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/auth</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">access_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">id_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> </li> </ul> <p>You can Implement CSRF mitigation techniques on the top of this example.</p> <h2 id="oauth2-overview">OAuth2 Overview</h2> <p>The apps which using OAuth2 usually are web server, browser-based SPA and mobile apps. OAuth 2 provides <strong>Authorization Code</strong> to grant authorization. OAuth still provide other grant type like Password, Client credentials, PKCE.</p> <p>Here will display an Web server App example which can explain the main process of OAuth2. The process in SPA, mobile App have a little bit difference.</p> <p>Let’s say, you are developing a MobilePrinter Website App which using OAuth process. This App can help users print photo in Other server, like Google photos.</p> <h3 id="4-roles">4 Roles</h3> <ul> <li>The Third-Party Application, “Client”, MobilePrinter Website App</li> <li>The API: “Resource Server”, Visiting Google photos</li> <li>The Authorization Server: Google</li> <li>The User: “Resource Owner”</li> </ul> <h3 id="creating-an-app">Creating an App</h3> <p>MobilePrinter must first register a new app with the service.</p> <ul> <li>You must register a redirect URI to be used for redirecting users to for web server.</li> <li>You will get Client ID and Secret.</li> </ul> <h3 id="authorization-process">Authorization process</h3> <p>MobilePrinter Website use Client ID and Secret communicate with the authorization server, (Google).</p> <ul> <li>Create a “Log In” link sending the user to: <code class="language-plaintext highlighter-rouge">https://authorization-server.com/auth?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=REDIRECT_URI&amp;scope=photos&amp;state=1234zyx</code></li> <li>The user sees the authorization prompt (Allow or Deny) from authorization-server.</li> <li>If the user clicks “Allow,” the authorization-service redirects the user back to your site with an authorization code: <code class="language-plaintext highlighter-rouge">https://example-app.com/cb?code=AUTH_CODE_HERE&amp;state=1234zyx</code></li> <li>To Get an Access Token, Your server should exchanges the authorization code for an access token by making a POST request to the authorization server’s token endpoint: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://api.authorization-server.com/token
grant_type=authorization_code&amp;
code=AUTH_CODE_HERE&amp;
redirect_uri=REDIRECT_URI&amp;
client_id=CLIENT_ID&amp;
client_secret=CLIENT_SECRET
</code></pre></div> </div> </li> <li>The server replies with an access token and expiration time <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"access_token"</span><span class="p">:</span><span class="s2">"RsT5OjbzRn430zqMLgV3Ia"</span><span class="p">,</span><span class="w">
</span><span class="nl">"expires_in"</span><span class="p">:</span><span class="mi">3600</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h3 id="pkce">PKCE</h3> <p>Single-page apps (or browser-based apps) run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of a client secret, so the secret is not used in this case.</p> <p>The flow is based on the authorization code flow above, but with the addition of a dynamically generated secret used on each request. This is known as the PKCE extension.</p> <blockquote> <p>Note: Previously, it was recommended that browser-based apps use the “Implicit” flow, which returns an access token immediately in the redirect and does not have a token exchange step. In the time since the spec was originally written, the industry best practice has changed to recommend that the authorization code flow be used without the client secret. This provides more opportunities to create a secure flow, such as using the PKCE extension.</p> </blockquote> <h2 id="session-management">Session Management</h2> <p>Session management involves tracking and managing a user’s interaction with the application over time, ensuring that their authenticated state is preserved across different parts of the application.</p> <p>This prevents the need for repeated logins, enhancing both security and user convenience. There are two primary methods used for session management:</p> <ul> <li>cookie-based (storing session data on the User Browser, data should be encrypted)</li> <li>database sessions（storing session data on the server）</li> </ul> <h3 id="jwt-sessions-vs-database-sessions">JWT Sessions vs Database Sessions</h3> <ul> <li>JWT refer to as stateless. Dataase is the opposite, stateful.</li> <li>Both need cookie (http-only). Database session use cookie for SessionID and JWT use cookies to store more information.</li> <li>JWT need bigger and more cookies; But reduce the interact between server and database.</li> <li>Database Sessions can be safer.</li> <li>JWT also good for Single Sign On.</li> </ul> <h2 id="authentication-solutions">Authentication Solutions</h2> <ul> <li>There are many authentication solutions. Like, Auth0, Clerk, Kinde etc.</li> <li>You can add these solutions to your application.</li> <li>They all support Modern authentication strategies, like OAuth/OpenID Connect (OIDC), Credentials-based login (Email + Password), Passwordless/Token-based authentication.</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>Common use case for JWT?</li> <li>How JWT implement authorization?</li> <li>What is Cross-Site Request Forgery (CSRF)?</li> <li>What is Cross-Site Scripting (XSS)?</li> <li>How is OIDC different from OpenID2.0?</li> </ul> <h3 id="what-is-cross-site-request-forgery-csrf">What is Cross-Site Request Forgery (CSRF)?</h3> <p>Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user’s browser. In a CSRF attack, an innocent end user is tricked by an attacker into submitting a web request that they did not intend. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user’s account.</p> <h3 id="what-is-cross-site-scripting-xss">What is Cross-Site Scripting (XSS)</h3> <p>Cross-site scripting (XSS) attacks attempt to inject JavaScript in trusted sites. Injected JavaScript can then steal tokens from cookies and local storage. If an access token is leaked before it expires, a malicious user could use it to access protected resources.</p> <ul> <li>Don’t use localStorage, cause JS can read it.</li> <li>use cookie with ‘http-only’ setting.</li> </ul> <h3 id="how-jwt-implement-authorization">How JWT implement authorization</h3> <p>JWTs are self-contained, all the necessary information is there, reducing the need of going back and forward to the database. JWTs can container Authorization information.</p> <h2 id="references">References</h2> <ul> <li><a href="https://jwt.io/introduction">jwt.io</a></li> <li><a href="https://aaronparecki.com/oauth-2-simplified/">OAuth2 simplified</a></li> <li>jwt-handbook-v0_14_2.pdf</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="Authentication"/><category term="Authorization"/><category term="JWT"/><category term="OAuth"/><category term="OpenID"/><category term="OIDC"/><summary type="html"><![CDATA[Try to clear the main Auth concepts from higher perspective.]]></summary></entry></feed>