<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-17T23:43:30+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Python Build-in Functions</title><link href="https://benwzj.github.io/blog/2024/python-buildin-func/" rel="alternate" type="text/html" title="Python Build-in Functions"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-buildin-func</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-buildin-func/"><![CDATA[<h2 id="enumerate">enumerate</h2> <p><code class="language-plaintext highlighter-rouge">enumerate(iterable, start=0)</code></p> <p>Return an <strong>enumerate object</strong>. iterable must be a sequence, an iterator, or some other object which supports iteration. The <code class="language-plaintext highlighter-rouge">__next__()</code> method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seasons</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Spring</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Summer</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Winter</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">list</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">))</span>
<span class="c1">#[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
</span><span class="nf">list</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="c1">#[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
</span></code></pre></div></div> <p>Equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">elem</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h3 id="when-use-enumerate-function">When use enumerate function</h3> <ul> <li>When want something like this: <code class="language-plaintext highlighter-rouge">[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</code>.</li> <li>Using Enumerate Object in Loops.</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">apple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">banana</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cherry</span><span class="sh">'</span><span class="p">]</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="c1"># Output:
# 0 apple
# 1 banana
# 2 cherry
</span></code></pre></div></div> <h2 id="hashobject">hash(object)</h2> <p>Return the hash value of the object (if it has one). Hash values are <strong>integers</strong>. They are used to quickly compare dictionary keys during a dictionary lookup.</p> <blockquote> <p>Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p> </blockquote>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[enumerate]]></summary></entry><entry><title type="html">Python Sequence Type</title><link href="https://benwzj.github.io/blog/2024/python-sequenece/" rel="alternate" type="text/html" title="Python Sequence Type"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-sequenece</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-sequenece/"><![CDATA[<h2 id="what-is-python-sequence">What is Python Sequence</h2> <p>In Python, when accessing an attribute of an object, Python is <strong>duck-typed</strong>. The object will only be checked to see if it has an attribute at runtime, and only when immediately requested.</p> <p>However, Python also has <strong>nominal typing</strong> features. Nominal typing is where one type is declared to be a subclass of another.</p> <p>When using duck-typing, the definition can be: A sequence(little s) is any ordered collection of objects which supports efficient element access using integer indices via the <code class="language-plaintext highlighter-rouge">__getitem__()</code> special method and defines a <code class="language-plaintext highlighter-rouge">__len__()</code> method that returns the length of the sequence.</p> <p>For Nominal typing, using <code class="language-plaintext highlighter-rouge">collections.abc.Sequence</code> as base class.</p> <p>For example: A numpy array is a sequence, but it is not a Sequence as it is not registered as a subclass of Sequence.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">isinstance</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="n">collections</span><span class="p">.</span><span class="n">abc</span><span class="p">.</span><span class="n">Sequence</span><span class="p">)</span>
<span class="c1"># False 
</span></code></pre></div></div> <h3 id="there-are-three-basic-sequence-types">There are three basic sequence types:</h3> <ul> <li>lists, typically used to store collections of homogeneous items</li> <li>tuples, typically used to store collections of heterogeneous data</li> <li>range objects, represents an immutable sequence of numbers and is commonly used for looping a specific number of times in <code class="language-plaintext highlighter-rouge">for</code> loops.</li> </ul> <h3 id="here-are-more">Here are more:</h3> <ul> <li>Strings: Textual data in Python is handled with <code class="language-plaintext highlighter-rouge">str</code> objects, or strings. Strings are immutable sequences of Unicode code points.</li> <li>Bytes objects: are immutable sequences of single bytes.</li> <li>Bytearray objects: are a mutable counterpart to bytes objects.</li> <li>Immutable sequence types: support for the <code class="language-plaintext highlighter-rouge">hash()</code> built-in.</li> </ul> <h2 id="common-sequence-operations">Common Sequence Operations</h2> <p>The <code class="language-plaintext highlighter-rouge">collections.abc.Sequence</code> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="ow">in</span> <span class="n">s</span>
<span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span>
<span class="n">s</span> <span class="o">+</span> <span class="n">t</span>
<span class="n">s</span> <span class="o">*</span> <span class="n">n</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
<span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">:</span><span class="n">k</span><span class="p">]</span>
<span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="nf">min</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="nf">max</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">x</span><span class="p">[,</span> <span class="n">i</span><span class="p">[,</span> <span class="n">j</span><span class="p">]])</span>
<span class="n">s</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h2 id="understand-binary-sequence">Understand Binary Sequence</h2> <p>The core built-in types for manipulating binary data are <code class="language-plaintext highlighter-rouge">bytes</code> and <code class="language-plaintext highlighter-rouge">bytearray</code>. They are supported by <code class="language-plaintext highlighter-rouge">memoryview</code> which uses the buffer protocol to access the memory of other binary objects without needing to make a copy.</p> <ul> <li>Bytes objects: are immutable sequences of single bytes.</li> <li>Bytearray objects: are a mutable counterpart to bytes objects.</li> </ul> <h3 id="why-we-need-bytes-object">Why we need Bytes object</h3> <p>The only thing that a computer can store is bytes. To store anything in a computer, you must first encode it, i.e. convert it to bytes. For example:</p> <ul> <li>If you want to store music, you must first encode it using MP3, WAV, etc.</li> <li>If you want to store a picture, you must first encode it using PNG, JPEG, etc.</li> <li>If you want to store text, you must first encode it using ASCII, UTF-8, etc. MP3, WAV, PNG, JPEG, ASCII and UTF-8 are examples of encodings. An encoding is a format to represent audio, images, text, etc. in bytes.</li> </ul> <p>In Python, everything must be converted to a Binary Sequence before it can be stored in a computer. Binary Sequence, sometime can be represented by a byte string, based on text.</p> <h3 id="bytes-objects-and-ascii-text">Bytes objects and ASCII text</h3> <p>Bytes literals and representations can be based on ASCII text, While it is based on text, Only ASCII characters are permitted in bytes literals. Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.</p> <p>And while Bytes literals based on text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that <code class="language-plaintext highlighter-rouge">0 &lt;= x &lt; 256</code> (attempts to violate this restriction will trigger <code class="language-plaintext highlighter-rouge">ValueError</code>).</p> <p>The syntax for bytes literals is largely the same as that for string literals, except that a <code class="language-plaintext highlighter-rouge">b</code> prefix is added: Single quotes: <code class="language-plaintext highlighter-rouge">b'still allows embedded "double" quotes'</code></p> <h3 id="ways-of-creating-bytes-objects-other-than-literal-forms">Ways of Creating Bytes objects other than literal forms</h3> <p>In addition to the literal forms, bytes objects can be created in a number of other ways:</p> <ul> <li>A zero-filled bytes object of a specified length: <code class="language-plaintext highlighter-rouge">bytes(10)</code></li> <li>From an iterable of integers: <code class="language-plaintext highlighter-rouge">bytes(range(20))</code></li> <li>Copying existing binary data via the buffer protocol: <code class="language-plaintext highlighter-rouge">bytes(obj)</code></li> </ul> <h4 id="classmethod-fromhexstring">classmethod fromhex(string)</h4> <p>This bytes class method returns a bytes object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> bytes.fromhex<span class="o">(</span><span class="s1">'2Ef0 F1f2  '</span><span class="o">)</span>
b<span class="s1">'.\xf0\xf1\xf2'</span>
</code></pre></div></div> <h4 id="hex">hex()</h4> <p>Return a string object containing two hexadecimal digits for each byte in the instance.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\xf0\xf1\xf2'</span>.hex<span class="o">()</span>
<span class="s1">'f0f1f2'</span>
</code></pre></div></div> <h3 id="bytes-and-strings">Bytes and Strings</h3> <p>In Python 3, there is a much cleaner separation between text and binary data. Text is always Unicode and is represented by the <code class="language-plaintext highlighter-rouge">str</code> type, and binary data is represented by the <code class="language-plaintext highlighter-rouge">bytes</code> type. What makes the separation particularly clean is that <code class="language-plaintext highlighter-rouge">str</code> and <code class="language-plaintext highlighter-rouge">bytes</code> can’t be mixed in Python 3 in any implicit way.</p> <ul> <li> <p>The <code class="language-plaintext highlighter-rouge">bytes</code> type is a sequence of bytes that have been encoded and are ready to be stored in memory/disk. There are many types of encodings (utf-8, utf-16, also PNG, JPEG, MP3, WAV etc.), which all handle the bytes differently. The bytes object can be decoded into a <code class="language-plaintext highlighter-rouge">str</code> type or others.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">str</code> type is a sequence of <strong>unicode</strong> characters. The str needs to be encoded to be stored, but is mutable and an abstraction of the bytes logic. (Unicode Sandwich theory!)</p> </li> <li> <p>There is a strong relationship between <code class="language-plaintext highlighter-rouge">str</code> and <code class="language-plaintext highlighter-rouge">bytes</code>. <code class="language-plaintext highlighter-rouge">bytes</code> can be decoded into a <code class="language-plaintext highlighter-rouge">str</code>, and <code class="language-plaintext highlighter-rouge">str</code>s can be encoded into <code class="language-plaintext highlighter-rouge">bytes</code>.</p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="s1">'€20'</span>.encode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
b<span class="s1">'\xe2\x82\xac20'</span>
<span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\xe2\x82\xac20'</span>.decode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
<span class="s1">'€20'</span>
</code></pre></div></div> <h3 id="bytearray-objects">Bytearray Objects</h3> <p>bytearray object share all behavior with bytes except for it’s <strong>mutability</strong>.</p> <p>There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:</p> <ul> <li>Creating an empty instance: <code class="language-plaintext highlighter-rouge">bytearray()</code></li> <li>Creating a zero-filled instance with a given length: <code class="language-plaintext highlighter-rouge">bytearray(10)</code></li> <li>From an iterable of integers: <code class="language-plaintext highlighter-rouge">bytearray(range(20))</code></li> <li>Copying existing binary data via the buffer protocol: <code class="language-plaintext highlighter-rouge">bytearray(b'Hi!')</code></li> </ul> <p>Bytearray Objects Support classmethod <code class="language-plaintext highlighter-rouge">fromhex(string)</code> and <code class="language-plaintext highlighter-rouge">hex()</code> as well. akin to bytes.</p> <h2 id="array">Array</h2> <p>Arrays are sequence types and behave very much like lists, except that <strong>the type of objects stored in them is constrained</strong>. Array represent an array of basic values, like characters, integers, floating-point numbers.</p> <p>The type of the object which Array contain is specified at object creation time by using a <code class="language-plaintext highlighter-rouge">typecode</code>. <code class="language-plaintext highlighter-rouge">typecode</code> is a single character. For example, ‘l’ means <code class="language-plaintext highlighter-rouge">signed long</code>. You can do this: <code class="language-plaintext highlighter-rouge">array('l', [1, 2, 3, 4, 5])</code>.</p> <blockquote> <p>The NumPy package defines another array type.</p> </blockquote> <h2 id="references">References</h2> <ul> <li><a href="https://docs.python.org/3/library/array.html">Python official doc on Array</a>.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="String"/><summary type="html"><![CDATA[What is Python Sequence]]></summary></entry><entry><title type="html">Python String</title><link href="https://benwzj.github.io/blog/2024/python-string/" rel="alternate" type="text/html" title="Python String"/><published>2024-12-14T00:00:00+00:00</published><updated>2024-12-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-string</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-string/"><![CDATA[<p>Textual data in Python is handled with <code class="language-plaintext highlighter-rouge">str</code> objects, or call strings. Strings are immutable sequences of Unicode code points.</p> <ul> <li>Like JavaScript, strings in Python are arrays of bytes representing unicode characters.</li> <li>Square brackets can be used to access elements of the string.</li> <li>You can loop through a string.</li> <li>Using <code class="language-plaintext highlighter-rouge">len()</code> to get length of a string.</li> <li>Support keyword in, not in.</li> <li>Python doesn’t have character type, a single character is simply a string with a length of 1.</li> <li>You can assign a multiline string to a variable by using three quotes.</li> <li>Python has a set of built-in methods that you can use on strings.</li> </ul> <h2 id="basic-operation">Basic Operation</h2> <h3 id="string-slice-syntax">String slice syntax</h3> <p>string slice is a convenient way to operate string.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>    <span class="c1">#"l"
</span><span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>  <span class="c1">#"llo"
</span><span class="n">b</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1">#reverse a string: "!dlroW ,olleH"
</span></code></pre></div></div> <h3 id="split-string">split string</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">))</span> <span class="c1"># ['Hello', ' World!']
</span></code></pre></div></div> <h3 id="join-string">join string</h3> <p>opposite of split(), joins the elements in the given list together.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> World!</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">a</span><span class="p">))</span> <span class="c1"># "Hello, World!"
</span></code></pre></div></div> <h3 id="replace">replace</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Hello, World!</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">H</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">J</span><span class="sh">"</span><span class="p">))</span> <span class="c1"># "Jello, World!"
</span></code></pre></div></div> <h3 id="find-and-rfind">find() and rfind()</h3> <p>find() return the index of the first location. rfine() return the index of last one.</p> <h3 id="slower-supper">s.lower(), s.upper()</h3> <p>returns the lowercase or uppercase version of the string</p> <h3 id="translate">translate()</h3> <p>The <code class="language-plaintext highlighter-rouge">translate()</code> method returns a string where some specified characters are replaced with the character described in a dictionary, or in a mapping table.</p> <ul> <li>Use the str.maketrans() method to create a mapping table.</li> </ul> <h2 id="str-object">str Object</h2> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">str</span><span class="p">(</span><span class="nb">object</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">str</span><span class="p">(</span><span class="nb">object</span><span class="o">=</span><span class="sa">b</span><span class="sh">''</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">'</span><span class="s">strict</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Return a string version of object. If object is not provided, returns the empty string. Otherwise, the behavior of <code class="language-plaintext highlighter-rouge">str()</code> depends on whether encoding or errors is given.</p> <p><code class="language-plaintext highlighter-rouge">print("20 days are " + str(20*24*60*60) +" seconds")</code></p> <h2 id="string-module">String module</h2> <p>string module is a built-in module and we have to import it before using any of its constants and classes. Because str class, String module have been old. and you should not use.</p> <h2 id="string-format">String format</h2> <p>There are several way to format, manipulate string:</p> <ul> <li>printf-style, template, str.format() have been old style way.</li> <li>f-string is the latest way and recommend use.</li> </ul> <h3 id="printf-style-string-formatting-old-sytle">printf-style String Formatting (old sytle)</h3> <p>String objects have one unique built-in operation: the % operator (modulo). The effect is similar to using the sprintf() in the C language. Example:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="err">'</span><span class="o">%</span><span class="p">(</span><span class="n">language</span><span class="p">)</span><span class="n">s</span> <span class="n">has</span> <span class="o">%</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="mo">03</span><span class="n">d</span> <span class="n">quote</span> <span class="n">types</span><span class="p">.</span><span class="err">'</span> <span class="o">%</span>
      <span class="p">{</span><span class="err">'</span><span class="n">language</span><span class="err">'</span><span class="o">:</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"number"</span><span class="o">:</span> <span class="mi">2</span><span class="p">})</span>
<span class="c1">// Python has 002 quote types.</span>
</code></pre></div></div> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dec2hexstring</span><span class="p">(</span><span class="n">dec</span><span class="p">):</span>
    <span class="n">decimal</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>
    <span class="n">hexa</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%#X</span><span class="sh">'</span> <span class="o">%</span> <span class="n">decimal</span>
    <span class="k">return</span> <span class="n">hexa</span>
</code></pre></div></div> <p>But recommend to use the newer formatted string literals, the str.format() interface, or template strings. f-String is latest way to format string!</p> <h3 id="strformatargs-kwargs">str.format(*args, **kwargs)</h3> <p>Perform a string formatting operation. (Format string means create string, make string.) The string on which this method is called can contain literal text or replacement fields delimited by braces {}.</p> <ul> <li>Introduced in Python 2.6.</li> <li>str.format(), when deal with multiple arguments, and long strings. it will looks verbose.</li> </ul> <p><code class="language-plaintext highlighter-rouge">"The sum of 1 + 2 is {0}".format(1+2)</code> get <code class="language-plaintext highlighter-rouge">'The sum of 1 + 2 is 3'</code></p> <p><code class="language-plaintext highlighter-rouge">'{2}, {1}, {0}'.format('a', 'b', 'c')</code> get <code class="language-plaintext highlighter-rouge">'c, b, a'</code></p> <h4 id="format-string-syntax">Format String Syntax:</h4> <p><code class="language-plaintext highlighter-rouge">replacement_field ::= "{" [field_name] ["!" conversion] [":" format_spec] "}"</code></p> <p><code class="language-plaintext highlighter-rouge">field_name</code> can be 0, 1, 2… which is positional of the parameters. or be nothing, which still positional. or be key name of the dic which is the parameter. or be attribute of object which is the parameter.</p> <p><code class="language-plaintext highlighter-rouge">conversion</code> have three options: !s, !r, !a <code class="language-plaintext highlighter-rouge">"repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')</code> get <code class="language-plaintext highlighter-rouge">"repr() shows quotes: 'test1'; str() doesn't: test2"</code></p> <p><code class="language-plaintext highlighter-rouge">format_spec</code> is a Mini-Languag! Start from ‘:’. For example display in Hexadecimal, or octal, binary. It can do more, specify the type, fill, align, width, precision :</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>align, text <span class="k">in </span>zip<span class="o">(</span><span class="s1">'&lt;^&gt;'</span>, <span class="o">[</span><span class="s1">'left'</span>, <span class="s1">'center'</span>, <span class="s1">'right'</span><span class="o">])</span>:
...     <span class="s1">'{0:{fill}{align}16}'</span>.format<span class="o">(</span>text, <span class="nv">fill</span><span class="o">=</span>align, <span class="nv">align</span><span class="o">=</span>align<span class="o">)</span>
...
<span class="s1">'left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'</span>
<span class="s1">'^^^^^center^^^^^'</span>
<span class="s1">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;right'</span>
</code></pre></div></div> <p>Using the comma as a thousands separator:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="s1">'{:,}'</span>.format<span class="o">(</span>1234567890<span class="o">)</span>
<span class="s1">'1,234,567,890'</span>
</code></pre></div></div> <p>Nesting arguments:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">align</span><span class="p">,</span> <span class="n">text</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;^&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">center</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">]):</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">{:{fill}{align}30}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">align</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="n">align</span><span class="p">))</span>
</code></pre></div></div> <h3 id="template-strings">Template strings</h3> <p>Template strings is very simple string formatting tool which focus on substitutions.</p> <p>A primary use case for template strings is for internationalization (i18n) since in that context, the simpler syntax and functionality makes it easier to translate than other built-in string formatting facilities in Python. The string module provides a Template class that implements these rules. Main methods is <code class="language-plaintext highlighter-rouge">substitute()</code>, and <code class="language-plaintext highlighter-rouge">safe_substitute()</code></p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">string</span> <span class="kn">import</span> <span class="n">Template</span>
<span class="n">s</span> <span class="o">=</span> <span class="nc">Template</span><span class="p">(</span><span class="sh">'</span><span class="s">$who likes $what</span><span class="sh">'</span><span class="p">)</span>
<span class="n">s1</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">substitute</span><span class="p">(</span><span class="n">who</span><span class="o">=</span><span class="sh">'</span><span class="s">tim</span><span class="sh">'</span><span class="p">,</span> <span class="n">what</span><span class="o">=</span><span class="sh">'</span><span class="s">kung pao</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c1">#'tim likes kung pao'
</span></code></pre></div></div> <h3 id="formatted-string-literal--f-strings-python-36-new-syntax">formatted string literal / f-Strings (Python 3.6+ new syntax)</h3> <ul> <li>(f-String are similar to JavaScript’s Template Literal)</li> <li>A formatted string literal or f-string is a string literal that is prefixed with ‘f’ or ‘F’.</li> <li>These strings may contain replacement fields, which are expressions delimited by curly braces {}.</li> <li>While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</li> <li>f-strings are a great new way to format strings. Not only are they more readable, more concise, and less prone to error than other ways of formatting, but they are also faster!</li> <li>format syntax is similar to str.format()</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Fred</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="s">He said his name is </span><span class="si">{</span><span class="n">name</span><span class="si">!r}</span><span class="s">.</span><span class="sh">"</span>
<span class="sh">"</span><span class="s">He said his name is </span><span class="sh">'</span><span class="s">Fred</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="s">He said his name is </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span>
<span class="sh">"</span><span class="s">He said his name is Fred.</span><span class="sh">"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number</span><span class="si">:</span><span class="c1">#0x</span><span class="si">}</span><span class="sh">"</span>  <span class="c1"># using integer format specifier
</span><span class="sh">'</span><span class="s">0x400</span><span class="sh">'</span>
</code></pre></div></div> <ul> <li>Support triple quote mark. So it is easy to support Multiline f-Strings</li> <li>f-string support function</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> def to_lowercase<span class="o">(</span>input<span class="o">)</span>:
...     <span class="k">return </span>input.lower<span class="o">()</span>

<span class="o">&gt;&gt;&gt;</span> name <span class="o">=</span> <span class="s2">"Eric Idle"</span>
<span class="o">&gt;&gt;&gt;</span> f<span class="s2">"{to_lowercase(name)} is funny."</span>
<span class="s1">'eric idle is funny.'</span>
</code></pre></div></div> <h2 id="unicode-support">Unicode Support</h2> <p>Great presentation about Unicode: https://nedbatchelder.com/text/unipain.html</p> <h3 id="overview">Overview</h3> <p>Strings can either be represented in bytes or unicode code points. Byte strings and unicode strings each have a method to convert it to the other type of string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unicode .encode() → bytes
bytes .decode() → unicode
</code></pre></div></div> <p>In Python 2, a string is by default a binary string and you need to use u’’ to mark a string as a Unicode string. If you try to perform a string operation that combines a unicode string with a byte string, Python 2 try to be helpful, it will implicitly decode the byte string to produce a second unicode string, then complete the operation. But the conversion from int to float can’t fail, while byte string to unicode string can.</p> <p>In Python 3, a string by default is a Unicode string (You don’t need to know HOW Python deal with it), and you need to use b’’ to explicitly mark a string as a binary string. bytes and str are different types. In Python3, they are not converted to each other implicitly. You need to handle both types by yourself.</p> <p>The default encoding for Python source code is UTF-8, so you can simply include a Unicode character (or use u escape) in a string literal:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print<span class="o">(</span><span class="s2">"Fichier non trouvé"</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s2">"</span><span class="se">\u</span><span class="s2">0394"</span>     <span class="c"># Using a 16-bit hex value</span>
<span class="s1">'\u0394'</span>
</code></pre></div></div> <p>Python 3 also supports using Unicode characters in identifiers. (JavaScript support as well)</p> <h3 id="unicode-sandwich-theory">Unicode Sandwich theory</h3> <figure> <picture> <img src="/assets/img/python-string-unicode.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>A good practice is to decode your bytes in UTF-8 (or an encoder that was used to create those bytes) as soon as they are loaded from a file. Run your processing on unicode code points through your Python code, and then write back into bytes into a file using UTF-8 encoder in the end.</p> <p>Python3 handles Unicode strings with unicode code points. You don’t need to know HOW. This is the job of Python 3. You can just take it as a black box. Python3 make sure you can use all the methods of str type. Just remember the Sandwich mode! What you need to handle is decode as soon as possible, and encode at the end.</p> <h3 id="5-fact-of-life-about-unicode-string-in-python">5 fact of life about unicode string in Python</h3> <ol> <li> <p>everything in a computer is bytes. Files on disk are a series of bytes, and network connections only transmit bytes.</p> </li> <li> <p>The world needs more than 256 symbols</p> </li> <li>Bytes and Unicode, Need to keep them straight, Need to deal with both. <ul> <li>You can’t pretend that everything is bytes, or everything is unicode. You need to use each for their purpose, and explicitly convert between them as needed.</li> <li>So Python 2’s pain is deferred: you think your program is correct, and find out later that it fails with exotic characters.</li> <li>With Python 3, your code fails immediately, so even if you are only handling ASCII, you have to explicitly deal with the difference between bytes and unicode.</li> </ul> </li> <li> <p>Encoding is out-of-band. You cannot infer the encoding of bytes. You must be told, or you have to guess.</p> </li> <li>Data is dirty. Sometimes you are told wrong.</li> </ol> <h3 id="3-pro-tips">3 Pro tips</h3> <ul> <li>Unicode Sandwich</li> <li>Know what you have! Bytes or Unicode? If bytes, what encoding?</li> <li>Test Unicode</li> </ul> <h3 id="reading-files">Reading files</h3> <p>In Python 3, the two modes produce different results. When you open a file in text mode, either with “r”, or by defaulting the mode entirely, the data read from the file is implicitly decoded into Unicode, and you get str objects. If you open a file in binary mode, by supplying “rb” as the mode, then the data read from the file is bytes, with no processing done on them.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hello.txt"</span>, <span class="s2">"r"</span><span class="o">)</span>.read<span class="o">()</span>
<span class="s1">'Hello, world!\n'</span>
<span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hello.txt"</span>, <span class="s2">"rb"</span><span class="o">)</span>.read<span class="o">()</span>
b<span class="s1">'Hello, world!\n'</span>
</code></pre></div></div> <p>To get the file read properly, you should specify an encoding to use. The open() function now has an optional encoding parameter.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hi_utf8.txt"</span>, <span class="s2">"r"</span>, <span class="nv">encoding</span><span class="o">=</span><span class="s2">"utf-8"</span><span class="o">)</span>.read<span class="o">()</span>
<span class="s1">'Hi \u2119\u01b4\u2602\u210c\xf8\u1f24'</span>
<span class="o">&gt;&gt;&gt;</span> open<span class="o">(</span><span class="s2">"hi_utf8.txt"</span>, <span class="s2">"r"</span><span class="o">)</span>.read<span class="o">()</span> <span class="c"># wrong encoding</span>
<span class="s1">'Hi \xe2\u201e\u2122\xc6\xb4\xe2\u02dc\u201a\xe2\u201e\u0152\xc3\xb8\xe1\xbc\xa4'</span>
</code></pre></div></div> <h3 id="internal-representations-for-unicode-strings">Internal representations for Unicode strings</h3> <p>Even the default encoding for Python source code is UTF-8. But for Unicode strings, Python uses three kinds of internal representations : 1 byte per char (Latin-1 encoding) 2 bytes per char (UCS-2 encoding) 4 bytes per char (UCS-4 encoding)</p> <p>If all characters in a string can fit in ASCII range, then they are encoded using 1-byte Latin-1 encoding. But if there are any char which need two bytes, then Python will encoding all to UCS-2. same</p> <p>This is because each character in a string must take up an equivalent number of bytes! otherwise, operations such as indexing, slicing would be inaccurate.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s0 <span class="o">=</span> <span class="s1">'a'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s0+<span class="s1">'b'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s0<span class="o">))</span>
<span class="o">&gt;</span>1
s1 <span class="o">=</span> <span class="s1">'你'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'你'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>2
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'你a'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>4
s1 <span class="o">=</span> <span class="s1">'🐍'</span>
print<span class="o">(</span>sys.getsizeof<span class="o">(</span>s1+<span class="s1">'🐍你'</span><span class="o">)</span> - sys.getsizeof<span class="o">(</span>s1<span class="o">))</span>
<span class="o">&gt;</span>8
</code></pre></div></div> <p>Within CPython, unicode characters are stored as PyUnicodeObject instances. We can view the format of a PyUnicodeObject by looking at the source code:</p> <figure> <picture> <img src="/assets/img/PyUnicodeObject.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="build-in-function-chr-ord">build-in function chr(), ord()</h3> <p>Convert between One-character Unicode strings and code point value. These tow functions do nothing about encoding.</p> <h4 id="chr">chr()</h4> <p>takes code point value(integers) and returns a Unicode string of length 1 that contains the corresponding code point.</p> <h4 id="ord">ord()</h4> <p>takes a one-character Unicode string and returns the code point value (integers).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># '\u0041' == 'A'</span>
<span class="o">&gt;&gt;&gt;</span> chr<span class="o">(</span>65<span class="o">)</span>
<span class="s1">'\u0041'</span>
<span class="o">&gt;&gt;&gt;</span> ord<span class="o">(</span><span class="s1">'\u0041'</span><span class="o">)</span>
65
</code></pre></div></div> <h3 id="unicode-literals-in-python-source-code">Unicode Literals in Python Source Code</h3> <p>In Python source code, specific Unicode code points can be written using the \u escape sequence, which is followed by four hex digits giving the code point. The \U escape sequence is similar, but expects eight hex digits, not four:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> s <span class="o">=</span> <span class="s2">"a</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\u</span><span class="s2">1234</span><span class="se">\u</span><span class="s2">20ac</span><span class="se">\U</span><span class="s2">00008000"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">[</span>ord<span class="o">(</span>c<span class="o">)</span> <span class="k">for </span>c <span class="k">in </span>s]
<span class="o">[</span>97, 172, 4660, 8364, 32768]
</code></pre></div></div> <h3 id="bytesdecode-and-strencode">bytes.decode() and str.encode()</h3> <h4 id="bytesdecode-can-create-a-string">bytes.decode() can create a string.</h4> <p>This method takes an encoding argument, such as UTF-8, and optionally an errors argument. (\xNN escape sequence means that NN is Hexadecimal value)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\x41'</span>.decode<span class="o">(</span><span class="s2">"utf-8"</span><span class="o">)</span>
A
<span class="o">&gt;&gt;&gt;</span> b<span class="s1">'\x41\x00'</span>.decode<span class="o">(</span><span class="s2">"utf-16"</span><span class="o">)</span>
A
</code></pre></div></div> <h4 id="strencode">str.encode()</h4> <p>returns a bytes representation of the Unicode string, encoded in the requested encoding. (opposite method of bytes.decode())</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> u <span class="o">=</span> chr<span class="o">(</span>65<span class="o">)</span> + <span class="s1">'abcd'</span> + chr<span class="o">(</span>66<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> u.encode<span class="o">(</span><span class="s1">'utf-8'</span><span class="o">)</span>
b<span class="s1">'AabcdB'</span>
<span class="o">&gt;&gt;&gt;</span> u.encode<span class="o">(</span><span class="s1">'utf-16'</span><span class="o">)</span>
b<span class="s1">'\xff\xfeA\x00a\x00b\x00c\x00d\x00B\x00'</span>
</code></pre></div></div> <ul> <li>Unicode code point for emoji 🖐 is U+1F590</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">((</span><span class="sh">"</span><span class="s">你好🖐</span><span class="sh">"</span><span class="p">).</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">unicode_escape</span><span class="sh">"</span><span class="p">))</span>
<span class="sa">b</span><span class="sh">'</span><span class="se">\\</span><span class="s">u4f60</span><span class="se">\\</span><span class="s">u597d</span><span class="se">\\</span><span class="s">U0001f590</span><span class="sh">'</span>

<span class="nf">print</span><span class="p">((</span><span class="sh">"</span><span class="s">你好🖐</span><span class="sh">"</span><span class="p">).</span><span class="nf">encode</span><span class="p">())</span> 
<span class="sa">b</span><span class="sh">'</span><span class="se">\xe4\xbd\xa0\xe5\xa5\xbd\xf0\x9f\x96\x90</span><span class="sh">'</span>
</code></pre></div></div> <h3 id="codecs-module">codecs module</h3> <p>The low-level routines for registering and accessing the available encodings are found in the codecs module. Implementing new encodings also requires understanding the codecs module.</p> <h2 id="unicode-in-javascript">Unicode in JavaScript</h2> <ul> <li>While a JavaScript source file can have any kind of encoding, JavaScript will then convert it internally to UTF-16 before executing it.</li> <li>JavaScript strings are all UTF-16 sequences, as the ECMAScript standard says: When a String contains actual textual data, each element is considered to be a single UTF-16 code unit.</li> <li>UTF-16 encoding need to use with surrogate pairs. For the code points which bigger than U+FFFF.</li> <li>Example (use u escape):</li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">the heart eyes emoji is </span><span class="se">\</span><span class="s1">ud83d</span><span class="se">\</span><span class="s1">ude0d</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">//&gt; the heart eyes emoji is 😍</span>
</code></pre></div></div> <h3 id="tips-for-writing-unicode-aware-programs">Tips for Writing Unicode-aware Programs</h3> <ul> <li>Software should only work with Unicode strings internally,</li> <li>decoding the input data as soon as possible and,</li> <li>encoding the output only at the end.</li> </ul> <h2 id="string-interning">String interning</h2> <p>String interning is a method of storing only one copy of each distinct string value in memory, which must be immutable.</p> <ul> <li>String interning concept is akin to shared object concept! shared object is more popular in immutable object.</li> <li>String Interning can Saving Memory, Fast Comparisons, Fast Dictionary Lookups.</li> </ul> <h3 id="implicit-string-interning">Implicit String interning</h3> <p>Implicitly intern string depends on several factors:</p> <ul> <li>All empty strings and strings of length 1 are interned.</li> <li>Up until version 3.7, Python used peephole optimization, and all strings longer than 20 characters were not interned. However, now it uses the AST optimizer, and (most) strings up to 4096 characters are interned.</li> <li>Names of functions, class, variables, arguments, etc. are implicitly interned.</li> <li>The keys of dictionaries used to hold module, class, or instance attributes are interned.</li> <li>Strings are interned only at compile-time, this means that they will not be interned if their value can’t be computed at compile-time.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 <span class="o">=</span> <span class="s1">'iambenwen'</span>
s2 <span class="o">=</span> <span class="s1">'iambenwen'</span>
print<span class="o">(</span>s1 is s2<span class="o">)</span>
<span class="o">&gt;</span><span class="nb">true</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s2">"strin"</span>+<span class="s2">"g"</span> is <span class="s2">"string"</span>
True
</code></pre></div></div> <h4 id="python-wont-intern-all-the-string">Python won’t intern all the string.</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> <span class="s1">'Y'</span><span class="k">*</span>4097
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> <span class="s1">'Y'</span><span class="k">*</span>4097
<span class="o">&gt;&gt;&gt;</span> c is d
<span class="nb">false

</span>s1 <span class="o">=</span> <span class="s2">"wen"</span>.join<span class="o">([</span><span class="s2">"b"</span>, <span class="s2">"e"</span>, <span class="s2">"n"</span><span class="o">])</span>
s2 <span class="o">=</span> <span class="s2">"wen"</span>.join<span class="o">([</span><span class="s2">"b"</span>, <span class="s2">"e"</span>, <span class="s2">"n"</span><span class="o">])</span>
print<span class="o">(</span>s1 is s2<span class="o">)</span>
<span class="o">&gt;</span><span class="nb">false</span>

<span class="o">&gt;&gt;&gt;</span> s1 <span class="o">=</span> <span class="s2">"strin"</span>
<span class="o">&gt;&gt;&gt;</span> s2 <span class="o">=</span> <span class="s2">"string"</span>
<span class="o">&gt;&gt;&gt;</span> s1+<span class="s2">"g"</span> is s2
False
</code></pre></div></div> <h4 id="dont-rely-on-the-implicit-string-interning">Don’t Rely on the Implicit String Interning</h4> <p>Because the rules of the implicit string interning could be different according to different compiler, interpreter. For example, up until the version of Python 3.7, the peephole optimization is used for string interning and all strings longer than 20 characters will not be interned. However, the algorithm was changed to the AST optimizer then, and the length is equal to 4096 rather than 20.</p> <h3 id="explicit-interning">Explicit interning</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> import sys
<span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> sys.intern<span class="o">(</span><span class="s1">'Y'</span><span class="k">*</span>4097<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> sys.intern<span class="o">(</span><span class="s1">'Y'</span><span class="k">*</span>4097<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> c is d
True
</code></pre></div></div> <p>In practice, we should use the == operator to compare strings. If we need to speed up the comparison, intern the strings explicitly.</p> <h3 id="disadvantages-of-string-interning">Disadvantages of String Interning</h3> <ul> <li>Memory Cost.</li> <li>Time Cost: The call to intern() function is expensive as it has to manage the interned table.</li> <li>not friendly for Multi-threaded Environments .</li> </ul> <h3 id="the-following-comparison-returns-true-because-of-shared-objects">The following comparison returns True because of shared objects.</h3> <p>CPython loads the Latin-1 range of characters unicode decimals 0 to 255, inclusive, as shared objects every time Python is initialized. Any calls to values in this range are referred to those pre-existing objects.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s3</span> <span class="o">=</span> <span class="sh">'</span><span class="s">levin</span><span class="sh">'</span>
<span class="n">s4</span> <span class="o">=</span> <span class="sh">'</span><span class="s">elise</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s3</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="n">s4</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="c1">#&gt;true
</span></code></pre></div></div> <h2 id="string-questions">String Questions</h2> <h3 id="if-using-u-escape-sequence-follow-by-code-point-can-display-unicode-string-why-need-encoding">If using u escape sequence follow by code point can display Unicode string. why need encoding?</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\u0041\u1234\u20ac\u8000\U0002070E</span><span class="sh">"</span>

<span class="nf">print</span><span class="p">([</span><span class="nf">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">])</span> <span class="c1"># get unicode’s integer value:
#&gt;[65, 4660, 8364, 32768, 132878]
</span>
<span class="nf">print</span><span class="p">([</span><span class="nf">chr</span><span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">])</span> <span class="c1"># get one-character string: 
#&gt;['A', 'ሴ', '€', '耀', '𠜎']
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get actually bytes of utf-8 encoding: 
#&gt;41e188b4e282ace88080f0a09c8e
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-16</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get utf-16
#&gt;fffe41003412ac20008041d80edf
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-32</span><span class="sh">'</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span> <span class="c1"># get utf-32
#&gt;fffe00004100000034120000ac200000008000000e070200
</span></code></pre></div></div> <p>(The Unicode character U+FEFF is used as a byte-order mark (BOM), and is often written as the first character of a file in order to assist with auto detection of the file’s byte ordering. )</p> <ul> <li> <p>ONE important concept is that, in Python, only refer to store or transmit strings when talking about encodings.</p> </li> <li>Using code point can display unicode string! utf-32 can be represented by codepoint totally. But this encoding have some shortcoming. like consuming too many space, byte ordering issue.</li> <li>Python say it represent string with code point internally. it is possible and it is good to support string methods. The encoding can be ASCII, or USC2, or USC4. But user can store or transmit string by UTF-8</li> </ul> <h3 id="how-to-change-str-encoding">How to change str encoding.</h3> <p>In Python, str type is Unicode string. str’s encoding just for store or transmission. str.encode() support around 100 encoding type.</p> <h3 id="how-to-know-the-encoding-of-one-string-how-do-python-identify-the-encoding-of-one-string">How to know the encoding of one String? How do Python identify the encoding of one string?</h3> <p>Encoding is out-of-band. You cannot infer the encoding of bytes. You must be told, or you have to guess.</p> <h3 id="how-to-judge-the-string-if-we-just-get-part-of-the-string">How to judge the string if we just get part of the string?</h3> <p>UTF-8 performing better at this issue.</p> <h3 id="how-to-indexing-slicing-getting-length-of-a-unicode-string">How to indexing, slicing, getting length of a Unicode String?</h3> <p>Variable length encoding can make indexing slicing getting length fail. Python’s string type is using Unicode, but internal encoding is vary which depending on what characters the string contains.</p> <h3 id="what-is-the-relationship-between-string-interning-and-encoding">What is the relationship between string interning and encoding?</h3> <p>Not relative</p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="String"/><summary type="html"><![CDATA[Textual data in Python is handled with str objects, or call strings. Strings are immutable sequences of Unicode code points.]]></summary></entry><entry><title type="html">Python Collection Overview</title><link href="https://benwzj.github.io/blog/2024/python-collection/" rel="alternate" type="text/html" title="Python Collection Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-collection</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-collection/"><![CDATA[<h2 id="concepts-of-containers-collections-sequences-mappings">Concepts of Containers, Collections, Sequences, Mappings</h2> <ul> <li>Containers &gt; Collections &gt; Sequences</li> <li>Container concept is under the context of Object: Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</li> <li>Collection: data structures that store and organize data. They are container data types that allow you to add, remove, and iterate over items. Python has 4 built-in data structures that can be used to hold a collection of objects, they are <ul> <li>list</li> <li>tuple</li> <li>set</li> <li>dictionary</li> </ul> </li> <li>Containers or Collections are objects that are used to store different objects and provide a way to access the contained objects and iterate over them. <ul> <li>Python Standard Library provide <strong>collections module</strong> to implement specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.</li> <li>You can use the <code class="language-plaintext highlighter-rouge">counter</code> function to count the number of occurrences of each element in a container.</li> </ul> </li> <li>A sequence is an <strong>ordered</strong> collection. They maintain the order of the things in them. (set, dict are NOT sequence). Sequences are a special type of iterable that can be indexed using square brackets <code class="language-plaintext highlighter-rouge">[...]</code> to get items by their position. You can also ask sequences for their length to see how many things are inside them. <ul> <li>List</li> <li>Tuple</li> <li>string</li> <li>byte</li> <li>range</li> </ul> </li> <li>A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary.</li> </ul> <h2 id="list">List</h2> <ul> <li>List is ordered and mutable, Allows duplicate members, similar to array in JavaScript.</li> <li>Lists are created using square brackets. Example: <code class="language-plaintext highlighter-rouge">list1 = ["abc", 34, True, 40, "male"]</code></li> <li>If you want to determine something inside of a List, that is big O(n) time complexity. It look over most of the elements of the list. But for Set or Dict, it is constant time complexity.</li> <li>If you pop the last element of the list, it is constant time operation. But remove the first element, then it is O(n) operation.</li> <li>If you need to have an order collection of elements, you want to pop at the end or beginning or middle of it. You should use the following two data structure: from collections import deque, queue</li> </ul> <h3 id="list-comprehension-syntax">list comprehension syntax</h3> <p>List comprehension is an elegant way to create lists based on existing lists.</p> <p>Syntax:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span> <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="bp">True</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.</li> <li>The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</code> get: <code class="language-plaintext highlighter-rouge">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</code></li> <li>Key point: the first for loop is outer loop. But you can use bracket to wrap expression and for loop together, and make second for loop outside:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]]</span>
<span class="c1"># Flat 2D list to [1, 2, 3, 4, 5, 6, 7, 8]:
</span><span class="nf">print</span><span class="p">([</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">i</span><span class="p">])</span>
<span class="c1"># Transpose to [1, 3, 5, 7], [2, 4, 6, 8]]:
</span><span class="nf">print</span><span class="p">([[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)])</span>
</code></pre></div></div> <h4 id="the-condition-is-like-a-filter-and-it-is-optional">The condition is like a filter, and it is optional:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># ['apple', 'banana', 'mango']
</span></code></pre></div></div> <h4 id="the-expression-can-also-contain-conditions-not-like-a-filter-but-as-a-way-to-manipulate-the-outcome">The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># fruits = ["apple", "orange", "cherry", "kiwi", "mango"]
</span></code></pre></div></div> <h4 id="support-nested-list-comprehension">Support nested list comprehension</h4> <h3 id="list-methods">List methods</h3> <h4 id="access-list-items">Access List items</h4> <ul> <li><code class="language-plaintext highlighter-rouge">s[i]</code> ith item of s, origin 0</li> <li><code class="language-plaintext highlighter-rouge">s[i:j]</code> slice of s from i to j</li> <li><code class="language-plaintext highlighter-rouge">s[i:j:k]</code> slice of s from i to j with step k</li> </ul> <h4 id="modifying-list">Modifying List</h4> <ul> <li><code class="language-plaintext highlighter-rouge">append()</code> method</li> <li><code class="language-plaintext highlighter-rouge">insert()</code> method</li> <li>support operator: +, *, +=, *=</li> </ul> <h4 id="remove-list-items">Remove List Items</h4> <ul> <li>remove() method removes the specified item</li> <li>pop() method removes the specified index.</li> <li>The del keyword also removes the specified index</li> <li>clear() method empties the list.</li> </ul> <h4 id="reverse">reverse()</h4> <h4 id="sort">sort()</h4> <ul> <li>It will sort the list alphanumerically, ascending, by default.</li> <li>Sort the list descending: <code class="language-plaintext highlighter-rouge">lst.sort(reverse = True)</code></li> </ul> <h4 id="copy-a-list">Copy a list</h4> <p>Thre are 3 ways to copy a list:</p> <ol> <li>newlst = lst.copy()</li> <li>newlst = list(lst)</li> <li>newlst = [i for i in lst]</li> </ol> <h4 id="join-two-list">Join two list</h4> <ol> <li>list3 = list1 + list2</li> <li>Another way to join two lists is by appending all the items from list2 into list1, one by one.</li> <li>Use the extend() method to add list2 at the end of list1 <code class="language-plaintext highlighter-rouge">list1.extend(list2)</code></li> </ol> <h4 id="multi-dimensional-arrays-operation">Multi-Dimensional Arrays Operation</h4> <p>(When deal with Multi-Dimensional Arrays, it is good to use NumPy. ) What do X[:,1] means?</p> <ul> <li>X is a numpy array, and it is Multi-Dimensional Array.</li> <li>Say Here X have n rows and n columns</li> <li>so by doing x=x[:,1] we get all the rows in x present at index 1.</li> </ul> <p>For example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span> <span class="p">[</span><span class="mf">0.69859393</span><span class="p">,</span> <span class="mf">0.1042432</span> <span class="p">],</span>
         <span class="p">[</span><span class="mf">0.55138493</span><span class="p">,</span> <span class="mf">0.18639614</span><span class="p">],</span>
         <span class="p">[</span><span class="mf">0.27338772</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">]])</span>

<span class="n">x</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span><span class="mf">0.1042432</span> <span class="p">,</span> <span class="mf">0.18639614</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">])</span>
</code></pre></div></div> <h3 id="understanding-lists-in-python">Understanding Lists in Python</h3> <h4 id="what-is-array-in-python">What is Array in Python</h4> <ul> <li>An array is a set of elements which <ul> <li>have the same size,</li> <li>located in memory one after another, without gaps.</li> </ul> </li> <li>Since the “get value by address” memory operation takes constant time, selecting an array item by index also takes O(1).</li> </ul> <h4 id="array-vs-list">Array vs. List</h4> <figure> <picture> <img src="/assets/img/python-list.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="list-is-kind-of-array">List is kind of array</h4> <p>The list is based on the array.</p> <h5 id="list--array-of-pointers">List = Array of Pointers</h5> <ul> <li>The list instantly retrieves an item by index (O(1)), because it has an array inside.</li> <li>And the array is so fast because all the elements are the same size.</li> </ul> <p>For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span><span class="o">])</span>
64
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span>,<span class="s1">'2'</span><span class="o">])</span>
72
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'a long long long string'</span><span class="o">])</span>
64
</code></pre></div></div> <h5 id="list--dynamic-array">List = Dynamic Array</h5> <ul> <li>The list juggles arrays all the time so that we don’t have to do it . For example, if array is full, it will allocate new memory for all elements.</li> <li>You can even check all detail in Python c code.</li> </ul> <h5 id="these-operations-are-o1">these operations are O(1):</h5> <ul> <li>select an item by index lst[idx]</li> <li>count items len(lst)</li> <li>add an item to the end of the list .append(item)</li> <li>remove an item from the end of the list .pop()</li> </ul> <h5 id="operations-are-slow">operations are “slow”:</h5> <ul> <li>Insert or delete an item by index. <code class="language-plaintext highlighter-rouge">.insert(idx, item)</code> and <code class="language-plaintext highlighter-rouge">.pop(idx)</code> take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they shift all the elements after the target one.</li> <li>Search or delete an item by value. item in lst, <code class="language-plaintext highlighter-rouge">.index(item)</code> and <code class="language-plaintext highlighter-rouge">.remove(item)</code> take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they iterate over all the elements.</li> <li>Select a slice of k elements. <code class="language-plaintext highlighter-rouge">lst[from:to]</code> takes <code class="language-plaintext highlighter-rouge">O(k)</code>.</li> </ul> <h3 id="list-questions">List questions</h3> <h4 id="why-memory-of-list-is-like-that-it-depond-on-how-many-members-instead-of-how-big-of-the-members">why Memory of list is like that: it depond on how many members instead of how big of the members?</h4> <p>Because List = Array of Pointers.</p> <h4 id="why-some-operations-are-quick-but-some-are-slow">why some operations are quick, but some are slow?</h4> <p>Understand from List = Array of Pointers.</p> <h4 id="do-python-allocate-new-memory-for-the-following-variable-small_list">Do Python allocate new memory for the following variable small_list?</h4> <p><code class="language-plaintext highlighter-rouge">big_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code> <code class="language-plaintext highlighter-rouge">small_list = big_list[:5]</code> Ask yourself if you modify small_list, do big_list modify as well? if not, then new memory.</p> <h2 id="tuple">Tuple</h2> <h3 id="what-is-tuple">What is Tuple</h3> <ul> <li>A tuple is a sequence which is ordered and Immutable, Allows duplicate.</li> <li>Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created. However, if a member of the tuple is list, list content can be changed.</li> <li>But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.</li> <li>Tuples are written with round brackets: tuple1 = (“abc”, 34, True, 40, “male”)</li> </ul> <h3 id="tuple-features">Tuple Features</h3> <ul> <li>Tuple is immutable, but it will instantiated without checking memory. It don’t like many immutable, e.g. int, float, check memory for same value instance.</li> <li>Tuple have quirk syntax when it contain 0 or 1 items. t = ()<br/> t = (1,)</li> </ul> <h3 id="access-tuple">Access Tuple.</h3> <ul> <li>using [].</li> <li>using keyword ‘in’.</li> </ul> <h3 id="update-tuple">Update Tuple</h3> <p>Convert the tuple into a list, update, and convert it back into a tuple.</p> <h3 id="unpacking-a-tuple">Unpacking a Tuple</h3> <p>When create a tuple, normally assign values to it. This is called “packing” a tuple. Tuple allowed to extract the values back into variables. This is called “unpacking”. (Call destructuring assignment in JavaScript)</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <p>Add an * to the variable name and the values will be assigned to the variable as a list:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">strawberry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">raspberry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="o">*</span><span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <h3 id="you-join-tuples-by-using--multiply-tuples-by-using-">You join Tuples by using ‘+’, multiply Tuples by using ‘*’</h3> <h2 id="set">Set</h2> <ul> <li>A set object is an unordered collection of distinct hashable objects.</li> <li>Like other collections, sets support <code class="language-plaintext highlighter-rouge">x in set</code>, <code class="language-plaintext highlighter-rouge">len(set)</code>, and <code class="language-plaintext highlighter-rouge">for x in set</code>.</li> <li>Python have set and frozen set.</li> <li>Set support comprehension syntax as well, similar to list comprehension.</li> </ul> <h3 id="when-use-set">When use Set</h3> <ul> <li>membership testing,</li> <li>removing duplicates from a sequence,</li> <li>Provide computing mathematical operations such as intersection, union, difference, and symmetric difference.</li> </ul> <h3 id="set-and-frozenset">set and frozenset</h3> <h4 id="set-1">set</h4> <p>These represent a mutable — the contents can be changed using methods like <code class="language-plaintext highlighter-rouge">add()</code> and <code class="language-plaintext highlighter-rouge">remove()</code>.</p> <blockquote> <p>Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set.</p> </blockquote> <ul> <li>We cannot change the items after the set has been created. but you can remove items and add new items.</li> <li>Sets are written with curly brackets: <code class="language-plaintext highlighter-rouge">set1 = {"abc", 34, True, 40, "male"}</code></li> </ul> <h4 id="frozenset">frozenset</h4> <p>These represent an immutable set. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</p> <h3 id="some-operations-are-supported-by-set-and-frozenset">Some operations are supported by set and frozenset.</h3> <p>Like:</p> <ul> <li><code class="language-plaintext highlighter-rouge">len(s)</code> : Return the number of elements in set s (cardinality of s).</li> <li><code class="language-plaintext highlighter-rouge">x in s</code> : Test x for membership in s.</li> <li><code class="language-plaintext highlighter-rouge">isdisjoint(other)</code></li> <li><code class="language-plaintext highlighter-rouge">issubset(other)</code>: <code class="language-plaintext highlighter-rouge">set &lt;= other</code></li> <li><code class="language-plaintext highlighter-rouge">union(*others)</code></li> <li><code class="language-plaintext highlighter-rouge">copy()</code> etc.</li> </ul> <h3 id="operations-available-for-set-but-not-frozenset">operations available for set, but not frozenset</h3> <p>Like:</p> <ul> <li><code class="language-plaintext highlighter-rouge">update(*others)</code></li> <li><code class="language-plaintext highlighter-rouge">add(elem)</code> etc.</li> </ul> <h3 id="can-set-contains-mutable-type-like-list">Can Set contains mutable type, like list?</h3> <p>NO, elements in set, key in dictionary, have to be <strong>hashable</strong>. That means it can’t be list or other mutable type. Tuple can be elements of set if it haven’t mutable member.</p> <h2 id="dictionary">Dictionary</h2> <ul> <li>Dictionaries are used to store data values in <code class="language-plaintext highlighter-rouge">key:value</code> pairs.</li> <li>A dictionary is a collection which is ordered, mutable and do not allow duplicates.</li> </ul> <h3 id="features">Features</h3> <ul> <li>keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</li> <li>As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.</li> <li>Use curl bracket.</li> <li>The dict() constructor builds dictionaries directly from sequences of key-value pairs: <code class="language-plaintext highlighter-rouge">dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])</code> get <code class="language-plaintext highlighter-rouge">{'sape': 4139, 'guido': 4127, 'jack': 4098}</code></li> <li>dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: <code class="language-plaintext highlighter-rouge">{x: x**2 for x in (2, 4, 6)}</code> get <code class="language-plaintext highlighter-rouge">{2: 4, 4: 16, 6: 36}</code></li> </ul> <h3 id="accessing-items">Accessing Items</h3> <ul> <li>Dictionary is in order. But have no idea to access it by order. Access directly: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div> </div> </li> <li>using square bracket [] is equivalent to <code class="language-plaintext highlighter-rouge">__getitem__()</code></li> <li>if visit key that doesn’t exist, It will raise KeyError. But you can override the <code class="language-plaintext highlighter-rouge">__missing__(self, key)</code> method defines the behavior of a dictionary subclass if you access a non-existent key. More specifically, Python’s <code class="language-plaintext highlighter-rouge">__getitem__()</code> dictionary method internally calls the <code class="language-plaintext highlighter-rouge">__missing__()</code> method if the key doesn’t exist. The return value of <code class="language-plaintext highlighter-rouge">__missing__()</code> is the value to be returned when trying to access a non-existent key.</li> <li>keys(), values(), items()</li> <li>return view objects for corresponded things.</li> <li>Dictionary view object provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes.</li> <li>Keys views are set-like!</li> <li>If all values are hashable, then the items view is also set-like.</li> <li>Values views are not treated as set-like.</li> <li> <p>For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, &lt;, or ^).</p> </li> <li>setdefault(key[, default]) Returns the value of the specified key. If the key does not exist: insert the key, with the specified value. <ul> <li>keyname is required</li> <li>value is Optional. If the key exist, value has no effect. If the key does not exist, this value becomes the key’s value. Default value None. <code class="language-plaintext highlighter-rouge">print(thisdict.setdefault("model","Focus"))</code></li> </ul> </li> <li>get(key[, default]) Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None. <ul> <li>get() is different function from <code class="language-plaintext highlighter-rouge">__getitem__()</code>. They have no connection.</li> </ul> </li> </ul> <h3 id="remove-items">Remove items</h3> <ul> <li>pop() The pop() method removes the item with the specified key name.</li> <li>popitem() The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):</li> <li>del keyword Can delete items or the dictionary</li> <li>clear() Clear the dictionary</li> </ul> <h3 id="add-items-change-items">Add items, Change items</h3> <ul> <li>add item directly, change directly (list can’t add item directly, but dict can) <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">color</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">red</span><span class="sh">"</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Focus</span><span class="sh">"</span>
</code></pre></div> </div> </li> <li>using square bracket [] is equivalent to <code class="language-plaintext highlighter-rouge">__setitem__()</code></li> </ul> <h3 id="update">update()</h3> <p>The <code class="language-plaintext highlighter-rouge">update()</code> method inserts the specified items to the dictionary.</p> <ul> <li><code class="language-plaintext highlighter-rouge">update()</code> can overwrite the exist key and it’s value.</li> <li>can concatenate dictionarys.</li> <li>can concatenate key value pair iterable object.</li> </ul> <p><code class="language-plaintext highlighter-rouge">dictionary.update(iterable)</code> <code class="language-plaintext highlighter-rouge">iterable</code> can be A dictionary or an iterable object with key value pairs, that will be inserted to the dictionary.</p> <h3 id="dict-not-support-operator-">dict NOT support operator +</h3> <p>But <code class="language-plaintext highlighter-rouge">Counter</code> can.</p> <h3 id="create-dictionary">Create Dictionary</h3> <p>The <code class="language-plaintext highlighter-rouge">fromkeys()</code> method returns a dictionary with the specified keys and the specified value.</p> <ul> <li><code class="language-plaintext highlighter-rouge">dict.fromkeys(keys, value)</code> <ul> <li>keys: Required. An iterable specifying the keys of the new dictionary</li> <li>value: Optional. The value for all keys. Default value is None</li> </ul> </li> <li> <p>an example of how to use dict as an ordered set to filter out duplicate items while preserving order, thereby emulating an ordered set: <code class="language-plaintext highlighter-rouge">keywords = ['foo', 'bar', 'bar', 'foo', 'baz', 'foo']</code> <code class="language-plaintext highlighter-rouge">list(dict.fromkeys(keywords))</code> <code class="language-plaintext highlighter-rouge">['foo', 'bar', 'baz']</code></p> </li> <li><code class="language-plaintext highlighter-rouge">zip()</code> <code class="language-plaintext highlighter-rouge">zip()</code> returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument iterables. <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">#FF0000</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">#008000</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">#0000FF</span><span class="sh">'</span><span class="p">]</span>
<span class="n">color_dictionary</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">values</span><span class="p">))</span>
</code></pre></div> </div> </li> </ul> <h3 id="copy-dictionary">Copy Dictionary</h3> <ul> <li> <p><code class="language-plaintext highlighter-rouge">copy()</code> Dictionary method copy() can create a new dict according to the current dict.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">dict()</code> Another way to make a copy is to use the built-in function dict().</p> </li> <li> <p>Loop over dict</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">thisdict</span><span class="p">:</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div> </div> <p>x is the key! no value.</p> </li> </ul> <h3 id="question">Question</h3> <ul> <li>How to get the first item of a dict?</li> </ul> <h2 id="time-complexity-of-collections">Time Complexity of Collections</h2> <h3 id="list-1">list</h3> <ul> <li>Internally, a list is represented as an array;</li> <li>The largest costs come from growing beyond the current allocation size (because everything must move), or from inserting or deleting somewhere near the beginning (because everything after that must move).</li> <li>If you need to add/remove at both ends, consider using a collections.deque instead.</li> </ul> <figure> <picture> <img src="/assets/img/python-list-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="30%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="dict">dict</h3> <ul> <li>There is a fast-path for dicts that (in practice) only deal with str keys;</li> <li>Python have a typical space-time tradeoff in dictionaries and lists. It means we can decrease the time necessary for our algorithm but we need to use more space in memory for dictionaries.</li> <li>time complexity x in s operation for dict is O(1); But for list if O(n).</li> </ul> <figure> <picture> <img src="/assets/img/python-dict-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="40%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="set-2">set</h3> <p>See dict – the implementation is intentionally very similar.</p> <figure> <picture> <img src="/assets/img/python-set-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="70%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="collectionsdeque">collections.deque</h3> <p>A deque (double-ended queue) is represented internally as a doubly linked list. (Well, a list of arrays rather than objects, for greater efficiency.) Both ends are accessible, but even looking at the middle is slow, and adding to or removing from the middle is slower still.</p> <figure> <picture> <img src="/assets/img/python-deque-timecomplexity.jpg" class="img-fluid rounded z-depth-1" width="40%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Concepts of Containers, Collections, Sequences, Mappings]]></summary></entry><entry><title type="html">Python Data model Overview</title><link href="https://benwzj.github.io/blog/2024/python-data-model/" rel="alternate" type="text/html" title="Python Data model Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-data-model</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-data-model/"><![CDATA[<h2 id="object">Object</h2> <p>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (Everything in python is object) Every object has an identity, a type and a value.</p> <h3 id="every-object-has-an-identity-a-type-and-a-value">Every object has an identity, a type and a value.</h3> <ul> <li>An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. <ul> <li>The <code class="language-plaintext highlighter-rouge">is</code> operator compares the identity of two objects;</li> <li>the <code class="language-plaintext highlighter-rouge">id()</code> function returns an integer representing its identity.</li> </ul> </li> <li>An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. <ul> <li>The <code class="language-plaintext highlighter-rouge">type()</code> function returns an object’s type (which is an object itself).</li> <li>Like its identity, an object’s type is also unchangeable.</li> </ul> </li> <li>An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.</li> </ul> <h3 id="container">Container</h3> <p>Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</p> <h2 id="data-type">Data Type</h2> <h3 id="none-notimplemented-ellipsis">None, NotImplemented, Ellipsis</h3> <p>The following data type have a single value. There is a single object with this value, And These objects are accessed through a built-in name None, NotImplemented, Ellipsis (or …): None, NotImplemented, Ellipsis</p> <h3 id="numbers-module">Numbers module</h3> <p>The numbers module defines a hierarchy of numeric abstract base classes which progressively define more operations. None of the types defined in this module are intended to be instantiated.</p> <h4 id="class-numbersnumber">class numbers.Number</h4> <p>The root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number).</p> <h4 id="class-numbersintegral">class numbers.Integral</h4> <p>There are two types of integers:</p> <ul> <li>Integers (int) - These represent numbers in an unlimited range, subject to available (virtual) memory only. It is a whole number, positive or negative, without decimals, of unlimited length.</li> <li>Booleans (bool) - The two objects representing the values False and True are the only Boolean objects. (False and True are keyword in Python) <h4 id="numbersreal-float">numbers.Real (float)</h4> <p>Float represent machine-level double precision floating point numbers. You are at the mercy of the underlying machine architecture (and C or Java implementation) for the accepted range and handling of overflow.</p> <h4 id="numberscomplex-complex">numbers.Complex (complex)</h4> </li> </ul> <h3 id="sequences-types">Sequences types</h3> <ul> <li>Sequences represent finite ordered sets indexed by non-negative numbers.</li> <li>Sequences are distinguished according to their mutability: Immutable sequences, like Strings, Bytes, Tuples, Mutable sequences, like Lists, Byte Arrays.</li> </ul> <h4 id="common-sequences-operations">Common Sequences operations</h4> <ul> <li>The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items of a sequence.</li> <li>Item i of sequence a is selected by <code class="language-plaintext highlighter-rouge">a[i]</code></li> <li>Sequences also support slicing: <code class="language-plaintext highlighter-rouge">a[i:j:step]</code></li> <li>When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <code class="language-plaintext highlighter-rouge">enumerate()</code> function.</li> </ul> <h3 id="set-types">Set types</h3> <p>These represent unordered, finite sets of unique, immutable(we can’t change the content of items, but you can add or remove items) objects. There are currently two intrinsic set types:</p> <ul> <li>Sets These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add().</li> <li>Frozen sets These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</li> </ul> <h3 id="mappings">Mappings</h3> <p>These represent finite sets of objects indexed by arbitrary index sets. The subscript notation <code class="language-plaintext highlighter-rouge">a[k]</code> selects the item indexed by k from the mapping a; this can be used in expressions and as the target of assignments or del statements. The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items in a mapping.</p> <h4 id="dictionary">Dictionary</h4> <ul> <li>Dictionaries are used to store data values in key:value pairs.</li> <li>A dictionary is a collection which is ordered, changeable and not allow duplicates.</li> <li>Dictionaries are written with curly brackets, and have keys and values</li> <li>The only types of values not acceptable as keys are values containing lists or dictionaries or other mutable types that are compared by value rather than by object identity, the reason being that the efficient implementation of dictionaries requires a key’s hash value to remain constant.</li> </ul> <h3 id="callable-types">Callable types</h3> <p>These are the data types to which the function call operation can be applied:</p> <h4 id="user-defined-functions">User-defined functions</h4> <p>A user-defined function object is created by a function definition.</p> <ul> <li>It’s Special attributes: like <code class="language-plaintext highlighter-rouge">__name__</code>, <code class="language-plaintext highlighter-rouge">__module__</code>, <code class="language-plaintext highlighter-rouge">__defaults__</code>, <code class="language-plaintext highlighter-rouge">__code__</code>, <code class="language-plaintext highlighter-rouge">__closure__</code>, etc. <code class="language-plaintext highlighter-rouge">__code__</code> refer to The code object representing the compiled function body.</li> <li>Function objects also support getting and setting arbitrary attributes, which can be used, for example, to attach metadata to functions.</li> <li>Lambda: A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.</li> </ul> <h4 id="instance-methods">Instance methods</h4> <p>An instance method object combines a class, a class instance and any callable object (normally a user-defined function).</p> <h4 id="generator-functions">Generator functions</h4> <p>A function or method which uses the yield statement (see section The yield statement) is called a generator function. Such a function, when called, always returns an iterator object which can be used to execute the body of the function: calling the iterator’s iterator<code class="language-plaintext highlighter-rouge">.__next__()</code> method will cause the function to execute until it provides a value using the yield statement. When the function executes a return statement or falls off the end, a StopIteration exception is raised and the iterator will have reached the end of the set of values to be returned.</p> <h4 id="coroutine-functions">Coroutine functions</h4> <p>A function or method which is defined using async def is called a coroutine function. Such a function, when called, returns a coroutine object. It may contain await expressions, as well as async with and async for statements.</p> <h4 id="asynchronous-generator-functions">Asynchronous generator functions</h4> <p>A function or method which is defined using async def and which uses the yield statement is called a asynchronous generator function. Such a function, when called, returns an asynchronous iterator object which can be used in an async for statement to execute the body of the function.</p> <h4 id="built-in-functions">Built-in functions</h4> <p>A built-in function object is a wrapper around a C function. Examples of built-in functions are len() and math.sin() (math is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes: <code class="language-plaintext highlighter-rouge">__doc__</code> is the function’s documentation string, or None if unavailable; <code class="language-plaintext highlighter-rouge">__name__</code> is the function’s name; <code class="language-plaintext highlighter-rouge">__self__</code> is set to None (but see the next item); <code class="language-plaintext highlighter-rouge">__module__</code> is the name of the module the function was defined in or None if unavailable.</p> <h4 id="built-in-methods">Built-in methods</h4> <p>This is really a different disguise of a built-in function, this time containing an object passed to the C function as an implicit extra argument. An example of a built-in method is alist.append(), assuming alist is a list object. In this case, the special read-only attribute <code class="language-plaintext highlighter-rouge">__self__</code> is set to the object denoted by alist.</p> <h4 id="classes">Classes</h4> <p>Classes are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override <code class="language-plaintext highlighter-rouge">__new__()</code>. The arguments of the call are passed to <code class="language-plaintext highlighter-rouge">__new__()</code> and, in the typical case, to <code class="language-plaintext highlighter-rouge">__init__()</code> to initialize the new instance.</p> <h4 id="class-instances">Class Instances</h4> <p>Instances of arbitrary classes can be made callable by defining a <code class="language-plaintext highlighter-rouge">__call__()</code> method in their class.</p> <h3 id="modules">Modules</h3> <p>Modules are a basic organizational unit of Python code, and are created by the import system as invoked either by the import statement, or by calling functions such as importlib.<code class="language-plaintext highlighter-rouge">import_module()</code> and built-in <code class="language-plaintext highlighter-rouge">__import__()</code>.</p> <ul> <li>A module object has a namespace implemented by a dictionary object (this is the dictionary referenced by the <code class="language-plaintext highlighter-rouge">__globals__</code> attribute of functions defined in the module). Attribute references are translated to lookups in this dictionary, e.g., m.x is equivalent to <code class="language-plaintext highlighter-rouge">m.__dict__["x"]</code>.</li> <li>A module object does not contain the code object used to initialize the module.</li> <li>To create a module just save the code you want in a file with the file extension .py.</li> </ul> <h4 id="datetime-math-json-regex-os-etc-are-built-in-modules">Datetime, Math, JSON, RegEx, os, etc. are built-in modules.</h4> <p>For example, you want to handle files in your hard disk. You can use os modules which provide functions to help you out.</p> <h4 id="pip">PIP</h4> <p>PIP is a package manager for Python packages. Just like npm for JavaScript. You can use pip to instal third party packages, like django, etc.</p> <ul> <li>A package contains all the files you need for a module.</li> <li>Modules are Python code libraries you can include in your project.</li> </ul> <p>For example: openpyxl help you to handle excel file: <code class="language-plaintext highlighter-rouge">$pip3 install openpyxl</code></p> <p>Use the list command to list all the packages installed on your system: <code class="language-plaintext highlighter-rouge">$pip3 list</code></p> <h3 id="custom-classes">Custom classes</h3> <p>Custom class types are typically created by class definitions.</p> <p>Basic class Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

  <span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello my name is </span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, age is </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="p">))</span>

<span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>
<span class="n">p1</span><span class="p">.</span><span class="nf">myfunc</span><span class="p">()</span>
</code></pre></div></div> <h4 id="init-function"><strong>init</strong>() Function</h4> <p>All classes have a function called <code class="language-plaintext highlighter-rouge">__init__()</code>, which is always executed when the class is being initiated.</p> <ul> <li>The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.</li> <li>Can change property value, can delete property.</li> </ul> <h4 id="inheritance">Inheritance</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span> <span class="o">=</span> <span class="n">year</span>

  <span class="k">def</span> <span class="nf">welcome</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Welcome</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span> <span class="sh">"</span><span class="s">to the class of</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">super()</code> function will make the child class inherit all the methods and properties from its parent.</p> <h3 id="class-instances-1">Class instances</h3> <p>A class instance is created by calling a class object.</p> <h3 id="io-objects">I/O objects</h3> <p>(also known as file objects)</p> <ul> <li>A file object represents an open file. Various shortcuts are available to create file objects: the open() built-in function, and also os.popen(), os.fdopen(), and the makefile() method of socket objects</li> <li>The objects sys.stdin, sys.stdout and sys.stderr are initialized to file objects corresponding to the interpreter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface defined by the io.TextIOBase abstract class.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Object]]></summary></entry><entry><title type="html">Python Build-in Type Overview</title><link href="https://benwzj.github.io/blog/2024/python-type/" rel="alternate" type="text/html" title="Python Build-in Type Overview"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-type</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-type/"><![CDATA[<p>Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t.</p> <p>Data type in python:</p> <ul> <li>Numeric,</li> <li>Sequence,</li> <li>Set,</li> <li>Mapping.</li> </ul> <p>(String, list, tuple, range and byte are sequence. )</p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t.]]></summary></entry><entry><title type="html">Python Overview</title><link href="https://benwzj.github.io/blog/2024/python/" rel="alternate" type="text/html" title="Python Overview"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python/"><![CDATA[<ul> <li>Python is an object oriented programming language.</li> <li>Almost everything in Python is an object, with its properties and methods.</li> <li>A Class is like an object constructor, or a “blueprint” for creating objects.</li> <li>Different from JavaScript, there are no primitives in Python.</li> <li>Python have a good documentation.</li> </ul> <h2 id="python-vs-javascript">Python vs. JavaScript</h2> <h3 id="repl">REPL</h3> <p>REPL(Read-Eval-Print-Loop)</p> <ul> <li>Python has it’s own interpreter. And Python have different version interpreter. For example Pythone 2.7 still popular, but the new stable version is 3.10 at the moment. something like: python3 yourcode.py</li> <li>JavaScript need a JavaScript runtime to support, like Browser, NodeJS.</li> </ul> <h3 id="code-blocks">Code Blocks</h3> <ul> <li>JavaScript makes use of curly brackets for defining code blocks. Python, on the other hand, uses indentation for defining code blocks.</li> <li>While JavaScript has the semi-colon (;) that serves as the statement terminator (though it is not mandatory), Python uses a newline.</li> </ul> <h3 id="data-type">Data type</h3> <h4 id="mutability">Mutability</h4> <ul> <li>Python support mutable data type, like set, and immutable data type, like list.</li> <li>JavaScript have primitive type concept which are immutable. All object is mutable. But each property of the object have it’s own descriptor which can config the mutability of the property.</li> </ul> <h4 id="number">Number</h4> <ul> <li>In python, there are different numeric type like int, float, fixed-point decimal.</li> <li>In JavaScript, there are number and bigInt. Number type is double floating point number.</li> </ul> <h4 id="object">Object</h4> <ul> <li>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (Everything in python is object)</li> <li>Is it everything is object in JavaScript? NO, primitive is not object.</li> <li>Object in JavaScript, is very easy to create. But in Python, Each object has a class from which it is instantiated.</li> <li>In JavaScript, a simple iterator can be:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">let</span> <span class="n">myIter</span> <span class="o">=</span> <span class="p">{</span>
  <span class="n">n</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nb">next</span><span class="p">:</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">this</span><span class="p">.</span><span class="n">n</span><span class="o">++</span><span class="p">,</span> <span class="n">done</span><span class="p">:</span> <span class="n">false</span><span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>In Python, a iterator looks like:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyNumbers</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">self</span>

  <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">n</span>

<span class="n">myclass</span> <span class="o">=</span> <span class="nc">MyNumbers</span><span class="p">()</span>
<span class="n">myiter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">myclass</span><span class="p">)</span>
<span class="nf">next</span><span class="p">(</span><span class="n">myiter</span><span class="p">)</span>
</code></pre></div></div> <h3 id="class">Class</h3> <h4 id="javascript-class">JavaScript class</h4> <ul> <li>JavaScript class, which have been described as syntax sugar, is build on the top of prototype chain.</li> <li>JavaScript class works very well. You don’t need to always translate back to prototype chain to understand the code.</li> <li>JavaScript actually implement class as function.</li> <li>JavaScript class support class, new, constructor, extends, super, static key words. JavaScript class put everything in one place, to implement OOP coding concept which similar to Java, C++.</li> </ul> <h4 id="python-class">Python class</h4> <ul> <li>Each value is an object. Each object is an instance of a class. Even a class is an instance of the metaclass - type.</li> <li>class itself is an object. class instance is an object too.</li> <li>class in python is not function.</li> <li>Method object is not Function object in Python! But they are same thing in JavaScript.</li> <li>Python supports a form of multiple inheritance. But JavaScript support just one.</li> </ul> <h3 id="iterable-iterator">iterable, iterator</h3> <h4 id="javascript">JavaScript</h4> <ul> <li>An object is iterable if it implement the @@iterator method.</li> <li>An object is iterator when it implements the <code class="language-plaintext highlighter-rouge">next()</code> according to some semantics: <code class="language-plaintext highlighter-rouge">done_value_object = myIterator.next(). </code> // if done == false, can keep calling <code class="language-plaintext highlighter-rouge">myIterator.next()</code> to return done_value_object. // if done == true, then iterator is completed.</li> </ul> <h4 id="python">Python</h4> <p>Python have different concepts of iterator and iterable from JavaScript.</p> <ul> <li>exception StopIteration is used to signal the end of an iteration.</li> <li>built-in function <code class="language-plaintext highlighter-rouge">iter()</code> and <code class="language-plaintext highlighter-rouge">next()</code> used to implement iteration.</li> </ul> <h3 id="generator">generator</h3> <h4 id="javascript-generator">JavaScript generator</h4> <ul> <li>syntax: <code class="language-plaintext highlighter-rouge">* function (){}</code></li> <li>generator is an iterator which maintain by the language itself.</li> <li>a generator object (iterator) for the function will be returned when meet yield.</li> <li>yield will return value.</li> <li>generator function also support return keyword. generator function will totally complete when return.</li> <li>generator can work with promise to make code better.</li> </ul> <h4 id="python-generator">Python generator</h4> <ul> <li>syntax: when a function contain keyword yield, then it is generator.</li> <li>If you used <code class="language-plaintext highlighter-rouge">next()</code> after iteration have been completed, then you’ll get an explicit StopIteration exception.</li> </ul> <h3 id="static-method">Static method</h3> <p>static concept is similar between Python, JavaScript, C++, Java. static methods can be accessed from classes instead of instants.</p> <h4 id="in-javascript">in JavaScript</h4> <ul> <li>there are static keyword.</li> <li>static method can’t be access by instance.</li> </ul> <h4 id="in-python">in Python</h4> <ul> <li> <p>Using built-in function staticmethod() to turn method to static. But can using syntaxtic sugar decorator @staticmethod</p> </li> <li> <p>static methods can be access both by class and instance. <code class="language-plaintext highlighter-rouge">Class.staticmethodFunc()</code> or even <code class="language-plaintext highlighter-rouge">Class().staticmethodFunc()</code></p> </li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><summary type="html"><![CDATA[Python is an object oriented programming language. Almost everything in Python is an object, with its properties and methods. A Class is like an object constructor, or a “blueprint” for creating objects. Different from JavaScript, there are no primitives in Python. Python have a good documentation.]]></summary></entry><entry><title type="html">OAuth Flow Details</title><link href="https://benwzj.github.io/blog/2024/oauth-flow/" rel="alternate" type="text/html" title="OAuth Flow Details"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/oauth-flow</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/oauth-flow/"><![CDATA[<p>OAuth is a standard. There are many company implement OAuth according to this Standard. The implementation should be very similar.</p> <p>First of all, you need to create OAuth App in Authorization Server.</p> <p>In OAuth Flow, usually there are some Roles:</p> <ul> <li>User</li> <li>Browser</li> <li>Website App</li> <li> <p>The Authorization Server</p> </li> <li>resource owner (User)</li> <li>resource server</li> <li>client (Website App)</li> <li>authorization server</li> </ul> <p>There are different OAuth Flow for defferent app types:</p> <ul> <li>Single-page app (SPA)</li> <li>Web app</li> <li>Web API</li> <li>Mobile and native apps</li> <li>Service, daemon, script</li> </ul> <h2 id="web-app-flow">Web app flow</h2> <p>(github implementation)</p> <p>The web application flow to authorize users for your app is:</p> <ol> <li>Users are redirected to request their GitHub identity</li> <li>Users are redirected back to your site by GitHub</li> <li>Your app accesses the API with the user’s access token</li> </ol> <h3 id="1-request-a-users-github-identity">1. Request a user’s GitHub identity</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET https://github.com/login/oauth/authorize
</code></pre></div></div> <p>This endpoint takes the following input parameters.</p> <ul> <li><code class="language-plaintext highlighter-rouge">client_id</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">redirect_uri</code> string Strongly recommended</li> <li><code class="language-plaintext highlighter-rouge">login</code> string Optional</li> <li><code class="language-plaintext highlighter-rouge">scope</code> string Context dependent</li> <li><code class="language-plaintext highlighter-rouge">state</code> string Strongly recommended</li> </ul> <h3 id="2-users-are-redirected-back-to-your-site-by-github">2. Users are redirected back to your site by GitHub</h3> <p>If the user accepts your request, GitHub redirects back to your site with a temporary code(authorization code) in a code parameter as well as the state you provided in the previous step in a state parameter.</p> <p>Exchange this code for an access token:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://github.com/login/oauth/access_toke
</code></pre></div></div> <p>This endpoint takes the following input parameters.</p> <ul> <li><code class="language-plaintext highlighter-rouge">client_id</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">client_secret</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">code</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">redirect_uri</code> string Strongly recommended</li> </ul> <p>By default, the response takes the following form:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>access_token=gho_16C7e42F292c6912E7710c838347Ae178B4a&amp;scope=repo%2Cgist&amp;token_type=bearer
</code></pre></div></div> <h3 id="3-use-the-access-token-to-access-the-api">3. Use the access token to access the API</h3> <p>The access token allows you to make requests to the API on a behalf of a user.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Authorization: Bearer OAUTH-TOKEN
GET https://api.github.com/user
</code></pre></div></div> <p>For example, in curl you can set the Authorization header like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -H "Authorization: Bearer OAUTH-TOKEN" https://api.github.com/user
</code></pre></div></div> <p>Every time you receive an access token, you should use the token to revalidate the user’s identity. A user can change which account they are signed into when you send them to authorize your app,</p> <figure> <picture> <img src="/assets/img/oauth_web_server_flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Another one:</p> <figure> <picture> <img src="/assets/img/oauth-flow.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="about-redirect_uri">About Redirect_URI</h3> <p>Redirect_RUI need be defined in the Authorization Server. And When User is using GET and POST to access Authorization Server, it can use the <code class="language-plaintext highlighter-rouge">redirect_uri</code> parameter.</p> <ul> <li>If left out, GitHub will redirect users to the callback URL configured in the OAuth app settings.</li> <li>If provided, the redirect URL’s host (excluding sub-domains) and port must exactly match the callback URL. The redirect URL’s path must reference a subdirectory of the callback URL.(I spent whole day to figure out this mismatch error)</li> </ul> <h4 id="loopback-redirect-urls">Loopback redirect urls</h4> <p>The optional <code class="language-plaintext highlighter-rouge">redirect_uri</code> parameter can also be used for loopback URLs, which is useful for native applications running on a desktop computer. If the application specifies a loopback URL and a port, then after authorizing the application users will be redirected to the provided URL and port. The <code class="language-plaintext highlighter-rouge">redirect_uri</code> does not need to match the port specified in the callback URL for the app.</p> <p>You can use <code class="language-plaintext highlighter-rouge">http://127.0.0.1:1234/path</code> as <code class="language-plaintext highlighter-rouge">redirect_uri</code>.</p> <blockquote> <p>Note that OAuth RFC recommends not to use <code class="language-plaintext highlighter-rouge">localhost</code>, but instead to use loopback literal <code class="language-plaintext highlighter-rouge">127.0.0.1</code> or <code class="language-plaintext highlighter-rouge">IPv6 ::1</code>.</p> </blockquote> <h2 id="single-page-app-flow">Single-page app flow</h2> <p>Many modern apps have a single-page app (SPA) front end written primarily in JavaScript, often with a framework like Angular, React, or Vue.</p> <p>Single-page apps (or browser-based apps) run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of a client secret, so the secret is not used in this case.</p> <p>Previously, it was recommended that browser-based apps use the “Implicit” flow, which returns an access token immediately in the redirect and does not have a token exchange step. In the time since the spec was originally written, the industry best practice has changed to recommend that the <strong>authorization code</strong> flow be used without the client secret. This provides more opportunities to create a secure flow, such as using the <code class="language-plaintext highlighter-rouge">Proof Key for Code Exchange (PKCE)</code> extension.</p> <h3 id="pkce">PKCE</h3> <p>PKCE-enhanced Authorization Code Flow builds upon the standard Authorization Code Flow, the steps are very similar with Web app flow. But with the addition of a dynamically generated secret used on each request. This is known as the PKCE extension.</p> <blockquote> <p>The main difference between Implicit and PKCE flow is ADDing <strong>authorization code</strong>.</p> </blockquote> <p>Definition of Proof Key for Code Exchange (PKCE) <a href="https://datatracker.ietf.org/doc/html/rfc7636">OAuth 2.0 RFC 7636</a>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                 +-------------------+
                                                 |   Authz Server    |
       +--------+                                | +---------------+ |
       |        |--(A)- Authorization Request ----&gt;|               | |
       |        |       + t(code_verifier), t_m  | | Authorization | |
       |        |                                | |    Endpoint   | |
       |        |&lt;-(B)---- Authorization Code -----|               | |
       |        |                                | +---------------+ |
       | Client |                                |                   |
       |        |                                | +---------------+ |
       |        |--(C)-- Access Token Request ----&gt;|               | |
       |        |          + code_verifier       | |    Token      | |
       |        |                                | |   Endpoint    | |
       |        |&lt;-(D)------ Access Token ---------|               | |
       +--------+                                | +---------------+ |
                                                 +-------------------+
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li>The OAuth 2.0 Authorization Framework<a href="https://datatracker.ietf.org/doc/html/rfc6749">RFC 6749</a></li> <li>Proof Key for Code Exchange by OAuth Public Clients<a href="https://datatracker.ietf.org/doc/html/rfc7636">RFC 7636</a></li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="Authentication"/><category term="github"/><category term="Authorization"/><category term="OAuth"/><summary type="html"><![CDATA[OAuth is a standard. There are many company implement OAuth according to this Standard. The implementation should be very similar.]]></summary></entry><entry><title type="html">TypeScript Operators</title><link href="https://benwzj.github.io/blog/2024/ts-operators/" rel="alternate" type="text/html" title="TypeScript Operators"/><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/ts-operators</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/ts-operators/"><![CDATA[<h2 id="satisfies-operator">satisfies Operator</h2> <p>TypeScript developers are often faced with a dilemma: we want to ensure that some expression matches some type, but also want to keep the most specific type of that expression for inference purposes.</p> <p>That means, You don’t have to use type annotation to define a variable in order to make it matches specific type. When you use type annotation to define a variable, this variable will be taken as the specific type. At this point, this variable will under the constraint of the specific type. In some case, you may just want to make sure the variable in the shape of specific type but don’t want the constraint. Then use satisfies operatior.</p> <h3 id="not-care-about-property-name-just-care-about-the-type-of-property">Not care about property name, Just care about the type of property</h3> <p>Maybe we don’t care about if the property names match up somehow, but we do care about the types of each property. In that case, we can also ensure that all of an object’s property values conform to some type. Like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">RGB</span> <span class="o">=</span> <span class="p">[</span><span class="nx">red</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">green</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">blue</span><span class="p">:</span> <span class="kr">number</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">palette</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">red</span><span class="p">:</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
    <span class="na">green</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#00ff00</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">blue</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="c1">//   will catch this error!</span>
<span class="p">}</span> <span class="kd">satisfies </span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">RGB</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// Information about each property is still maintained.</span>
<span class="kd">const</span> <span class="nx">redComponent</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">red</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// this still work</span>
<span class="kd">const</span> <span class="nx">greenNormalized</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">green</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span> <span class="c1">// this still work</span>
</code></pre></div></div> <h3 id="ensure-that-an-object-has-all-the-keys-of-some-type-but-no-more">ensure that an object has all the keys of some type, but no more:</h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Colors</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Ensure that we have exactly the keys from 'Colors'.</span>
<span class="kd">const</span> <span class="nx">favoriteColors</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">yes</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">kinda</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">platypus</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span> <span class="c1">//  ~~~~~~~~~~ error - "platypus" was never listed in 'Colors'.</span>
<span class="p">}</span> <span class="kd">satisfies </span><span class="nb">Record</span><span class="o">&lt;</span><span class="nx">Colors</span><span class="p">,</span> <span class="nx">unknown</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// All the information about the 'red', 'green', and 'blue' properties are retained.</span>
<span class="kd">const</span> <span class="nx">g</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="nx">favoriteColors</span><span class="p">.</span><span class="nx">green</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="TypeScript"/><category term="TypeScript"/><summary type="html"><![CDATA[satisfies Operator]]></summary></entry><entry><title type="html">TypeScript Utility Types</title><link href="https://benwzj.github.io/blog/2024/ts-utility-types/" rel="alternate" type="text/html" title="TypeScript Utility Types"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/ts-utility-types</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/ts-utility-types/"><![CDATA[<p>TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.</p> <ul> <li>Utility types are <code class="language-plaintext highlighter-rouge">type</code>s.</li> <li>Utility types are used to <strong>transform</strong> one type to anther type.</li> </ul> <h2 id="record">Record</h2> <p><code class="language-plaintext highlighter-rouge">Record&lt;Keys, Type&gt;</code> Constructs an object type whose property keys are <code class="language-plaintext highlighter-rouge">Keys</code> and whose property values are <code class="language-plaintext highlighter-rouge">Type</code>. This utility can be used to map the properties of a type to another type.</p> <p>Need an Example explain it:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">CatName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">miffy</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">boris</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">mordred</span><span class="dl">"</span><span class="p">;</span>
 
<span class="kr">interface</span> <span class="nx">CatInfo</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">breed</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">const</span> <span class="nx">cats</span><span class="p">:</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="nx">CatName</span><span class="p">,</span> <span class="nx">CatInfo</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">miffy</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Persian</span><span class="dl">"</span> <span class="p">},</span>
  <span class="na">boris</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Maine Coon</span><span class="dl">"</span> <span class="p">},</span>
  <span class="na">mordred</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">British Shorthair</span><span class="dl">"</span> <span class="p">},</span>
<span class="p">};</span>
 
<span class="nx">cats</span><span class="p">.</span><span class="nx">boris</span><span class="p">;</span> <span class="c1">// Here, the 'cats' is 'Record&lt;CatName, CatInfo&gt;'</span>
</code></pre></div></div> <h3 id="when-you-need-an-object-which-can-be-assigned-new-properties-you-can-use-record-utility-to-define-the-object-type">When you need an object which can be assigned new properties, you can use Record utility to define the object type.</h3> <p>Do this in past:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span><span class="p">:</span> <span class="p">{[</span><span class="nx">k</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">}</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</code></pre></div></div> <p>Now using <code class="language-plaintext highlighter-rouge">Record&lt;Keys, Type&gt;</code> is a better way.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span><span class="p">:</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="nx">unknown</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Record&lt;Keys,Type&gt;</code> is a much cleaner alternative for key-value pairs where property-names are not known. It’s worth noting that <code class="language-plaintext highlighter-rouge">Record&lt;Keys,Type&gt;</code> is a named alias to <code class="language-plaintext highlighter-rouge">{[k: Keys]: Type}</code> where <code class="language-plaintext highlighter-rouge">Keys</code> and <code class="language-plaintext highlighter-rouge">Type</code> are generics.</p> <h2 id="pick">Pick</h2> <p><code class="language-plaintext highlighter-rouge">Pick&lt;Type, Keys&gt;</code></p> <p>Constructs a type by picking the set of properties Keys (string literal or union of string literals) from <code class="language-plaintext highlighter-rouge">Type</code>.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">completed</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">type</span> <span class="nx">TodoPreview</span> <span class="o">=</span> <span class="nb">Pick</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="p">,</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">;</span>
 
<span class="kd">const</span> <span class="nx">todo</span><span class="p">:</span> <span class="nx">TodoPreview</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Clean room</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">completed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="omit">Omit</h2> <p><code class="language-plaintext highlighter-rouge">Omit&lt;Type, Keys&gt;</code></p> <p>Constructs a type by picking all properties from <code class="language-plaintext highlighter-rouge">Type</code> and then removing <code class="language-plaintext highlighter-rouge">Keys</code> (string literal or union of string literals). The opposite of <code class="language-plaintext highlighter-rouge">Pick</code>.</p> <p>Classic usage is omiting the <code class="language-plaintext highlighter-rouge">id</code> property for a object type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">Guest</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">,</span> <span class="s2">`id`</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// then, Guest type just contain name. </span>
</code></pre></div></div> <h2 id="returntype">ReturnType</h2> <p><code class="language-plaintext highlighter-rouge">ReturnType&lt;Type&gt;</code></p> <p>Constructs a type consisting of the return type of function Type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">T0</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// type T0 = string</span>

<span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">3</span> <span class="p">};</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">P</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">&gt;</span><span class="p">;</span>   
<span class="c1">// type P = {</span>
<span class="c1">//     x: number;</span>
<span class="c1">//     y: number;</span>
<span class="c1">// }</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="TypeScript"/><category term="TypeScript"/><summary type="html"><![CDATA[TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.]]></summary></entry></feed>