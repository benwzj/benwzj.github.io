<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-17T12:36:28+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Get to Know Eslint</title><link href="https://benwzj.github.io/blog/2024/eslint/" rel="alternate" type="text/html" title="Get to Know Eslint"/><published>2024-06-05T00:00:00+00:00</published><updated>2024-06-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/eslint</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/eslint/"><![CDATA[<h2 id="what-is-linter">What is Linter</h2> <p>Lint, or a linter is a static code analysis tool, that is used in such a way, that can flag programming errors, bugs, bad constructs, or stylistic errors.</p> <p>The term ‚Äúlint‚Äù was derived from the name of the tiny bits of fiber and fluff shed by clothing. In 1979, lint was used outside of Bell Labs for the first time in the seventh version of the Unix operating system.</p> <h3 id="linter-can-help-a-lot">Linter can help a lot</h3> <p>Standardizing your code is very important. Having a guideline and running linters against the codebase avoid aesthetical changes in your pull request, like replacing all tabs for spaces, variable assignment indentation, or similar.</p> <p>There are many benefits of using linters. Beside code standardization, linters improve code review discussion level, it can make code look like it‚Äôs written by a single person and much more. Many linters include a performance check. They can add different kinds of performance improvements for experienced and newcomers developers.</p> <h2 id="what-is-eslint">What is ESLint</h2> <p>ESLint is a configurable JavaScript linter. It helps you find and fix problems in your JavaScript code. Problems can be anything from potential runtime bugs, to not following best practices, to styling issues.</p> <h3 id="core-concepts">Core Concepts</h3> <ul> <li>Rules: the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule. <ul> <li>Rule Fixes: Rules may optionally provide fixes for violations that they find. Fixes safely correct the violation without changing application logic.</li> <li>Rule Suggestions: Rules may optionally provide suggestions in addition to or instead of providing fixes.</li> </ul> </li> <li>Configuration Files: An ESLint configuration file is a place where you put the configuration for ESLint in your project.</li> <li>Plugins: An ESLint plugin is an npm module that can contain a set of ESLint rules, configurations, processors, and environments. Often plugins include custom rules. Plugins can be used to enforce a style guide and support JavaScript extensions (like TypeScript), libraries (like React), and frameworks (Angular).</li> <li>Parsers: An ESLint parser converts code into an abstract syntax tree that ESLint can evaluate. By default, ESLint uses the built-in Espree parser, which is compatible with standard JavaScript runtimes and versions.</li> <li>Custom Processors: An ESLint processor extracts JavaScript code from other kinds of files(like CoffeeScript), then lets ESLint lint the JavaScript code.</li> <li>CLI: The ESLint CLI is a command line interface that lets you execute linting from the terminal. The CLI has a variety of options that you can pass to its commands.</li> <li>Formatters: An ESLint formatter controls the appearance of the linting results in the CLI.</li> <li>ESLint Node.js API: It lets you use ESLint programmatically from Node.js code. The API is useful when developing plugins, integrations, and other tools related to ESLint.</li> </ul> <h3 id="features">Features</h3> <p>Everything is pluggable! üîå</p> <ul> <li>Rule API is used both by bundled and custom rules</li> <li>Formatter API is used both by bundled and custom formatters</li> <li>Additional rules and formatters can be specified at a runtime</li> <li>Rules and formatters don‚Äôt have to be bundled to be used</li> </ul> <p>Every rule:</p> <ul> <li>Is standalone</li> <li>Can be turned off or on (nothin can be deemed ‚Äútoo important to turn off‚Äù)</li> <li>Can be set to a warning or error individually</li> </ul> <p>Additionally:</p> <ul> <li>Rules are ‚Äúagenda-free‚Äù - ESLint does not promote any particular coding style</li> <li>Any bundled rules are generalizable</li> </ul> <h3 id="how-eslint-work">How ESLint work</h3> <figure> <picture> <img src="https://eslint.org/docs/latest/assets/images/architecture/dependency.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="how-to-use-eslint">How to use ESLint</h2> <ul> <li>First need to install ESLint in you project: <code class="language-plaintext highlighter-rouge">npm install eslint --save-dev</code></li> <li>Initialize an ESLint configuration for your project: <code class="language-plaintext highlighter-rouge">./node_modules/.bin/eslint --init</code></li> <li>Then you should have <code class="language-plaintext highlighter-rouge">.eslintrc.json</code> file. You can modify or add rule in this file.</li> <li>You can use ESLint CLI to check your code now. But most common way is integrating with ESCode.</li> <li>Install the ESLint Extension.</li> <li>Configure ESLint to automatically fix syntax and formatting issues every time you save by configure settings in Visual Studio Code.</li> </ul> <h3 id="eslint-and-vs-code">ESLint and VS Code</h3> <p>You can install <strong>‚ÄúVS Code ESLint extension‚Äù</strong> in VS Code to use ESLint in VS Code Editor.</p> <p>The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn‚Äôt provide one the extension looks for a global install version. If you haven‚Äôt installed ESLint either locally or globally do so by running <code class="language-plaintext highlighter-rouge">npm install eslint</code> in the workspace folder for a local install or <code class="language-plaintext highlighter-rouge">npm install -g eslint</code> for a global install.</p> <p>On new folders you might also need to create an <code class="language-plaintext highlighter-rouge">.eslintrc</code> configuration file. You can do this by either using the VS Code command <code class="language-plaintext highlighter-rouge">Create ESLint configuration</code> or by running the eslint command in a terminal with <code class="language-plaintext highlighter-rouge">npx eslint --init</code>.</p> <h2 id="fqa">FQA</h2> <ul> <li>What is VS Code ESLint extension</li> <li>How ESLint work with Editor</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://eslint.org/docs/latest/use/core-concepts/">eslint.org doc</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Eslint"/><summary type="html"><![CDATA[What is Linter]]></summary></entry><entry><title type="html">Shopify Dev Overview</title><link href="https://benwzj.github.io/blog/2024/shopify-dev/" rel="alternate" type="text/html" title="Shopify Dev Overview"/><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/shopify-dev</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/shopify-dev/"><![CDATA[<p>There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).</p> <p>Run through this blog, you can get to know some concepts and terminologies of Shopify develpment.</p> <h2 id="apps">Apps</h2> <h3 id="what-is-shopify-app">What is Shopify App?</h3> <ul> <li>Shopify itself meets about 80% of global merchant needs. For everything else, Shopify merchants turn to apps.</li> <li>Shopify offers APIs, toolings and integration point to App.</li> <li>App Connects with Shopify APIs to extend store features.</li> <li>Merchant installs and uses App in their store.</li> <li>Shopify Apps can appear in and add functionality to nearly every area of the Shopify platform.</li> <li>A single app can add functionality to multiple areas of the platform.</li> <li>Depending on the tool that you‚Äôre using, Shopify might host your code, or you might have to arrange for hosting yourself.</li> <li>You can Surface App‚Äôs functionality in Shopify admin, Checkout, Online Store, Shopify Flow, Point of Sale, etc.</li> </ul> <h4 id="shopify-admin">Shopify admin</h4> <p>The Shopify admin is the primary interface for merchants to manage their stores, and core Shopify objects such as products, orders, and customers. The Shopify admin is also the place where merchants can manage their apps. Developers can surface their app‚Äôs functionality in the Shopify admin using the following technologies:</p> <ul> <li>Embedded app pages directly inside of the Shopify admin. <ul> <li>Shopify App Bridge (A JavaScript library)</li> <li>Polaris design system</li> <li>Shopify app templates</li> </ul> </li> <li>Custom data (more data models except for basic, like products, collections, and orders) <ul> <li>Metafields</li> <li>Metaobjects</li> </ul> </li> <li>App extensions</li> </ul> <h4 id="checkout">Checkout</h4> <p>Merchants use Shopify checkout to accept orders and receive payments wherever they sell online. You can add functionality to Shopify checkout by building an app. using the following technologies:</p> <ul> <li>Checkout UI extensions</li> <li>Shopify Functions</li> <li>Post-purchase checkout extensions</li> </ul> <h3 id="online-store">Online Store</h3> <p>The online store is a storefront that merchants use to sell their products. You can add functionality to the online store using the following technologies:</p> <ul> <li>Theme app extensions</li> <li>Web pixels</li> <li>Storefront API</li> </ul> <h4 id="shopify-flow">Shopify Flow</h4> <p>Shopify Flow is an app and platform that lets merchants customize their store through automation. You can integrate your app with Shopify Flow through custom triggers and actions. Triggers enable your app to start a Flow workflow. Actions enable Flow to call your app or service in a workflow to do work.</p> <h4 id="shopify-pos">Shopify POS</h4> <p>Shopify Point of Sale (POS) is a point of sale app that merchants can use to sell products in person. Merchants can create a cart for each customer, customize the cart in several ways, and then accept payment with a wide range of payment methods. You can surface your app‚Äôs functionality in Shopify POS through standardized APIs and extensions.</p> <h3 id="build-shopify-app">Build Shopify App</h3> <ul> <li>You need a Partner account and a development store.</li> <li>You need to use Shopify CLI. like this: <code class="language-plaintext highlighter-rouge">shopify app init</code>.</li> <li>Shopify recommend use Remix to build Shopify App. But you can still other framework.</li> </ul> <h2 id="theme">Theme</h2> <h3 id="what-is-shopify-theme">What is Shopify Theme</h3> <ul> <li>A Shopify theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers.</li> <li>Different themes have different styles and layouts, and offer a different experience for your customers. For example, if you‚Äôre selling spa products, then you might want your online store to feel relaxed and luxurious. If you‚Äôre selling electronics, then you might want your online store to look energetic and sleek.</li> <li>Shopify themes are built using Shopify‚Äôs theme templating language, Liquid, along with <strong>HTML, CSS, JavaScript, and JSON</strong>. Using these languages, developers can create any look and feel that their clients want.</li> <li><a href="https://github.com/Shopify/dawn">Dawn</a> is official, free, default theme. It show What a Theme exactly to be.</li> </ul> <h3 id="theme-architecture">Theme architecture</h3> <p>Theme code is organized with a standard directory structure of files specific to Shopify themes, as well as supporting assets such as images, stylesheets, and scripts.</p> <h4 id="theme-file-categories">Theme file categories</h4> <p>Theme files fall into the following general categories:</p> <ul> <li><strong>Markup and features</strong> - These files control the layout and functionality of a theme. They use <strong>Liquid</strong> to generate the HTML markup that makes up the pages of the merchant‚Äôs online store.</li> <li><strong>Supporting assets</strong> - These files are assets, scripts, or locale files that are either called or consumed by other files in the theme.</li> <li><strong>Config files</strong> - These files use <strong>JSON</strong> to store configuration data that can be customized by merchants using the theme editor.</li> </ul> <h4 id="themes-directory-structure">Themes directory structure</h4> <p>Themes must use the following directory structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
‚îú‚îÄ‚îÄ assets
‚îú‚îÄ‚îÄ config
‚îú‚îÄ‚îÄ layout
‚îú‚îÄ‚îÄ locales
‚îú‚îÄ‚îÄ sections
‚îú‚îÄ‚îÄ snippets
‚îî‚îÄ‚îÄ templates
    ‚îî‚îÄ‚îÄ customers
</code></pre></div></div> <ul> <li>The <code class="language-plaintext highlighter-rouge">assets</code> directory, including image, CSS, and JavaScript files.</li> <li>The <code class="language-plaintext highlighter-rouge">config</code> directory contains the config files for a theme.</li> <li>The <code class="language-plaintext highlighter-rouge">layout</code> directory contains the layout files for a theme, through which template files are rendered. A <code class="language-plaintext highlighter-rouge">theme.liquid</code> file must exist in this folder for the theme to be uploaded to Shopify.</li> <li>The <code class="language-plaintext highlighter-rouge">locales</code> directory contains the locale files for a theme, which are used to provide translated content.</li> <li>The <code class="language-plaintext highlighter-rouge">sections</code> directory contains a theme‚Äôs sections and section groups. Sections are Liquid files, while Section groups are JSON containers.</li> <li>The <code class="language-plaintext highlighter-rouge">snippets</code> directory contains Liquid files that host smaller reusable snippets of code.</li> <li>The <code class="language-plaintext highlighter-rouge">templates</code> directory contains a theme‚Äôs template files, which control what‚Äôs rendered on each type of page.</li> <li>The <code class="language-plaintext highlighter-rouge">templates/customers</code> directory contains the template files for customer-centric pages like the login and account overview pages.</li> </ul> <h3 id="theme-layout">Theme Layout</h3> <ul> <li>Layouts are the base of the theme, through which all templates are rendered.</li> <li>Layouts are Liquid files.</li> <li>Layout files are located in the <code class="language-plaintext highlighter-rouge">layout</code> directory of the theme.</li> <li>Layout files allow you to include content, that should be <strong>repeated</strong> on multiple page types, in a single location. For example, layouts are a good place to include any content you might want in your <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element, as well as headers and footers.</li> <li>There are the two layout types: General, Checkout.</li> <li>Most layout files also contain the following Schema objects: <code class="language-plaintext highlighter-rouge">content_for_header</code>, <code class="language-plaintext highlighter-rouge">content_for_layout</code>.</li> </ul> <h3 id="theme-template">Theme Template</h3> <ul> <li>Theme Template files located in <code class="language-plaintext highlighter-rouge">templates</code> directory.</li> <li>Templates control what‚Äôs rendered on each type of page in a theme.</li> <li>Each page type in an online store has an associated template type. For example, to render a product page, the theme needs at least one template of type <code class="language-plaintext highlighter-rouge">product</code>.</li> <li>There are two different file types you can use for a theme template: JSON and Liquid.</li> <li>Template types can be: <code class="language-plaintext highlighter-rouge">404</code>, <code class="language-plaintext highlighter-rouge">article</code>, <code class="language-plaintext highlighter-rouge">blog</code>, <code class="language-plaintext highlighter-rouge">cart</code>, <code class="language-plaintext highlighter-rouge">collection</code>, <code class="language-plaintext highlighter-rouge">customers/account</code>, etc.</li> </ul> <h3 id="sections">Sections</h3> <ul> <li>Section files are located in the <code class="language-plaintext highlighter-rouge">sections</code> directory of the theme.</li> <li>Sections are Liquid files that allow you to create reusable modules of content that can be customized by <strong>merchants</strong>.</li> <li>For example, you can create an Image with text section that displays an image and text side-by-side with options for merchants to choose the image, set the text, and select the display order.</li> </ul> <h3 id="blocks">Blocks</h3> <ul> <li>Blocks are reusable modules for structuring content within sections.</li> <li>Blocks can represent a variety of content types such as text, images, products, collections and videos. They can be added, removed, and reordered within a section, providing merchants with a high degree of flexibility and customization in the theme editor.</li> </ul> <h2 id="headless">Headless</h2> <h3 id="what-is-headless">What is Headless</h3> <ul> <li>Headless means total customized storefront which give you maximum flexibility.</li> <li>You can build Headless with Shopify‚Äôs Storefront APIs and Customer Account APIs.</li> <li>Hydrogen is Shopify official headless framework. You can alwo bring your own stack.</li> <li>Oxygen is Shopify‚Äôs global serverless hosting platform, built for deploying Hydrogen storefronts at the edge.</li> <li>custom storefron, not just website, it can be native mobile app, PWA, video livestreams, IoT, or just add a buy button on an existing website.</li> </ul> <h2 id="fqa">FQA</h2> <h3 id="what-is-storefront">What is Storefront</h3> <p>Storefront is the interface to customers from which you can sell things. There are two way to build your Storefront: Using Theme or Headless.</p> <h3 id="what-is-point-of-sale-pos">What is Point of Sale (POS)</h3> <p>The point of sale (POS) is the time and place at which a retail transaction is completed. At the point of sale, the merchant calculates the amount owed by the customer, indicates that amount, prepare an invoice for the customer (which may be a cash register printout), and indicates the options for the customer to make payment.</p> <h3 id="what-is-shopify-point-of-sale-pos">What is Shopify Point of Sale (POS)</h3> <p>Shopify POS is a point of sale <strong>app</strong> that you can use to sell your products in person. Process orders, accept payments, produce receipts, and control it all from your mobile device. Shopify online store automatically synchronizes with Shopify POS, and you manage your entire business from one dashboard. Inventory, product, and payment updates that you make in your Shopify admin will instantly take effect in Shopify POS.</p> <h3 id="what-is-app-extension">What is App extension</h3> <ul> <li>An app extension enables you to add your app‚Äôs functionality to Shopify user interfaces.</li> <li>An app extension isn‚Äôt an app. It‚Äôs a mechanism that lets an app add features to certain defined parts of several Shopify user interfaces</li> <li><strong>Without</strong> an app extension, users interact directly with your app. Your app relays information to Shopify that gets surfaced back to the users through your app.</li> <li><strong>With</strong> an app extension, users interact with Shopify. Shopify relays information to your app that gets surfaced back to the users through your app extension in Shopify.</li> </ul> <h3 id="how-theme-work-in-shopify">How Theme work in Shopify</h3> <h3 id="what-is-headless-shopify-theme">What is headless Shopify theme</h3> <p>A theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers. Shopify themes are built using Shopify‚Äôs theme templating language, Liquid, along with HTML, CSS, JavaScript, and JSON. Using these languages, developers can create any look and feel that their clients want. Headless Theme is used for Headless storefront.</p> <h2 id="references">References</h2> <ul> <li><a href="https://shopify.dev">shopify.dev</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="Shopify"/><category term="E-Commerce"/><summary type="html"><![CDATA[There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).]]></summary></entry><entry><title type="html">SEO Overview</title><link href="https://benwzj.github.io/blog/2024/SEO/" rel="alternate" type="text/html" title="SEO Overview"/><published>2024-05-28T00:00:00+00:00</published><updated>2024-05-28T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/SEO</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/SEO/"><![CDATA[<h2 id="what-is-seo">What is SEO</h2> <p>Search engine optimization (SEO) is the process of increasing the visibility of website pages on search engines in order to attract more relevant traffic.</p> <p>From search engine view, SEO is also about helping search engines understand your content, and helping users find your site and make a decision about whether they should visit your site.</p> <p>SEO can also refer to a position (Search Engine Optimizer)</p> <p>Google provide many reports and tools to help to improve website SEO. Check <a href="https://support.google.com/webmasters">here</a> to see HOW Google help you improve your webiste SEO.</p> <h2 id="how-google-search-works">How Google Search works</h2> <h3 id="crawling">Crawling:</h3> <ul> <li>Google downloads text, images, and videos from pages it found on the internet with automated programs called crawlers.</li> <li>Google constantly look for new and updated pages and add them to its list of known pages. This process is called ‚ÄúURL discovery‚Äù.</li> <li>During the crawl, Google renders the page and runs any JavaScript it finds using a recent version of Chrome, similar to how your browser renders pages you visit.</li> <li>Crawling depends on whether Google‚Äôs crawlers can access the site. For example, <code class="language-plaintext highlighter-rouge">robots.txt</code> rules preventing Googlebot‚Äôs access to the page.</li> <li>Some JavaScript sites may use SPA where the initial HTML does not contain the actual content and Google needs to execute JavaScript before being able to see the actual page content that JavaScript generates. Googlebot queues all pages for rendering.</li> </ul> <h3 id="indexing">Indexing:</h3> <ul> <li>After a page is crawled, Google tries to understand what the page is about. This stage is called indexing and it includes processing and analyzing the textual content and key content tags and attributes, such as <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code> elements and <code class="language-plaintext highlighter-rouge">alt</code> attributes, <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">videos</code>, and more. And stores the information in the Google index.</li> <li>During the indexing process, Google determines if a page is a duplicate of another page on the internet or <strong>canonical</strong>.</li> <li>Indexing also depends on the <strong>content</strong> of the page and its <strong>metadata</strong>.</li> </ul> <h3 id="serving-search-results">Serving search results:</h3> <ul> <li>When a user enters a query, our machines search the index for matching pages and return the results we believe are the highest quality and most relevant to the user‚Äôs query.</li> <li>Search Console might tell you that a page is indexed, but you don‚Äôt see it in search results. Check it.</li> </ul> <h2 id="google-give-guides-to-maintain-your-websites-seo">Google give guides to Maintain your website‚Äôs SEO</h2> <h3 id="control-how-google-crawls-and-indexes">Control how Google crawls and indexes</h3> <ul> <li>Work around Canonical URL a canonical URL is the URL of a page that Google chose as the most representative from a set of duplicate pages.</li> <li>Make sure your resource are accessible</li> <li>Robots.txt</li> <li>Use Sitemaps</li> <li>Internationalized or multi-lingual sites</li> <li>Follow crawling and indexing best practices</li> <li>Help Google understand your site</li> <li>Follow Google guidelines</li> </ul> <h2 id="google-search-console">Google Search Console</h2> <p><a href="https://search.google.com/search-console/">Search Console</a> helps you monitor, maintain, and troubleshoot your site‚Äôs presence in Google Search results</p> <p>Search Console offers tools and reports for the following actions:</p> <ul> <li>Confirm that Google can find and crawl your site.</li> <li>Fix indexing problems and request re-indexing of new or updated content.</li> <li>View Google Search traffic data for your site: how often your site appears in Google Search, which search queries show your site, how often searchers click through for those queries, and more.</li> <li>Receive alerts when Google encounters indexing, spam, or other issues on your site.</li> <li>Show you which sites link to your website.</li> </ul> <h2 id="rich-results-test">Rich Results Test</h2> <p><a href="https://search.google.com/test/rich-results">Rich Results Test</a> can Test your publicly accessible page to see which rich results can be generated by the structured data it contains.</p> <h3 id="what-is-structured-data-markup">What is structured data markup</h3> <p>Structured data is a standardized format for providing information about a page and classifying the page content; for example, on a recipe page, what are the ingredients, the cooking time and temperature, the calories, and so on.</p> <p>Adding structured data can enable search results that are more engaging to users and might encourage them to interact more with your website, which are called rich results.</p> <p>For example, here is a JSON-LD structured data snippet that might appear on a recipe page, describing the title of the recipe, the author of the recipe, and other details:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Party Coffee Cake<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"application/ld+json"</span><span class="nt">&gt;</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@context</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://schema.org/</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Recipe</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Party Coffee Cake</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Person</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mary Stone</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">datePublished</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2018-03-10</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This coffee cake is awesome and perfect for parties.</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">prepTime</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PT20M</span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Party coffee cake recipe<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;i&gt;</span>by Mary Stone, 2018-03-10<span class="nt">&lt;/i&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This coffee cake is awesome and perfect for parties.
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Preparation time: 20 minutes
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://search.google.com/search-console/">Search Console</a></li> <li><a href="https://search.google.com/test/rich-results">Rich Results Test</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="SEO"/><category term="Website"/><summary type="html"><![CDATA[What is SEO]]></summary></entry><entry><title type="html">Rendering on the Web</title><link href="https://benwzj.github.io/blog/2024/rendering-web/" rel="alternate" type="text/html" title="Rendering on the Web"/><published>2024-05-27T00:00:00+00:00</published><updated>2024-05-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/rendering-web</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/rendering-web/"><![CDATA[<p>There are many ways to rendering web application on the web.</p> <ul> <li>Server-side rendering (SSR): Rendering a client-side or universal app to HTML on the server.</li> <li>Static rendering: Producing a separate HTML file for each URL ahead of time.</li> <li>Client-side rendering (CSR): Rendering an app in a browser, using JavaScript to modify the DOM.</li> <li>Rehydration: ‚ÄúBooting up‚Äù JavaScript views on the client so they reuse the server-rendered HTML‚Äôs DOM tree and data.</li> <li>Prerendering: Running a client-side application at build time to capture its initial state as static HTML.</li> </ul> <p>Performance is the important fact for web application.</p> <ul> <li>Time to First Byte (<strong>TTFB</strong>): The time between clicking a link and the first byte of content loading on the new page.</li> <li>First Contentful Paint (<strong>FCP</strong>): The time when requested content (article body, etc) becomes visible.</li> <li>Interaction to Next Paint (<strong>INP</strong>): A representative metric that assesses whether a page consistently responds quickly to user inputs.</li> <li>Total Blocking Time (<strong>TBT</strong>): A proxy metric for INP that calculates how long the main thread was blocked during page load.</li> </ul> <blockquote class="block-warning"> <p>Broadly speaking, It is encouraged to consider server-side rendering or static rendering over a full rehydration approach.</p> </blockquote> <h2 id="server-side-rendering">Server-side rendering</h2> <p>Server-side rendering generates the full HTML for a page on the server in response to navigation. This avoids additional round trips for data fetching and templating on the client, because the renderer handles them before the browser gets a response.</p> <p>Server-side rendering generally produces a fast FCP.</p> <p>React users can use server DOM APIs or solutions built on them like Next.js for server-side rendering. Vue users can use Vue‚Äôs server-side rendering guide or Nuxt. Angular has Universal.</p> <h2 id="static-rendering">Static rendering</h2> <p>Static rendering happens at <strong>build</strong> time. With HTML responses generated in advance, you can deploy static renders to multiple CDNs to take advantage of edge caching.</p> <p>Tools like Gatsby are designed to make developers feel like their application is being rendered dynamically, not generated as a build step. Static site generation tools such as 11ty, Jekyll, and Metalsmith embrace their static nature, providing a more template-driven approach.</p> <h2 id="prerendering">prerendering</h2> <p>static rendering and prerendering behave differently: statically rendered pages are interactive without needing to execute much client-side JavaScript, whereas prerendering improves the FCP of a Single Page Application that must be booted on the client to make pages truly interactive.</p> <p>Prerendering generally needs more JavaScript to become interactive.</p> <h2 id="client-side-rendering">Client-side rendering</h2> <p>Client-side rendering means rendering pages directly in the browser with JavaScript. All logic, data fetching, templating, and routing are handled on the client instead of on the server. The effective outcome is that more data is passed to the user‚Äôs device from the server, and that comes with its own set of tradeoffs.</p> <p>The primary downside to client-side rendering is that the amount of JavaScript required tends to grow as an application grows.</p> <h2 id="rehydration-combines-server-side-and-client-side-rendering">Rehydration combines server-side and client-side rendering.</h2> <p>Rehydration is an approach that tries to smooth over the tradeoffs between client-side and server-side rendering by doing both. Navigation requests like full page loads or reloads are handled by a server that renders the application to HTML, then the JavaScript and data used for rendering is embedded into the resulting document. When done carefully, this achieves a fast FCP like server-side rendering, then ‚Äúpicks up‚Äù by rendering again on the client.</p> <p>This is an effective solution, but it can have considerable performance drawbacks. The primary downside of server-side rendering with rehydration is that it can have a significant negative impact on TBT and INP, even if it improves FCP.</p> <p>Also, Because this duplicates a lot of HTML, rehydration can cause more problems than just delayed interactivity.</p> <h2 id="stream-server-side-rendering-and-rehydrate-progressively">Stream server-side rendering and rehydrate progressively</h2> <p>Streaming server-side rendering lets you send HTML in chunks that the browser can progressively render as it‚Äôs received. This can get markup to your users faster, speeding up your FCP.</p> <p>Progressive rehydration is also worth considering, and React has implemented it. With this approach, individual pieces of a server-rendered application are ‚Äúbooted up‚Äù over time, instead of the current common approach of initializing the entire application at once.</p> <h2 id="seo-considerations">SEO considerations</h2> <p>When choosing a web rendering strategy, teams often consider the impact of SEO.</p> <p>Server-side rendering is a popular choice for delivering a ‚Äúcomplete looking‚Äù experience that crawlers can interpret.</p> <p>Crawlers can understand JavaScript, but there are often limitations to how they render. Client-side rendering can work, but often needs additional testing and overhead. More recently, dynamic rendering has also become an option worth considering if your architecture depends heavily on client-side JavaScript.</p> <h2 id="conclusion">Conclusion</h2> <figure> <picture> <img src="/assets/img/app-rendering-types.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="references">References</h2> <ul> <li><a href="https://web.dev/articles/rendering-on-the-web#seo-considerations">web.dev</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="Website"/><category term="Rendering"/><category term="React"/><summary type="html"><![CDATA[There are many ways to rendering web application on the web. Server-side rendering (SSR): Rendering a client-side or universal app to HTML on the server. Static rendering: Producing a separate HTML file for each URL ahead of time. Client-side rendering (CSR): Rendering an app in a browser, using JavaScript to modify the DOM. Rehydration: ‚ÄúBooting up‚Äù JavaScript views on the client so they reuse the server-rendered HTML‚Äôs DOM tree and data. Prerendering: Running a client-side application at build time to capture its initial state as static HTML.]]></summary></entry><entry><title type="html">Next.js Runtime</title><link href="https://benwzj.github.io/blog/2024/nextjs-runtime/" rel="alternate" type="text/html" title="Next.js Runtime"/><published>2024-05-20T00:00:00+00:00</published><updated>2024-05-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-runtime</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-runtime/"><![CDATA[<h2 id="what-is-nextjs-runtime">What is Next.js Runtime</h2> <p>In the context of Next.js, runtime refers to the set of libraries, APIs, and general functionality available to your code during execution.</p> <p>Next.js has two server runtimes to run your application:</p> <ul> <li>The <strong>Node.js Runtime</strong> (default) has access to all Node.js APIs and compatible packages from the ecosystem. For doing SSR, or serving API routes. Node.js runtime can be Server or Serverless.</li> <li>The <strong>Edge Runtime</strong> is based on Web APIs. For Middlewar.</li> </ul> <p>There are many differences between these two runtimes. Here‚Äôs a quick comparison:</p> <table> <thead> <tr> <th style="text-align: left">¬†</th> <th style="text-align: center">Node (server)</th> <th style="text-align: right">Node (lambda)</th> <th style="text-align: right">Edge</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Cold Boot</td> <td style="text-align: center">/</td> <td style="text-align: right">~250ms</td> <td style="text-align: right">Instant</td> </tr> <tr> <td style="text-align: left">HTTP Streaming</td> <td style="text-align: center">Yes</td> <td style="text-align: right">No</td> <td style="text-align: right">Yes</td> </tr> <tr> <td style="text-align: left">IO</td> <td style="text-align: center">All</td> <td style="text-align: right">All</td> <td style="text-align: right">fetch</td> </tr> <tr> <td style="text-align: left">Scalability</td> <td style="text-align: center">/</td> <td style="text-align: right">High</td> <td style="text-align: right">Highest</td> </tr> <tr> <td style="text-align: left">Security</td> <td style="text-align: center">Normal</td> <td style="text-align: right">High</td> <td style="text-align: right">Highest</td> </tr> <tr> <td style="text-align: left">Latency</td> <td style="text-align: center">Normal</td> <td style="text-align: right">Low</td> <td style="text-align: right">Lowest</td> </tr> <tr> <td style="text-align: left">Code Size</td> <td style="text-align: center">/</td> <td style="text-align: right">50MB</td> <td style="text-align: right">1MB</td> </tr> <tr> <td style="text-align: left">NPM Packages</td> <td style="text-align: center">All</td> <td style="text-align: right">All</td> <td style="text-align: right">A smaller subset</td> </tr> </tbody> </table> <blockquote> <p>You can specify a runtime for individual route segments in your Next.js application.</p> </blockquote> <h2 id="switch-runtime">Switch Runtime</h2> <h3 id="why">Why</h3> <p>Next.js‚Äô default runtime configuration is good for most use cases, but there‚Äôre still many reasons to change to one runtime over the other one. For example, to enable React 18‚Äôs streaming SSR feature, you cannot deploy the app to lambda. For API routes that relies on native Node.js APIs, it has to be running in the Node.js Runtime. But if an API only uses a simple cookie-based authentication, using middleware and the Edge Runtime will be a better choice due to its lower latency as well as better scalability.</p> <h3 id="how">How</h3> <ol> <li>Global Runtime A runtime option in <code class="language-plaintext highlighter-rouge">next.config.js</code>, which can be either <code class="language-plaintext highlighter-rouge">nodejs</code> or <code class="language-plaintext highlighter-rouge">edge</code> (or leave it as <code class="language-plaintext highlighter-rouge">undefined</code>): <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">experimental</span><span class="p">:</span> <span class="p">{</span>
 <span class="nx">runtime</span><span class="p">?:</span> <span class="dl">'</span><span class="s1">nodejs</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">edge</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Per-route Runtime Config For each route (pages and API routes), you can export an option runtime config such as: <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">runtime</span><span class="p">?:</span> <span class="dl">'</span><span class="s1">nodejs</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">edge</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div> </div> <p>If the segment runtime is not set, the default nodejs runtime will be used.</p> </li> </ol> <h2 id="nodejs-runtime">Node.js Runtime</h2> <p>According to the Node.js official documentation: Node.js is an asynchronous event-driven JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts. According to the Next.js official documentation: Next.js is a React framework for building full-stack web applications.</p> <p>So Next.js is a React framework application which run in Node.js runtime environment. You can say Next.js is Node.js application.</p> <p>Using the Node.js runtime gives you access to all Node.js APIs, and all npm packages that rely on them. However, it‚Äôs not as fast to start up as routes using the Edge runtime.</p> <h2 id="edge-runtime">Edge Runtime</h2> <h3 id="what-is-edge-runtime">What is Edge Runtime</h3> <p>The Edge Runtime is designed to help framework authors adopt edge computing and provide open-source tooling built on Web standards. It‚Äôs designed to be integrated into frameworks (like Next.js) and not for usage in application code.</p> <p>The Edge Runtime is a subset of Node.js APIs, giving you compatibility and interoperability between multiple web environments. The project is designed to be compliant with standards developed by WinterCG - a community group between Vercel, Cloudflare, Deno, Shopify, and more. The term ‚ÄúEdge‚Äù refers to the orientation toward instant serverless compute environments and not a specific set of locations.</p> <p>The Edge Runtime is ideal if you need to deliver dynamic, personalized content at low latency with small, simple functions. The Edge Runtime‚Äôs speed comes from its minimal use of resources,</p> <h3 id="using-the-edge-runtime-locally">Using the Edge Runtime Locally</h3> <p>When developing and testing locally, the Edge Runtime will polyfill Web APIs and ensure compatibility with the Node.js layer. In production, the Edge Runtime uses the JavaScript V8 engine, not Node.js, so there is no access to Node.js APIs.</p> <h2 id="fqa">FQA</h2> <ul> <li>Where is the Edge Runtime?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://edge-runtime.vercel.app/">edge-runtime.vercel.app</a>.</li> <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">edge-and-nodejs-runtimes</a>.</li> <li><a href="https://github.com/vercel/next.js/discussions/34179">RFC Switchable Next.js Runtime:</a>.</li> </ul>]]></content><author><name></name></author><category term="React"/><category term="Next.js"/><category term="Node.js"/><category term="Runtime"/><summary type="html"><![CDATA[What is Next.js Runtime]]></summary></entry><entry><title type="html">GraphQL Introduction</title><link href="https://benwzj.github.io/blog/2024/GraphQL/" rel="alternate" type="text/html" title="GraphQL Introduction"/><published>2024-05-11T00:00:00+00:00</published><updated>2024-05-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/GraphQL</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/GraphQL/"><![CDATA[<h2 id="graphql-concept">GraphQL Concept</h2> <p>GraphQL is a query <strong>language</strong> for your API, and a server-side runtime for executing queries using a type system you define for your data.</p> <p>Clients form requests by using the GraphQL query language, and the GraphQL server executes the request and returns the data in a response.</p> <h3 id="features">Features</h3> <ul> <li><strong>The GraphQL query language</strong>: basically about <strong>selecting fields</strong> on objects.</li> <li><strong>A GraphQL service</strong>: it is created by defining <strong>types</strong> and <strong>fields on those types</strong>, then providing functions for each field on each type.</li> <li>In <strong>a GraphQL operation</strong>: the client specifies how to structure the data when it is returned by the server. This makes it possible for the client to query only for the data it needs, in the format that it needs it in.</li> <li><strong>GraphQL request structures</strong> resemble JSON. However, GraphQL requests don‚Äôt use quotes for field names and don‚Äôt have colons separating field names and values. Responses are in JSON format.</li> </ul> <h3 id="graphql-vs-rest">GraphQL vs REST</h3> <p>We usually compare GraphQL and REST.</p> <p>REST uses <strong>‚Äúresources‚Äù</strong> as its core concept. That means entities are identified by URIs. In contrast, GraphQL‚Äôs conceptual model is an entity <strong>graph</strong>. A GraphQL server operates on a single URL/endpoint, usually /graphql, and all GraphQL requests for a given service should be directed at this endpoint.</p> <p>In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. But in GraphQL, every field and nested object can get its own set of arguments, making GraphQL a complete replacement for making multiple API fetches.</p> <h3 id="graphql-has-three-top-level-operations">GraphQL has three top-level operations:</h3> <ol> <li>Query - read-only fetch</li> <li>Mutation - write, followed by a fetch</li> <li>Subscription - long-lived connection for receiving data</li> </ol> <p>GraphQL exposes these operations via a schema that defines the capabilities of an API. A schema is comprised of types, which can be root types (query, mutation, or subscription) or user-defined types.</p> <blockquote class="block-warning"> <p>Developers start with a schema to define the capabilities of their GraphQL API, which a client application will communicate with.</p> </blockquote> <h2 id="basic-example">Basic example</h2> <ol> <li>A GraphQL service define object types: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  me: User
}
type User {
  id: ID
  name: String
}
</code></pre></div> </div> <p>Along with functions for each field on each type:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Query_me</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">user</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">User_name</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nf">getName</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>After a GraphQL service is running, it can receive GraphQL queries to and execute. For example, the query: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  me {
 name
  }
}
</code></pre></div> </div> <p>Could produce the following JSON result:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"me"</span><span class="p">:{</span><span class="w">
 </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Luke Skywalker"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <h2 id="basic-concepts">Basic Concepts</h2> <ul> <li><strong>Arguments</strong>: (just like arguments in Function()) In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. In GraphQL, every field and nested object can get its own set of arguments. It let you fetch more specific data.</li> <li><strong>Aliases</strong>: They let you rename the result of a field to anything you want.</li> <li><strong>fragments</strong>: (just like Functions) GraphQL includes reusable units called fragments. Fragments let you construct sets of fields, and then include them in queries where you need to.</li> <li>The <strong>Operation Type</strong> is either query, mutation, or subscription and describes what type of operation you‚Äôre intending to do.</li> <li>The <strong>Operation Name</strong> is a meaningful and explicit name for your operation.</li> <li><strong>Variables</strong>: (<code class="language-plaintext highlighter-rouge">$variableName: variableType</code>) All declared variables must be either scalars, enums, or input object types.</li> <li>Directives: The core GraphQL specification includes exactly two directives, which must be supported by any spec-compliant GraphQL server implementation: <ul> <li><code class="language-plaintext highlighter-rouge">@include(if: Boolean)</code> Only include this field in the result if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> <li><code class="language-plaintext highlighter-rouge">@skip(if: Boolean)</code> Skip this field if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> </ul> </li> </ul> <h2 id="graphql-schema-language">GraphQL schema language</h2> <p>The most basic components of a GraphQL schema are object types, which just represent a kind of object you can fetch from your service, and what fields it has.</p> <h3 id="the-query-and-mutation-types">The Query and Mutation types</h3> <p>Most types in your schema will just be normal object types, but there are two types that are special within a schema:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>schema {
  query: Query
  mutation: Mutation
}
</code></pre></div></div> <h3 id="scalar-types">Scalar types:</h3> <p>they represent the leaves of the query.</p> <h3 id="interface-type">Interface type:</h3> <p>An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface. (Like class)</p> <h3 id="union-types">Union types:</h3> <p>Union types are very similar to interfaces, but they don‚Äôt get to specify any common fields between the types. <code class="language-plaintext highlighter-rouge">union SearchResult = Human | Droid | Starship</code> Wherever we return a SearchResult type in our schema, we might get a Human, a Droid, or a Starship.</p> <h3 id="input-types">Input types:</h3> <p>in the GraphQL schema language, input types look exactly the same as regular object types, but with the keyword input instead of type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input ReviewInput {
  stars: Int!
  commentary: String
}
</code></pre></div></div> <p>Input type is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created. You can‚Äôt mix input and output types in your schema. Input object types also can‚Äôt have arguments on their fields.</p> <h2 id="authorization">Authorization</h2>]]></content><author><name></name></author><category term="Programming"/><category term="GraphQL"/><category term="REST"/><category term="Database"/><summary type="html"><![CDATA[GraphQL Concept]]></summary></entry><entry><title type="html">NPM YARN and PNPM</title><link href="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/" rel="alternate" type="text/html" title="NPM YARN and PNPM"/><published>2024-05-10T00:00:00+00:00</published><updated>2024-05-10T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/npm-pnpm-yarn</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/"><![CDATA[<h2 id="npm">NPM</h2> <p>NPM stands for Node Package Manager. npm is a package manager for the JavaScript programming language maintained by Microsoft‚Äôs npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js and is included as a recommended feature in the Node.js installer.</p> <h3 id="packages">Packages</h3> <p>A package in Node.js contains all the files you need for a module. Modules are JavaScript libraries you can include in your project. A package is registered in npmjs.com registry.</p> <h3 id="about-scopes">About scopes</h3> <p>When you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.</p> <blockquote class="block-warning"> <p>A scope allows you to create a package with the same name as a package created by another user or organization without conflict.</p> </blockquote> <p>When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the <code class="language-plaintext highlighter-rouge">@</code> and the slash <code class="language-plaintext highlighter-rouge">/</code>:</p> <ul> <li>‚Äúnpm‚Äù scope: <code class="language-plaintext highlighter-rouge">@npm/package-name</code></li> <li>‚Äúnpmcorp‚Äù scope: <code class="language-plaintext highlighter-rouge">@npmcorp/package-name</code></li> </ul> <h4 id="scopes-and-package-visibility">Scopes and package visibility</h4> <p>Unscoped packages are always public. Private packages are always scoped. Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.</p> <h3 id="commonjs">CommonJS</h3> <p>CommonJS is a project to <strong>standardize the module ecosystem</strong> for JavaScript outside of web browsers (e.g. on web servers or native desktop applications).</p> <p>CommonJS‚Äôs specification of how modules should work is widely used today for server-side JavaScript with Node.js. It is also used for browser-side JavaScript, but that code must be packaged with a transpiler since browsers don‚Äôt support CommonJS.</p> <p>The other major module specification in use is the ECMAScript (ES) modules specification (<strong>ES6 modules</strong> aka ES2015 modules). CommonJS can be recognized by the use of the <code class="language-plaintext highlighter-rouge">require()</code> function and <code class="language-plaintext highlighter-rouge">module.exports</code>, while ES modules use <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code> statements for similar (though not identical) functionality.</p> <h3 id="use-npm-command">Use npm command</h3> <p>npm manages downloads of dependencies of your project.</p> <ul> <li>If a project has a package.json file, by running <code class="language-plaintext highlighter-rouge">npm install</code>, it will install everything the project needs, in the <code class="language-plaintext highlighter-rouge">node_modules</code> folder, creating it if it‚Äôs not existing already.</li> <li>You can also install a specific package by running <code class="language-plaintext highlighter-rouge">npm install &lt;package-name&gt;</code>.</li> <li>Updating packages <code class="language-plaintext highlighter-rouge">npm update</code></li> <li>Running Tasks <code class="language-plaintext highlighter-rouge">npm run &lt;task-name&gt;</code></li> </ul> <h3 id="npx">npx</h3> <p>Run packages without downloading using npx.</p> <h2 id="yarn">YARN</h2> <p>YARN stands for Yet Another Resource Negotiator. It is an alternative package manager for JavaScript that was created in 2016 by Facebook, Google, Exponent, and Tilde. It was designed to address some of the issues and limitations of NPM, such as speed, reliability, and security.</p> <p>YARN has a similar command-line interface as NPM, but with some differences and improvements. It also uses the same package.json file as NPM, but it adds another file called yarn.lock that locks the exact versions of your dependencies. It also creates a node_modules folder where it stores the installed packages.</p> <h3 id="advantages">Advantages</h3> <ul> <li>It is faster and more efficient than NPM when installing or updating packages</li> <li>It uses a flat dependency structure that avoids duplication and nesting of packages</li> <li>It supports offline installation of packages from a local cache</li> <li>It has a better resolution algorithm that ensures consistent and deterministic versions of packages across different environments <h3 id="disadvantages">Disadvantages</h3> </li> <li>It is not as widely used or supported as NPM by the JavaScript community</li> <li>It may not be compatible with some NPM packages or features</li> <li>It may have some bugs or issues that are not yet fixed or resolved</li> </ul> <h2 id="pnpm">PNPM</h2> <p>When using npm, if you have 100 projects using a dependency, you will have 100 copies of that dependency saved on disk. With pnpm, the dependency will be stored in a content-addressable store, so:</p> <ul> <li>If you depend on different versions of the dependency, only the files that differ are added to the store. For instance, if it has 100 files, and a new version has a change in only one of those files, pnpm update will only add 1 new file to the store, instead of cloning the entire dependency just for the singular change.</li> <li>All the files are saved in a single place on the disk. When packages are installed, their files are hard-linked from that single place, consuming no additional disk space. This allows you to share dependencies of the same version across projects.</li> </ul> <p>As a result, you <strong>save a lot of space</strong> on your disk proportional to the number of projects and dependencies, and you have a lot faster installations!</p> <h3 id="boosting-installation-speed">Boosting installation speed</h3> <p>pnpm perfoms installation in three stages:</p> <ul> <li>Dependency resolution. All required dependencies are identified and fetched to the store.</li> <li>Directory structure calculation. The <code class="language-plaintext highlighter-rouge">node_modules</code> directory structure is calculated based on the dependencies.</li> <li>Linking dependencies. All remaining dependencies are fetched and hard linked from the store to <code class="language-plaintext highlighter-rouge">node_modules</code>.</li> </ul> <h3 id="pnpm-creating-a-non-flat-node_modules-directory">pnpm Creating a non-flat node_modules directory</h3> <p><code class="language-plaintext highlighter-rouge">npm</code> and <code class="language-plaintext highlighter-rouge">Yarn</code> create flat node_modules directory.</p> <p>But by default, <code class="language-plaintext highlighter-rouge">pnpm</code> uses <strong>symlinks</strong> to add only the direct dependencies of the project into the root of the modules directory. pnpm Creating a non-flat node_modules directory</p> <h2 id="npm-vs-yarn-vs-pnpm">npm vs yarn vs pnpm</h2> <table> <thead> <tr> <th style="text-align: left">Feature</th> <th style="text-align: left">NPM</th> <th style="text-align: left">YARN</th> <th style="text-align: left">PNPM</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Speed</td> <td style="text-align: left">Slow</td> <td style="text-align: left">Fast</td> <td style="text-align: left">Faster</td> </tr> <tr> <td style="text-align: left">Disk Space</td> <td style="text-align: left">High</td> <td style="text-align: left">Low</td> <td style="text-align: left">Lower</td> </tr> <tr> <td style="text-align: left">Security</td> <td style="text-align: left">Low</td> <td style="text-align: left">High</td> <td style="text-align: left">Higher</td> </tr> <tr> <td style="text-align: left">Compatibility</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">Popularity</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Low</td> </tr> <tr> <td style="text-align: left">Ecosystem</td> <td style="text-align: left">Rich</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">CLI</td> <td style="text-align: left">Simple</td> <td style="text-align: left">Complex</td> <td style="text-align: left">Similar to NPM</td> </tr> <tr> <td style="text-align: left">directory</td> <td style="text-align: left">flattened</td> <td style="text-align: left">flattened</td> <td style="text-align: left">symlinks</td> </tr> </tbody> </table> <h2 id="fqa">FQA</h2> <h3 id="is-it-a-problem-if-mix-using-them-in-a-project">Is it a problem if mix using them in a project?</h3> <p>You can switch between them if you want, as long as you delete the existing node_modules folder and lockfile before installing with a different package manager.</p> <h3 id="lockfile">lockfile?</h3> <p>Use a lockfile to ensure reproducible installs across different machines and environments. A lockfile is a file that records the exact versions and sources of the packages that your project depends on, so that you can install them consistently every time. NPM uses a package-lock.json file, YARN uses a yarn.lock file, and PNPM uses a pnpm-lock.yaml file. You should commit these files to your version control system and update them whenever you add, remove, or update a package</p>]]></content><author><name></name></author><category term="Programming"/><category term="npm"/><category term="Node.js"/><summary type="html"><![CDATA[NPM]]></summary></entry><entry><title type="html">CSS-in-JS Instroduction</title><link href="https://benwzj.github.io/blog/2024/css-in-js/" rel="alternate" type="text/html" title="CSS-in-JS Instroduction"/><published>2024-04-26T00:00:00+00:00</published><updated>2024-04-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-in-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-in-js/"><![CDATA[<h2 id="what-is-css-in-js">What is CSS-in-JS</h2> <p>The tradiction way to use CSS in SPA is using global CSS files. But there are some drawbacks in this approach:</p> <ul> <li>Headache in inventing class names.</li> <li>Hard to maintian: Changing one CSS may affect many HTML.</li> <li>Zombies CSS code.</li> </ul> <p>If you write CSS in JavaScript, you can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If you delete a component, you delete its CSS too. No more append-only stylesheets!</p> <h3 id="some-avandtage-of-css-in-js">Some Avandtage of CSS-in-JS:</h3> <ul> <li>Styles/Component co-location: As components include all the source code, styles, and logic they need for proper running, you can securely move them around.</li> <li>Local Scoping: By default, CSS doesn‚Äôt allow local scoping. Each style rule has a global scope, so it applies to the entire project.</li> <li>Reusability: Components are reusable, so you only have to write them once, then you can run them everywhere.</li> <li>Dynamic Functionality: As CSS-in-JS is essentially JavaScript code, you can apply complex logic to your style rules, such as loops, conditionals, variables, state-based styling, and more.</li> <li>Provide State-based styling: CSS-in-JS gives developers API to describe state-based styles in a better way than using a bunch of conditional class names.</li> <li>Constrain Selector: CSS-in-JS helps to constrain that power by scoping its selectors. Providing more expressiveness while encouraging more maintainable patterns than cascading.</li> <li>Painless maintenance: you never have to hunt across different files to find the styling affecting your component, so maintenance is a piece of cake no matter how big your codebase is.</li> <li>Automatic vendor prefixing: Most library provide this.</li> <li>Easier deletion of CSS: it can be hard to know whether a class name is used somewhere in your codebase. Write CSS in JS, every bit of styling is tied to a specific component. If the component is unused (which tooling can detect) and gets deleted, all its styles get deleted with it.</li> <li>Automatic critical CSS: styled-components keeps track of which components are rendered on a page and injects their styles and nothing else, fully automatically. Combined with code splitting, this means your users load the least amount of code necessary.</li> <li>No class name bugs: styled-components generates unique class names for your styles. You never have to worry about duplication, overlap or misspellings.</li> </ul> <h3 id="some-popular-css-in-js-library">Some popular CSS-in-JS library:</h3> <ul> <li>styled-components</li> <li>Emotion</li> <li>JSS</li> <li>APHRODITE</li> <li>RADIUM</li> <li>STYLETRON</li> <li>STYLED-JSX</li> </ul> <h2 id="styled-components">styled-components</h2> <p>styled-components is the result of wondering how we could enhance CSS for styling React component systems.</p> <p>It removes the mapping between components and styles. This means that when you‚Äôre defining your styles, you‚Äôre actually creating a normal React component, that has your styles attached to it.</p> <h3 id="usage">Usage</h3> <p>Install: <code class="language-plaintext highlighter-rouge">npm install styled-component</code> Once you‚Äôve added styled-components you will have access to the global <code class="language-plaintext highlighter-rouge">window.styled</code> variable.</p> <p>It utilises tagged template literals to style your components. Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a Title component that'll render an &lt;h1&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">h1</span><span class="s2">`
  font-size: 1.5em;
  text-align: center;
  color: #e22`</span>
<span class="c1">// Create a Wrapper component that'll render a &lt;section&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Wrapper</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">section</span><span class="s2">`
  padding: 4em;
  background: papayawhip;
`</span><span class="p">;</span>

<span class="c1">// Use Title and Wrapper like any other React component ‚Äì except they're styled!</span>
<span class="nf">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Wrapper</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Title</span><span class="o">&gt;</span>
      <span class="nx">Hello</span> <span class="nx">World</span><span class="o">!</span>
    <span class="o">&lt;</span><span class="sr">/Title</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/Wrapper</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div> <h2 id="emotion">Emotion</h2> <h3 id="install-it-for-react">Install it for React</h3> <p><code class="language-plaintext highlighter-rouge">npm i @emotion/styled @emotion/react</code></p> <h3 id="example">Example</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@emotion/styled</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  padding: 32px;
  background-color: hotpink;
  font-size: 24px;
  border-radius: 4px;
  color: black;
  font-weight: bold;
  &amp;:hover {
    color: white;
  }
`</span>
<span class="nf">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">my</span> <span class="nx">button</span> <span class="nx">component</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/Button&gt;</span><span class="err">)
</span></code></pre></div></div> <h2 id="my-conclusion">My Conclusion</h2> <ul> <li>Every component own it‚Äôs style. the CSS code will be very big.</li> <li>How to share style between different components?</li> <li>How use preproccessor, like Sass, to manage style.</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://styled-components.com/docs/basics">styled-component basics</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="React"/><category term="CSS"/><category term="JavaScript"/><summary type="html"><![CDATA[What is CSS-in-JS]]></summary></entry><entry><title type="html">PostCSS Instroduction</title><link href="https://benwzj.github.io/blog/2024/postcss/" rel="alternate" type="text/html" title="PostCSS Instroduction"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/postcss</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/postcss/"><![CDATA[<h2 id="what-is-postcss">What is PostCSS</h2> <p>PostCSS is a JavaScript library that transforms CSS into JavaScript.</p> <p>CSS is transpiled into an abstract syntax tree, which is represented with JavaScript objects. This transformation allows developers the opportunity to manipulate the CSS through those objects. Then, after our CSS has been processed, the objects are converted back into valid CSS.</p> <blockquote> <p>PostCSS will not do anything to our CSS. It‚Äôs up to plugins to apply these changes!</p> </blockquote> <p>And as it stands, there are hundreds of plugins available and no shortage of options.</p> <p>Despite its name, it is neither a post-processor nor a pre-processor, it is just a transpiler that turns a special PostCSS plugin syntax into a Vanilla CSS. You can think of it as the Babel tool for CSS.</p> <h2 id="postcss-vs-sass">PostCSS vs SASS</h2> <h3 id="sass">SASS</h3> <p>SASS is preprocessor scripting language for CSS. Built as an extension language to CSS, this preprocessor scripting language allowed Developers to leverage simple programming concepts such as conditional statements and variables for writing CSS, and as a result, working with CSS became so much more enjoyable.</p> <p>The biggest gripe with SASS and preprocessors in general, is that they‚Äôre not easily <strong>extendable</strong>.</p> <h3 id="postcss">PostCSS</h3> <p>PostCSS is just born for extendable. You can use PostCSS in conjunction with existing preprocessors like Sass, Less, and Stylus. Or you can use it as an alternative to all of them since it has all the required functionalities to be used alone.</p> <h2 id="set-up-postcss">Set Up PostCSS</h2> <h3 id="using-postcss-cli">Using PostCSS CLI</h3> <p>install CLI</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i postcss-cli
</code></pre></div></div> <p>Then We can run the following command directly in the terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postcss src/style.css --use postcss-import --dir public --watch
</code></pre></div></div> <h3 id="using-npm-scripts">Using NPM scripts</h3> <p>Inside the <code class="language-plaintext highlighter-rouge">package.json</code> file in the ‚Äúscripts‚Äù, we need to type the following: <code class="language-plaintext highlighter-rouge">"postcss:watch": "postcss src/style.css --use postcss-import --dir public --watch"</code></p> <p>The above command will create a new directory called ‚Äòpublic‚Äô which contains our final Vanilla CSS file, which has the same name as the source file (style.css).</p> <h3 id="using-postcss-config-file">Using PostCSS Config File</h3> <p>In the root directory of your project, create a file and name it postcss.config.js. The code inside it will look like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
     	<span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-import</span><span class="dl">'</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-mixins</span><span class="dl">'</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">stylelint</span><span class="dl">"</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-preset-env</span><span class="dl">'</span><span class="p">)({</span> <span class="na">stage</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cssnano</span><span class="dl">'</span><span class="p">),</span>
    <span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div> <p>The command that runs PostCSS in our <code class="language-plaintext highlighter-rouge">package.json</code> file needs to be changed to: <code class="language-plaintext highlighter-rouge">"postcss:watch": "postcss src/style.css --dir public --watch"</code></p> <h3 id="using-task-runners-or-module-bundlers">Using Task Runners (or Module Bundlers)</h3> <p>PostCSS can be set to work with various task runners like Gulp, Grunt, and module bundlers like Rollup and Webpack.</p> <h2 id="postcss-plugin">PostCSS Plugin</h2> <blockquote> <p>The popular CSS framework TailwindCSS can be a PostCSS plugin.</p> </blockquote> <p>You can write your own plugin. SASS, LESS and Stylus can work as a PostCSS plugin to integrate into your work flow.</p> <p>Here list some popular plugins:</p> <h3 id="postcss-import">PostCSS Import</h3> <p>One of the basic and most important plugins to use is postcss-import. It lets us import CSS files into other files. <a href="https://github.com/postcss/postcss-import">github doc</a></p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s2">'./components/comp1.css'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">'./components/comp2.css'</span><span class="p">;</span>
</code></pre></div></div> <h3 id="autoprefixer">Autoprefixer</h3> <p>This is one of the most popular PostCSS plugins. You use it to parse and add vendor prefixes like <code class="language-plaintext highlighter-rouge">-webkit</code>, <code class="language-plaintext highlighter-rouge">-moz</code>, and <code class="language-plaintext highlighter-rouge">-ms</code> to CSS rules using values from the <a href="https://caniuse.com/">Can I Use</a> website.</p> <p>Autoprefixer uses <a href="https://github.com/browserslist/browserslist">Browserslist</a>, so you can specify the browsers you want to target in your project with queries.</p> <p>For example, We can configure our Browserslist in the <code class="language-plaintext highlighter-rouge">package.json</code> file using a ‚Äúbrowserslist‚Äù key:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">browserslist</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span> 
    <span class="dl">"</span><span class="s2">defaults</span><span class="dl">"</span>  
 <span class="p">]</span>
</code></pre></div></div> <p>Now it work like this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span>
  <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Based on our previous ‚Äúbrowserslist‚Äù settings, the final output will be:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span>
  <span class="nl">-webkit-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
     <span class="nl">-moz-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
      <span class="nl">-ms-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
          <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="postcss-preset-env">PostCSS Preset Env</h3> <p>This plugin enables us to use modern CSS (like nesting and custom media queries) in our code, by converting it to Vanilla CSS which can be understood by browsers.</p> <p>It has a <code class="language-plaintext highlighter-rouge">stage</code> option which determines which CSS features to polyfill based upon their stability in the process of becoming implemented as a web standard.</p> <p>The <code class="language-plaintext highlighter-rouge">stage</code> can be 0 (experimental) to 4 (stable), or false. <code class="language-plaintext highlighter-rouge">Stage</code> 2 is the default.</p> <p>This preset-env plugin includes by default the Autoprefixer plugin and the browsers option will be passed to it automatically.</p> <h3 id="postcss-nested">PostCSS Nested</h3> <p>If we want only to use the nesting feature, then this plugin is the perfect choice as it produce the same result as the previous plugin.</p> <h3 id="postcss-mixins">PostCSS Mixins</h3> <p>Mixins allow you to define styles that can be re-used throughout your code.</p> <h3 id="stylelint">Stylelint</h3> <p>This is a CSS linter that helps us avoid errors in our code before they break our User Interface (UI).</p> <h3 id="cssnano">Cssnano</h3> <p>This is a minifier used to reduce the final CSS file size as much as possible so your code is ready for a production environment.</p> <h2 id="references">References</h2> <ul> <li><a href="https://postcss.org/">PostCSS offical website</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="HTML"/><category term="SASS"/><summary type="html"><![CDATA[What is PostCSS]]></summary></entry><entry><title type="html">Next.js App Router Introduction</title><link href="https://benwzj.github.io/blog/2024/nextjs-router/" rel="alternate" type="text/html" title="Next.js App Router Introduction"/><published>2024-04-14T00:00:00+00:00</published><updated>2024-04-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-router</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-router/"><![CDATA[<h2 id="what-is-routing">What is Routing</h2> <p>Routing is the skeleton of every web application. It is refer to the structure of files and URL.</p> <figure> <picture> <img src="/assets/img/terminology-component-tree.avif" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/terminology-url-anatomy.avif" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="app-route-vs-page-route">App Route vs Page Route</h2> <ul> <li>Next.js doc divided into two parts: App Route and Page Route.</li> <li>In version 13, Next.js introduced App Router built on React Server Components, which supports shared layouts, nested routing, loading states, error handling, and more. New Project should use App Route.</li> <li>The App Router works in a directory named <code class="language-plaintext highlighter-rouge">app</code>. The Page Route works in a <code class="language-plaintext highlighter-rouge">pages</code> directory. They can work at the same time.</li> <li>App Route structure: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îî‚îÄ‚îÄ app
  ‚îú‚îÄ‚îÄ about
  ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
  ‚îú‚îÄ‚îÄ globals.css
  ‚îú‚îÄ‚îÄ layout.tsx
  ‚îú‚îÄ‚îÄ login
  ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
  ‚îú‚îÄ‚îÄ page.js 
  ‚îî‚îÄ‚îÄ team
      ‚îî‚îÄ‚îÄ route.tsx
</code></pre></div> </div> </li> <li>Page Route structure: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îî‚îÄ‚îÄ pages
  ‚îú‚îÄ‚îÄ about.tsx
  ‚îú‚îÄ‚îÄ index.tsx
  ‚îî‚îÄ‚îÄ team.tsx
</code></pre></div> </div> </li> <li>In App Route, Components is Server Components by default; In Page Route, component isClient Components by default.</li> <li>In App Route, <code class="language-plaintext highlighter-rouge">fetch</code> function for data fetching; In Page Route, It is using <code class="language-plaintext highlighter-rouge">getServerSideProps</code>, <code class="language-plaintext highlighter-rouge">getStaticProps</code>, <code class="language-plaintext highlighter-rouge">getInitialProps</code>.</li> <li>In App Route, Layouts can be nested and dynamic; In Page Route, Layouts are static.</li> </ul> <h2 id="app-route-basic">App Route Basic</h2> <h3 id="file-conventions">File Conventions</h3> <p>Next.js provides a set of special files to create UI with specific behavior in nested routes:</p> <ul> <li><code class="language-plaintext highlighter-rouge">layout</code> Shared UI for a segment and its children</li> <li><code class="language-plaintext highlighter-rouge">page</code> Unique UI of a route and make routes publicly accessible</li> <li><code class="language-plaintext highlighter-rouge">loading</code> Loading UI for a segment and its children</li> <li><code class="language-plaintext highlighter-rouge">not-found</code> Not found UI for a segment and its children</li> <li><code class="language-plaintext highlighter-rouge">error</code> Error UI for a segment and its children</li> <li><code class="language-plaintext highlighter-rouge">global-error</code> Global Error UI</li> <li><code class="language-plaintext highlighter-rouge">route</code> Server-side API endpoint</li> <li><code class="language-plaintext highlighter-rouge">template</code> Specialized re-rendered Layout UI</li> <li><code class="language-plaintext highlighter-rouge">default</code> Fallback UI for Parallel Routes</li> </ul> <h3 id="component-hierarchy">Component Hierarchy</h3> <p>The React components defined in special files of a route segment are rendered in a specific hierarchy:</p> <ul> <li>layout.js</li> <li>template.js</li> <li>error.js (React error boundary)</li> <li>loading.js (React suspense boundary)</li> <li>not-found.js (React error boundary)</li> <li>page.js or nested layout.js</li> </ul> <h3 id="page">Page</h3> <ul> <li>A <code class="language-plaintext highlighter-rouge">page.js</code> file is required to make a route segment publicly accessible.</li> <li>A page is UI that is unique to a route. You can define a page by default exporting a component from a <code class="language-plaintext highlighter-rouge">page.js</code> file.</li> <li>Pages are Server Components by default, but can be set to a Client Component.</li> <li>Pages can fetch data.</li> </ul> <h3 id="layouts">Layouts</h3> <ul> <li>A layout is UI that is <strong>shared</strong> between multiple routes. (HOW? the page at the same folder and all the subfolder pages share the layout!)</li> <li>On navigation, layouts preserve state, remain interactive, and do not re-render.</li> <li>You can define a layout by default exporting a React component from a <code class="language-plaintext highlighter-rouge">layout.js</code> file. The component should accept a children prop that will be populated with a child layout (if it exists) or a page during rendering.</li> <li>Root Layout (Required)</li> <li>Nesting Layouts, By default, layouts in the folder hierarchy are nested, which means they wrap child layouts via their children prop.</li> <li>Layouts are Server Components by default but can be set to a Client Component.</li> <li>Passing data between a parent layout and its children is <strong>not</strong> possible. However, you can fetch the same data in a route more than once, and React will automatically dedupe the requests without affecting performance.</li> <li>Layouts do not have access to the route segments below itself. To access all route segments, you can use <code class="language-plaintext highlighter-rouge">useSelectedLayoutSegment</code> or <code class="language-plaintext highlighter-rouge">useSelectedLayoutSegments</code> in a Client Component.</li> <li>You can use <code class="language-plaintext highlighter-rouge">Route Groups</code> to opt specific route segments in and out of shared layouts.</li> <li>You can use <code class="language-plaintext highlighter-rouge">Route Groups</code> to create multiple root layouts.</li> </ul> <h3 id="templates">Templates</h3> <ul> <li>Templates are similar to layouts in that they wrap each child layout or page.</li> <li> <p>Unlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation. This means that when a user navigates between routes that share a template, a new instance of the component is mounted, DOM elements are recreated, state is not preserved, and effects are re-synchronized.</p> </li> <li>Templates would be a more suitable option than layouts at below situations: <ul> <li>Features that rely on useEffect (e.g logging page views) and useState (e.g a per-page feedback form).</li> <li>To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation.</li> </ul> </li> </ul> <h3 id="metadata">Metadata</h3> <p>In the app directory, you can modify the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> HTML elements such as title and meta using the Metadata APIs.</p> <h2 id="navigation">Navigation</h2> <p><a href="https://nextjs.org/docs/app/building-your-application/routing">Next.js Doc</a></p> <h3 id="4-ways-to-navigate-between-routes">4 ways to navigate between routes</h3> <ul> <li>Using the <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> Component: <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> is a built-in component that extends the HTML <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> tag to provide prefetching and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js. <ul> <li>Linking to Dynamic Segments: <code class="language-plaintext highlighter-rouge">&lt;Link href={`/blog/${post.slug}`}&gt;{post.title}&lt;/Link&gt;</code></li> <li>Checking Active Links: <code class="language-plaintext highlighter-rouge">usePathname()</code> to determine if a link is active.</li> </ul> </li> <li>Using the <code class="language-plaintext highlighter-rouge">useRouter</code> hook (Client Components)</li> <li>Using the <code class="language-plaintext highlighter-rouge">redirect</code> function (Server Components)</li> <li>Using the native History API: Next.js allows you to use the native <code class="language-plaintext highlighter-rouge">window.history.pushState</code> and <code class="language-plaintext highlighter-rouge">window.history.replaceState</code> methods to update the browser‚Äôs history stack without reloading the page. These APIs integrate into the Next.js Router, allowing you to sync with <code class="language-plaintext highlighter-rouge">usePathname</code> and <code class="language-plaintext highlighter-rouge">useSearchParams</code>.</li> </ul> <h3 id="how-routing-and-navigation-works">How Routing and Navigation Works</h3> <p>The App Router uses a hybrid approach for routing and navigation.</p> <ul> <li>On the server, your application code is automatically <strong>code-split</strong> by route segments.</li> <li>On the client, Next.js <strong>prefetches</strong> and <strong>caches</strong> the route segments. This means, when a user navigates to a new route, the browser doesn‚Äôt reload the page, and only the route segments that change re-render - improving the navigation experience and performance.</li> <li>Also support Partial Rendering, Soft Navigation, Back and Forward Navigation, Routing between <code class="language-plaintext highlighter-rouge">pages/</code> and <code class="language-plaintext highlighter-rouge">app/</code></li> </ul> <h2 id="streaming">Streaming</h2> <h3 id="what-is-streaming">What is Streaming</h3> <p>Streaming is a data transfer technique that allows you to break down a route into smaller ‚Äúchunks‚Äù and progressively stream them from the server to the client as they become ready.</p> <p>There are two ways you implement streaming in Next.js:</p> <ul> <li>At the page level, with the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file.</li> <li>For specific components, with <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code>.</li> </ul> <h3 id="streaming-features">Streaming Features</h3> <ul> <li>Streaming is an advanced method of Server Side Rendering.</li> <li>Streaming allows you to break down the page‚Äôs HTML into smaller chunks and progressively send those chunks from the server to the client.</li> <li>Streaming implement Partial Rendering.</li> <li>By streaming, you can prevent slow data requests from blocking your whole page. This allows the user to see and interact with parts of the page without waiting for all the data to load before any UI can be shown to the user.</li> <li>Streaming works well with React‚Äôs component model because each component can be considered a chunk.</li> </ul> <h3 id="streaming-a-whole-page-with-loadingtsx">Streaming a whole page with <code class="language-plaintext highlighter-rouge">loading.tsx</code></h3> <p><code class="language-plaintext highlighter-rouge">loading.tsx</code> is a special Next.js file built on top of <strong>Suspense</strong>, it allows you to create fallback UI to show as a replacement while page content loads. <code class="language-plaintext highlighter-rouge">loading.tsx</code> is describing the fallback UI which should be a static rendering.</p> <p>To use Streaming with <code class="language-plaintext highlighter-rouge">loading.tsx</code>, the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file is located at same folder level with <code class="language-plaintext highlighter-rouge">page.tsx</code>. Next.js will display <code class="language-plaintext highlighter-rouge">loading.tsx</code> first, then the <code class="language-plaintext highlighter-rouge">page.tsx</code>.</p> <p>Also, The user doesn‚Äôt have to wait for the page to finish loading before navigating away. (this is called interruptable navigation).</p> <p>When you use <code class="language-plaintext highlighter-rouge">loading.tsx</code>, usually you use Route Groups as well.</p> <h4 id="route-groups-concept">Route Groups Concept</h4> <p>When <code class="language-plaintext highlighter-rouge">loading.tsx</code> is a level higher than <code class="language-plaintext highlighter-rouge">/subfolder/page.tsx</code> in the file system, it‚Äôs also applied to that page. In order to fix this problem. Next.js use route groups concept: Create a new folder called <code class="language-plaintext highlighter-rouge">/(overview)</code> inside the dashboard folder. Then, move your <code class="language-plaintext highlighter-rouge">loading.tsx</code> and <code class="language-plaintext highlighter-rouge">page.tsx</code> files inside the folder. Now, the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file will only apply to the same folder level page.</p> <blockquote> <p>When you create a new folder using parentheses <code class="language-plaintext highlighter-rouge">()</code>, the name won‚Äôt be included in the URL path.</p> </blockquote> <h3 id="streaming-a-component-with-suspense">Streaming a component with <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code></h3> <p>Wrap the component which need to be Streaming into <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code>.</p> <p>Suspense allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads.</p> <p>Steps:</p> <ul> <li>Move data fetching down to the component that need it, thus isolating which parts of your routes should be dynamic in preparation for Partial Prerendering.</li> <li>Using <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code> to wrap that component.</li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">Suspense</span> <span class="nx">fallback</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">FetchDataComponentSkeleton</span> <span class="o">/&gt;</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">FetchDataComponent</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/Suspense</span><span class="err">&gt;
</span></code></pre></div></div> <h4 id="grouping-components-pattern">Grouping Components Pattern</h4> <p>You can use Grouping components pattern when you want multiple components to load in at the same time. Step:</p> <ul> <li>Wrap all these multiple components into one component call WrapComponent.</li> <li>These Grouping components inside the WrapComponent can use <code class="language-plaintext highlighter-rouge">Promise.all</code> to parallel fetch data.</li> <li>Using <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code> to wrap that WrapComponent.</li> </ul> <h3 id="what-is-partial-prerendering">What is Partial Prerendering</h3> <p>Application behaves today, where entire routes are either entirely static or dynamic.</p> <p>Partial Prerendering allows you to render a route with a static loading shell, while keeping some parts dynamic. In other words, you can isolate the dynamic parts of a route.</p> <p>When a user visits a route:</p> <ul> <li>A static route shell is served, ensuring a fast initial load.</li> <li>The shell leaves holes where dynamic content will load in asynchronous.</li> <li>The async holes are streamed in parallel, reducing the overall load time of the page.</li> </ul> <h3 id="can-suspense-used-on-server">Can Suspense used on Server?</h3> <h2 id="dynamic-routes">Dynamic Routes</h2> <p>Next.js allows you to create Dynamic Route Segments when you don‚Äôt know the exact segment name and want to create routes based on data. This could be product ID, blog post titles, product pages, etc. You can create dynamic route segments by wrapping a folder‚Äôs name in square brackets. For example, [id], [post] or [slug].</p> <p>For example, you need a invoice update function. Then you need to Create a Dynamic Route Segment with the invoice id.</p> <h3 id="create-dynamic-route-steps">Create Dynamic Route Steps:</h3> <ul> <li> <p>In your /invoices folder, create a new dynamic route called [id], then a new route called <code class="language-plaintext highlighter-rouge">edit</code> with a <code class="language-plaintext highlighter-rouge">page.tsx</code> file.</p> </li> <li> <p>The Update Button for each invoice will do this.</p> </li> </ul> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Link</span>
  <span class="na">href=</span><span class="s">{`/dashboard/invoices/${id}/edit`}</span>
  <span class="na">className=</span><span class="s">"rounded-md border p-2 hover:bg-gray-100"</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <ul> <li>Inside the <code class="language-plaintext highlighter-rouge">[id]/edit/page.tsx</code>, it will Read the invoice <code class="language-plaintext highlighter-rouge">id</code> from page <code class="language-plaintext highlighter-rouge">params</code>.</li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">({</span> <span class="nx">params</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">params</span><span class="p">:</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="kr">string</span> <span class="p">}</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li> <p>Inside the <code class="language-plaintext highlighter-rouge">[id]/edit/page.tsx</code>, you will Fetch the specific invoice according to the <code class="language-plaintext highlighter-rouge">id</code> to fill the page.</p> </li> <li> <p>When user confirm update, You will update Database by using Server Action. At this moment, You can‚Äôt just pass <code class="language-plaintext highlighter-rouge">id</code> to server action! Instead, you can pass id to the Server Action using JS bind.</p> </li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateInvoiceWithId</span> <span class="o">=</span> <span class="nx">updateInvoice</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">invoice</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
<span class="k">return </span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="p">{</span><span class="nx">updateInvoiceWithId</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">invoice</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div> <h3 id="generatestaticparams">generateStaticParams</h3> <ul> <li>The <code class="language-plaintext highlighter-rouge">generateStaticParams</code> function is used in combination with dynamic route segments to statically generate routes at build time instead of on-demand at request time.</li> <li>When exporting a function called <code class="language-plaintext highlighter-rouge">generateStaticParams</code> from a page that uses Dynamic Routes, Next.js will statically pre-render all the paths specified by <code class="language-plaintext highlighter-rouge">generateStaticParams</code>.</li> <li><code class="language-plaintext highlighter-rouge">generateStaticParams</code> replaces the <code class="language-plaintext highlighter-rouge">getStaticPaths</code> function in the Pages Router.</li> <li>The primary benefit of the <code class="language-plaintext highlighter-rouge">generateStaticParams</code> function is its smart retrieval of data. If content is fetched within the <code class="language-plaintext highlighter-rouge">generateStaticParams</code> function using a fetch request, the requests are automatically memoized. This means a <code class="language-plaintext highlighter-rouge">fetch</code> request with the same arguments across multiple <code class="language-plaintext highlighter-rouge">generateStaticParams</code>, Layouts, and Pages will only be made once, which decreases build times.</li> </ul> <h3 id="catch-all-segments">Catch-all Segments</h3> <p>Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets <code class="language-plaintext highlighter-rouge">[...folderName].</code></p> <p>For example, <code class="language-plaintext highlighter-rouge">app/shop/[...slug]/page.js</code> will match <code class="language-plaintext highlighter-rouge">/shop/clothes</code>, but also <code class="language-plaintext highlighter-rouge">/shop/clothes/tops</code>, <code class="language-plaintext highlighter-rouge">/shop/clothes/tops/t-shirts</code>, and so on.</p> <p>Catch-all Segments can be made optional by including the parameter in double square brackets: <code class="language-plaintext highlighter-rouge">[[...folderName]]</code>.</p> <h2 id="parallel-routes">Parallel Routes</h2> <p>Parallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites.</p> <h3 id="slots">Slots</h3> <ul> <li>Parallel routes are created using named slots.</li> <li>Slots are defined with the <code class="language-plaintext highlighter-rouge">@folder</code> convention. Like <code class="language-plaintext highlighter-rouge">app/@slot/page.js</code>.</li> <li>Slots are passed as <code class="language-plaintext highlighter-rouge">props</code> to the shared parent layout. (layout usaully have current page as <code class="language-plaintext highlighter-rouge">children</code> prop, that means the <code class="language-plaintext highlighter-rouge">children</code> prop is an implicit slot that does not need to be mapped to a folder. <code class="language-plaintext highlighter-rouge">app/page.js</code> is equivalent to <code class="language-plaintext highlighter-rouge">app/@children/page.js</code>.)</li> <li>Slots are not route segments and do not affect the URL structure.</li> </ul> <h3 id="navigation-1">Navigation</h3> <p>When you use Parallel route, you will face some situation, like navigation:</p> <ul> <li>Soft Navigation: During client-side navigation, Next.js will perform a partial render, changing the subpage within the slot, while maintaining the other slot‚Äôs active subpages, even if they don‚Äôt match the current URL.</li> <li>Hard Navigation: After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don‚Äôt match the current URL. Instead, it will render a default.js file for the unmatched slots, or 404 if <code class="language-plaintext highlighter-rouge">default.js</code> doesn‚Äôt exist.</li> </ul> <h4 id="defaultjs">default.js</h4> <p>You can define a <code class="language-plaintext highlighter-rouge">default.js</code> file to render as a fallback for unmatched slots during the initial load or full-page reload.</p> <h3 id="use-parallel-route">Use Parallel route</h3> <ul> <li>Conditional Routes: You can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the <code class="language-plaintext highlighter-rouge">/admin</code> or <code class="language-plaintext highlighter-rouge">/user</code> roles.</li> <li>Use layout inside slot.</li> <li>Modals Parallel Routes can be used together with ‚ÄúIntercepting Routes‚Äù to create modals. This allows you to solve common challenges when building modals, such as: <ul> <li>Making the modal content shareable through a URL.</li> <li>Preserving context when the page is refreshed, instead of closing the modal.</li> <li>Closing the modal on backwards navigation rather than going to the previous route.</li> <li>Reopening the modal on forwards navigation.</li> </ul> </li> </ul> <h2 id="intercepting-routes">Intercepting Routes</h2> <p>Intercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context.</p> <p>For example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the <code class="language-plaintext highlighter-rouge">/photo/123</code> route, masks the URL, and overlays it over <code class="language-plaintext highlighter-rouge">/feed</code>.</p> <h3 id="convention">Convention</h3> <p>Intercepting routes can be defined with the <code class="language-plaintext highlighter-rouge">(..)</code> convention, which is similar to relative path convention <code class="language-plaintext highlighter-rouge">../</code> but for segments.</p> <p>You can use:</p> <ul> <li><code class="language-plaintext highlighter-rouge">(.)</code> to match segments on the same level</li> <li><code class="language-plaintext highlighter-rouge">(..)</code> to match segments one level above</li> <li><code class="language-plaintext highlighter-rouge">(..)(..)</code> to match segments two levels above</li> <li><code class="language-plaintext highlighter-rouge">(...)</code> to match segments from the root app directory</li> </ul> <p>For example, you can intercept the photo segment from within the feed segment by creating a <code class="language-plaintext highlighter-rouge">(..)photo</code> directory.</p> <h3 id="modals">Modals</h3> <p>Intercepting Routes can be used together with Parallel Routes to create modals.</p> <h2 id="route-handler">Route Handler</h2> <h3 id="what-is-route-handler">What is Route Handler</h3> <p>Route Handlers allow you to create <strong>custom request handlers</strong> for a given route using the Web Request and Response APIs. Route Handlers need to be defined in a <strong><code class="language-plaintext highlighter-rouge">route.ts</code></strong> file inside the app directory.</p> <p>Basic Example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/api/route.ts</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">GET</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://data.mongodb-api.com/...</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">API-Key</span><span class="dl">'</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATA_API_KEY</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">})</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">res</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
  <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nf">json</span><span class="p">({</span> <span class="nx">data</span> <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, any Get Request at route <code class="language-plaintext highlighter-rouge">api/</code> will be handled by the export function <code class="language-plaintext highlighter-rouge">GET()</code>.</p> <h3 id="route-handler-features">Route Handler Features</h3> <ul> <li>Route Handlers can be nested inside the app directory, similar to page.js and layout.js.</li> <li>Each route.js or page.js file takes over all HTTP verbs for that route. So they can‚Äôt be at same route segment.</li> <li>Route Handlers are cached by default when using the <code class="language-plaintext highlighter-rouge">GET</code> method with the Response object.</li> <li>In the old version, Next.js Page Route, it use ‚ÄúAPI Routes‚Äù to do the same job: providing a solution to build a public API.</li> </ul> <h3 id="what-you-can-do-with-route-handler">What you can do with Route Handler</h3> <ul> <li>You setup Revalidate Cached Data for a Route API.</li> <li>Route Handlers can be used with dynamic functions from Next.js, like cookies and headers.</li> <li>Redirects</li> <li>Support Dynamic Route Segments</li> <li>The request object passed to the Route Handler is a NextRequest instance, which has some additional convenience methods.</li> <li>Use Streaming with Large Language Models (LLMs), such as OpenAI, for AI-generated content.</li> <li>You can use Request Body FormData.</li> </ul> <h2 id="middleware">Middleware</h2> <p>Next.js copy the middleware concept from Express.js.</p> <p>In Next.js, Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.</p> <ul> <li>Middleware let you share and reuse logic that is repeatable for every request.</li> <li>Middleware runs before cached content and routes are matched.</li> </ul> <h3 id="middleware-use-cases">Middleware use cases</h3> <ul> <li>Authentication and Authorization</li> <li>Server-Side Redirects</li> <li>Path Rewriting, For example: A/B testing, feature rollouts, or legacy paths</li> <li>Bot Detection</li> <li>Logging and Analytics</li> <li>Feature Flagging</li> </ul> <h3 id="how-to-use-middelware">How to use Middelware</h3> <ul> <li>Use the file <code class="language-plaintext highlighter-rouge">middleware.ts</code> (or .js) in the <strong>root</strong> of your project to define Middleware.</li> <li>Only one <code class="language-plaintext highlighter-rouge">middleware.ts</code> file is supported per project</li> <li>Because Middleware will be invoked for every route in your project, so you can use <code class="language-plaintext highlighter-rouge">matchers</code> to precisely target or exclude specific routes. Or using Conditional Statements in <code class="language-plaintext highlighter-rouge">middleware.ts</code>.</li> </ul> <p>Classic Example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//middleware.ts</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
 
<span class="c1">// This function can be marked `async` if using `await` inside</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/home</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
<span class="p">}</span>
 
<span class="c1">// See "Matching Paths" below to learn more</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">matcher</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/about/:path*</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="what-middleware-can-do">What Middleware can do</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">NextResponse</code> API to: <ul> <li>redirect the incoming request to a different URL</li> <li>rewrite the response by displaying a given URL</li> <li>Set request headers for API Routes, getServerSideProps, and rewrite destinations</li> <li>Set response cookies</li> <li>Set response headers</li> </ul> </li> </ul> <h2 id="internationalization">Internationalization</h2> <p>Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes.</p> <h3 id="how">How</h3> <p>Using some 3th libraries, you can look at an incoming Request to determine which locale to select. With this information, redirect the user based on the locale inside <strong>Middleware</strong>.</p> <p>Even the root layout can also be nested in the new folder (e.g. app/[lang]/layout.js).</p> <p>You can use <code class="language-plaintext highlighter-rouge">generateStaticParams</code> with any page or layout to generate static routes for a given set of locales.</p> <h2 id="fqa">FQA</h2>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Next.js"/><category term="Router"/><summary type="html"><![CDATA[What is Routing]]></summary></entry></feed>