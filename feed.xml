<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-13T11:37:13+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Python Data model Overview</title><link href="https://benwzj.github.io/blog/2024/python-data-model/" rel="alternate" type="text/html" title="Python Data model Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-data-model</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-data-model/"><![CDATA[<h2 id="object">Object</h2> <p>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (Everything in python is object) Every object has an identity, a type and a value.</p> <h3 id="every-object-has-an-identity-a-type-and-a-value">Every object has an identity, a type and a value.</h3> <ul> <li>An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. <ul> <li>The <code class="language-plaintext highlighter-rouge">is</code> operator compares the identity of two objects;</li> <li>the <code class="language-plaintext highlighter-rouge">id()</code> function returns an integer representing its identity.</li> </ul> </li> <li>An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. <ul> <li>The <code class="language-plaintext highlighter-rouge">type()</code> function returns an object’s type (which is an object itself).</li> <li>Like its identity, an object’s type is also unchangeable.</li> </ul> </li> <li>An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.</li> </ul> <h3 id="container">Container</h3> <p>Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</p> <h2 id="data-type">Data Type</h2> <h3 id="none-notimplemented-ellipsis">None, NotImplemented, Ellipsis</h3> <p>The following data type have a single value. There is a single object with this value, And These objects are accessed through a built-in name None, NotImplemented, Ellipsis (or …): None, NotImplemented, Ellipsis</p> <h3 id="numbers-module">Numbers module</h3> <p>The numbers module defines a hierarchy of numeric abstract base classes which progressively define more operations. None of the types defined in this module are intended to be instantiated.</p> <h4 id="class-numbersnumber">class numbers.Number</h4> <p>The root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number).</p> <h4 id="class-numbersintegral">class numbers.Integral</h4> <p>There are two types of integers:</p> <ul> <li>Integers (int) - These represent numbers in an unlimited range, subject to available (virtual) memory only. It is a whole number, positive or negative, without decimals, of unlimited length.</li> <li>Booleans (bool) - The two objects representing the values False and True are the only Boolean objects. (False and True are keyword in Python) <h4 id="numbersreal-float">numbers.Real (float)</h4> <p>Float represent machine-level double precision floating point numbers. You are at the mercy of the underlying machine architecture (and C or Java implementation) for the accepted range and handling of overflow.</p> <h4 id="numberscomplex-complex">numbers.Complex (complex)</h4> </li> </ul> <h3 id="sequences-types">Sequences types</h3> <ul> <li>Sequences represent finite ordered sets indexed by non-negative numbers.</li> <li>Sequences are distinguished according to their mutability: Immutable sequences, like Strings, Bytes, Tuples, Mutable sequences, like Lists, Byte Arrays.</li> </ul> <h4 id="common-sequences-operations">Common Sequences operations</h4> <ul> <li>The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items of a sequence.</li> <li>Item i of sequence a is selected by <code class="language-plaintext highlighter-rouge">a[i]</code></li> <li>Sequences also support slicing: <code class="language-plaintext highlighter-rouge">a[i:j:step]</code></li> <li>When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <code class="language-plaintext highlighter-rouge">enumerate()</code> function.</li> </ul> <h3 id="set-types">Set types</h3> <p>These represent unordered, finite sets of unique, immutable(we can’t change the content of items, but you can add or remove items) objects. There are currently two intrinsic set types:</p> <ul> <li>Sets These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add().</li> <li>Frozen sets These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</li> </ul> <h3 id="mappings">Mappings</h3> <p>These represent finite sets of objects indexed by arbitrary index sets. The subscript notation <code class="language-plaintext highlighter-rouge">a[k]</code> selects the item indexed by k from the mapping a; this can be used in expressions and as the target of assignments or del statements. The built-in function <code class="language-plaintext highlighter-rouge">len()</code> returns the number of items in a mapping.</p> <h4 id="dictionary">Dictionary</h4> <ul> <li>Dictionaries are used to store data values in key:value pairs.</li> <li>A dictionary is a collection which is ordered, changeable and not allow duplicates.</li> <li>Dictionaries are written with curly brackets, and have keys and values</li> <li>The only types of values not acceptable as keys are values containing lists or dictionaries or other mutable types that are compared by value rather than by object identity, the reason being that the efficient implementation of dictionaries requires a key’s hash value to remain constant.</li> </ul> <h3 id="callable-types">Callable types</h3> <p>These are the data types to which the function call operation can be applied:</p> <h4 id="user-defined-functions">User-defined functions</h4> <p>A user-defined function object is created by a function definition.</p> <ul> <li>It’s Special attributes: like <code class="language-plaintext highlighter-rouge">__name__</code>, <code class="language-plaintext highlighter-rouge">__module__</code>, <code class="language-plaintext highlighter-rouge">__defaults__</code>, <code class="language-plaintext highlighter-rouge">__code__</code>, <code class="language-plaintext highlighter-rouge">__closure__</code>, etc. <code class="language-plaintext highlighter-rouge">__code__</code> refer to The code object representing the compiled function body.</li> <li>Function objects also support getting and setting arbitrary attributes, which can be used, for example, to attach metadata to functions.</li> <li>Lambda: A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.</li> </ul> <h4 id="instance-methods">Instance methods</h4> <p>An instance method object combines a class, a class instance and any callable object (normally a user-defined function).</p> <h4 id="generator-functions">Generator functions</h4> <p>A function or method which uses the yield statement (see section The yield statement) is called a generator function. Such a function, when called, always returns an iterator object which can be used to execute the body of the function: calling the iterator’s iterator<code class="language-plaintext highlighter-rouge">.__next__()</code> method will cause the function to execute until it provides a value using the yield statement. When the function executes a return statement or falls off the end, a StopIteration exception is raised and the iterator will have reached the end of the set of values to be returned.</p> <h4 id="coroutine-functions">Coroutine functions</h4> <p>A function or method which is defined using async def is called a coroutine function. Such a function, when called, returns a coroutine object. It may contain await expressions, as well as async with and async for statements.</p> <h4 id="asynchronous-generator-functions">Asynchronous generator functions</h4> <p>A function or method which is defined using async def and which uses the yield statement is called a asynchronous generator function. Such a function, when called, returns an asynchronous iterator object which can be used in an async for statement to execute the body of the function.</p> <h4 id="built-in-functions">Built-in functions</h4> <p>A built-in function object is a wrapper around a C function. Examples of built-in functions are len() and math.sin() (math is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes: <code class="language-plaintext highlighter-rouge">__doc__</code> is the function’s documentation string, or None if unavailable; <code class="language-plaintext highlighter-rouge">__name__</code> is the function’s name; <code class="language-plaintext highlighter-rouge">__self__</code> is set to None (but see the next item); <code class="language-plaintext highlighter-rouge">__module__</code> is the name of the module the function was defined in or None if unavailable.</p> <h4 id="built-in-methods">Built-in methods</h4> <p>This is really a different disguise of a built-in function, this time containing an object passed to the C function as an implicit extra argument. An example of a built-in method is alist.append(), assuming alist is a list object. In this case, the special read-only attribute <code class="language-plaintext highlighter-rouge">__self__</code> is set to the object denoted by alist.</p> <h4 id="classes">Classes</h4> <p>Classes are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override <code class="language-plaintext highlighter-rouge">__new__()</code>. The arguments of the call are passed to <code class="language-plaintext highlighter-rouge">__new__()</code> and, in the typical case, to <code class="language-plaintext highlighter-rouge">__init__()</code> to initialize the new instance.</p> <h4 id="class-instances">Class Instances</h4> <p>Instances of arbitrary classes can be made callable by defining a <code class="language-plaintext highlighter-rouge">__call__()</code> method in their class.</p> <h3 id="modules">Modules</h3> <p>Modules are a basic organizational unit of Python code, and are created by the import system as invoked either by the import statement, or by calling functions such as importlib.<code class="language-plaintext highlighter-rouge">import_module()</code> and built-in <code class="language-plaintext highlighter-rouge">__import__()</code>.</p> <ul> <li>A module object has a namespace implemented by a dictionary object (this is the dictionary referenced by the <code class="language-plaintext highlighter-rouge">__globals__</code> attribute of functions defined in the module). Attribute references are translated to lookups in this dictionary, e.g., m.x is equivalent to <code class="language-plaintext highlighter-rouge">m.__dict__["x"]</code>.</li> <li>A module object does not contain the code object used to initialize the module.</li> <li>To create a module just save the code you want in a file with the file extension .py.</li> </ul> <h4 id="datetime-math-json-regex-os-etc-are-built-in-modules">Datetime, Math, JSON, RegEx, os, etc. are built-in modules.</h4> <p>For example, you want to handle files in your hard disk. You can use os modules which provide functions to help you out.</p> <h4 id="pip">PIP</h4> <p>PIP is a package manager for Python packages. Just like npm for JavaScript. You can use pip to instal third party packages, like django, etc.</p> <ul> <li>A package contains all the files you need for a module.</li> <li>Modules are Python code libraries you can include in your project.</li> </ul> <p>For example: openpyxl help you to handle excel file: <code class="language-plaintext highlighter-rouge">$pip3 install openpyxl</code></p> <p>Use the list command to list all the packages installed on your system: <code class="language-plaintext highlighter-rouge">$pip3 list</code></p> <h3 id="custom-classes">Custom classes</h3> <p>Custom class types are typically created by class definitions.</p> <p>Basic class Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

  <span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello my name is </span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, age is </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="p">))</span>

<span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>
<span class="n">p1</span><span class="p">.</span><span class="nf">myfunc</span><span class="p">()</span>
</code></pre></div></div> <h4 id="init-function"><strong>init</strong>() Function</h4> <p>All classes have a function called <code class="language-plaintext highlighter-rouge">__init__()</code>, which is always executed when the class is being initiated.</p> <ul> <li>The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.</li> <li>Can change property value, can delete property.</li> </ul> <h4 id="inheritance">Inheritance</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span> <span class="o">=</span> <span class="n">year</span>

  <span class="k">def</span> <span class="nf">welcome</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Welcome</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastname</span><span class="p">,</span> <span class="sh">"</span><span class="s">to the class of</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">graduationyear</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">super()</code> function will make the child class inherit all the methods and properties from its parent.</p> <h3 id="class-instances-1">Class instances</h3> <p>A class instance is created by calling a class object.</p> <h3 id="io-objects">I/O objects</h3> <p>(also known as file objects)</p> <ul> <li>A file object represents an open file. Various shortcuts are available to create file objects: the open() built-in function, and also os.popen(), os.fdopen(), and the makefile() method of socket objects</li> <li>The objects sys.stdin, sys.stdout and sys.stderr are initialized to file objects corresponding to the interpreter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface defined by the io.TextIOBase abstract class.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Object]]></summary></entry><entry><title type="html">Python Type Overview</title><link href="https://benwzj.github.io/blog/2024/python-type/" rel="alternate" type="text/html" title="Python Type Overview"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-type</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-type/"><![CDATA[<h2 id="concepts-of-containers-collections-sequences-mappings">Concepts of Containers, Collections, Sequences, Mappings</h2> <ul> <li>Containers &gt; Collections &gt; Sequences</li> <li>Container concept is under the context of Object: Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value.</li> <li>Collection: data structures that store and organize data. They are container data types that allow you to add, remove, and iterate over items. Python has 4 built-in data structures that can be used to hold a collection of objects, they are <ul> <li>list</li> <li>tuple</li> <li>set</li> <li>dictionary</li> </ul> </li> <li>Containers or Collections are objects that are used to store different objects and provide a way to access the contained objects and iterate over them. <ul> <li>Python Standard Library provide <strong>collections module</strong> to implement specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.</li> <li>You can use the <code class="language-plaintext highlighter-rouge">counter</code> function to count the number of occurrences of each element in a container.</li> </ul> </li> <li>A sequence is an <strong>ordered</strong> collection. They maintain the order of the things in them. (set, dict are NOT sequence). Sequences are a special type of iterable that can be indexed using square brackets <code class="language-plaintext highlighter-rouge">[...]</code> to get items by their position. You can also ask sequences for their length to see how many things are inside them. <ul> <li>List</li> <li>Tuple</li> <li>string</li> <li>byte</li> <li>range</li> </ul> </li> <li>A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary.</li> </ul> <h2 id="list">List</h2> <ul> <li>List is ordered and mutable, Allows duplicate members, similar to array in JavaScript.</li> <li>Lists are created using square brackets. Example: <code class="language-plaintext highlighter-rouge">list1 = ["abc", 34, True, 40, "male"]</code></li> <li>If you want to determine something inside of a List, that is big O(n) time complexity. It look over most of the elements of the list. But for Set or Dict, it is constant time complexity.</li> <li>If you pop the last element of the list, it is constant time operation. But remove the first element, then it is O(n) operation.</li> <li>If you need to have an order collection of elements, you want to pop at the end or beginning or middle of it. You should use the following two data structure: from collections import deque, queue</li> </ul> <h3 id="list-comprehension-syntax">list comprehension syntax</h3> <p>List comprehension is an elegant way to create lists based on existing lists.</p> <p>Syntax:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span> <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="bp">True</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.</li> <li>The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</code> get: <code class="language-plaintext highlighter-rouge">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</code></li> <li>Key point: the first for loop is outer loop. But you can use bracket to wrap expression and for loop together, and make second for loop outside:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]]</span>
<span class="c1"># Flat 2D list to [1, 2, 3, 4, 5, 6, 7, 8]:
</span><span class="nf">print</span><span class="p">([</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">i</span><span class="p">])</span>
<span class="c1"># Transpose to [1, 3, 5, 7], [2, 4, 6, 8]]:
</span><span class="nf">print</span><span class="p">([[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)])</span>
</code></pre></div></div> <h4 id="the-condition-is-like-a-filter-and-it-is-optional">The condition is like a filter, and it is optional:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># ['apple', 'banana', 'mango']
</span></code></pre></div></div> <h4 id="the-expression-can-also-contain-conditions-not-like-a-filter-but-as-a-way-to-manipulate-the-outcome">The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kiwi</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mango</span><span class="sh">"</span><span class="p">]</span>
<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span> <span class="c1"># fruits = ["apple", "orange", "cherry", "kiwi", "mango"]
</span></code></pre></div></div> <h4 id="support-nested-list-comprehension">Support nested list comprehension</h4> <h3 id="list-methods">List methods</h3> <h4 id="access-list-items">Access List items</h4> <ul> <li><code class="language-plaintext highlighter-rouge">s[i]</code> ith item of s, origin 0</li> <li><code class="language-plaintext highlighter-rouge">s[i:j]</code> slice of s from i to j</li> <li><code class="language-plaintext highlighter-rouge">s[i:j:k]</code> slice of s from i to j with step k</li> </ul> <h4 id="modifying-list">Modifying List</h4> <ul> <li><code class="language-plaintext highlighter-rouge">append()</code> method</li> <li><code class="language-plaintext highlighter-rouge">insert()</code> method</li> <li>support operator: +, *, +=, *=</li> </ul> <h4 id="remove-list-items">Remove List Items</h4> <ul> <li>remove() method removes the specified item</li> <li>pop() method removes the specified index.</li> <li>The del keyword also removes the specified index</li> <li>clear() method empties the list.</li> </ul> <h4 id="reverse">reverse()</h4> <h4 id="sort">sort()</h4> <ul> <li>It will sort the list alphanumerically, ascending, by default.</li> <li>Sort the list descending: <code class="language-plaintext highlighter-rouge">lst.sort(reverse = True)</code></li> </ul> <h4 id="copy-a-list">Copy a list</h4> <p>Thre are 3 ways to copy a list:</p> <ol> <li>newlst = lst.copy()</li> <li>newlst = list(lst)</li> <li>newlst = [i for i in lst]</li> </ol> <h4 id="join-two-list">Join two list</h4> <ol> <li>list3 = list1 + list2</li> <li>Another way to join two lists is by appending all the items from list2 into list1, one by one.</li> <li>Use the extend() method to add list2 at the end of list1 <code class="language-plaintext highlighter-rouge">list1.extend(list2)</code></li> </ol> <h4 id="multi-dimensional-arrays-operation">Multi-Dimensional Arrays Operation</h4> <p>(When deal with Multi-Dimensional Arrays, it is good to use NumPy. ) What do X[:,1] means?</p> <ul> <li>X is a numpy array, and it is Multi-Dimensional Array.</li> <li>Say Here X have n rows and n columns</li> <li>so by doing x=x[:,1] we get all the rows in x present at index 1.</li> </ul> <p>For example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span> <span class="p">[</span><span class="mf">0.69859393</span><span class="p">,</span> <span class="mf">0.1042432</span> <span class="p">],</span>
         <span class="p">[</span><span class="mf">0.55138493</span><span class="p">,</span> <span class="mf">0.18639614</span><span class="p">],</span>
         <span class="p">[</span><span class="mf">0.27338772</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">]])</span>

<span class="n">x</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">array</span><span class="p">([</span><span class="mf">0.1042432</span> <span class="p">,</span> <span class="mf">0.18639614</span><span class="p">,</span> <span class="mf">0.80351282</span><span class="p">])</span>
</code></pre></div></div> <h3 id="understanding-lists-in-python">Understanding Lists in Python</h3> <h4 id="what-is-array-in-python">What is Array in Python</h4> <ul> <li>An array is a set of elements which <ul> <li>have the same size,</li> <li>located in memory one after another, without gaps.</li> </ul> </li> <li>Since the “get value by address” memory operation takes constant time, selecting an array item by index also takes O(1).</li> </ul> <h4 id="array-vs-list">Array vs. List</h4> <figure> <picture> <img src="/assets/img/python-list.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="list-is-kind-of-array">List is kind of array</h4> <p>The list is based on the array.</p> <h5 id="list--array-of-pointers">List = Array of Pointers</h5> <ul> <li>The list instantly retrieves an item by index (O(1)), because it has an array inside.</li> <li>And the array is so fast because all the elements are the same size.</li> </ul> <p>For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span><span class="o">])</span>
64
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'1'</span>,<span class="s1">'2'</span><span class="o">])</span>
72
<span class="o">&gt;&gt;&gt;</span>sys.getsizeof<span class="o">([</span><span class="s1">'a long long long string'</span><span class="o">])</span>
64
</code></pre></div></div> <h5 id="list--dynamic-array">List = Dynamic Array</h5> <ul> <li>The list juggles arrays all the time so that we don’t have to do it . For example, if array is full, it will allocate new memory for all elements.</li> <li>You can even check all detail in Python c code.</li> </ul> <h5 id="these-operations-are-o1">these operations are O(1):</h5> <ul> <li>select an item by index lst[idx]</li> <li>count items len(lst)</li> <li>add an item to the end of the list .append(item)</li> <li>remove an item from the end of the list .pop()</li> </ul> <h5 id="operations-are-slow">operations are “slow”:</h5> <ul> <li>Insert or delete an item by index. .insert(idx, item) and .pop(idx) take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they shift all the elements after the target one.</li> <li>Search or delete an item by value. item in lst, .index(item) and .remove(item) take linear time <code class="language-plaintext highlighter-rouge">O(n)</code> because they iterate over all the elements.</li> <li>Select a slice of k elements. l<code class="language-plaintext highlighter-rouge">st[from:to]</code> takes <code class="language-plaintext highlighter-rouge">O(k)</code>.</li> </ul> <h3 id="list-questions">List questions</h3> <ul> <li>why Memory of list is like that: it depond on how many members instead of how big of the members?</li> <li>why some operations are quick, but some are slow?</li> <li>Do Python allocate new memory for the following variable small_list? big_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] small_list = big_list[:5] Ask yourself if you modify small_list, do big_list modify as well? if not, then new memory.</li> </ul> <h2 id="tuple">Tuple</h2> <h3 id="what-is-tuple">What is Tuple</h3> <ul> <li>A tuple is a sequence which is ordered and Immutable, Allows duplicate.</li> <li>Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created. However, if a member of the tuple is list, list content can be changed.</li> <li>But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.</li> <li>Tuples are written with round brackets: tuple1 = (“abc”, 34, True, 40, “male”)</li> </ul> <h3 id="tuple-features">Tuple Features</h3> <ul> <li>Tuple is immutable, but it will instantiated without checking memory. It don’t like many immutable, e.g. int, float, check memory for same value instance.</li> <li>Tuple have quirk syntax when it contain 0 or 1 items. t = ()<br/> t = (1,)</li> </ul> <h3 id="access-tuple">Access Tuple.</h3> <ul> <li>using [].</li> <li>using keyword ‘in’.</li> </ul> <h3 id="update-tuple">Update Tuple</h3> <p>Convert the tuple into a list, update, and convert it back into a tuple.</p> <h3 id="unpacking-a-tuple">Unpacking a Tuple</h3> <p>When create a tuple, normally assign values to it. This is called “packing” a tuple. Tuple allowed to extract the values back into variables. This is called “unpacking”. (Call destructuring assignment in JavaScript)</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <p>Add an * to the variable name and the values will be assigned to the variable as a list:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fruits</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">apple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">banana</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cherry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">strawberry</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">raspberry</span><span class="sh">"</span><span class="p">)</span>
<span class="p">(</span><span class="n">green</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="o">*</span><span class="n">red</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</code></pre></div></div> <h3 id="you-join-tuples-by-using--multiply-tuples-by-using-">You join Tuples by using ‘+’, multiply Tuples by using ‘*’</h3> <h2 id="set">Set</h2> <h3 id="what-is-set">What is Set</h3> <p>A set object is an unordered collection of distinct hashable objects. Like other collections, sets support x in set, len(set), and for x in set. Python have set and frozen set.</p> <ul> <li>Set support comprehension syntax as well, similar to list comprehension.</li> </ul> <h3 id="common-uses-include">Common uses include</h3> <ul> <li>membership testing,</li> <li>removing duplicates from a sequence,</li> <li>Provide computing mathematical operations such as intersection, union, difference, and symmetric difference.</li> </ul> <h3 id="set-1">set</h3> <p>These represent a mutable — the contents can be changed using methods like add() and remove(). Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set.</p> <ul> <li>A set is a collection which is unordered, Not allow duplicates.</li> <li>We cannot change the items after the set has been created. but you can remove items and add new items.</li> <li>Sets are written with curly brackets: set1 = {“abc”, 34, True, 40, “male”}</li> </ul> <h3 id="frozenset">frozenset</h3> <p>These represent an immutable set. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key.</p> <h3 id="instances-of-set-and-frozenset-provide-the-following-operations">Instances of set and frozenset provide the following operations:</h3> <p>(You can tell what set and frozenset can do according this operations)</p> <ul> <li><code class="language-plaintext highlighter-rouge">len(s)</code> Return the number of elements in set s (cardinality of s).</li> <li><code class="language-plaintext highlighter-rouge">x in s</code> Test x for membership in s.</li> <li><code class="language-plaintext highlighter-rouge">x not in s</code> Test x for non-membership in s.</li> <li><code class="language-plaintext highlighter-rouge">isdisjoint(other)</code> Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set.</li> <li><code class="language-plaintext highlighter-rouge">issubset(other)</code>: <code class="language-plaintext highlighter-rouge">set &lt;= other</code> Test whether every element in the set is in other.</li> <li><code class="language-plaintext highlighter-rouge">set &lt; other</code> Test whether the set is a proper subset of other, that is, set &lt;= other and set != other.</li> <li><code class="language-plaintext highlighter-rouge">issuperset(other)</code> : <code class="language-plaintext highlighter-rouge">set &gt;= other</code> Test whether every element in other is in the set. -<code class="language-plaintext highlighter-rouge"> set &gt; other</code> Test whether the set is a proper superset of other, that is, set &gt;= other and set != other.</li> <li><code class="language-plaintext highlighter-rouge">union(*others)</code> <code class="language-plaintext highlighter-rouge">set | other | ...</code> Return a new set with elements from the set and all others.</li> <li><code class="language-plaintext highlighter-rouge">intersection(*others)</code> <code class="language-plaintext highlighter-rouge">set &amp; other &amp; ...</code> Return a new set with elements common to the set and all others.</li> <li><code class="language-plaintext highlighter-rouge">difference(*others)</code> <code class="language-plaintext highlighter-rouge">set - other - ...</code> Return a new set with elements in the set that are not in the others.</li> <li><code class="language-plaintext highlighter-rouge">symmetric_difference(other)</code> <code class="language-plaintext highlighter-rouge">set ^ other</code> Return a new set with elements in either the set or other but not both.</li> <li><code class="language-plaintext highlighter-rouge">copy()</code> Return a shallow copy of the set.</li> </ul> <h3 id="operations-available-for-set-but-not-frozenset">operations available for set, but not frozenset</h3> <p>update(*others) set |= other | … Update the set, adding elements from all others.</p> <p>intersection_update(*others) set &amp;= other &amp; … Update the set, keeping only elements found in it and all others.</p> <p>difference_update(*others) set -= other | … Update the set, removing elements found in others.</p> <p>symmetric_difference_update(other) set ^= other Update the set, keeping only elements found in either set, but not in both.</p> <p>add(elem) Add element elem to the set.</p> <p>remove(elem) Remove element elem from the set. Raises KeyError if elem is not contained in the set.</p> <p>discard(elem) Remove element elem from the set if it is present.</p> <p>pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.</p> <p>clear() Remove all elements from the set.</p> <h3 id="questions">Questions</h3> <h4 id="can-set-contains-mutable-type-like-list">Can Set contains mutable type, like list?</h4> <p>NO, elements in set, key in dictionary, have to be hashable. That means it can’t be list or other mutable type. Tuple can be elements of set if it haven’t mutable member.</p> <h2 id="dictionary">Dictionary</h2> <h3 id="what-is-dictionary">What is Dictionary</h3> <p>Dictionaries are used to store data values in key:value pairs. A dictionary is a collection which is ordered*, mutable and do not allow duplicates.</p> <h3 id="features">Features</h3> <ul> <li> <p>keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</p> </li> <li> <p>As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.</p> </li> <li> <p>Use curl bracket: thisdict = { “brand”: “Ford”, “model”: “Mustang”, “year”: 1964 }</p> </li> <li>The dict() constructor builds dictionaries directly from sequences of key-value pairs: <blockquote> <blockquote> <blockquote> <p>dict([(‘sape’, 4139), (‘guido’, 4127), (‘jack’, 4098)]) {‘sape’: 4139, ‘guido’: 4127, ‘jack’: 4098}</p> </blockquote> </blockquote> </blockquote> </li> <li>dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: <blockquote> <blockquote> <blockquote> <p>{x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36}</p> </blockquote> </blockquote> </blockquote> </li> </ul> <h3 id="operation-methods">Operation Methods</h3> <h4 id="accessing-items">Accessing Items</h4> <ul> <li>Dictionary is in order. But have no idea to access it by order. Access directly: <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div> </div> </li> <li> <p>using square bracket [] is equivalent to <strong>getitem</strong>()</p> </li> <li>if visit key that doesn’t exist It will raise KeyError. But you can override the <strong>missing</strong>(self, key) method defines the behavior of a dictionary subclass if you access a non-existent key. More specifically, Python’s <strong>getitem</strong>() dictionary method internally calls the <strong>missing</strong>() method if the key doesn’t exist. The return value of <strong>missing</strong>() is the value to be returned when trying to access a non-existent key.</li> <li>keys(), values(), items()</li> <li>return view objects for corresponded things.</li> <li>Dictionary view object provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes.</li> <li>Keys views are set-like!</li> <li>If all values are hashable, then the items view is also set-like.</li> <li>Values views are not treated as set-like.</li> <li>For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, &lt;, or ^).</li> </ul> <p>– setdefault(key[, default]) Returns the value of the specified key. If the key does not exist: insert the key, with the specified value.</p> <ul> <li>keyname is required</li> <li>value is Optional. If the key exist, value has no effect. If the key does not exist, this value becomes the key’s value. Default value None. print(thisdict.setdefault(“model”,”Focus”))</li> </ul> <p>– get(key[, default]) Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None.</p> <ul> <li>get() is different function from <strong>getitem</strong>(). They have no connection.</li> </ul> <h4 id="remove-items">Remove items</h4> <ul> <li>pop() The pop() method removes the item with the specified key name.</li> <li>popitem() The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):</li> <li>del keyword Can delete items or the dictionary</li> <li>clear() Clear the dictionary</li> </ul> <h4 id="add-items-change-items">Add items, Change items</h4> <ul> <li>add item directly, change directly (list can’t add item directly, but dict can) <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thisdict</span> <span class="o">=</span> <span class="p">{</span>
<span class="sh">"</span><span class="s">brand</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ford</span><span class="sh">"</span><span class="p">,</span>
<span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mustang</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">color</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">red</span><span class="sh">"</span>
<span class="n">thisdict</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Focus</span><span class="sh">"</span>
</code></pre></div> </div> </li> <li>using square bracket [] is equivalent to <strong>setitem</strong>()</li> </ul> <h4 id="update">update()</h4> <p>The update() method inserts the specified items to the dictionary.</p> <ul> <li>update() can overwrite the exist key and it’s value.</li> <li>can concatenate dictionarys.</li> <li>can concatenate key value pair iterable object. dictionary.update(iterable) • iterable can be A dictionary or an iterable object with key value pairs, that will be inserted to the dictionary.</li> </ul> <h4 id="dict-not-support-operator-">dict NOT support operator +</h4> <p>But Counter can</p> <ul> <li>setdefault() see above</li> </ul> <h4 id="create-dictionary">Create Dictionary</h4> <ul> <li> <p>dict.fromkeys(keys, value) The fromkeys() method returns a dictionary with the specified keys and the specified value.</p> </li> <li> <p>syntac dict.fromkeys(keys, value) keys: Required. An iterable specifying the keys of the new dictionary value: Optional. The value for all keys. Default value is None</p> </li> <li> <p>an example of how to use dict as an ordered set to filter out duplicate items while preserving order, thereby emulating an ordered set:</p> <blockquote> <blockquote> <blockquote> <p>keywords = [‘foo’, ‘bar’, ‘bar’, ‘foo’, ‘baz’, ‘foo’] list(dict.fromkeys(keywords)) [‘foo’, ‘bar’, ‘baz’]</p> </blockquote> </blockquote> </blockquote> </li> </ul> <p>– zip() zip() returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument iterables. keys = [‘red’, ‘green’, ‘blue’] values = [‘#FF0000’,’#008000’, ‘#0000FF’] color_dictionary = dict(zip(keys, values))</p> <h4 id="copy-dictionary">Copy Dictionary</h4> <ul> <li> <p>copy() Dictionary method copy() can create a new dict according to the current dict.</p> </li> <li> <p>dict() Another way to make a copy is to use the built-in function dict().</p> </li> </ul> <p>– Loop over dict for x in thisdict: print(x)</p> <p>x is the key! no value.</p> <h3 id="question">Question</h3> <ul> <li>How to get the first item of a dict?</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Concepts of Containers, Collections, Sequences, Mappings]]></summary></entry><entry><title type="html">Python Build-in Type Overview</title><link href="https://benwzj.github.io/blog/2024/python-type/" rel="alternate" type="text/html" title="Python Build-in Type Overview"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python-type</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python-type/"><![CDATA[<p>Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t.</p> <p>Data type in python:</p> <ul> <li>Numeric,</li> <li>Sequence,</li> <li>Set,</li> <li>Mapping.</li> </ul> <p>(String, list, tuple, range and byte are sequence. )</p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t.]]></summary></entry><entry><title type="html">Python Overview</title><link href="https://benwzj.github.io/blog/2024/python/" rel="alternate" type="text/html" title="Python Overview"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/python</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/python/"><![CDATA[<ul> <li>Python is an object oriented programming language.</li> <li>Almost everything in Python is an object, with its properties and methods.</li> <li>A Class is like an object constructor, or a “blueprint” for creating objects.</li> <li>Different from JavaScript, there are no primitives in Python.</li> <li>Python have a good documentation.</li> </ul> <h2 id="python-vs-javascript">Python vs. JavaScript</h2> <h3 id="repl">REPL</h3> <p>REPL(Read-Eval-Print-Loop)</p> <ul> <li>Python has it’s own interpreter. And Python have different version interpreter. For example Pythone 2.7 still popular, but the new stable version is 3.10 at the moment. something like: python3 yourcode.py</li> <li>JavaScript need a JavaScript runtime to support, like Browser, NodeJS.</li> </ul> <h3 id="code-blocks">Code Blocks</h3> <ul> <li>JavaScript makes use of curly brackets for defining code blocks. Python, on the other hand, uses indentation for defining code blocks.</li> <li>While JavaScript has the semi-colon (;) that serves as the statement terminator (though it is not mandatory), Python uses a newline.</li> </ul> <h3 id="data-type">Data type</h3> <h4 id="mutability">Mutability</h4> <ul> <li>Python support mutable data type, like set, and immutable data type, like list.</li> <li>JavaScript have primitive type concept which are immutable. All object is mutable. But each property of the object have it’s own descriptor which can config the mutability of the property.</li> </ul> <h4 id="number">Number</h4> <ul> <li>In python, there are different numeric type like int, float, fixed-point decimal.</li> <li>In JavaScript, there are number and bigInt. Number type is double floating point number.</li> </ul> <h4 id="object">Object</h4> <ul> <li>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (Everything in python is object)</li> <li>Is it everything is object in JavaScript? NO, primitive is not object.</li> <li>Object in JavaScript, is very easy to create. But in Python, Each object has a class from which it is instantiated.</li> <li>In JavaScript, a simple iterator can be:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">let</span> <span class="n">myIter</span> <span class="o">=</span> <span class="p">{</span>
  <span class="n">n</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nb">next</span><span class="p">:</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">this</span><span class="p">.</span><span class="n">n</span><span class="o">++</span><span class="p">,</span> <span class="n">done</span><span class="p">:</span> <span class="n">false</span><span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>In Python, a iterator looks like:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyNumbers</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">self</span>

  <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">n</span>

<span class="n">myclass</span> <span class="o">=</span> <span class="nc">MyNumbers</span><span class="p">()</span>
<span class="n">myiter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">myclass</span><span class="p">)</span>
<span class="nf">next</span><span class="p">(</span><span class="n">myiter</span><span class="p">)</span>
</code></pre></div></div> <h3 id="class">Class</h3> <h4 id="javascript-class">JavaScript class</h4> <ul> <li>JavaScript class, which have been described as syntax sugar, is build on the top of prototype chain.</li> <li>JavaScript class works very well. You don’t need to always translate back to prototype chain to understand the code.</li> <li>JavaScript actually implement class as function.</li> <li>JavaScript class support class, new, constructor, extends, super, static key words. JavaScript class put everything in one place, to implement OOP coding concept which similar to Java, C++.</li> </ul> <h4 id="python-class">Python class</h4> <ul> <li>Each value is an object. Each object is an instance of a class. Even a class is an instance of the metaclass - type.</li> <li>class itself is an object. class instance is an object too.</li> <li>class in python is not function.</li> <li>Method object is not Function object in Python! But they are same thing in JavaScript.</li> <li>Python supports a form of multiple inheritance. But JavaScript support just one.</li> </ul> <h3 id="iterable-iterator">iterable, iterator</h3> <h4 id="javascript">JavaScript</h4> <ul> <li>An object is iterable if it implement the @@iterator method.</li> <li>An object is iterator when it implements the <code class="language-plaintext highlighter-rouge">next()</code> according to some semantics: <code class="language-plaintext highlighter-rouge">done_value_object = myIterator.next(). </code> // if done == false, can keep calling <code class="language-plaintext highlighter-rouge">myIterator.next()</code> to return done_value_object. // if done == true, then iterator is completed.</li> </ul> <h4 id="python">Python</h4> <p>Python have different concepts of iterator and iterable from JavaScript.</p> <ul> <li>exception StopIteration is used to signal the end of an iteration.</li> <li>built-in function <code class="language-plaintext highlighter-rouge">iter()</code> and <code class="language-plaintext highlighter-rouge">next()</code> used to implement iteration.</li> </ul> <h3 id="generator">generator</h3> <h4 id="javascript-generator">JavaScript generator</h4> <ul> <li>syntax: <code class="language-plaintext highlighter-rouge">* function (){}</code></li> <li>generator is an iterator which maintain by the language itself.</li> <li>a generator object (iterator) for the function will be returned when meet yield.</li> <li>yield will return value.</li> <li>generator function also support return keyword. generator function will totally complete when return.</li> <li>generator can work with promise to make code better.</li> </ul> <h4 id="python-generator">Python generator</h4> <ul> <li>syntax: when a function contain keyword yield, then it is generator.</li> <li>If you used <code class="language-plaintext highlighter-rouge">next()</code> after iteration have been completed, then you’ll get an explicit StopIteration exception.</li> </ul> <h3 id="static-method">Static method</h3> <p>static concept is similar between Python, JavaScript, C++, Java. static methods can be accessed from classes instead of instants.</p> <h4 id="in-javascript">in JavaScript</h4> <ul> <li>there are static keyword.</li> <li>static method can’t be access by instance.</li> </ul> <h4 id="in-python">in Python</h4> <ul> <li> <p>Using built-in function staticmethod() to turn method to static. But can using syntaxtic sugar decorator @staticmethod</p> </li> <li> <p>static methods can be access both by class and instance. <code class="language-plaintext highlighter-rouge">Class.staticmethodFunc()</code> or even <code class="language-plaintext highlighter-rouge">Class().staticmethodFunc()</code></p> </li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><summary type="html"><![CDATA[Python is an object oriented programming language. Almost everything in Python is an object, with its properties and methods. A Class is like an object constructor, or a “blueprint” for creating objects. Different from JavaScript, there are no primitives in Python. Python have a good documentation.]]></summary></entry><entry><title type="html">OAuth Flow Details</title><link href="https://benwzj.github.io/blog/2024/oauth-flow/" rel="alternate" type="text/html" title="OAuth Flow Details"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/oauth-flow</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/oauth-flow/"><![CDATA[<p>OAuth is a standard. There are many company implement OAuth according to this Standard. The implementation should be very similar.</p> <p>First of all, you need to create OAuth App in Authorization Server.</p> <p>In OAuth Flow, usually there are some Roles:</p> <ul> <li>User</li> <li>Browser</li> <li>Website App</li> <li> <p>The Authorization Server</p> </li> <li>resource owner (User)</li> <li>resource server</li> <li>client (Website App)</li> <li>authorization server</li> </ul> <p>There are different OAuth Flow for defferent app types:</p> <ul> <li>Single-page app (SPA)</li> <li>Web app</li> <li>Web API</li> <li>Mobile and native apps</li> <li>Service, daemon, script</li> </ul> <h2 id="web-app-flow">Web app flow</h2> <p>(github implementation)</p> <p>The web application flow to authorize users for your app is:</p> <ol> <li>Users are redirected to request their GitHub identity</li> <li>Users are redirected back to your site by GitHub</li> <li>Your app accesses the API with the user’s access token</li> </ol> <h3 id="1-request-a-users-github-identity">1. Request a user’s GitHub identity</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET https://github.com/login/oauth/authorize
</code></pre></div></div> <p>This endpoint takes the following input parameters.</p> <ul> <li><code class="language-plaintext highlighter-rouge">client_id</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">redirect_uri</code> string Strongly recommended</li> <li><code class="language-plaintext highlighter-rouge">login</code> string Optional</li> <li><code class="language-plaintext highlighter-rouge">scope</code> string Context dependent</li> <li><code class="language-plaintext highlighter-rouge">state</code> string Strongly recommended</li> </ul> <h3 id="2-users-are-redirected-back-to-your-site-by-github">2. Users are redirected back to your site by GitHub</h3> <p>If the user accepts your request, GitHub redirects back to your site with a temporary code(authorization code) in a code parameter as well as the state you provided in the previous step in a state parameter.</p> <p>Exchange this code for an access token:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://github.com/login/oauth/access_toke
</code></pre></div></div> <p>This endpoint takes the following input parameters.</p> <ul> <li><code class="language-plaintext highlighter-rouge">client_id</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">client_secret</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">code</code> string Required</li> <li><code class="language-plaintext highlighter-rouge">redirect_uri</code> string Strongly recommended</li> </ul> <p>By default, the response takes the following form:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>access_token=gho_16C7e42F292c6912E7710c838347Ae178B4a&amp;scope=repo%2Cgist&amp;token_type=bearer
</code></pre></div></div> <h3 id="3-use-the-access-token-to-access-the-api">3. Use the access token to access the API</h3> <p>The access token allows you to make requests to the API on a behalf of a user.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Authorization: Bearer OAUTH-TOKEN
GET https://api.github.com/user
</code></pre></div></div> <p>For example, in curl you can set the Authorization header like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -H "Authorization: Bearer OAUTH-TOKEN" https://api.github.com/user
</code></pre></div></div> <p>Every time you receive an access token, you should use the token to revalidate the user’s identity. A user can change which account they are signed into when you send them to authorize your app,</p> <figure> <picture> <img src="/assets/img/oauth_web_server_flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Another one:</p> <figure> <picture> <img src="/assets/img/oauth-flow.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="about-redirect_uri">About Redirect_URI</h3> <p>Redirect_RUI need be defined in the Authorization Server. And When User is using GET and POST to access Authorization Server, it can use the <code class="language-plaintext highlighter-rouge">redirect_uri</code> parameter.</p> <ul> <li>If left out, GitHub will redirect users to the callback URL configured in the OAuth app settings.</li> <li>If provided, the redirect URL’s host (excluding sub-domains) and port must exactly match the callback URL. The redirect URL’s path must reference a subdirectory of the callback URL.(I spent whole day to figure out this mismatch error)</li> </ul> <h4 id="loopback-redirect-urls">Loopback redirect urls</h4> <p>The optional <code class="language-plaintext highlighter-rouge">redirect_uri</code> parameter can also be used for loopback URLs, which is useful for native applications running on a desktop computer. If the application specifies a loopback URL and a port, then after authorizing the application users will be redirected to the provided URL and port. The <code class="language-plaintext highlighter-rouge">redirect_uri</code> does not need to match the port specified in the callback URL for the app.</p> <p>You can use <code class="language-plaintext highlighter-rouge">http://127.0.0.1:1234/path</code> as <code class="language-plaintext highlighter-rouge">redirect_uri</code>.</p> <blockquote> <p>Note that OAuth RFC recommends not to use <code class="language-plaintext highlighter-rouge">localhost</code>, but instead to use loopback literal <code class="language-plaintext highlighter-rouge">127.0.0.1</code> or <code class="language-plaintext highlighter-rouge">IPv6 ::1</code>.</p> </blockquote> <h2 id="single-page-app-flow">Single-page app flow</h2> <p>Many modern apps have a single-page app (SPA) front end written primarily in JavaScript, often with a framework like Angular, React, or Vue.</p> <p>Single-page apps (or browser-based apps) run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of a client secret, so the secret is not used in this case.</p> <p>Previously, it was recommended that browser-based apps use the “Implicit” flow, which returns an access token immediately in the redirect and does not have a token exchange step. In the time since the spec was originally written, the industry best practice has changed to recommend that the <strong>authorization code</strong> flow be used without the client secret. This provides more opportunities to create a secure flow, such as using the <code class="language-plaintext highlighter-rouge">Proof Key for Code Exchange (PKCE)</code> extension.</p> <h3 id="pkce">PKCE</h3> <p>PKCE-enhanced Authorization Code Flow builds upon the standard Authorization Code Flow, the steps are very similar with Web app flow. But with the addition of a dynamically generated secret used on each request. This is known as the PKCE extension.</p> <blockquote> <p>The main difference between Implicit and PKCE flow is ADDing <strong>authorization code</strong>.</p> </blockquote> <p>Definition of Proof Key for Code Exchange (PKCE) <a href="https://datatracker.ietf.org/doc/html/rfc7636">OAuth 2.0 RFC 7636</a>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                 +-------------------+
                                                 |   Authz Server    |
       +--------+                                | +---------------+ |
       |        |--(A)- Authorization Request ----&gt;|               | |
       |        |       + t(code_verifier), t_m  | | Authorization | |
       |        |                                | |    Endpoint   | |
       |        |&lt;-(B)---- Authorization Code -----|               | |
       |        |                                | +---------------+ |
       | Client |                                |                   |
       |        |                                | +---------------+ |
       |        |--(C)-- Access Token Request ----&gt;|               | |
       |        |          + code_verifier       | |    Token      | |
       |        |                                | |   Endpoint    | |
       |        |&lt;-(D)------ Access Token ---------|               | |
       +--------+                                | +---------------+ |
                                                 +-------------------+
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li>The OAuth 2.0 Authorization Framework<a href="https://datatracker.ietf.org/doc/html/rfc6749">RFC 6749</a></li> <li>Proof Key for Code Exchange by OAuth Public Clients<a href="https://datatracker.ietf.org/doc/html/rfc7636">RFC 7636</a></li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="Authentication"/><category term="github"/><category term="Authorization"/><category term="OAuth"/><summary type="html"><![CDATA[OAuth is a standard. There are many company implement OAuth according to this Standard. The implementation should be very similar.]]></summary></entry><entry><title type="html">TypeScript Operators</title><link href="https://benwzj.github.io/blog/2024/ts-operators/" rel="alternate" type="text/html" title="TypeScript Operators"/><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/ts-operators</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/ts-operators/"><![CDATA[<h2 id="satisfies-operator">satisfies Operator</h2> <p>TypeScript developers are often faced with a dilemma: we want to ensure that some expression matches some type, but also want to keep the most specific type of that expression for inference purposes.</p> <p>That means, You don’t have to use type annotation to define a variable in order to make it matches specific type. When you use type annotation to define a variable, this variable will be taken as the specific type. At this point, this variable will under the constraint of the specific type. In some case, you may just want to make sure the variable in the shape of specific type but don’t want the constraint. Then use satisfies operatior.</p> <h3 id="not-care-about-property-name-just-care-about-the-type-of-property">Not care about property name, Just care about the type of property</h3> <p>Maybe we don’t care about if the property names match up somehow, but we do care about the types of each property. In that case, we can also ensure that all of an object’s property values conform to some type. Like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">RGB</span> <span class="o">=</span> <span class="p">[</span><span class="nx">red</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">green</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">blue</span><span class="p">:</span> <span class="kr">number</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">palette</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">red</span><span class="p">:</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
    <span class="na">green</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#00ff00</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">blue</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="c1">//   will catch this error!</span>
<span class="p">}</span> <span class="kd">satisfies </span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">RGB</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// Information about each property is still maintained.</span>
<span class="kd">const</span> <span class="nx">redComponent</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">red</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// this still work</span>
<span class="kd">const</span> <span class="nx">greenNormalized</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">green</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span> <span class="c1">// this still work</span>
</code></pre></div></div> <h3 id="ensure-that-an-object-has-all-the-keys-of-some-type-but-no-more">ensure that an object has all the keys of some type, but no more:</h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Colors</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Ensure that we have exactly the keys from 'Colors'.</span>
<span class="kd">const</span> <span class="nx">favoriteColors</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">yes</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">kinda</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">platypus</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span> <span class="c1">//  ~~~~~~~~~~ error - "platypus" was never listed in 'Colors'.</span>
<span class="p">}</span> <span class="kd">satisfies </span><span class="nb">Record</span><span class="o">&lt;</span><span class="nx">Colors</span><span class="p">,</span> <span class="nx">unknown</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// All the information about the 'red', 'green', and 'blue' properties are retained.</span>
<span class="kd">const</span> <span class="nx">g</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="nx">favoriteColors</span><span class="p">.</span><span class="nx">green</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="TypeScript"/><category term="TypeScript"/><summary type="html"><![CDATA[satisfies Operator]]></summary></entry><entry><title type="html">TypeScript Utility Types</title><link href="https://benwzj.github.io/blog/2024/ts-utility-types/" rel="alternate" type="text/html" title="TypeScript Utility Types"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/ts-utility-types</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/ts-utility-types/"><![CDATA[<p>TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.</p> <ul> <li>Utility types are <code class="language-plaintext highlighter-rouge">type</code>s.</li> <li>Utility types are used to <strong>transform</strong> one type to anther type.</li> </ul> <h2 id="record">Record</h2> <p><code class="language-plaintext highlighter-rouge">Record&lt;Keys, Type&gt;</code> Constructs an object type whose property keys are <code class="language-plaintext highlighter-rouge">Keys</code> and whose property values are <code class="language-plaintext highlighter-rouge">Type</code>. This utility can be used to map the properties of a type to another type.</p> <p>Need an Example explain it:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">CatName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">miffy</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">boris</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">mordred</span><span class="dl">"</span><span class="p">;</span>
 
<span class="kr">interface</span> <span class="nx">CatInfo</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">breed</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">const</span> <span class="nx">cats</span><span class="p">:</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="nx">CatName</span><span class="p">,</span> <span class="nx">CatInfo</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">miffy</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Persian</span><span class="dl">"</span> <span class="p">},</span>
  <span class="na">boris</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Maine Coon</span><span class="dl">"</span> <span class="p">},</span>
  <span class="na">mordred</span><span class="p">:</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="na">breed</span><span class="p">:</span> <span class="dl">"</span><span class="s2">British Shorthair</span><span class="dl">"</span> <span class="p">},</span>
<span class="p">};</span>
 
<span class="nx">cats</span><span class="p">.</span><span class="nx">boris</span><span class="p">;</span> <span class="c1">// Here, the 'cats' is 'Record&lt;CatName, CatInfo&gt;'</span>
</code></pre></div></div> <h3 id="when-you-need-an-object-which-can-be-assigned-new-properties-you-can-use-record-utility-to-define-the-object-type">When you need an object which can be assigned new properties, you can use Record utility to define the object type.</h3> <p>Do this in past:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span><span class="p">:</span> <span class="p">{[</span><span class="nx">k</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">}</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</code></pre></div></div> <p>Now using <code class="language-plaintext highlighter-rouge">Record&lt;Keys, Type&gt;</code> is a better way.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span><span class="p">:</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="nx">unknown</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Record&lt;Keys,Type&gt;</code> is a much cleaner alternative for key-value pairs where property-names are not known. It’s worth noting that <code class="language-plaintext highlighter-rouge">Record&lt;Keys,Type&gt;</code> is a named alias to <code class="language-plaintext highlighter-rouge">{[k: Keys]: Type}</code> where <code class="language-plaintext highlighter-rouge">Keys</code> and <code class="language-plaintext highlighter-rouge">Type</code> are generics.</p> <h2 id="pick">Pick</h2> <p><code class="language-plaintext highlighter-rouge">Pick&lt;Type, Keys&gt;</code></p> <p>Constructs a type by picking the set of properties Keys (string literal or union of string literals) from <code class="language-plaintext highlighter-rouge">Type</code>.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">completed</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">type</span> <span class="nx">TodoPreview</span> <span class="o">=</span> <span class="nb">Pick</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="p">,</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">;</span>
 
<span class="kd">const</span> <span class="nx">todo</span><span class="p">:</span> <span class="nx">TodoPreview</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Clean room</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">completed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="omit">Omit</h2> <p><code class="language-plaintext highlighter-rouge">Omit&lt;Type, Keys&gt;</code></p> <p>Constructs a type by picking all properties from <code class="language-plaintext highlighter-rouge">Type</code> and then removing <code class="language-plaintext highlighter-rouge">Keys</code> (string literal or union of string literals). The opposite of <code class="language-plaintext highlighter-rouge">Pick</code>.</p> <p>Classic usage is omiting the <code class="language-plaintext highlighter-rouge">id</code> property for a object type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">Guest</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">,</span> <span class="s2">`id`</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// then, Guest type just contain name. </span>
</code></pre></div></div> <h2 id="returntype">ReturnType</h2> <p><code class="language-plaintext highlighter-rouge">ReturnType&lt;Type&gt;</code></p> <p>Constructs a type consisting of the return type of function Type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">T0</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// type T0 = string</span>

<span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">3</span> <span class="p">};</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">P</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">&gt;</span><span class="p">;</span>   
<span class="c1">// type P = {</span>
<span class="c1">//     x: number;</span>
<span class="c1">//     y: number;</span>
<span class="c1">// }</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="TypeScript"/><category term="TypeScript"/><summary type="html"><![CDATA[TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.]]></summary></entry><entry><title type="html">Joins and Subqueries in SQL</title><link href="https://benwzj.github.io/blog/2024/sql-joint-subquery/" rel="alternate" type="text/html" title="Joins and Subqueries in SQL"/><published>2024-11-21T00:00:00+00:00</published><updated>2024-11-21T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/sql-joint-subquery</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/sql-joint-subquery/"><![CDATA[<h2 id="understand-joins">Understand Joins</h2> <p>Joins clause in SQL used to combine records from two or more tables. These tables are linked through common fields, and a join operation fetches data based on specified conditions.</p> <p>Joins can be of various types. Here’s a brief overview:</p> <ul> <li>INNER JOIN: Returns only the rows that have matching values in both tables.</li> <li>OUTER JOIN: Returns all rows from both tables, including unmatched rows.</li> <li>LEFT(OUTER) JOIN: Returns all records from the left table, and the matched records from the right table</li> <li>RIGHT(OUTER) JOIN: Returns all records from the right table, and the matched records from the left table</li> <li>CROSS JOIN: Produces a Cartesian product of the two tables, resulting in a combination of all rows.</li> </ul> <p>This Figures do a good job on showing the difference:</p> <figure> <picture> <img src="/assets/img/sql-joins.webp" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Joins are specified in the FROM clause of a query and can significantly enhance the efficiency of data retrieval. They are essential for fetching data from multiple tables based on relationships.</p> <p>Usually we just use INNER JOIN and LEFT(OUTER) JOIN.</p> <h3 id="the-inner-join-usually-can-be-written-without-join-keyword">The INNER JOIN usually can be written without JOIN keyword:</h3> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderID</span><span class="p">,</span> <span class="n">Customers</span><span class="p">.</span><span class="n">CustomerName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderDate</span>
<span class="k">FROM</span> <span class="n">Orders</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Customers</span> <span class="k">ON</span> <span class="n">Orders</span><span class="p">.</span><span class="n">CustomerID</span><span class="o">=</span><span class="n">Customers</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">;</span>
</code></pre></div></div> <p>same with:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderID</span><span class="p">,</span> <span class="n">Customers</span><span class="p">.</span><span class="n">CustomerName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderDate</span>
<span class="k">FROM</span> <span class="n">Orders</span><span class="p">,</span> <span class="n">Customers</span>
<span class="k">where</span> <span class="n">Orders</span><span class="p">.</span><span class="n">CustomerID</span><span class="o">=</span><span class="n">Customers</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">;</span>
</code></pre></div></div> <h3 id="understand-full-join">Understand Full Join</h3> <p>Full join means list all rows in tow table, if the rows meet condition, then join them together. But some popular DB like MySQL does not support the FULL OUTER JOIN syntax.</p> <h3 id="what-is-self-join">What is self join</h3> <p>A self join is a regular join, but the table is joined with itself.</p> <p>The following SQL statement matches customers that are from the same city:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">A</span><span class="p">.</span><span class="n">CustomerName</span> <span class="k">AS</span> <span class="n">CustomerName1</span><span class="p">,</span> <span class="n">B</span><span class="p">.</span><span class="n">CustomerName</span> <span class="k">AS</span> <span class="n">CustomerName2</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span>
<span class="k">FROM</span> <span class="n">Customers</span> <span class="n">A</span><span class="p">,</span> <span class="n">Customers</span> <span class="n">B</span>
<span class="k">WHERE</span> <span class="n">A</span><span class="p">.</span><span class="n">CustomerID</span> <span class="o">&lt;&gt;</span> <span class="n">B</span><span class="p">.</span><span class="n">CustomerID</span>
<span class="k">AND</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">City</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">A</span><span class="p">.</span><span class="n">City</span><span class="p">;</span>
</code></pre></div></div> <h2 id="what-is-a-subquery">What is a Subquery</h2> <p>A Subquery, also known as an Inner query or Nested query, is a query nested within another SQL query. It is enclosed within the WHERE clause and serves various purposes, such as filtering rows, calculating values, or retrieving data conditionally. Subqueries can be used in conjunction with SELECT, INSERT, UPDATE, DELETE, or CREATE VIEW statements.</p> <h2 id="joins-vs-subqueries">JOINs vs Subqueries</h2> <p>Usually, Subqueries are the logically correct way to solve problems. Subqueries are more readable than JOINs. However, it always comes down to performance. Although optimisers are getting better, in most cases JOINs are faster than subqueries.</p> <p>Important factors:</p> <ul> <li>There are different DBMSs</li> <li>Size matters</li> <li>There are different forms of sub-queries</li> </ul> <p>Historically, explicit joins usually win, hence the established wisdom that joins are better, but optimisers are getting better all the time, and so I prefer to write queries first in a logically coherent way, and then restructure if performance constraints warrant this.</p> <h3 id="how-dbms-process-sql-query">How DBMS process SQL query</h3> <p>The journey of an SQL query starts with parsing and tokenization, where the query is broken down into individual elements such as keywords (e.g., SELECT, FROM, WHERE) and operators (e.g., =, &gt;, &lt;). Following this, the database management system (DBMS) analyzes the query to devise optimal execution plans for data retrieval. With the execution plan in place, the DBMS begins the process of data retrieval. If the query involves multiple tables, the DBMS performs join operations to combine the relevant data. Subsequently, filtering conditions specified in the WHERE clause are applied to assess each row’s eligibility based on user-defined criteria. Additionally, common aggregation functions like SUM, MIN, MAX, AVG are utilized to perform calculations on grouped data. Upon completion of these operations, the DBMS generates the final result set, culminating the query execution process.</p> <figure> <picture> <img src="/assets/img/sql-process.webp" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Join operations are seamlessly integrated within the query execution steps. However, when using a subquery, the process involves executing the entire inner query first. Afterward, the table generated from this query is utilized in the WHERE clause to execute the outer query. This fundamental difference underscores why joins are favored over subqueries, particularly when dealing with large volumes of data. Sometimes, though, subqueries are preferred over joins when dealing with smaller datasets or when the complexity of the data requires it, mainly because they offer easier readability.</p> <h2 id="references">References</h2> <ul> <li>w3schools: <a href="https://www.w3schools.com/sql/sql_join.asp">SQL Join Doc</a></li> <li>stackoverflow topic: <a href="https://stackoverflow.com/questions/2577174/join-vs-sub-query">join-vs-sub-query</a></li> </ul>]]></content><author><name></name></author><category term="Database"/><category term="SQL"/><category term="Database"/><summary type="html"><![CDATA[Understand Joins]]></summary></entry><entry><title type="html">Next.js Middleware</title><link href="https://benwzj.github.io/blog/2024/nextjs-middleware/" rel="alternate" type="text/html" title="Next.js Middleware"/><published>2024-10-31T00:00:00+00:00</published><updated>2024-10-31T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-middleware</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-middleware/"><![CDATA[<h2 id="overview">Overview</h2> <p>Next.js copy the middleware concept from Express.js.</p> <p>In Next.js, Middleware allows you to run code before a request is completed. It is based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.</p> <p>But the Next.js documents is not good enough.</p> <h3 id="important-points">Important Points</h3> <ul> <li>Middleware will affect every request, so need to handle it carefully.</li> <li>Middleware let you share and reuse logic that is repeatable for every request.</li> <li>Middleware runs before cached content and routes are matched.</li> <li>Middleware run for all request, Normally, you need to use <code class="language-plaintext highlighter-rouge">matcher</code> to filter “Middleware” to run on specific paths.</li> <li>The Middleware file “/middleware.ts” must export a <code class="language-plaintext highlighter-rouge">middleware</code> or a <code class="language-plaintext highlighter-rouge">default</code> function.</li> </ul> <h3 id="what-middleware-can-do">What Middleware can do:</h3> <ul> <li>redirect the incoming request to a different URL</li> <li>rewrite the response</li> <li>Set request headers for API Routes, getServerSideProps, and rewrite destinations</li> <li>Set response cookies</li> <li>Set response headers</li> </ul> <h3 id="when-to-use-middleware">When to use Middleware:</h3> <ul> <li>Authentication and Authorization</li> <li>Server-Side Redirects</li> <li>Path Rewriting, For example: A/B testing, feature rollouts, or legacy paths</li> <li>Bot Detection</li> <li>Logging and Analytics</li> <li>Feature Flagging</li> </ul> <h3 id="matching-paths">Matching Paths</h3> <p>Middleware will be invoked for every route in your project. The following is the execution order:</p> <ol> <li>headers from next.config.js</li> <li>redirects from next.config.js</li> <li>Middleware (rewrites, redirects, etc.)</li> <li>beforeFiles (rewrites) from next.config.js</li> <li>Filesystem routes (public/, _next/static/, pages/, app/, etc.)</li> <li>afterFiles (rewrites) from next.config.js</li> <li>Dynamic Routes (/blog/[slug])</li> <li>fallback (rewrites) from next.config.js</li> </ol> <p>There are two ways to define which paths Middleware will run on:</p> <ol> <li>Custom matcher config</li> <li>Conditional statements</li> </ol> <h2 id="understand-middleware">Understand middleware</h2> <p>Middleware logic happen inside the request-response cycle.</p> <h3 id="what-is-the-middleware-logic">What is the Middleware logic</h3> <p>I believe it should be this at the first thought: Client (send Request) —-&gt; Middleware(It do something) —–&gt; Route page(handle the Request) Then: Route Page (rend back Response) —-&gt; Middleware (then do something) —&gt; Client (get Response)</p> <p>But after few days research, the logic maybe not like that. It may be like this: Client (send Request) —-&gt; Middleware(It do something) —–&gt; Route page(handle the Request) Then: Route Page (rend back Response) —-&gt; Client (get Response)</p> <p>It is easier for SW design.</p> <h3 id="export-middleware-function-in-middlewarets">export middleware function in middleware.ts</h3> <p>The Middleware “/middleware” must export a <code class="language-plaintext highlighter-rouge">middleware</code> or a <code class="language-plaintext highlighter-rouge">default</code> function.</p> <p>Basic example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>

<span class="c1">// This function can be marked `async` if using `await` inside</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/home</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// See "Matching Paths" below to learn more</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">matcher</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/about/:path*</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="what-do-the-returned-value-of-the-middleware-funciton-means">What do the returned value of the middleware funciton means?</h3> <p>What i get Till now is that:</p> <ul> <li>Return <code class="language-plaintext highlighter-rouge">Response</code> or <code class="language-plaintext highlighter-rouge">NextResponse</code> object, then it will response back to client directly.</li> <li>Return <code class="language-plaintext highlighter-rouge">NextResponse.next()</code> will pass the request to the next middleware or route.</li> <li>Return <code class="language-plaintext highlighter-rouge">NextResponse.redirect('/login')</code> will redirect to <code class="language-plaintext highlighter-rouge">/login</code>.</li> <li>How about no <code class="language-plaintext highlighter-rouge">return</code>?</li> </ul> <h3 id="understand-nextresponse">Understand NextResponse</h3> <h4 id="what-do-nextresponsenext-mean">What do NextResponse.next() mean?</h4> <ul> <li> <p>In Middleware, The <code class="language-plaintext highlighter-rouge">NextResponse.next()</code> method allows you to return early and continue routing. What do it mean? The next() method passes the request to the next middleware or route.</p> </li> <li> <p>In Middleware, The <code class="language-plaintext highlighter-rouge">NextResponse.next()</code> also allow you to forward headers when producing the response. Like this: ```ts import { NextResponse } from “next/server”; import type { NextRequest } from “next/server”;</p> </li> </ul> <p>export function middleware(request: NextRequest) { // Add a new header x-current-path which passes the path to downstream components const headers = new Headers(request.headers); headers.set(“x-current-path”, request.nextUrl.pathname); return NextResponse.next({ headers }); }</p> <p>export const config = { matcher: [ // match all routes except static files and APIs “/((?!api|_next/static|_next/image|favicon.ico).*)”, ], };</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>we can look for the `x-current-path` header in server component:
```ts
import { headers } from "next/headers";
 
export default async function Sidebar() {
  const headerList = headers();
  const pathname = headerList.get("x-current-path");

  // ...etc
}
</code></pre></div></div> <p>How this happen underneath? Why server component can get header information which set by <code class="language-plaintext highlighter-rouge">NextResponse.next</code>?</p> <h2 id="use-middleware-in-nextjs">Use Middleware in Next.js</h2> <ul> <li>Use the file <code class="language-plaintext highlighter-rouge">middleware.ts</code> (or .js) in the <strong>root</strong> of your project to define Middleware.</li> <li>Only one <code class="language-plaintext highlighter-rouge">middleware.ts</code> file is supported per project</li> <li>Because Middleware will be invoked for every route in your project, so you should use <code class="language-plaintext highlighter-rouge">matchers</code> to precisely target or exclude specific routes. Or using Conditional Statements in <code class="language-plaintext highlighter-rouge">middleware.ts</code>.</li> </ul> <h3 id="redirect">redirect</h3> <ul> <li><code class="language-plaintext highlighter-rouge">redirect</code> the incoming request to a different URL.</li> <li><code class="language-plaintext highlighter-rouge">rewrite</code> the response by displaying a given URL. The difference between <code class="language-plaintext highlighter-rouge">redirect</code> and <code class="language-plaintext highlighter-rouge">rewrite</code> is that , <code class="language-plaintext highlighter-rouge">rewrite</code> don’t show the handleing URL to user. ```ts //middleware.ts import { NextResponse } from ‘next/server’; import type { NextRequest } from ‘next/server’;</li> </ul> <p>export function authenticationMiddleware(request: NextRequest) { // Check if the user is authenticated if (!request.headers.cookie?.includes(‘authenticated=true’)) { return NextResponse.redirect(‘/login’); } return NextResponse.next(); // Continue to the next Middleware or route handler }</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Response to Client directly
Middleware can produce responses directly by returning a Response or NextResponse instance.
```ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function customResponseMiddleware(request: NextRequest) {
  if (/* Some condition */) {
    return new Response('Custom error message', { status: 400 }); // response to Client directly
  }
  return NextResponse.next(); // pass to the next Middleware or Route handler. 
}
</code></pre></div></div> <h3 id="add-header-and-cookie">Add header and cookie</h3> <p>Middleware can manipulate headers and cookies in both incoming requests and outgoing responses. This is useful for tasks like customizing the response or managing user sessions.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">customHeadersMiddleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">x-current-path</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span> 
  <span class="nx">response</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Middleware-Set-Cookie</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="modifying-request-headers">Modifying Request Headers</h3> <p>You can use Middleware to modify the headers of outgoing API requests. This is often done to add authentication tokens, API keys, or other necessary information to the headers before sending the request.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">apiInterceptorMiddleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Modify the API request headers</span>
  <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bearer myAccessToken</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// Cache API responses for improved performance</span>
  <span class="c1">// Implement caching logic here</span>

  <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="caching-api-responses">Caching API Responses</h3> <p>To improve the performance of your application, you can implement caching of API responses within Middleware. This helps reduce the load on external APIs and speeds up subsequent requests for the same data.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">apiInterceptorMiddleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Check if the response is already cached</span>
  <span class="kd">const</span> <span class="nx">cachedResponse</span> <span class="o">=</span> <span class="cm">/* Implement caching logic here */</span><span class="p">;</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">cachedResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If cached, return the cached response</span>
    <span class="k">return</span> <span class="nx">cachedResponse</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// If not cached, make the API request and cache the response</span>
    <span class="kd">const</span> <span class="nx">apiResponse</span> <span class="o">=</span> <span class="cm">/* Make the API request */</span><span class="p">;</span>

    <span class="c1">// Cache the response for future use</span>
    <span class="cm">/* Cache the response */</span>

    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="mocking-api-calls-for-testing">Mocking API Calls for Testing</h3> <p>Middleware can also be used to mock API calls during testing. This ensures that your tests are not dependent on external services, making them more reliable and faster.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">apiMockMiddleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// In a testing environment, return a mocked response</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span> <span class="na">mockData</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}),</span> <span class="p">{</span>
      <span class="na">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// In other environments, continue to the next Middleware or route handler</span>
    <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">next</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="waituntil-and-nextfetchevent"><code class="language-plaintext highlighter-rouge">waitUntil</code> and <code class="language-plaintext highlighter-rouge">NextFetchEvent</code></h3> <p>The <code class="language-plaintext highlighter-rouge">NextFetchEvent</code> object extends the native <code class="language-plaintext highlighter-rouge">FetchEvent</code> object, and includes the <code class="language-plaintext highlighter-rouge">waitUntil()</code> method. The <code class="language-plaintext highlighter-rouge">waitUntil()</code> method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// middleware.ts</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextFetchEvent</span><span class="p">,</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="kd">function</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">event</span><span class="p">:</span> <span class="nx">NextFetchEvent</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nf">waitUntil</span><span class="p">(</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://my-analytics-platform.com</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span> <span class="na">pathname</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span> <span class="p">}),</span>
    <span class="p">})</span>
  <span class="p">)</span>
 
  <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="faq">FAQ</h2> <h3 id="middleware-and-useformstate">middleware and useFormState?</h3> <p>When I add following code in middleware.ts, then <code class="language-plaintext highlighter-rouge">useFormState</code> won’t work propertly: the return <code class="language-plaintext highlighter-rouge">state</code> always be <code class="language-plaintext highlighter-rouge">undefined</code> which should be the returned value of the actionFn. Why?</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Add a new header x-current-path which passes the path to downstream components</span>
  <span class="kd">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Headers</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">);</span>
  <span class="nx">headers</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">x-current-path</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">NextResponse</span><span class="p">.</span><span class="nf">next</span><span class="p">({</span> <span class="nx">headers</span> <span class="p">});</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Next.js"/><category term="React"/><category term="TypeScript"/><category term="Next.js"/><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Next.js Caching introduction</title><link href="https://benwzj.github.io/blog/2024/nextjs-cache/" rel="alternate" type="text/html" title="Next.js Caching introduction"/><published>2024-10-22T00:00:00+00:00</published><updated>2024-10-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-cache</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-cache/"><![CDATA[<h2 id="caching-overview">Caching Overview</h2> <p>Next.js is a framework, it provide the whole cache solusion. It use React Cache machinisum, also it provide it own machinisum. Basically it can be divided into 4 categories: There are 4 different caching mechanisms:</p> <ul> <li>Request Memoization: based on React extand <code class="language-plaintext highlighter-rouge">fetch</code> function</li> <li>Data Cache: based on Next.js extand <code class="language-plaintext highlighter-rouge">fetch</code> function</li> <li>Full Route Cache: Next.js prepare this at <strong>Build-Time</strong>, at Sever-side</li> <li>Client-side Router Cache: Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to at Client side. Simply say using <code class="language-plaintext highlighter-rouge">&lt;link/&gt;</code></li> </ul> <h2 id="some-concepts">Some Concepts</h2> <ul> <li><code class="language-plaintext highlighter-rouge">fetch</code> API</li> <li>React cache</li> <li>Next.js <code class="language-plaintext highlighter-rouge">unstable_cache</code></li> <li>Server Rendering Strategies <ul> <li><strong>Static Rendering (Default)</strong>: With Static Rendering, routes are rendered at build time, or in the background after data revalidation. The result is cached and can be pushed to a Content Delivery Network (CDN).</li> <li><strong>Dynamic Rendering</strong>: With Dynamic Rendering, routes are rendered for each user at request time. During rendering, if a <em>Dynamic API</em> or <em>uncached data</em> request is discovered, Next.js will <em>switch</em> to dynamically rendering the whole route.</li> <li><strong>Streaming</strong>: Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.</li> <li>As a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when to <strong>cache</strong> or <strong>revalidate</strong> specific data, and you may choose to stream parts of your UI.</li> <li>Dynamic APIs: like <code class="language-plaintext highlighter-rouge">cookies</code>, <code class="language-plaintext highlighter-rouge">headers</code>, or reading the incoming <code class="language-plaintext highlighter-rouge">searchParams</code> from the page props etc. which will automatically make the page render dynamically.</li> </ul> </li> <li>RSC Payload and data are cached separately.</li> </ul> <h2 id="nextjs-caching-foundation">Next.js Caching Foundation</h2> <p>If you use <code class="language-plaintext highlighter-rouge">next dev</code> to run the application. it won’t cache the response. But when you run a production build by using <code class="language-plaintext highlighter-rouge">next build</code>, even for the server components, they will be revaluated during the build, and they will be set to be prerendered by default. (The same thing is applied for route handler.)</p> <p>It can switch to Dynamic Rendering if a <code class="language-plaintext highlighter-rouge">Dynamic API</code> or <code class="language-plaintext highlighter-rouge">uncached data</code> request is discovered.</p> <p>APIs and data caching affect whether a route is statically or dynamically rendered:</p> <figure> <picture> <img src="/assets/img/sever-rendering-switch.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="example-of-using-caching-when-fetching">Example of Using Caching when fetching</h2> <h3 id="fetching-data-on-the-server-with-the-fetch-api">Fetching data on the server with the fetch API</h3> <p>If you are using <code class="language-plaintext highlighter-rouge">fetch</code>, <code class="language-plaintext highlighter-rouge">requests</code> are automatically memoized. This means you can safely call the same URL with the same options, and only one <code class="language-plaintext highlighter-rouge">request</code> will be made. The response from fetch will be automatically cached: <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog')</code> If you do not want to cache the response from fetch, you can do the following: <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog', { cache: 'no-store' })</code></p> <h3 id="caching-data-with-an-orm-or-database">Caching data with an ORM or Database</h3> <p>You can use the <code class="language-plaintext highlighter-rouge">unstable_cache</code> API to cache the response to allow pages to be prerendered when running <code class="language-plaintext highlighter-rouge">next build</code>.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">unstable_cache</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/cache</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">db</span><span class="p">,</span> <span class="nx">posts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/lib/db</span><span class="dl">'</span>
 
<span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="nf">unstable_cache</span><span class="p">(</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nf">select</span><span class="p">().</span><span class="k">from</span><span class="p">(</span><span class="nx">posts</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">{</span> <span class="na">revalidate</span><span class="p">:</span> <span class="mi">3600</span><span class="p">,</span> <span class="na">tags</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>
<span class="p">)</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">allPosts</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getPosts</span><span class="p">()</span>
 
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">allPosts</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">post</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tag posts which can then be invalidated with Incremental Static Regeneration.</p> <h2 id="in-depth-look">In-depth Look</h2> <p>There are 4 different caching mechanisms:</p> <ul> <li>Request Memoization</li> <li>Data Cache</li> <li>Full Route Cache</li> <li>Client-side Router Cache</li> </ul> <p>And they will interact with each other.</p> <p>Here’s a high-level overview:</p> <figure> <picture> <img src="/assets/img/caching-overview.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <blockquote> <p>By default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes are statically rendered and data requests are cached unless you opt out.</p> </blockquote> <h3 id="request-memoization">Request Memoization</h3> <p>This is a React feature, not a Next.js feature. React extends the <code class="language-plaintext highlighter-rouge">fetch</code> API to automatically memoize requests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once.</p> <p>The memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it.</p> <h3 id="data-cache">Data Cache</h3> <p>Next.js has a built-in Data Cache that persists the result of data fetches across incoming server requests and deployments. This is possible because Next.js extends the native <code class="language-plaintext highlighter-rouge">fetch</code> API to allow each request on the <strong>server</strong> to set its own persistent caching semantics.</p> <blockquote> <p>Good to know: In the browser, the <code class="language-plaintext highlighter-rouge">cache</code> option of <code class="language-plaintext highlighter-rouge">fetch</code> indicates how a request will interact with the browser’s HTTP cache, in Next.js, the <code class="language-plaintext highlighter-rouge">cache</code> option indicates how a server-side request will interact with the server’s Data Cache.</p> </blockquote> <p>The Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out.</p> <ul> <li>revalidate: <ul> <li>Time-based Revalidation: <code class="language-plaintext highlighter-rouge">fetch('https://api.example.app/blog', { next: { revalidate: 3600 } })</code></li> <li>On-demand Revalidation: Data can be revalidated on-demand by path (<code class="language-plaintext highlighter-rouge">revalidatePath</code>) or by cache tag (<code class="language-plaintext highlighter-rouge">revalidateTag</code>).</li> </ul> </li> <li>opt-out: using <code class="language-plaintext highlighter-rouge">let data = await fetch('https://api.example.app/blog', { cache: 'no-store' })</code>.</li> </ul> <h4 id="other-than-fetch">Other than fetch</h4> <p>If you are fetch data at server side or using 3rd party lib, you can use <code class="language-plaintext highlighter-rouge">unstable_cache</code> function.</p> <h4 id="differences-between-the-data-cache-and-request-memoization">Differences between the Data Cache and Request Memoization</h4> <p>While both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request.</p> <h3 id="full-route-cache">Full Route Cache</h3> <p>Next.js automatically renders and caches routes at <strong>build time</strong>. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads.</p> <h4 id="how-the-full-route-cache-works">How the Full Route Cache works</h4> <p>To understand how the Full Route Cache works, it’s helpful to look at how React handles rendering, and how Next.js caches the result.</p> <ol> <li>React Rendering on the Server: The rendering work is split into chunks: by individual routes segments and Suspense boundaries.</li> <li>Next.js Caching on the Server (Full Route Cache): The default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation.</li> <li>React Hydration and Reconciliation on the Client: At request time, on the client: <ul> <li>The HTML is used to <strong>immediately show</strong> a fast non-interactive initial preview of the Client and Server Components.</li> <li>The RSC Payload is used to <strong>reconcile</strong> the Client and rendered Server Component trees, and update the DOM.</li> <li>The JavaScript instructions are used to <strong>hydrate</strong> Client Components and make the application interactive.</li> </ul> </li> <li>Next.js Caching on the Client (Router Cache): This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes.</li> <li>Subsequent Navigations: On subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server.</li> </ol> <h4 id="static-and-dynamic-rendering">Static and Dynamic Rendering</h4> <p>This diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data:</p> <figure> <picture> <img src="/assets/img/static-and-dynamic-routes.avif" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="client-side-router-cache">Client-side Router Cache</h3> <p>Next.js has an in-memory client-side router cache that stores the RSC payload of route segments, split by layouts, loading states, and pages.</p> <p>When a user navigates between routes, Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to. This results in instant back/forward navigation, no full-page reload between navigations, and preservation of React state and browser state.</p> <h4 id="duration-and-invalidation">Duration and Invalidation</h4> <p>The cache is stored in the browser’s temporary memory. While a page refresh will clear all cached segments.</p> <p>There are two ways you can invalidate the Router Cache:</p> <ul> <li>In a Server Action: <ul> <li>Revalidating data on-demand by path with (<code class="language-plaintext highlighter-rouge">revalidatePath</code>) or by cache tag with (<code class="language-plaintext highlighter-rouge">revalidateTag</code>)</li> <li>Using <code class="language-plaintext highlighter-rouge">cookies.set</code> or <code class="language-plaintext highlighter-rouge">cookies.delete</code> invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).</li> </ul> </li> <li>Calling <code class="language-plaintext highlighter-rouge">router.refresh</code> will invalidate the Router Cache and make a new request to the server for the current route.</li> </ul> <h2 id="nextjs-apis-affect-caching">Next.js APIs affect caching</h2> <h3 id="link"><code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code></h3> <p>By default, the <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache.</p> <h3 id="routerprefetch"><code class="language-plaintext highlighter-rouge">router.prefetch</code></h3> <p>The prefetch option of the useRouter hook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache.</p> <h3 id="routerrefresh"><code class="language-plaintext highlighter-rouge">router.refresh</code></h3> <p>The refresh option of the useRouter hook can be used to manually refresh a route.</p> <h3 id="fetch"><code class="language-plaintext highlighter-rouge">fetch</code></h3> <p>Data returned from fetch is automatically cached in the Data Cache.</p> <h3 id="fetch-optionscache"><code class="language-plaintext highlighter-rouge">fetch options.cache</code></h3> <p>You can opt individual fetch into caching by setting the cache option to force-cache</p> <h3 id="fetch-optionsnextrevalidate"><code class="language-plaintext highlighter-rouge">fetch options.next.revalidate</code></h3> <p>You can use the next.revalidate option of fetch to set the revalidation period (in seconds) of an individual fetch request. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server.</p> <h3 id="fetch-optionsnexttags-and-revalidatetag"><code class="language-plaintext highlighter-rouge">fetch options.next.tags and revalidateTag</code></h3> <p>Next.js has a cache tagging system for fine-grained data caching and revalidation.</p> <h3 id="revalidatepath"><code class="language-plaintext highlighter-rouge">revalidatePath</code></h3> <p>revalidatePath allows you manually revalidate data and re-render the route segments below a specific path in a single operation. Calling the revalidatePath method revalidates the Data Cache, which in turn invalidates the Full Route Cache.</p> <h3 id="dynamic-apis">Dynamic APIs</h3> <p>Dynamic APIs like <code class="language-plaintext highlighter-rouge">cookies</code> and <code class="language-plaintext highlighter-rouge">headers</code>, and the <code class="language-plaintext highlighter-rouge">searchParams</code> prop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered.</p> <h3 id="segment-config-options">Segment Config Options</h3> <p>The Route Segment Config options can be used to override the route segment defaults or when you’re not able to use the fetch API (e.g. database client or 3rd party libraries).</p> <h3 id="generatestaticparams"><code class="language-plaintext highlighter-rouge">generateStaticParams</code></h3> <p>For dynamic segments (e.g. app/blog/[slug]/page.js), paths provided by generateStaticParams are cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren’t known at build time the first time they’re visited.</p> <h3 id="react-cache-function">React <code class="language-plaintext highlighter-rouge">cache</code> function</h3> <p>The React <code class="language-plaintext highlighter-rouge">cache</code> function allows you to memoize the return value of a function on the server, allowing you to call the same function multiple times while only executing it once.</p> <h2 id="references">References</h2> <ul> <li><a href="https://nextjs.org/docs/app/building-your-application/caching">next.js doc for caching</a></li> </ul>]]></content><author><name></name></author><category term="Next.js"/><category term="Next.js"/><category term="React"/><category term="Router"/><summary type="html"><![CDATA[Caching Overview]]></summary></entry></feed>