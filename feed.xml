<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-27T11:00:38+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Google AI Studio</title><link href="https://benwzj.github.io/blog/2025/google-ai-studio/" rel="alternate" type="text/html" title="Google AI Studio"/><published>2025-03-26T00:00:00+00:00</published><updated>2025-03-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/google-ai-studio</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/google-ai-studio/"><![CDATA[]]></content><author><name></name></author><category term="AI"/><category term="AI"/><category term="Prompt"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">AI Agent</title><link href="https://benwzj.github.io/blog/2025/ai-agent/" rel="alternate" type="text/html" title="AI Agent"/><published>2025-03-05T00:00:00+00:00</published><updated>2025-03-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/ai-agent</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/ai-agent/"><![CDATA[<h2 id="what-is-ai-agent">What is AI Agent</h2> <p>AI Agent is like an expert designed to help with tasks and answer questions. E.g. coding agent, marketing agent, learning agent or just a friend.</p> <p>An artificial intelligence (AI) agent refers to a system or program that is capable of autonomously performing tasks on behalf of a user or another system by designing its workflow and utilizing available tools.</p> <p>AI agents can encompass a wide range of functionalities beyond natural language processing including decision-making, problem-solving, interacting with external environments and executing actions.</p> <p>AI agents can encompass a wide range of functionalities beyond natural language processing including decision-making, problem-solving, interacting with external environments and executing actions.</p> <h2 id="what-is-not-ai-agent">What is NOT AI agent?</h2> <p>When you are using prompt to ask ChatGPT directly, for example, ask it ‘please write out an essay on Topic XXX from start to end in one go’. This is not AI Agent. Probably charGPT still give you some information, but They are possibly not the thing you are looking for. For the complicated topic, Agentic workflow can significantly improve the result. Basically, it is breaking the topic into many steps, it also include iteration, revise, etc.</p> <h3 id="important-terms">Important terms</h3> <ul> <li>circulation</li> <li>external tools</li> </ul> <p>LLM BERT Reflection</p> <p>OpenAI - GPT, DALL·E, Sora</p> <p>Gemini - formerly known as Bard, is a generative artificial intelligence chatbot developed by Google. Based on the large language model (LLM) of the same name, it was launched in 2023 in response to the rise of OpenAI’s ChatGPT. It was previously based on the LaMDA and PaLM LLMs.</p> <p>Anthropic - Claude xAI - Grok Qwen DeepSeek Llama</p>]]></content><author><name></name></author><category term="AI"/><category term="AI"/><summary type="html"><![CDATA[What is AI Agent]]></summary></entry><entry><title type="html">Prompt for LLM</title><link href="https://benwzj.github.io/blog/2025/prompting/" rel="alternate" type="text/html" title="Prompt for LLM"/><published>2025-03-05T00:00:00+00:00</published><updated>2025-03-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/prompting</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/prompting/"><![CDATA[<p>AI is a Revolution! Many part of activities in the society will shift to AI. Now Prompting is obviously a biggest capability, skill to stay informed.</p> <blockquote> <p>Prompt design is the process of creating prompts that elicit the desired response from language models. Writing well structured prompts is an essential part of ensuring accurate, high quality responses from a language model.</p> </blockquote> <h2 id="prompt-design-strategies">Prompt design strategies</h2> <p>Here list some concepts:</p> <h3 id="clear-and-specific-instructions">Clear and Specific instructions</h3> <ul> <li>Give the models instructions on what to do.</li> <li>Make the instructions clear and specific.</li> <li>Specify any constraints or formatting requirements for the output.</li> </ul> <h3 id="include-few-shot-examples">Include Few-shot Examples</h3> <p>We recommend to always include few-shot examples in your prompts. Prompts without few-shot examples are likely to be less effective. In fact, you can remove instructions from your prompt if your examples are clear enough in showing the task at hand.</p> <h3 id="add-contextual-information">Add contextual information</h3> <ul> <li>Include information (context) in the prompt that you want the model to use when generating a response.</li> <li>Give the model instructions on how to use the contextual information.</li> </ul> <h3 id="add-prefixes">Add prefixes</h3> <p>A prefix is a word or phrase that you add to the prompt content that can serve several purposes, depending on where you put the prefix:</p> <ul> <li>Input prefix: Adding a prefix to the input signals semantically meaningful parts of the input to the model. For example, the prefixes “English:” and “French:” demarcate two different languages.</li> <li>Output prefix: Even though the output is generated by the model, you can add a prefix for the output in the prompt. The output prefix gives the model information about what’s expected as a response. For example, the output prefix “JSON:” signals to the model that the output should be in JSON format.</li> <li>Example prefix: In few-shot prompts, adding prefixes to the examples provides labels that the model can use when generating the output, which makes it easier to parse output content.</li> </ul> <h3 id="let-the-model-complete-partial-input">Let the model complete partial input</h3> <ul> <li>If you give the model a partial input, the model completes that input based on any available examples or context in the prompt.</li> <li>Having the model complete an input may sometimes be easier than describing the task in natural language.</li> <li>Adding a partial answer to a prompt can guide the model to follow a desired pattern or format.</li> </ul> <h3 id="break-down-prompts-into-simple-components">Break down prompts into simple components</h3> <ul> <li>Break down complex instructions into a prompt for each instruction and decide which prompt to apply based on the user’s input.</li> <li>Break down multiple sequential steps into separate prompts and chain them such that the output on the preceding prompt becomes the input of the following prompt.</li> <li>Break down parallel tasks and aggregate the responses to produce the final output.</li> </ul> <h3 id="experiment-with-different-parameter-values">Experiment with different parameter values</h3> <p>There are some common parameters:</p> <ul> <li>Max output tokens: Maximum number of tokens that can be generated in the response.</li> <li>Temperature</li> <li>Top-K</li> <li>Top-P</li> </ul> <p>Temperature, Top-K and Top-P change how the model selects tokens for output.</p> <h3 id="prompt-iteration-strategies">Prompt iteration strategies</h3> <p>Using different words or phrasing in your prompts often yields different responses from the model even though they all mean the same thing.</p> <h3 id="fallback-responses">Fallback responses</h3> <p>A fallback response is a response returned by the model when either the prompt or the response triggers a safety filter. An example of a fallback response is “I’m not able to help with that, as I’m only a language model.”</p> <p>If the model responds with a fallback response, try increasing the temperature.</p> <h3 id="things-to-avoid">Things to avoid</h3> <ul> <li>Avoid relying on models to generate factual information.</li> <li>Use with care on math and logic problems.</li> </ul> <h2 id="useful-tips-for-prompt">Useful tips for Prompt</h2> <ul> <li>Use persona, the role of AI itself. For example, ‘act as anime expert to suggest a anime gife for my friend birthday gift’.</li> <li>You can order the data into a table.</li> <li>If you can provide context, references, that will be better.</li> <li>Do Promting with one word: TCREI (Task Context Refercences Evaluate Iterate).</li> <li>Iteration have some tips (RSTI): <ul> <li>Revisit the prompt framework.</li> <li>Separate prompt into shorter ones.</li> <li>Trying different phrasing or switching to an analogous task.</li> <li>Introduce constrain</li> </ul> </li> <li>Prompt chaining <ul> <li>Chain of thought prompting</li> <li>Tree of thought prompting</li> </ul> </li> <li>if you stuck with prompt somewhere, you can ask AI to help with Prompt for you. This is call meta prompting.</li> </ul> <h3 id="example">Example</h3> <figure> <picture> <img src="/assets/img/prompt-example.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="file-prompting-strategies">File prompting strategies</h2> <p>Like Gemini, ChatGPT, Clause models, Most LLMs are built to handle various types of input data, including text,files, images, and audio.</p> <p>AI can understand files, images, videos just like you! It can be even better than you.</p> <p>When you do this:</p> <figure> <picture> <img src="/assets/img/timetable.png" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><code class="language-plaintext highlighter-rouge">Parse the time and city from the airport board shown in this image into a list.</code> AI can response this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 10:50 Moscow
- 11:05 Edinburgh
- 11:05 London
- 11:10 Bucharest
- 11:30 Kiev
- 11:35 Dublin
- 11:45 East Midlands
- 12:15 Sofia
- 12:30 London
- 12:30 Newcastle
- 12:40 St Petersburg
- 12:40 London
- 12:45 Manchester
</code></pre></div></div> <h2 id="imagen-prompt-guide">Imagen prompt guide</h2>]]></content><author><name></name></author><category term="AI"/><category term="AI"/><category term="Prompt"/><summary type="html"><![CDATA[AI is a Revolution! Many part of activities in the society will shift to AI. Now Prompting is obviously a biggest capability, skill to stay informed.]]></summary></entry><entry><title type="html">NoSQL Database Overview</title><link href="https://benwzj.github.io/blog/2025/nosql/" rel="alternate" type="text/html" title="NoSQL Database Overview"/><published>2025-02-13T00:00:00+00:00</published><updated>2025-02-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/nosql</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/nosql/"><![CDATA[<h2 id="what-is-nosql">What is NoSQL</h2> <p>When talking about NoSQL database, there are many concepts are based on or compare to SQL database concepts. SQL database have much longer history and it is very mature.</p> <p>Here are some points for NoSQL database:</p> <ul> <li>NoSQL databases store data differently than relational tables.</li> <li>It come out mostly because storage is getting cheaper.</li> <li>It store data in a more natural and flexible way than relational tables.</li> <li>The main types are document, key-value, wide-column, and graph.</li> <li>You can say it is Schemaless Database.</li> <li>They are BASE compliance. And some can be ACID compliance as well.</li> </ul> <h3 id="brief-history-of-nosql-databases">Brief history of NoSQL databases</h3> <p>NoSQL databases emerged in the late 2000s as <strong>the cost of storage dramatically decreased</strong>. Gone were the days of needing to create a complex, difficult-to-manage data model in order to avoid data duplication. NoSQL databases optimized for developer productivity.</p> <p>In the early 2000s, a paper published by Google on BigTable, the wide-column database, explored the wide range of possibilities for a distributed storage system. 2009 saw a major rise in NoSQL databases, with two key document-oriented databases, MongoDB and CouchDB, coming into the picture.</p> <h3 id="features">Features</h3> <p>At a high level, NoSQL databases typically have the following features:</p> <ul> <li>Distributed computing</li> <li>Easy to scale out</li> <li>Flexible schemas and rich query language</li> <li>Ease of use for developers</li> <li>Partition tolerance</li> <li>High availability</li> </ul> <h2 id="base-compliance">BASE compliance</h2> <p>NoSQL databases are BASE compliant, i.e., (Basic Availability Soft state Eventual consistency).</p> <ul> <li>Basic availability refers to the ability of the system to tolerate a partial failure (like a loss of a node).</li> <li>Soft state means that the system allows temporary inconsistencies before eventually achieving consistency automatically over time.</li> </ul> <p>BASE compliance ensures high availability, faster data processing, scalability, and flexibility. However, MongoDB can also be configured to provide multi-document <strong>ACID compliance</strong>(Atomicity, Consistency, Isolation, and Durability).</p> <h2 id="partition">Partition</h2> <p>In NoSQL databases, a partition (also known as a shard in MongoDB) is a way to divide the database into smaller, more manageable pieces. Each partition contains a subset of the data and is managed by a specific server or set of servers. This approach helps in distributing the data across multiple servers, which can improve performance, scalability, and fault tolerance.</p> <p>In MongoDB, a sharded database is an example of a partitioned database. Here, the data is divided into shards, and each shard is managed by a set of servers. Each shard has a primary server that handles all the writes and reads, and secondary servers that replicate the data for redundancy and failover.</p> <h3 id="partition-key">Partition Key</h3> <p>The partition key (or shard key) is used to determine how the data is distributed across the shards. This key is crucial for ensuring an even distribution of data and optimizing query performance.</p> <p>For example, in a MongoDB sharded cluster, each shard maintains exclusive control of its partition of the data. If the primary server of a shard fails, one of the secondary servers is automatically elected to become the primary, ensuring high availability.</p> <p>In summary, a partition in NoSQL databases is a method to distribute data across multiple servers to enhance performance, scalability, and reliability. The partition key is essential for distributing data across the cluster and ensuring efficient query performance.</p> <p>When selecting a shard key, it’s important to consider the following:</p> <ul> <li>The shard key should be chosen to ensure an even distribution of data across the shards.</li> <li>The shard key should support the most common query patterns to optimize performance.</li> <li>The shard key should be immutable if it includes the _id field.</li> </ul> <h2 id="common-misconception">Common Misconception</h2> <h3 id="nosql-databases-dont-store-relationship-data-well">NoSQL databases don’t store relationship data well</h3> <p>NoSQL databases can store relationship data — they just store it differently than relational databases do. In fact, many find modeling relationship data in NoSQL databases to be easier than in relational databases because related data doesn’t have to be split between tables. NoSQL data models allow related data to be nested within a single data structure.</p> <h3 id="nosql-databases-dont-support-acid-transactions">NoSQL databases don’t support ACID transactions</h3> <p>Some NoSQL databases, like MongoDB, do, in fact, support ACID transactions.</p> <h2 id="schemaless-database">Schemaless Database</h2> <p>Schemaless database is compare to traditional SQL database. A schemaless database, like MongoDB, does not have these up-front constraints, mapping to a more ‘natural’ database. Any data, formatted or not, can be stored in a non-tabular NoSQL type of database.</p> <h3 id="how-does-a-schemaless-database-work">How does a schemaless database work?</h3> <p>In schemaless databases, information is stored in JSON-style documents which can have varying sets of fields with different data types for each field. So, a collection could look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="p">{</span><span class="w"> 
        </span><span class="err">name</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">“Joe”</span><span class="p">,</span><span class="w"> </span><span class="err">age</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="err">interests</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">‘football’</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">{</span><span class="w"> 
        </span><span class="err">name</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">“Kate”</span><span class="p">,</span><span class="w"> </span><span class="err">age</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="mi">25</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>As you can see, the data itself normally has a fairly consistent structure. With the schemaless MongoDB database, there is some additional structure — the system namespace contains an explicit list of collections and indexes. Collections may be implicitly or explicitly created — indexes must be explicitly declared.</p> <h2 id="mongodb">MongoDB</h2> <p>The way of using MongoDB is similar to SQL database like MySql. It provide MongoDB Compass to operate your database. MongoDB Shell can run it’s APIs just like running SQL for you SQLDB.</p> <h3 id="terms">Terms</h3> <ul> <li>MongoDB Compass: It is a software which is database window interface, something like ‘MySQLWorkbench’.</li> <li>MongoDB Shell (mongosh): Can run commands, Like <code class="language-plaintext highlighter-rouge">db.movies.find( { "title": "Titanic" } )</code>.</li> <li>Collection: similar to table in SQL DB</li> <li>Documents: similar to row in SQL DB</li> <li>Field: similar to column in SQL DB</li> <li>Views: A MongoDB view is a read-only queryable object whose contents are defined by an aggregation pipeline on other collections or views.</li> <li>Query APIs: comprises two ways to query data in MongoDB: <ul> <li><code class="language-plaintext highlighter-rouge">find()</code> Operations</li> <li>Aggregation pipelines</li> </ul> </li> <li>CRUD APIs: like <code class="language-plaintext highlighter-rouge">updateOne(), updateMany() insertOne(), deleteOne(), find()</code>, etc.</li> <li>Triggers: support Triggers.</li> </ul> <h3 id="find">find()</h3> <p>When you get to know how to use <code class="language-plaintext highlighter-rouge">find()</code>, other CRUD APIs are similar.</p> <p>Use <code class="language-plaintext highlighter-rouge">find</code> command: <code class="language-plaintext highlighter-rouge">db.movies.find( { "title": "Titanic" } )</code>.</p> <ul> <li>You can ‘Project Fields’ for your return by using ‘Project Selectors’.</li> <li>You can filter document for your return by using ‘Query Selectors’.</li> <li>You can sort, limit return.</li> </ul> <h4 id="matches-any-of-the-values-specified-in-an-array-or-not-in-array">Matches any of the values specified in an array or NOT in array</h4> <p><code class="language-plaintext highlighter-rouge">$in</code> and <code class="language-plaintext highlighter-rouge">$nin</code></p> <p>For example: <code class="language-plaintext highlighter-rouge">db.movies.find( { rated: { $in: [ "PG", "PG-13" ] } } )</code> This operation corresponds to the following SQL statement: <code class="language-plaintext highlighter-rouge">SELECT * FROM movies WHERE rated in ("PG", "PG-13")</code></p> <h4 id="matches-values-that-are-equal-or-greater-or-less-to-a-specified-value">Matches values that are equal or greater or less to a specified value.</h4> <ul> <li><code class="language-plaintext highlighter-rouge">$eq</code></li> <li><code class="language-plaintext highlighter-rouge">$gt</code></li> <li><code class="language-plaintext highlighter-rouge">$gte</code></li> <li><code class="language-plaintext highlighter-rouge">$lt</code></li> <li><code class="language-plaintext highlighter-rouge">$lte</code></li> <li><code class="language-plaintext highlighter-rouge">$ne</code></li> </ul> <p>For example: <code class="language-plaintext highlighter-rouge">db.movies.find( { countries: "Mexico","imdb.rating": { $gte: 7 } } )</code></p> <h4 id="logical-operators">Logical Operators</h4> <ul> <li><code class="language-plaintext highlighter-rouge">$and</code></li> <li><code class="language-plaintext highlighter-rouge">$or</code></li> </ul> <p>For example: <code class="language-plaintext highlighter-rouge">db.movies.find( { $and: [ {countries: "Mexico"} , {"imdb.rating": { $gte: 7 }} ] } )</code></p> <h4 id="count">count()</h4> <ul> <li>Returns the count of documents that would match a find() query for the collection or view.</li> <li>The db.collection.count() method does not perform the find() operation but instead counts and returns the number of results that match a query.</li> <li><code class="language-plaintext highlighter-rouge">db.collection.count(query, options)</code></li> <li>Example: <code class="language-plaintext highlighter-rouge">db.collection.find( { a: 5, b: 5 } ).count()</code></li> </ul> <h3 id="aggregation">Aggregation</h3> <p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p> <ul> <li>Group values from multiple documents together.</li> <li>Perform operations on the grouped data to return a single result.</li> <li>Analyze data changes over time.</li> </ul> <h4 id="aggregate-pipelines-example">Aggregate Pipelines Example:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },
   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )
</code></pre></div></div> <h5 id="the-match-stage">The <code class="language-plaintext highlighter-rouge">$match</code> stage:</h5> <p>Filters the pizza order documents to pizzas with a size of medium. Passes the remaining documents to the $group stage.</p> <h5 id="the-group-stage">The <code class="language-plaintext highlighter-rouge">$group</code> stage:</h5> <p>Groups the remaining documents by pizza name. Uses <code class="language-plaintext highlighter-rouge">$sum</code> to calculate the total order quantity for each pizza name. The total is stored in the totalQuantity field returned by the aggregation pipeline.</p> <h4 id="what-is-aggregate-pipelines">What is Aggregate Pipelines</h4> <p>An aggregation pipeline consists of one or more stages that process documents:</p> <ul> <li>Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.</li> <li>The documents that are output from a stage are passed to the next stage.</li> <li>An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.</li> </ul> <h4 id="aggregate-pipelines-stages">Aggregate Pipelines Stages</h4> <p>Each States have a name, like <code class="language-plaintext highlighter-rouge">$match</code>, <code class="language-plaintext highlighter-rouge">$group</code>, <code class="language-plaintext highlighter-rouge">$sort</code> etc.</p> <h3 id="distinct">distinct()</h3> <p><code class="language-plaintext highlighter-rouge">db.collection.distinct()</code> Finds the distinct values for a specified field across a single collection or view and returns the results in an array.</p> <p>This can help you to understand the data in the collection.</p> <h3 id="indexes">Indexes</h3> <p>Indexes support the efficient execution of queries in MongoDB.</p> <blockquote> <p>Concept Index in NoSQL is different from SQL database. In MongoDB, developer usually will create many indexes to improve queries. And when you create indexes MongoDB will product index size for them.</p> </blockquote> <h4 id="index-features">Index Features</h4> <ul> <li>Although indexes improve query performance, adding an index has negative performance impact for write operations.</li> <li>Indexes don’t have to be unique.</li> <li>Compound index is common.</li> <li>Indexes store a small portion of the collection’s data set in an easy to traverse form.</li> <li>The index stores the value of a specific field or set of fields, ordered by the value of the field.</li> <li>You can easily create indexex for a collection.</li> <li>TTL indexes are special single-field indexes that MongoDB can use to automatically remove documents from a collection after a certain amount of time or at a specific clock time.</li> </ul> <h4 id="compound-indexing-strategies-the-esr-equality-sort-range-rule">Compound Indexing Strategies: The ESR (Equality, Sort, Range) Rule</h4> <p>In order to improve query performance, There is a rule when using index! It is ESR Rule.</p> <p>Understand ESR Rule:</p> <p>For example, In a CAR collection, your query is: <code class="language-plaintext highlighter-rouge">db.cars.find( { model: "Cordoba" } )</code> And you want it to be sorted by model: <code class="language-plaintext highlighter-rouge">db.cars.find( { manufacturer: "GM" } ).sort( { model: 1 } )</code> And also you have some range filter: like cost more than $20000: <code class="language-plaintext highlighter-rouge">db.cars.find( { manufacturer: 'Ford', cost: { $gt:10000 } } ).sort( { model: 1 } )</code></p> <blockquote> <p>What is ‘Range’? Range refer to Range query, Range filter. using <code class="language-plaintext highlighter-rouge">$gte</code> or <code class="language-plaintext highlighter-rouge">$lt</code> etc.</p> </blockquote> <p>Following the ESR rule, the optimal index for the example query is: <code class="language-plaintext highlighter-rouge">db.cars.createIndex( { manufacturer: 1, model: 1, cost: 1 } )</code></p> <h5 id="key-points-about-the-esr-rule">Key points about the ESR rule:</h5> <ul> <li>Equality first: When creating a compound index, the field that is most frequently used in equality comparisons (like filtering on a specific value) should be placed first.</li> <li>Sort next: Following the equality field, the field that is often used for sorting operations (like ordering results by a certain criteria) should be added to the index.</li> <li>Range last: Finally, if a range query is needed on a field (like finding values within a specific range), that field should be placed last in the compound index.</li> </ul> <h3 id="query-plan">Query Plan</h3> <p>MongoDB have Query Plan concept</p> <p>For any given query, the MongoDB query planner chooses and caches the most efficient query plan given the available indexes. To evaluate the efficiency of query plans, the query planner runs all candidate plans during a trial period. In general, the winning plan is the query plan that produces the most results during the trial period while performing the least amount of work.</p> <p>To view the query plan information for a given query, you can use: <code class="language-plaintext highlighter-rouge">db.collection.explain().find({manufacturer: 'Ford'})</code></p> <p>You can check your <code class="language-plaintext highlighter-rouge">Index</code> effection by view the <code class="language-plaintext highlighter-rouge">Query Plan</code>. For example, when you <code class="language-plaintext highlighter-rouge">find({manufacturer: 'Ford'})</code> before the create the <code class="language-plaintext highlighter-rouge">manufacturer</code> index, MongoDB is using <code class="language-plaintext highlighter-rouge">COLLSCAN</code>. But when you create the index, MonboDB is using <code class="language-plaintext highlighter-rouge">IXSCAN</code>.</p> <h3 id="data-types">Data types</h3> <ul> <li>Object ID − This datatype is used to store the document’s ID. Like: <code class="language-plaintext highlighter-rouge">_id = ObjectId()</code></li> <li>String − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.</li> <li>Array − This type is used to store arrays or list or multiple values into one key.</li> <li>Integer − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.</li> <li>Boolean − This type is used to store a boolean (true/ false) value.</li> <li>Double − This type is used to store floating point values.</li> <li>Timestamp − ctimestamp. This can be handy for recording when a document has been modified or added.</li> <li>Object − This datatype is used for embedded documents.</li> <li>Null − This type is used to store a Null value.</li> <li>Date − This datatype is used to store the current date or time in UNIX time format. You can specify your own. Like <code class="language-plaintext highlighter-rouge">new Date(”2002-01-30”)</code></li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://www.mongodb.com/nosql-explained">mongoDB nosql-explained</a></li> <li><a href="https://www.mongodb.com/unstructured-data/schemaless">what is schemaless</a></li> </ul>]]></content><author><name></name></author><category term="Database"/><category term="Database"/><category term="SQL"/><summary type="html"><![CDATA[What is NoSQL]]></summary></entry><entry><title type="html">REST API Overview</title><link href="https://benwzj.github.io/blog/2025/restful/" rel="alternate" type="text/html" title="REST API Overview"/><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/restful</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/restful/"><![CDATA[<h2 id="what-is-rest-api">What is REST API</h2> <p>REpresentational State Transfer (REST) is an architectural style that defines a set of constraints to be used for creating web services.</p> <h3 id="features">Features</h3> <ul> <li>A web API that obeys the REST constraints is informally described as RESTful.</li> <li>REST is a software architectural style.</li> <li>REST API is a way of accessing web services in a simple and flexible way without having any processing knowledge.</li> <li>In a RESTful Web service, requests made to a resource’s URI elicit a response with a payload formatted in JSON, or other format.</li> <li>supports JSON and XML languages.</li> <li>Provides error information to the developer and the reason for the error</li> <li>REST API’s are stateless</li> <li>A uniform interface is crucial to ensure decoupling the client from server and allow independent evolution of the application.</li> <li>REST operates entirely on the HTTP protocol</li> <li>Optimized Code Encapsulation</li> </ul> <h3 id="rest-constraints-principles">REST constraints (principles)</h3> <ul> <li>client–server architecture,</li> <li>statelessness,</li> <li>cacheability,</li> <li>use of a layered system,</li> <li>support for code on demand,</li> <li>and using a uniform interface.</li> </ul> <p>These principles must be followed for the system to be classified as RESTful.</p> <p>The classic example of a non-RESTful system using HTTP is something which treats HTTP as if it was a transport protocol, and with every request sends a POST of data to the same URI which is then acted upon in an RPC-like manner, possibly with the connection itself having shared state. For example, GraphQL is not RESTful.</p> <h2 id="rest-and-cors">REST and CORS</h2> <h2 id="some-terms">Some terms</h2> <ul> <li><strong>RESTful Web services</strong> allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations.</li> <li><strong>SOAP</strong> is a protocol. Unlike SOAP-based Web services, there is no “official” standard for RESTful Web APIs. This is because REST is an architectural style. It is not protocol.</li> <li><strong>Swagger</strong> is an Interface Description Language for describing RESTful APIs expressed using JSON. Swagger is used together with a set of open-source software tools to design, build, document, and use RESTful web services. Swagger includes automated documentation, code generation (into many programming languages), and test-case generation.</li> <li><strong>HTTP API</strong>: A RESTful API adheres ALL the REST constraints set out in its “format” documentation. A HTTP API is ANY API that makes use of HTTP as their transfer protocol. This means that even SOAP can be considered a HTTP API, as long as it will use HTTP for transport. RESTful API can based on HTTP or other protocol. Most HTTP APIs can be very close to becoming a truly RESTful API. Depend on the <a href="https://martinfowler.com/articles/richardsonMaturityModel.html">Glory of REST Model</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="REST"/><category term="Http"/><category term="CORS"/><summary type="html"><![CDATA[What is REST API]]></summary></entry><entry><title type="html">Python Flask Overview</title><link href="https://benwzj.github.io/blog/2025/py-flask/" rel="alternate" type="text/html" title="Python Flask Overview"/><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/py-flask</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/py-flask/"><![CDATA[<h2 id="what-is-flask">What is Flask</h2> <p>Flask is a small and lightweight Python web framework that provides useful tools and features that make creating web applications in Python.</p> <ul> <li>Flask provides tools, libraries, and technologies for building web applications</li> <li>Flask integrates with databases to allow developers to store and access data</li> <li>Flask provides templating features to help developers design their applications</li> <li>Flask provides routing features to help developers design their applications</li> </ul> <h2 id="basic-example">Basic example</h2> <p>Install Flask:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. python -m pip install requests
2. python -m pip install flask==2.3.2
3. python -m pip install flask-mysql
4. python -m pip install flask_cors
5. python -m pip install flask_httpauth
6. python -m pip install cryptography
</code></pre></div></div> <p>Run a python app:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/hello/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
  <span class="k">return</span> <span class="sh">'</span><span class="s">&lt;h1&gt;Hello World&lt;/h1&gt;</span><span class="sh">'</span>

<span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">localhost</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">3001</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="REST"/><category term="Python"/><summary type="html"><![CDATA[What is Flask]]></summary></entry><entry><title type="html">Understand CORS</title><link href="https://benwzj.github.io/blog/2025/cors/" rel="alternate" type="text/html" title="Understand CORS"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/cors</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/cors/"><![CDATA[<p>Same-Origin Policy(SOP) and Cross-Origin Resource Sharing(CORS) Mechanism are all <strong>Web Browser based</strong>. That means It is Browser to implement them.</p> <h2 id="what-is-sop">What is SOP</h2> <p>The Same-Origin Policy(SOP) is a browser security feature that restricts <strong>HOW</strong> documents and scripts on one origin can interact with resources on another origin.</p> <p>It restricts scripts on a web page from freely making cross-origin requests. It is default behavior of browsers. It stops malicious websites from accessing other websites, protecting against attacks such as <em>cross-site scripting (XSS)</em>, <em>cross-site request forgery (CSRF)</em>, and <em>session/cookie theft</em> etc.</p> <blockquote> <p>A ‘cross-origin request’ is a web request (either fetch or XMLHttpRequest) that is initiated from a script on one domain (e.g., mysite.com) to another domain (e.g., othersite.com). Browsers will detect whether a request is cross-origin or same-origin request.</p> </blockquote> <p>By default, SOP blocks cross-origin HTTP requests initiated by scripts. There are several use cases that require cross-origin script access; for example, Content Delivery Networks (CDNs) that provide hosting for JavaScript/CSS libraries and public API endpoints.</p> <p>Browsers are using CORS to handle cross-origin script access.</p> <h2 id="what-is-cors">What is CORS</h2> <p>Cross-Origin Resource Sharing (CORS) is an <strong>HTTP-header based</strong> mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a “preflight” request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.</p> <blockquote class="block-warning"> <p>CORS is Web Browser based mechanism</p> </blockquote> <p>To understans CORS, you need to clear three parties:</p> <ol> <li>Browser</li> <li>Domain A</li> <li>Domain B</li> </ol> <p>CORS defines a way for <strong>client web applications</strong> or script that are loaded in domain A to interact with resources in Domain B.</p> <h3 id="basic-logic-on-how-cors-work">Basic logic on How CORS work</h3> <p>A cross-origin request example: the front-end JavaScript code served from ‘https://domain-a.com’ uses <code class="language-plaintext highlighter-rouge">fetch()</code> to make a request for ‘https://domain-b.com/data.json’.</p> <p>Browsers will restrict this request! The APIs <code class="language-plaintext highlighter-rouge">fetch()</code> and <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins <strong>includes the right CORS headers</strong>.</p> <h3 id="main-points">Main points</h3> <ul> <li>It is Domain B who implement CORS policy to specify/declare which origins are allowed to make cross-origin requests to it’s resource. For example set up The HTTP response headers <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code> to define the non-same origins that are allowed to make requests to pages on your domain.</li> <li>The cross-origin request from Domain A won’t be fulfilled unless the Domain B origin allows for the request.</li> <li>CORS is based on HTTP headers.</li> <li>CORS is Web Browser based mechanism.</li> <li>The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers. Browsers use CORS in APIs such as <code class="language-plaintext highlighter-rouge">fetch()</code> or <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> to mitigate the risks of cross-origin HTTP requests.</li> <li>Developers making cross-origin requests do not have to set any cross-origin sharing request headers programmatically. Browsers do that for you.</li> </ul> <h2 id="cors-three-scenarios">CORS three scenarios</h2> <p>Here are three scenarios that demonstrate how Cross-Origin Resource Sharing works.</p> <h3 id="simple-requests">Simple requests</h3> <p>A simple request is one that meets some conditions, like: using GET or HEAD or POST methods; etc. A simple requests don’t trigger a CORS preflight.</p> <p>Make request like below, Browser will set up the header for you:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://bar.other</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">fetchPromise</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>In response, the server returns a <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code> header with <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: *</code>, which means that the resource can be accessed by any origin.</p> <h3 id="preflighted-requests">Preflighted requests</h3> <p>Unlike simple requests, for “preflighted” requests the browser first sends an HTTP request using the <code class="language-plaintext highlighter-rouge">OPTIONS</code> method to the resource on the other origin, in order to determine if the actual request is safe to send. Such cross-origin requests are preflighted since they may have implications for user data.</p> <p>Make request:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://bar.other/doc</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cors</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/xml</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">X-PINGOTHER</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pingpong</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">fetchPromise</span><span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Browser send preflight request with the OPTIONS method for you. along with the OPTIONS request, two other request headers are sent:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type,x-pingother
</code></pre></div></div> <p>Domain B need to response, like <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: https://foo.example</code> to go ahead. And then the real Request is coming.</p> <h3 id="requests-with-credentials">Requests with credentials</h3> <p>To ask for a fetch() request to include credentials, set the credentials option to “include”.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://bar.other/resources/credentialed-content/</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Request</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="na">credentials</span><span class="p">:</span> <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
<span class="nx">fetchPromise</span><span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS on mozilla</a>.</li> </ul>]]></content><author><name></name></author><category term="HTML"/><category term="CORS"/><category term="Fetch"/><category term="Http"/><summary type="html"><![CDATA[Same-Origin Policy(SOP) and Cross-Origin Resource Sharing(CORS) Mechanism are all Web Browser based. That means It is Browser to implement them.]]></summary></entry><entry><title type="html">Some Build-in lib in Python</title><link href="https://benwzj.github.io/blog/2024/py-buildin-lib/" rel="alternate" type="text/html" title="Some Build-in lib in Python"/><published>2024-12-29T00:00:00+00:00</published><updated>2024-12-29T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-buildin-lib</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-buildin-lib/"><![CDATA[<h2 id="random-module">Random module</h2> <p>This module implements pseudo-random number generators for various distributions.</p> <ul> <li>For integers, there is uniform selection from a range.</li> <li>For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.</li> <li>Almost all module functions depend on the basic function random(), which generates a random float uniformly in the half-open range 0.0 &lt;= X &lt; 1.0.</li> <li>Python uses the Mersenne Twister as the core generator.</li> <li>It produces 53-bit precision floats and has a period of 2**19937-1.</li> <li>It is completely unsuitable for cryptographic purposes.</li> <li>For security or cryptographic uses, see the secrets module.</li> <li>The functions supplied by this module are actually bound methods of a hidden instance of the random.Random class. You can instantiate your own instances of Random to get generators that don’t share state.</li> </ul> <h3 id="bookkeeping-functions">Bookkeeping functions</h3> <h4 id="randomseedanone-version2"><code class="language-plaintext highlighter-rouge">random.seed(a=None, version=2)</code></h4> <p>Initialize the random number generator.</p> <ul> <li>If a is omitted or None, the current system time is used.</li> <li>If a is an int, it is used directly.</li> </ul> <h4 id="randomgetstate"><code class="language-plaintext highlighter-rouge">random.getstate()</code></h4> <p>Return an object capturing the current internal state of the generator. This object can be passed to setstate() to restore the state.</p> <h4 id="randomsetstatestate"><code class="language-plaintext highlighter-rouge">random.setstate(state)</code></h4> <h3 id="functions-for-integers">Functions for integers</h3> <h4 id="randomrandrangestart-stop-step">random.randrange(start, stop[, step])</h4> <p>Return a randomly selected element from range(start, stop, step)</p> <h3 id="functions-for-sequences">Functions for sequences</h3> <h4 id="randomchoiceseq">random.choice(seq)</h4> <p>Return a random element from the non-empty sequence seq.</p> <h4 id="randomshufflex">random.shuffle(x)</h4> <p>Shuffle the sequence x in place. (please note that, it will mutate the sequence).</p> <ul> <li>To shuffle an immutable sequence and return a new shuffled list, use sample(x, k=len(x)) instead.</li> </ul> <h4 id="randomsamplepopulation-k--countsnone">random.sample(population, k, *, counts=None)</h4> <p>Return a k length, new list of unique elements chosen from the population sequence or set. Used for random sampling without replacement.</p> <h3 id="real-valued-distributions">Real-valued distributions</h3> <h4 id="randomrandom">random.random()</h4> <p>Return the next random floating point number in the range <code class="language-plaintext highlighter-rouge">0.0 &lt;= X &lt; 1.0</code></p> <h4 id="randomuniforma-b">random.uniform(a, b)</h4> <p>Return a random floating point number N such that <code class="language-plaintext highlighter-rouge">a &lt;= N &lt;= b</code> for <code class="language-plaintext highlighter-rouge">a &lt;= b</code> and <code class="language-plaintext highlighter-rouge">b &lt;= N &lt;= a</code> for <code class="language-plaintext highlighter-rouge">b &lt; a</code>.</p> <h2 id="heapq">heapq</h2> <p>(Still don’t get the main point of this module and heap)</p> <p>This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.</p> <h3 id="what-is-heap">What is heap</h3> <ul> <li>Heaps are binary trees for which every parent node has a value less than or equal to any of its children.</li> <li>Heaps are arrays for which <code class="language-plaintext highlighter-rouge">a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2]</code> for all k, counting elements from 0.</li> <li>For the sake of comparison, non-existing elements are considered to be infinite.</li> <li>The interesting property of a heap is that its smallest element is always the root, <code class="language-plaintext highlighter-rouge">heap[0]</code>.</li> <li>In a word, heaps are useful memory structures to know.</li> </ul> <h3 id="functions">functions</h3> <h4 id="heapqnlargestn-iterable-keynone">heapq.nlargest(n, iterable, key=None)</h4> <p>Return a list with the n largest elements from the dataset defined by iterable.</p> <h2 id="json">json</h2> <p>json exposes an API familiar to users of the standard library marshal and pickle modules.</p> <h3 id="functions-1">Functions</h3> <h4 id="jsonloads-and-jsonload">json.loads() and json.load()</h4> <p>conversion table:</p> <figure> <picture> <img src="/assets/img/py-json-load.jpg" class="img-fluid rounded z-depth-1" width="35%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="jsonloadss-">json.loads(s, *)</h4> <p>Deserialize s (a str, bytes or bytearray instance containing a JSON document) to a Python object using this conversion table.</p> <p>For example, If you have a JSON string, you can parse it by using the json.loads() method. it return a Python dictionary.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="s">:30, </span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">New York</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span>
<span class="n">dct</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h4 id="jsonloadfp-">json.load(fp, *)</h4> <p>Deserialize fp (a .read()-supporting text file or binary file containing a JSON document) to a Python object using this conversion table.</p> <h4 id="jsondumpsobj-">json.dumps(obj, *)</h4> <p>Serialize obj to a JSON formatted str using this conversion table.</p> <h4 id="jsondumpobj-fp-">json.dump(obj, fp, *)</h4> <p>Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.</p> <h3 id="classes">Classes</h3> <p>You can create subclass of these defined classes:</p> <h4 id="class-jsonjsondecoder">class json.JSONDecoder</h4> <p>Simple JSON decoder.</p> <h4 id="method-decodes">method: decode(s)</h4> <p>Return the Python representation of s (a str instance containing a JSON document).</p> <h4 id="class-jsonjsonencoder">class json.JSONEncoder</h4> <p>Extensible JSON encoder for Python data structures.</p> <h4 id="method-defaulto">method: default(o)</h4> <p>Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError).</p> <h4 id="encodeo">encode(o)</h4> <p>Return a JSON string representation of a Python data structure, o.</p> <h4 id="iterencodeo">iterencode(o)</h4> <p>Encode the given object, o, and yield each string representation as available.</p> <h2 id="io-module">io module</h2> <ul> <li>The io module provides Python’s main facilities for dealing with various types of I/O.</li> <li>There are three main types of I/O: text I/O, binary I/O and raw I/O.</li> <li>A concrete object belonging to any of these categories is called a file object. Other common terms are stream and file-like object.</li> </ul> <h3 id="text-io">Text I/O</h3> <p>Text I/O expects and produces str objects. The easiest way to create a text stream is with open(): <code class="language-plaintext highlighter-rouge">f = open("myfile.txt", "r", encoding="utf-8")</code></p> <p>In-memory text streams are also available as StringIO objects: <code class="language-plaintext highlighter-rouge">f = io.StringIO("some initial text data")</code></p> <h3 id="binary-io">Binary I/O</h3> <p>Binary I/O (also called buffered I/O) expects bytes-like objects and produces bytes objects.</p> <p>The easiest way to create a binary stream is with open() with ‘b’ in the mode string: <code class="language-plaintext highlighter-rouge">f = open("myfile.jpg", "rb")</code></p> <p>In-memory binary streams are also available as BytesIO objects: <code class="language-plaintext highlighter-rouge">f = io.BytesIO(b"some initial binary data: \x00\x01")</code></p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Random module]]></summary></entry><entry><title type="html">Popular Third party lib For Python</title><link href="https://benwzj.github.io/blog/2024/py-third-lib/" rel="alternate" type="text/html" title="Popular Third party lib For Python"/><published>2024-12-29T00:00:00+00:00</published><updated>2024-12-29T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-third-lib</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-third-lib/"><![CDATA[<h2 id="numpy">NumPy</h2> <ul> <li>NumPy is a Python library used for working with arrays.</li> <li>NumPy stands for Numerical Python.</li> <li>NumPy is the fundamental package for scientific computing in Python.</li> <li>It provides a multi-dimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays.</li> </ul> <h3 id="why-use-numpy">Why Use NumPy?</h3> <ul> <li>In Python we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li> <li>The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.</li> <li>NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.</li> <li>NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.</li> </ul> <h3 id="basic-example">Basic example:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]])</span>
<span class="n">subarr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">subarr</span><span class="p">)</span> <span class="n">like</span> <span class="n">this</span><span class="p">:</span>
<span class="p">[[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">6</span> <span class="mi">7</span><span class="p">]]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>  <span class="c1"># Output: 78
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>  <span class="c1"># Output: [ 2.5  6.5 10.5]
</span></code></pre></div></div> <h3 id="functions">Functions</h3> <p>np.random.normal</p> <h2 id="scipy">SciPy</h2> <ul> <li>SciPy is a scientific computation library that uses NumPy underneath.</li> <li>SciPy stands for Scientific Python.</li> <li>It provides more utility functions for optimization, stats and signal processing.</li> <li>Like NumPy, SciPy is open source so we can use it freely.</li> <li>SciPy was created by NumPy’s creator Travis Olliphant.</li> </ul> <h3 id="why-use-scipy">Why Use SciPy?</h3> <ul> <li>If SciPy uses NumPy underneath, why can we not just use NumPy?</li> <li>SciPy has optimized and added functions that are frequently used in NumPy and Data Science.</li> </ul> <h2 id="pandas">Pandas</h2> <p>Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data. The name “Pandas” has a reference to both “Panel Data”, and “Python Data Analysis” and was created by Wes McKinney in 2008.</p> <h3 id="why-use-pandas">Why Use Pandas?</h3> <p>Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Relevant data is very important in data science.</p> <h2 id="matplotlib">Matplotlib</h2> <p>Matplotlib is a low level graph plotting library in python that serves as a visualization utility. Most of the Matplotlib utilities lies under the pyplot submodule.</p> <p>What main job Matplotlib do as following:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">xpoints</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
<span class="n">ypoints</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xpoints</span><span class="p">,</span> <span class="n">ypoints</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>Then you get:</p> <figure> <picture> <img src="/assets/img/py-Matplotlib.jpg" class="img-fluid rounded z-depth-1" width="35%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can decorate this chart: like marker, line, label, grid, scatter, bars, histograms, pie.</p> <h2 id="openpyxl">openpyxl</h2> <p>(The first exercise) https://openpyxl.readthedocs.io/en/stable/index.html#</p> <p>openpyxl is a lib which deal with Excel 2010 xlsx/xlsm/xltx/xltm files.</p> <h3 id="create-workbook">Create workbook</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> from openpyxl import Workbook
<span class="o">&gt;&gt;&gt;</span> wb <span class="o">=</span> Workbook<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> ws <span class="o">=</span> wb.create_sheet<span class="o">(</span><span class="s2">"Mysheet"</span><span class="o">)</span> <span class="c"># insert at the end (default)</span>
</code></pre></div></div> <h3 id="load-data-from-a-file">Load data from a file</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> from openpyxl import load_workbook
<span class="o">&gt;&gt;&gt;</span> wb2 <span class="o">=</span> load_workbook<span class="o">(</span><span class="s1">'test.xlsx'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> print<span class="o">(</span>wb2.sheetnames<span class="o">)</span>
</code></pre></div></div> <h3 id="playing-with-cells-content">Playing with cells content</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> ws <span class="o">=</span> wb.active
<span class="o">&gt;&gt;&gt;</span> ws[<span class="s1">'A4'</span><span class="o">]</span> <span class="o">=</span> 4
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> ws.cell<span class="o">(</span><span class="nv">row</span><span class="o">=</span>4, <span class="nv">column</span><span class="o">=</span>2, <span class="nv">value</span><span class="o">=</span>10<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>row <span class="k">in </span>ws.iter_rows<span class="o">(</span><span class="nv">min_row</span><span class="o">=</span>1, <span class="nv">max_col</span><span class="o">=</span>3, <span class="nv">max_row</span><span class="o">=</span>2<span class="o">)</span>:
...    print<span class="o">(</span>row<span class="o">)</span> <span class="c"># one row is one tuple</span>
...    <span class="k">for </span>cell <span class="k">in </span>row:
...        print<span class="o">(</span>cell<span class="o">)</span> <span class="c"># cell object: &lt;Cell Sheet.A1&gt;</span>
</code></pre></div></div> <h3 id="save-data">save data</h3> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; wb.save('balances.xlsx')</code></p> <h3 id="conclusion">Conclusion</h3> <ul> <li>Lib documents supposed to support all information. Such as how to use it, Example, security.</li> <li>list, tuple, dictionary are basic object which are very good designed! and need to be familiar with.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[NumPy]]></summary></entry><entry><title type="html">Python Asyncio</title><link href="https://benwzj.github.io/blog/2024/py-asyncio/" rel="alternate" type="text/html" title="Python Asyncio"/><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-asyncio</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-asyncio/"><![CDATA[<h2 id="what-is-asyncio">What is asyncio</h2> <p>Asyncio is a built-in library of Python to write concurrent code using <code class="language-plaintext highlighter-rouge">async/await</code> syntax. This library provides high-performance network and web servers, database connection libraries, distributed task queues, etc., for asynchronous programming.</p> <ul> <li>asyncio is the concurrency module introduced in Python 3.4.</li> <li>It is designed to use coroutines and futures to simplify asynchronous code and make it almost as readable as synchronous code as there are no callbacks.</li> <li>To understand sayncio, the key point is understand event loop, although somebody keep saying coroutine is the core feature.</li> <li>The asyncio package is a library to write concurrent code. However, async IO is not threading, nor is it multiprocessing. It is not built on top of either of these.</li> <li>async IO is a single-threaded, single-process design: it uses cooperative multitasking.</li> <li>async IO gives a feeling of concurrency despite using a single thread in a single process.</li> <li>By default asyncio runs in production mode. In order to ease the development asyncio has a debug mode.</li> </ul> <h3 id="event-loops-coroutines-and-futures-concepts">event loops, coroutines and futures concepts</h3> <ul> <li>An <strong>event loop</strong> manages and distributes the execution of different tasks. It registers them and handles distributing the flow of control between them.</li> <li><strong>Coroutines</strong> are special functions that work similarly to Python generators, on await they release the flow of control back to the event loop. A coroutine needs to be scheduled to run on the event loop, once scheduled coroutines are wrapped in Tasks which is a type of Future.</li> <li><strong>Futures</strong> represent the result of a task that may or may not have been executed. This result may be an exception.</li> </ul> <h2 id="coroutines">Coroutines</h2> <h3 id="what-is-coroutines">What is Coroutines</h3> <ul> <li>Detail on PEP 492.</li> <li>Coroutines declared with the async/await syntax is the preferred way of writing asyncio applications.</li> <li>Example:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">world</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>Python coroutines are awaitables and therefore can be awaited from other coroutines.</li> <li>Simply calling a coroutine will not schedule it to be executed.</li> <li>To actually run a coroutine in the event loop, asyncio provides the following mechanisms: <ul> <li>asyncio.run()</li> <li>asyncio.create_task()</li> <li>asyncio.TaskGroup()</li> </ul> </li> <li>The term “coroutine” can be used for two closely related concepts: <ul> <li>a coroutine function: an async def function;</li> <li>a coroutine object: an object returned by calling a coroutine function.</li> </ul> </li> <li>A coroutine is a specialized version of a Python generator function.</li> <li>The keyword async def introduces a native coroutine.</li> <li>The keyword await passes function control back to the event loop.</li> </ul> <h4 id="chaining-coroutines">Chaining Coroutines</h4> <p>A key feature of coroutines is that they can be chained together. (Remember, a coroutine object is awaitable, so another coroutine can await it.) This allows you to break programs into smaller, manageable, recyclable coroutines</p> <h3 id="coroutines-is-generators">Coroutines is generators</h3> <ul> <li>Coroutines are repurposed generators that take advantage of the peculiarities of generator methods.</li> <li>Old generator-based coroutines use yield from to wait for a coroutine result. Modern Python syntax in native coroutines simply replaces yield from with await as the means of waiting on a coroutine result.</li> <li>The use of await is a signal that marks a break point. It lets a coroutine temporarily suspend execution and permits the program to come back to it later.</li> </ul> <h3 id="awaitable-object">Awaitable Object</h3> <ul> <li>An awaitable object generally implements an <code class="language-plaintext highlighter-rouge">__await__()</code> method.</li> <li> <p>Note: The generator iterator objects returned from generators decorated with types.coroutine() are also awaitable, but they do not implement <code class="language-plaintext highlighter-rouge">__await__()</code>.</p> </li> <li>We say that an object is an awaitable object if it can be used in an await expression.</li> <li>Many asyncio APIs are designed to accept awaitables.</li> <li>There are three main types of awaitable objects: coroutines, Tasks, and Futures.</li> </ul> <h3 id="coroutine-obejct">Coroutine Obejct</h3> <p>Coroutine objects returned from async def functions are awaitable.</p> <ul> <li>A coroutine’s execution can be controlled by calling <code class="language-plaintext highlighter-rouge">__await__()</code> and iterating over the result.</li> <li>Coroutines have the methods which are analogous to those of generators. Like coroutine.send(value), coroutine.throw(value), coroutine.close().</li> <li>However, unlike generators, coroutines do not directly support iteration.</li> </ul> <h3 id="asynchronous-iterators-and-async-for">Asynchronous Iterators and “async for”</h3> <p>Along with plain <code class="language-plaintext highlighter-rouge">async/await</code>, Python also enables async for to iterate over an asynchronous iterator.</p> <h4 id="what-is-asynchronous-iterator">What is asynchronous iterator</h4> <ul> <li> <p>An asynchronous iterable is able to call asynchronous code in its iter implementation, and asynchronous iterator can call asynchronous code in its next method.</p> </li> <li>To support asynchronous iteration: <ul> <li>An object must implement an <code class="language-plaintext highlighter-rouge">__aiter__</code> method returning an asynchronous iterator object.</li> <li>An asynchronous iterator object must implement an <code class="language-plaintext highlighter-rouge">__anext__</code> method returning an awaitable.</li> <li>To stop iteration <code class="language-plaintext highlighter-rouge">__anext__</code> must raise a StopAsyncIteration exception.</li> </ul> </li> <li>An example of asynchronous iterable:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AsyncIterable</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__aiter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">__anext__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">fetch_data</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">StopAsyncIteration</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_data</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="bp">...</span>
</code></pre></div></div> <ul> <li>A new statement for iterating through asynchronous iterators is supported:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">for</span> <span class="n">TARGET</span> <span class="ow">in</span> <span class="n">ITER</span><span class="p">:</span>
    <span class="n">BLOCK</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">BLOCK2</span>
</code></pre></div></div> <p>which is semantically equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">iter</span> <span class="o">=</span> <span class="p">(</span><span class="n">ITER</span><span class="p">)</span>
<span class="nb">iter</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="nb">iter</span><span class="p">).</span><span class="nf">__aiter__</span><span class="p">(</span><span class="nb">iter</span><span class="p">)</span>
<span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">while</span> <span class="n">running</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">TARGET</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">type</span><span class="p">(</span><span class="nb">iter</span><span class="p">).</span><span class="nf">__anext__</span><span class="p">(</span><span class="nb">iter</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
        <span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">BLOCK</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">BLOCK2</span>
</code></pre></div></div> <ul> <li>The purpose of an asynchronous iterator is for it to be able to call asynchronous code at each stage when it is iterated over.</li> </ul> <h3 id="asynchronous-context-managers-and-async-with-">Asynchronous Context Managers And “async with ”</h3> <ul> <li>An asynchronous context manager is a context manager that is able to suspend execution in its <code class="language-plaintext highlighter-rouge">__aenter__</code> and <code class="language-plaintext highlighter-rouge">__aexit__</code> methods.</li> <li>Asynchronous context managers can be used in an <code class="language-plaintext highlighter-rouge">async with</code> statement.</li> </ul> <h2 id="task">Task</h2> <ul> <li>Task is a concept which interact with event loop.</li> <li>Tasks are one of the primary ways to interact with the event loop.</li> <li>Tasks wrap coroutines and track when they are complete.</li> <li>Tasks are used to run coroutines in event loops. If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future. When the Future is done, the execution of the wrapped coroutine resumes.</li> <li>Tasks are used to schedule coroutines concurrently.</li> <li>When a coroutine is wrapped into a Task with functions like asyncio.create_task() the coroutine is automatically scheduled to run soon.</li> </ul> <h3 id="create-task">Create task</h3> <p>asyncio.create_task(coro)</p> <ul> <li>Wrap the coro coroutine into a Task and schedule its execution. Return the Task object.</li> <li>The task is executed in the loop returned by get_running_loop()</li> <li>Save a reference to the result of this function, to avoid a task disappearing mid-execution.</li> <li>asyncio.TaskGroup.create_task() is a newer alternative that allows for convenient waiting for a group of related tasks.</li> </ul> <h4 id="still-have-no-idea-why-need-task-to-wrap-a-coroutine">Still have no idea why need task to wrap a coroutine?</h4> <p>OK, let’s clear it.</p> <ul> <li>Firstly, coroutine just work within a event loop. You can just simply use asyncio.run(coro) to creates a new event loop to run coro and closes it at the end.</li> <li>When you are using asyncio.gather() for concurrency, it actually use task.</li> <li>Using task provide more control, more features. For example, according code below:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">not_task</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="nf">say_hello</span><span class="p">()</span>
    <span class="k">await</span> <span class="nf">say_hello</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">is_task</span><span class="p">():</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say_hello</span><span class="p">())</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say_hello</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">t1</span>
    <span class="k">await</span> <span class="n">t2</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>understand HOW not_task() and is_task() work when wrap them in run(). Running not_task() coroutine object, it take 4 seconds; Running is_task(), it can run concurrently, it take 2 seconds.</li> </ul> <h3 id="task-groups">Task Groups</h3> <ul> <li>New at version 3.11</li> <li>Task groups combine a task creation API with a convenient and reliable way to wait for all tasks in the group to finish.</li> </ul> <h2 id="futures">Futures</h2> <ul> <li>A Future is a special low-level awaitable object that represents an eventual result of an asynchronous operation.</li> <li>Future objects are used to bridge low-level callback-based code with high-level async/await code.</li> <li>When a Future object is awaited it means that the coroutine will wait until the Future is resolved in some other place.</li> <li>Future objects in asyncio are needed to allow callback-based code to be used with async/await.</li> <li>Normally there is no need to create Future objects at the application level code.</li> <li>Future objects, sometimes exposed by libraries and some asyncio APIs, can be awaited.</li> </ul> <h2 id="event-loop">Event loop</h2> <ul> <li>The event loop is the core of every asyncio application that takes care of all the running tasks.</li> <li>The event loop supports multitasking. When a function is suspended, control returns to the loop, which then finds another function to start or resume.</li> <li>Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.</li> <li>Event loops use cooperative scheduling: an event loop runs one Task at a time. While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.</li> <li>Event loop interface provide low-level APIs. Application developers should rarely need to reference the loop object or call its methods.</li> <li>By default, an async IO event loop runs in a single thread and on a single CPU core.</li> <li>Event loops are pluggable. That is, you could, if you really wanted, write your own event loop implementation and have it run tasks just the same.</li> </ul> <figure> <picture> <img src="/assets/img/py-eventloop.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="how-event-loop-work">How event loop work</h3> <ul> <li>An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread.</li> <li>While a Task is running in the event loop, no other Tasks can run in the same thread.</li> <li>When a Task executes an await expression, the running Task gets suspended, and the event loop executes the next Task.</li> <li>To schedule a callback from another OS thread, the loop.call_soon_threadsafe() method should be used.</li> </ul> <h3 id="high-level-asyncio-functions">high-level asyncio functions</h3> <h4 id="asyncioruncoro">asyncio.run(coro)</h4> <ul> <li>asyncio.run() introduced in Python 3.7, is responsible for getting the event loop, running tasks until they are marked as complete, and then closing the event loop.</li> <li>It runs the passed coro, taking care of managing the asyncio event loop and closing the threadpool.</li> <li>This function cannot be called when another asyncio event loop is running in the same thread.</li> <li>It should be used as a main entry point for asyncio programs, and should ideally only be called once.</li> <li>There’s a more long-winded way of managing the asyncio event loop, with get_event_loop().</li> </ul> <h3 id="low-level-functions">low-level functions</h3> <p>Application developers should typically use the high-level asyncio functions, such as asyncio.run(), and should rarely need to reference the loop object or call its methods.</p> <h4 id="asyncioget_running_loop">asyncio.get_running_loop()</h4> <ul> <li>Return the running event loop in the current OS thread.</li> <li>Raise a RuntimeError if there is no running event loop.</li> <li>This function can only be called from a coroutine or a callback.</li> </ul> <h4 id="asyncioget_event_loop">asyncio.get_event_loop()</h4> <ul> <li>When called from a coroutine or a callback, this function will always return the running event loop.</li> <li>If there is no running event loop set, the function will return the result of the get_event_loop_policy().get_event_loop() call.</li> <li>Consider using the higher-level asyncio.run() function, instead of using these lower level functions to manually create and close an event loop.</li> </ul> <h4 id="asyncioset_event_looploop">asyncio.set_event_loop(loop)</h4> <p>Set loop as the current event loop for the current OS thread.</p> <h4 id="asyncionew_event_loop">asyncio.new_event_loop()</h4> <p>Create and return a new event loop object.</p> <h3 id="event-loop-methods">Event Loop Methods</h3> <h4 id="running-and-stopping-the-loop">Running and stopping the loop</h4> <ul> <li> <p><code class="language-plaintext highlighter-rouge">loop.run_until_complete(future)</code>: Run until the future (an instance of Future) has completed.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">loop.run_forever()</code>: Run the event loop until stop() is called.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">loop.close()</code>: Close the event loop.</p> </li> </ul> <h4 id="scheduling-callbacks">Scheduling callbacks</h4> <ul> <li><code class="language-plaintext highlighter-rouge">loop.call_soon(callback, *args, context=None)</code>: Schedule the callback callback to be called with args arguments at the next iteration of the event loop. Callbacks are called in the order in which they are registered. Each callback will be called exactly once.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_soon_threadsafe(callback, *args, context=None)</code>: When scheduling callbacks from another thread, this function must be used.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_later(delay, callback, *args, context=None)</code>: Schedule callback to be called after the given delay number of seconds.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_at(when, callback, *args, context=None)</code>: Schedule callback to be called at the given absolute timestamp when (an int or a float), using the same time reference as loop.time().</li> <li><code class="language-plaintext highlighter-rouge">loop.time()</code>: Return the current time, as a float value, according to the event loop’s internal monotonic clock.</li> </ul> <h4 id="creating-futures-and-tasks">Creating Futures and Tasks</h4> <ul> <li><code class="language-plaintext highlighter-rouge">loop.create_future()</code> Create an asyncio.Future object attached to the event loop.</li> </ul> <p>This is the preferred way to create Futures in asyncio. This lets third-party event loops provide alternative implementations of the Future object</p> <ul> <li><code class="language-plaintext highlighter-rouge">loop.create_task(coro, *, name=None, context=None)</code> Schedule the execution of coroutine coro. Return a Task object.</li> </ul> <h4 id="opening-network-connections">Opening network connections</h4> <ul> <li>coroutine loop.create_connection() Open a streaming transport connection to a given address specified by host and port.</li> <li>coroutine loop.create_datagram_endpoint() Create a datagram connection.</li> <li>coroutine loop.create_unix_connection()</li> </ul> <h4 id="creating-network-servers">Creating network servers</h4> <ul> <li>coroutine loop.create_server() Create a TCP server (socket type SOCK_STREAM) listening on port of the host address.</li> </ul> <h2 id="asynchronous-context-manager">asynchronous context manager</h2> <p>An asynchronous context manager is a context manager that is able to suspend execution in its <strong>aenter</strong> and <strong>aexit</strong> methods.</p> <h3 id="runner-context-manager">Runner context manager</h3> <p><code class="language-plaintext highlighter-rouge">class asyncio.Runner(*, debug=None, loop_factory=None)</code></p> <ul> <li>A context manager that simplifies multiple async function calls in the same context.</li> <li>Sometimes several top-level async functions should be called in the same event loop and contextvars.Context.</li> <li>Basically, asyncio.run() example can be rewritten with the runner usage:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Runner</span><span class="p">()</span> <span class="k">as</span> <span class="n">runner</span><span class="p">:</span>
    <span class="n">runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div> <h3 id="coroutine-asynciotimeoutdelay">coroutine asyncio.timeout(delay)</h3> <p>An asynchronous context manager that can be used to limit the amount of time spent waiting on something.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">timeout</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="k">await</span> <span class="nf">long_running_task</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The long operation timed out, but we</span><span class="sh">'</span><span class="s">ve handled it.</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This statement will run regardless.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="usage">Usage</h2> <h3 id="sleeping">Sleeping</h3> <p><code class="language-plaintext highlighter-rouge">coroutine asyncio.sleep(delay)</code> Example, wait 1 second: <code class="language-plaintext highlighter-rouge">await asyncio.sleep(1)</code></p> <h3 id="running-tasks-concurrently">Running Tasks Concurrently</h3> <p><code class="language-plaintext highlighter-rouge">awaitable asyncio.gather(*aws)</code></p> <ul> <li>Run awaitable objects in the aws sequence concurrently.</li> <li>If any awaitable in aws is a coroutine, it is automatically scheduled as a Task.</li> </ul> <h3 id="task-groups-1">Task groups</h3> <ul> <li>New in version 3.11</li> <li>Task groups combine a task creation API with a convenient and reliable way to wait for all tasks in the group to finish.</li> <li><code class="language-plaintext highlighter-rouge">class asyncio.TaskGroup</code> An asynchronous context manager holding a group of tasks. Tasks can be added to the group using TaskGroup.<code class="language-plaintext highlighter-rouge">create_task()</code>. All tasks are awaited when the context manager exits.</li> </ul> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">TaskGroup</span><span class="p">()</span> <span class="k">as</span> <span class="n">tg</span><span class="p">:</span>
        <span class="n">task1</span> <span class="o">=</span> <span class="n">tg</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">some_coro</span><span class="p">(...))</span>
        <span class="n">task2</span> <span class="o">=</span> <span class="n">tg</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">another_coro</span><span class="p">(...))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Both tasks have completed now.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The async with statement will wait for all tasks in the group to finish.</p> <p>Other topics:</p> <ul> <li>Shielding From Cancellation</li> <li>Timeouts</li> <li>Waiting Primitives</li> <li>Running in Threads</li> <li>Scheduling From Other Threads</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>Asynchronous programming and Generator</li> <li>Are all coroutines which are in the same asyncio.run() are in a same thread? One event loop locate in one thread?</li> <li>The current thread which execute asyncio.run() is other than the event loop thread?</li> </ul> <h4 id="what-is-concurrent-computing">What is Concurrent computing</h4> <p>Concurrent computing is a form of computing in which several computations are executed concurrently—during overlapping time periods—instead of sequentially—with one completing before the next starts.</p> <p>Concurrency is not Parallelism</p> <ul> <li>Concurrency and parallelism, a related but quite distinct concept.</li> <li>In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations.</li> <li>Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.</li> <li>Concurrency is talk about structure, while parallelism is about execution.</li> <li>Concurrency maybe use parallelism, but parallelism is not it’s goal.</li> <li>An analogue: OS need to handle many stuff, keyboard, mouse input,screen output, response many socket. But it don’t have to be parallelism. it use concurrent model.</li> <li>Parallelism, for example, break a big job into many small jobs and execute them in parallel way.</li> </ul> <h4 id="asynciocoroutine">@asyncio.coroutine</h4> <p>async/await is new syntax. @asyncio.coroutine return a generator-based coroutine which outdated.</p> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@asyncio.coroutine</span>
<span class="k">def</span> <span class="nf">py34_coro</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Generator-based coroutine, older syntax</span><span class="sh">"""</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="nf">stuff</span><span class="p">()</span>
<span class="n">same</span> <span class="k">with</span><span class="p">:</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">py35_coro</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Native coroutine, modern syntax</span><span class="sh">"""</span>
    <span class="k">await</span> <span class="nf">stuff</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="Asynchronous"/><summary type="html"><![CDATA[What is asyncio]]></summary></entry></feed>