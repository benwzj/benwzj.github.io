<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-28T07:26:12+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">Auth Concepts Overview</title><link href="https://benwzj.github.io/blog/2024/all-about-auth/" rel="alternate" type="text/html" title="Auth Concepts Overview"/><published>2024-06-15T00:00:00+00:00</published><updated>2024-06-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/all-about-auth</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/all-about-auth/"><![CDATA[<p>Try to clear the main Auth concepts from higher perspective.</p> <h2 id="term-overview">Term Overview</h2> <h3 id="oauth-vs-openid-vs-oidc">OAuth vs OpenID vs OIDC</h3> <ul> <li>OpenID is based on a simple idea: a user authenticates with an identity provider (IDP), who then provides the user with a <strong>unique identifier</strong> (called an OpenID). This identifier can then be used to authenticate the user with any website that supports OpenID.</li> <li>OAuth(Open Authorization), Originally designed to for applications to get access to APIs. grants access to Other resources via <strong>Access Tokens</strong>.</li> <li>OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.0 framework. It allows third-party applications to verify the identity of the end-user and to obtain basic user profile information. OIDC uses JWTs, which you can obtain using flows conforming to the OAuth 2.0 specifications. Simply saying, it adds an <strong>additional token</strong> called <strong>ID Token</strong>.</li> </ul> <h4 id="anology">Anology</h4> <p>Let’s understand that like this: a Guest check at a hotel reception with ID card, then reception give him a digit key which can unlock a hotel room, or visit gym, swiming pool, etc. Hotel room lock just accept the key and don’t care who use it. Guest is User, Reception is OpenID IDP(Authentication), digit card is Access token. Now, there is a apecial service, kid care, which need digit key, and User information to show up as well. OAuth can do nothing about this, but OIDC can do it!</p> <h3 id="oidc-and-jwt">OIDC and JWT</h3> <p>Each time you need to log in to a website using OIDC, you are redirected to your OpenID site where you log in, and then taken back to the website. For example, if you chose to sign in to Auth0 using your Google account then you used OIDC. Once you successfully authenticate with Google and authorize Auth0 to access your information, Google sends information back to Auth0 about the user and the authentication performed. This information is returned in a JWT. You’ll receive an access token and if requested, an ID token.</p> <p>The OIDC specification defines a set of standard claims for JWT. The set of standard claims include name, email, gender, birth date, and so on. However, if you want to capture information about a user and there currently isn’t a standard claim that best reflects this piece of information, you can create custom claims and add them to your tokens.</p> <h3 id="how-is-oidc-different-from-openid20">How is OIDC different from OpenID2.0?</h3> <p>OIDC has many architectural similarities to OpenID 2.0, and in fact the protocols solve a very similar set of problems. However, OpenID 2.0 used <strong>XML</strong> and a custom message signature scheme that in practice sometimes proved difficult for developers to get right, with the effect that OpenID 2.0 implementations would sometimes mysteriously refuse to interoperate. OAuth 2.0, the substrate for OpenID Connect, outsources the necessary encryption to the Web’s built-in TLS (also called HTTPS or SSL) infrastructure, which is universally implemented on both client and server platforms. OpenID Connect uses standard <strong>JWT</strong> data structures when signatures are required. This makes OpenID Connect dramatically easier for developers to implement, and in practice has resulted in much better interoperability.</p> <h3 id="more-concrete-way-to-understand-the-concepts">More concrete way to understand the concepts</h3> <ul> <li>Authentication = Identifying user</li> <li>Authorization = Accessing APIs</li> </ul> <h2 id="jwt-overview">JWT Overview</h2> <p>JSON Web Token (JWT) defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally <strong>signed</strong>.</p> <ul> <li>JWTs can be <strong>signed</strong> using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.</li> <li>Although JWT can be encrypted to also provide secrecy between parties, It will focus on <strong>signed</strong> tokens.</li> <li>Because most of JWTS are not encrypted, you can read them.</li> <li>It need to be used with HTTPS connection.</li> </ul> <h3 id="two-common-usage-scenarios">TWO common usage scenarios</h3> <ul> <li><strong>Authorization</strong>: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.</li> <li><strong>Information Exchange</strong>: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed — for example, using public/private key pairs — you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn’t been tampered with.</li> </ul> <h3 id="jwt-structure">JWT structure</h3> <p>Three parts separated by dots (.), which are:</p> <ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Like this:</p> <figure> <picture> <img src="/assets/img/encoded-jwt3.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Header and Payload are just plain text that get encoded, but not encrypted. So everyone can read them. JWT just focus on signed.</p> <h3 id="client-sidestateless-sessions">Client-side/Stateless Sessions</h3> <p>The so-called stateless sessions are in fact nothing more than client-side data. Most of the time sessions need only be signed. In other words, there is no security or privacy concern when data stored in them is read by third parties. client-side data can be suffered Security attack like, Signature Stripping, CSRF, XSS. Use JWT propertly can protect. For example adding CSRF mitigation techniques. Sometime a certain balance between client-side data and database lookups in the backend is necessary.</p> <h3 id="one-concrete-example">One Concrete Example</h3> <p>Here copy a example to show how to use JWT.</p> <p>For example we will make a simple shopping application. The user’s shopping cart will be stored client-side. In this example, there are multiple JWTs present. Our shopping cart will be one of them.</p> <ul> <li>One JWT for the ID token, a token that carries the user’s profile information, useful for the UI.</li> <li>One JWT for interacting with the API backend (the access token).</li> <li>One JWT for our client-side state: the shopping cart. Here’s how the shopping cart looks when decoded: <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="mi">4</span><span class="w">
  </span><span class="p">],</span><span class="w">
</span><span class="nl">"iat"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493139659</span><span class="p">,</span><span class="w">
</span><span class="nl">"exp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1493143259</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> <p>Each item is identified by a numeric ID. The encoded and signed JWT looks like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpdGVtcyI6WzAsMiw0XSwiaWF0IjoxNDkzMTM5NjU5LCJleHAiOjE0OTMxNDMyNTl9.
932ZxtZzy1qhLXs932hd04J58Ihbg5_g_rIrj-Z16Js
</code></pre></div> </div> <p>To render the items in the cart, the frontend only needs to retrieve it from its cookie:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">populateCart</span><span class="p">()</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">cartElem</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cart</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">cartElem</span><span class="p">.</span><span class="nf">empty</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">cartToken</span> <span class="o">=</span> <span class="nx">Cookies</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cartToken</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">cart</span> <span class="o">=</span> <span class="nf">jwt_decode</span><span class="p">(</span><span class="nx">cartToken</span><span class="p">).</span><span class="nx">items</span><span class="p">;</span>
<span class="nx">cart</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">itemId</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">itemId</span><span class="p">).</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">cartElem</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s2">`&lt;li&gt;</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">);</span>
<span class="p">});</span>
<span class="p">}</span>
</code></pre></div> </div> <p>The actual checks are performed by the backend. All JWTs are verified. Here is the backend check for the validity of the cart JWT implemented as an Express middleware:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cartValidator</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">items</span><span class="p">:</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">verify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
      <span class="nx">cartVerifyJwtOptions</span><span class="p">).</span><span class="nx">items</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span> <span class="na">items</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nf">next</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> </div> <p>When items are added, the backend constructs a new JWT with the new item in it and a new signature:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected/add_item</span><span class="dl">'</span><span class="p">,</span> <span class="nx">idValidator</span><span class="p">,</span> <span class="nx">cartValidator</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nf">parseInt</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">newCart</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cart</span><span class="p">,</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_CART_SECRET</span><span class="p">,</span>
<span class="nx">cartSignJwtOptions</span><span class="p">);</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">cart</span><span class="dl">'</span><span class="p">,</span> <span class="nx">newCart</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Item ID </span><span class="p">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2"> added to cart.`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> <p>Note that locations prefixed by /protected are also protected by the API access token. This is setup using express-jwt:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span> <span class="nf">expressJwt</span><span class="p">({</span>
<span class="na">secret</span><span class="p">:</span> <span class="nx">jwksClient</span><span class="p">.</span><span class="nf">expressJwtSecret</span><span class="p">(</span><span class="nx">jwksOpts</span><span class="p">),</span>
<span class="na">issuer</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_ISSUER</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_API_AUDIENCE</span><span class="p">,</span>
<span class="na">requestProperty</span><span class="p">:</span> <span class="dl">'</span><span class="s1">accessToken</span><span class="dl">'</span><span class="p">,</span>
<span class="na">getToken</span><span class="p">:</span> <span class="nx">req</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">[</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">];</span>
<span class="p">}</span>
<span class="p">}));</span>
</code></pre></div> </div> <p>In other words, the <code class="language-plaintext highlighter-rouge">/protected/add_item</code> endpoint must first pass the access token validation step before validating the cart. One token validates access (authorization) to the API and the other token validates the integrity of the client side data (the cart). The access token and the ID token are assigned by Auth0 to our application. This requires setting up a client and an API endpoint using the Auth0 dashboard. These are then retrieved using the Auth0 JavaScript library, called by our frontend:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Auth0 Client ID</span>
<span class="kd">const</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">t42WY87weXzepAdUlwMiHYRBQj9qWVAT</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//Auth0 Domain</span>
<span class="kd">const</span> <span class="nx">domain</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">speyrott.auth0.com</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">auth0</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">.</span><span class="nx">auth0</span><span class="p">.</span><span class="nc">WebAuth</span><span class="p">({</span>
<span class="na">domain</span><span class="p">:</span> <span class="nx">domain</span><span class="p">,</span>
<span class="na">clientID</span><span class="p">:</span> <span class="nx">clientId</span><span class="p">,</span>
<span class="na">audience</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/protected</span><span class="dl">'</span><span class="p">,</span>
<span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">openid profile purchase</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">id_token token</span><span class="dl">'</span><span class="p">,</span>
<span class="na">redirectUri</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000/auth/</span><span class="dl">'</span><span class="p">,</span>
<span class="na">responseMode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">form_post</span><span class="dl">'</span>
<span class="p">});</span>
<span class="c1">//(...)</span>
<span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#login-button</span><span class="dl">'</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">auth0</span><span class="p">.</span><span class="nf">authorize</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div> </div> <p>The audience claim must match the one setup for your API endpoint using the Auth0 dashboard. The Auth0 authentication and authorization server displays a login screen with our settings and then redirects back to our application at a specific path with the tokens we requested. These are handled by our backend which simply sets them as cookies:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/auth</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">access_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">id_token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id_token</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">maxAge</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">*</span> <span class="mi">1000</span>
<span class="p">});</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div> </div> </li> </ul> <p>You can Implement CSRF mitigation techniques on the top of this example.</p> <h2 id="oauth2-overview">OAuth2 Overview</h2> <p>The apps which using OAuth2 usually are web server, browser-based SPA and mobile apps. OAuth 2 provides <strong>Authorization Code</strong> to grant authorization. OAuth still provide other grant type like Password, Client credentials, PKCE.</p> <p>Here will display an Web server App example which can explain the main process of OAuth2. The process in SPA, mobile App have a little bit difference.</p> <p>Let’s say, you are developing a MobilePrinter Website App which using OAuth process. This App can help users print photo in Other server, like Google photos.</p> <h3 id="4-roles">4 Roles</h3> <ul> <li>The Third-Party Application, “Client”, MobilePrinter Website App</li> <li>The API: “Resource Server”, Visiting Google photos</li> <li>The Authorization Server: Google</li> <li>The User: “Resource Owner”</li> </ul> <h3 id="creating-an-app">Creating an App</h3> <p>MobilePrinter must first register a new app with the service.</p> <ul> <li>You must register a redirect URI to be used for redirecting users to for web server.</li> <li>You will get Client ID and Secret.</li> </ul> <h3 id="authorization-process">Authorization process</h3> <p>MobilePrinter Website use Client ID and Secret communicate with the authorization server, (Google).</p> <ul> <li>Create a “Log In” link sending the user to: <code class="language-plaintext highlighter-rouge">https://authorization-server.com/auth?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=REDIRECT_URI&amp;scope=photos&amp;state=1234zyx</code></li> <li>The user sees the authorization prompt (Allow or Deny) from authorization-server.</li> <li>If the user clicks “Allow,” the authorization-service redirects the user back to your site with an authorization code: <code class="language-plaintext highlighter-rouge">https://example-app.com/cb?code=AUTH_CODE_HERE&amp;state=1234zyx</code></li> <li>To Get an Access Token, Your server should exchanges the authorization code for an access token by making a POST request to the authorization server’s token endpoint: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://api.authorization-server.com/token
grant_type=authorization_code&amp;
code=AUTH_CODE_HERE&amp;
redirect_uri=REDIRECT_URI&amp;
client_id=CLIENT_ID&amp;
client_secret=CLIENT_SECRET
</code></pre></div> </div> </li> <li>The server replies with an access token and expiration time <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"access_token"</span><span class="p">:</span><span class="s2">"RsT5OjbzRn430zqMLgV3Ia"</span><span class="p">,</span><span class="w">
</span><span class="nl">"expires_in"</span><span class="p">:</span><span class="mi">3600</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h3 id="pkce">PKCE</h3> <p>Single-page apps (or browser-based apps) run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of a client secret, so the secret is not used in this case.</p> <p>The flow is based on the authorization code flow above, but with the addition of a dynamically generated secret used on each request. This is known as the PKCE extension.</p> <blockquote> <p>Note: Previously, it was recommended that browser-based apps use the “Implicit” flow, which returns an access token immediately in the redirect and does not have a token exchange step. In the time since the spec was originally written, the industry best practice has changed to recommend that the authorization code flow be used without the client secret. This provides more opportunities to create a secure flow, such as using the PKCE extension.</p> </blockquote> <h2 id="session-management">Session Management</h2> <p>Session management involves tracking and managing a user’s interaction with the application over time, ensuring that their authenticated state is preserved across different parts of the application.</p> <p>This prevents the need for repeated logins, enhancing both security and user convenience. There are two primary methods used for session management:</p> <ul> <li>cookie-based (storing session data on the User Browser, data should be encrypted)</li> <li>database sessions（storing session data on the server）</li> </ul> <h3 id="jwt-sessions-vs-database-sessions">JWT Sessions vs Database Sessions</h3> <ul> <li>JWT refer to as stateless. Dataase is the opposite, stateful.</li> <li>Both need cookie (http-only). Database session use cookie for SessionID and JWT use cookies to store more information.</li> <li>JWT need bigger and more cookies; But reduce the interact between server and database.</li> <li>Database Sessions can be safer.</li> <li>JWT also good for Single Sign On.</li> </ul> <h2 id="authentication-solutions">Authentication Solutions</h2> <ul> <li>There are many authentication solutions. Like, Auth0, Clerk, Kinde etc.</li> <li>You can add these solutions to your application.</li> <li>They all support Modern authentication strategies, like OAuth/OpenID Connect (OIDC), Credentials-based login (Email + Password), Passwordless/Token-based authentication.</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>Common use case for JWT?</li> <li>How JWT implement authorization?</li> <li>What is Cross-Site Request Forgery (CSRF)?</li> <li>What is Cross-Site Scripting (XSS)?</li> <li>How is OIDC different from OpenID2.0?</li> </ul> <h3 id="what-is-cross-site-request-forgery-csrf">What is Cross-Site Request Forgery (CSRF)?</h3> <p>Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user’s browser. In a CSRF attack, an innocent end user is tricked by an attacker into submitting a web request that they did not intend. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user’s account.</p> <h3 id="what-is-cross-site-scripting-xss">What is Cross-Site Scripting (XSS)</h3> <p>Cross-site scripting (XSS) attacks attempt to inject JavaScript in trusted sites. Injected JavaScript can then steal tokens from cookies and local storage. If an access token is leaked before it expires, a malicious user could use it to access protected resources.</p> <ul> <li>Don’t use localStorage, cause JS can read it.</li> <li>use cookie with ‘http-only’ setting.</li> </ul> <h3 id="how-jwt-implement-authorization">How JWT implement authorization</h3> <p>JWTs are self-contained, all the necessary information is there, reducing the need of going back and forward to the database. JWTs can container Authorization information.</p> <h2 id="references">References</h2> <ul> <li><a href="https://jwt.io/introduction">jwt.io</a></li> <li><a href="https://aaronparecki.com/oauth-2-simplified/">OAuth2 simplified</a></li> <li>jwt-handbook-v0_14_2.pdf</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="Authentication"/><category term="Authorization"/><category term="JWT"/><category term="OAuth"/><category term="OpenID"/><category term="OIDC"/><summary type="html"><![CDATA[Try to clear the main Auth concepts from higher perspective.]]></summary></entry><entry><title type="html">Implement Auth in Next.js</title><link href="https://benwzj.github.io/blog/2024/nextjs-auth/" rel="alternate" type="text/html" title="Implement Auth in Next.js"/><published>2024-06-13T00:00:00+00:00</published><updated>2024-06-13T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-auth</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-auth/"><![CDATA[<h2 id="the-basic-authenticatin-process">The Basic Authenticatin process</h2> <ul> <li>Login button: <ul> <li>get user information from form.</li> <li>verify user information.</li> <li>create session: <ul> <li>setup information in JWT, like create signature.</li> <li>create cookie, setup expiration date, etc.</li> <li>put JWT inside cookie</li> </ul> </li> </ul> </li> <li>every request from browser will send with this session cookie. server check this JWT and confirm the state of the browser. <ul> <li>also, you can use middleware to handle every request, for example refresh the session cookie.</li> </ul> </li> <li>Logout button: <ul> <li>simply destroy the session cookie</li> </ul> </li> </ul> <h2 id="nextauthjs">NextAuth.js</h2> <p>NextAuth.js is an open source auth layer for Next.js project. Auth.js was born out of next-auth. And it try to support more frameworks. It keep using the name “NextAuth.js” for Next.js.</p> <p>There are 4 ways to authenticate users with Auth.js:</p> <ul> <li>OAuth authentication (Sign in with Google, GitHub, LinkedIn, etc…)</li> <li>Magic Links (Email Provider like Resend, Sendgrid, Nodemailer etc…)</li> <li>Credentials (Username and Password, Integrating with external APIs, etc…)</li> <li>WebAuthn (Passkeys, etc…)</li> </ul> <h2 id="implement-authentication">Implement Authentication</h2> <p>The step roughly like this:</p> <h3 id="setting-up-nextauthjs-to-your-project">Setting up NextAuth.js to your project</h3> <ul> <li>install it: <code class="language-plaintext highlighter-rouge">npm install next-auth@beta</code></li> <li>generate a secret key for your application. This key is used to encrypt cookies, ensuring the security of user sessions. Like this: <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code></li> <li>In your <code class="language-plaintext highlighter-rouge">.env</code> file, add your generated key to the AUTH_SECRET variable: <code class="language-plaintext highlighter-rouge">AUTH_SECRET=your-secret-key</code></li> </ul> <h3 id="authconfigts-file">auth.config.ts file</h3> <p>Create an <code class="language-plaintext highlighter-rouge">auth.config.ts</code> file at the root of our project that exports an <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <ul> <li>you can Add the login pages option in this config file.</li> <li>configure Protecting your routes with Next.js Middleware.</li> </ul> <h3 id="authts-file">auth.ts file</h3> <p><code class="language-plaintext highlighter-rouge">auth.ts</code> file spreads your <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">NextAuth</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">authConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./auth.config</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Credentials</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth/providers/credentials</span><span class="dl">'</span><span class="p">;</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="p">{</span> <span class="nx">auth</span><span class="p">,</span> <span class="nx">signIn</span><span class="p">,</span> <span class="nx">signOut</span> <span class="p">}</span> <span class="o">=</span> <span class="nc">NextAuth</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">authConfig</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nc">Credentials</span><span class="p">({})],</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="the-login-form-for-email-and-password">The login form for email and password</h3> <p>you create the login route and component where users can input their credentials. for example, create route <code class="language-plaintext highlighter-rouge">/login</code>.This login page UI should use <code class="language-plaintext highlighter-rouge">form</code> which is using <code class="language-plaintext highlighter-rouge">authenticate()</code> Server action to authenticate user.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/login/page.tsx</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">authenticate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/lib/actions</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="p">{</span><span class="nx">authenticate</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Email</span><span class="dl">"</span> <span class="nx">required</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Password</span><span class="dl">"</span> <span class="nx">required</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Implement <code class="language-plaintext highlighter-rouge">authenticate</code> Server Action:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/lib/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">signIn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/auth</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nx">_currentState</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">,</span> <span class="nx">formData</span><span class="p">:</span> <span class="nx">FormData</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nf">signIn</span><span class="p">(</span><span class="dl">'</span><span class="s1">credentials</span><span class="dl">'</span><span class="p">,</span> <span class="nx">formData</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, you can add Form Validation implement using <code class="language-plaintext highlighter-rouge">useFormState</code> (<code class="language-plaintext highlighter-rouge">useActionState</code>) and <code class="language-plaintext highlighter-rouge">useFormStatus</code>.</p> <h2 id="implement-authorization">Implement Authorization</h2> <p>Once a user is authenticated, you’ll need to think about What user can do:</p> <ul> <li>visiting certain routes</li> <li>perform operations such as mutating data with Server Actions</li> <li>calling Route Handlers</li> </ul> <h3 id="protecting-routes-with-middleware">Protecting Routes with Middleware</h3> <p>Middleware in Next.js helps you control who can access different parts of your website.</p> <p>Here’s how to implement Middleware for authentication in Next.js:</p> <ul> <li>Setting Up Middleware: <ul> <li>Create a middleware.ts or .js file in your project’s root directory.</li> <li>Include logic to authorize user access, such as checking for authentication tokens.</li> </ul> </li> <li>Defining Protected Routes: <ul> <li>Not all routes require authorization. Use the matcher option in your Middleware to specify any routes that do not require authorization checks.</li> </ul> </li> <li>Middleware Logic: <ul> <li>Write logic to verify if a user is authenticated. Check user roles or permissions for route authorization.</li> </ul> </li> <li>Handling Unauthorized Access: <ul> <li>Redirect unauthorized users to a login or error page as appropriate.</li> </ul> </li> </ul> <p>Middleware example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//middleware.ts</span>
<span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextRequest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/server</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="kd">function</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">request</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">currentUser</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">currentUser</span><span class="dl">'</span><span class="p">)?.</span><span class="nx">value</span>
 
  <span class="k">if </span><span class="p">(</span><span class="nx">currentUser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
  <span class="p">}</span>
 
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">currentUser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">nextUrl</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="k">new</span> <span class="nc">URL</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">matcher</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">/((?!api|_next/static|_next/image|.*</span><span class="se">\\</span><span class="s1">.png$).*)</span><span class="dl">'</span><span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="data-access-layerdal">Data Access Layer(DAL)</h3> <ul> <li>For new next.js projects, It is good to use Data Access Layer(DAL) to consolidate all data access in there.</li> <li><strong>The principle</strong> is that a Server Component function body should only see data that the current user issuing the request is authorized to have access to.</li> <li><strong>The concept</strong> is that building an internal JavaScript library that provides custom data access checks before giving it to the caller. Similar to HTTP endpoints but in the same memory model.</li> <li>Every API should accept the current user and check if the user can see this data before returning it.</li> </ul> <p>From this point, normal security practices for implementing APIs take over.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// data/auth.tsx</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">cache</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span><span class="p">;</span>
 
<span class="c1">// Cached helper methods makes it easy to get the same value in many places</span>
<span class="c1">// without manually passing it around. This discourages passing it from Server</span>
<span class="c1">// Component to Server Component which minimizes risk of passing it to a Client</span>
<span class="c1">// Component.</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">getCurrentUser</span> <span class="o">=</span> <span class="nf">cache</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nf">cookies</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">AUTH_TOKEN</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">decodedToken</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">decryptAndValidate</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
  <span class="c1">// Don't include secret tokens or private information as public fields.</span>
  <span class="c1">// Use classes to avoid accidentally passing the whole object to the client.</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">User</span><span class="p">(</span><span class="nx">decodedToken</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// data/user-dto.tsx</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">server-only</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getCurrentUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./auth</span><span class="dl">'</span><span class="p">;</span>
 
<span class="kd">function</span> <span class="nf">canSeeUsername</span><span class="p">(</span><span class="nx">viewer</span><span class="p">:</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Public info for now, but can change</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">function</span> <span class="nf">canSeePhoneNumber</span><span class="p">(</span><span class="nx">viewer</span><span class="p">:</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">team</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Privacy rules</span>
  <span class="k">return</span> <span class="nx">viewer</span><span class="p">.</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">team</span> <span class="o">===</span> <span class="nx">viewer</span><span class="p">.</span><span class="nx">team</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">getProfileDTO</span><span class="p">(</span><span class="nx">slug</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Don't pass values, read back cached values, also solves context and easier to make it lazy</span>
 
  <span class="c1">// use a database API that supports safe templating of queries</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">rows</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">sql</span><span class="s2">`SELECT * FROM user WHERE slug = </span><span class="p">${</span><span class="nx">slug</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">userData</span> <span class="o">=</span> <span class="nx">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
 
  <span class="kd">const</span> <span class="nx">currentUser</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getCurrentUser</span><span class="p">();</span>
 
  <span class="c1">// only return the data relevant for this query and not everything</span>
  <span class="c1">// &lt;https://www.w3.org/2001/tag/doc/APIMinimization&gt;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">username</span><span class="p">:</span> <span class="nf">canSeeUsername</span><span class="p">(</span><span class="nx">currentUser</span><span class="p">)</span> <span class="p">?</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">username</span> <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">phonenumber</span><span class="p">:</span> <span class="nf">canSeePhoneNumber</span><span class="p">(</span><span class="nx">currentUser</span><span class="p">,</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">team</span><span class="p">)</span>
      <span class="p">?</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">phonenumber</span>
      <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>These methods should expose objects that are safe to be transferred to the client as is. We like to call these Data Transfer Objects (DTO) to clarify that they’re ready to be consumed by the client.</p> <p>They might only get consumed by Server Components in practice. This creates a layering where security audits can focus primarily on the Data Access Layer while the UI can rapidly iterate. Smaller surface area and less code to cover makes it easier to catch security issues.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">getProfile</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../data/user</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">({</span> <span class="na">params</span><span class="p">:</span> <span class="p">{</span> <span class="nx">slug</span> <span class="p">}</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// This page can now safely pass around this profile knowing</span>
  <span class="c1">// that it shouldn't contain anything sensitive.</span>
  <span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getProfile</span><span class="p">(</span><span class="nx">slug</span><span class="p">);</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Secret keys can be stored in environment variables but only the data access layer should access process.env in this approach.</p> <h3 id="protecting-server-actions">Protecting Server Actions</h3> <p>Implement checks within Server Actions to determine user permissions, such as restricting certain actions to admin users.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/lib/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">serverAction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">userRole</span> <span class="o">=</span> <span class="nx">session</span><span class="p">?.</span><span class="nx">user</span><span class="p">?.</span><span class="nx">role</span>
 
  <span class="c1">// Check if user is authorized to perform the action</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unauthorized access: User does not have admin privileges.</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
 
  <span class="c1">// Proceed with the action for authorized users</span>
  <span class="c1">// ... implementation of the action</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="protecting-route-handlers">Protecting Route Handlers</h3> <p>You can do this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/api/route.ts</span>
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">GET</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// User authentication and role verification</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
 
  <span class="c1">// Check if the user is authenticated</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">401</span> <span class="p">})</span> <span class="c1">// User is not authenticated</span>
  <span class="p">}</span>
 
  <span class="c1">// Check if the user has the 'admin' role</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">role</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="mi">403</span> <span class="p">})</span> <span class="c1">// User is authenticated but does not have the right permissions</span>
  <span class="p">}</span>
 
  <span class="c1">// Data fetching for authorized users</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="authorization-using-server-components">Authorization Using Server Components</h3> <p>Server Components can direct access to back-end resources. So need do Authorization. A common practice is to conditionally render UI elements based on the user’s role. Like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/dashboard/page.tsx</span>

<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Dashboard</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getSession</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">userRole</span> <span class="o">=</span> <span class="nx">session</span><span class="p">?.</span><span class="nx">user</span><span class="p">?.</span><span class="nx">role</span> <span class="c1">// Assuming 'role' is part of the session object</span>
 
  <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">AdminDashboard</span> <span class="o">/&gt;</span> <span class="c1">// Component for admin users</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">userRole</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">UserDashboard</span> <span class="o">/&gt;</span> <span class="c1">// Component for regular users</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">AccessDenied</span> <span class="o">/&gt;</span> <span class="c1">// Component shown for unauthorized access</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="session-management">Session Management</h2> <p>Session management involves tracking and managing a user’s interaction with the application over time, ensuring that their authenticated state is preserved across different parts of the application.</p> <p>This prevents the need for repeated logins, enhancing both security and user convenience. There are two primary methods used for session management:</p> <ul> <li>cookie-based (storing session data on the User Browser, data should be encrypted)</li> <li>database sessions（storing session data on the server）</li> </ul> <h3 id="implement-cookie-based-session-management">Implement cookie-based Session management</h3> <p>Setting a cookie on the server action:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/actions.ts</span>
<span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span> 
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">handleLogin</span><span class="p">(</span><span class="nx">sessionData</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">encryptedSessionData</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="nx">sessionData</span><span class="p">)</span> <span class="c1">// Encrypt your session data using JWT</span>
  <span class="nf">cookies</span><span class="p">().</span><span class="nf">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">session</span><span class="dl">'</span><span class="p">,</span> <span class="nx">encryptedSessionData</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">secure</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">maxAge</span><span class="p">:</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">7</span><span class="p">,</span> <span class="c1">// One week</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="c1">// Redirect or handle the response after setting the cookie</span>
<span class="p">}</span>
</code></pre></div></div> <p>Accessing the session data stored in the cookie in a server component:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/page.tsx</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">cookies</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/headers</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">getSessionData</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">encryptedSessionData</span> <span class="o">=</span> <span class="nf">cookies</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">session</span><span class="dl">'</span><span class="p">)?.</span><span class="nx">value</span>
  <span class="k">return</span> <span class="nx">encryptedSessionData</span> <span class="p">?</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nf">decrypt</span><span class="p">(</span><span class="nx">encryptedSessionData</span><span class="p">))</span> <span class="p">:</span> <span class="kc">null</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="faq">FAQ</h2> <ul> <li>How NextAuth.js implement OIDC authentication?</li> <li>What <code class="language-plaintext highlighter-rouge">signIn()</code> do in NextAuth.js?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://next-auth.js.org">NextAuth.js Doc</a></li> <li><a href="https://authjs.dev/reference/next-auth">Auth.js Doc</a>.</li> <li><a href="https://nextjs.org/blog/security-nextjs-server-components-actions">Blog: Security in Next.js</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="Next.js"/><category term="JavaScript"/><category term="React"/><category term="Authentication"/><category term="Authorization"/><summary type="html"><![CDATA[The Basic Authenticatin process]]></summary></entry><entry><title type="html">Get to Know Eslint</title><link href="https://benwzj.github.io/blog/2024/eslint/" rel="alternate" type="text/html" title="Get to Know Eslint"/><published>2024-06-05T00:00:00+00:00</published><updated>2024-06-05T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/eslint</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/eslint/"><![CDATA[<h2 id="what-is-linter">What is Linter</h2> <p>Lint, or a linter is a static code analysis tool, that is used in such a way, that can flag programming errors, bugs, bad constructs, or stylistic errors.</p> <p>The term “lint” was derived from the name of the tiny bits of fiber and fluff shed by clothing. In 1979, lint was used outside of Bell Labs for the first time in the seventh version of the Unix operating system.</p> <h3 id="linter-can-help-a-lot">Linter can help a lot</h3> <p>Standardizing your code is very important. Having a guideline and running linters against the codebase avoid aesthetical changes in your pull request, like replacing all tabs for spaces, variable assignment indentation, or similar.</p> <p>There are many benefits of using linters. Beside code standardization, linters improve code review discussion level, it can make code look like it’s written by a single person and much more. Many linters include a performance check. They can add different kinds of performance improvements for experienced and newcomers developers.</p> <h2 id="what-is-eslint">What is ESLint</h2> <p>ESLint is a configurable JavaScript linter. It helps you find and fix problems in your JavaScript code. Problems can be anything from potential runtime bugs, to not following best practices, to styling issues.</p> <h3 id="core-concepts">Core Concepts</h3> <ul> <li>Rules: the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule. <ul> <li>Rule Fixes: Rules may optionally provide fixes for violations that they find. Fixes safely correct the violation without changing application logic.</li> <li>Rule Suggestions: Rules may optionally provide suggestions in addition to or instead of providing fixes.</li> </ul> </li> <li>Configuration Files: An ESLint configuration file is a place where you put the configuration for ESLint in your project.</li> <li>Plugins: An ESLint plugin is an npm module that can contain a set of ESLint rules, configurations, processors, and environments. Often plugins include custom rules. Plugins can be used to enforce a style guide and support JavaScript extensions (like TypeScript), libraries (like React), and frameworks (Angular).</li> <li>Parsers: An ESLint parser converts code into an abstract syntax tree that ESLint can evaluate. By default, ESLint uses the built-in Espree parser, which is compatible with standard JavaScript runtimes and versions.</li> <li>Custom Processors: An ESLint processor extracts JavaScript code from other kinds of files(like CoffeeScript), then lets ESLint lint the JavaScript code.</li> <li>CLI: The ESLint CLI is a command line interface that lets you execute linting from the terminal. The CLI has a variety of options that you can pass to its commands.</li> <li>Formatters: An ESLint formatter controls the appearance of the linting results in the CLI.</li> <li>ESLint Node.js API: It lets you use ESLint programmatically from Node.js code. The API is useful when developing plugins, integrations, and other tools related to ESLint.</li> </ul> <h3 id="features">Features</h3> <p>Everything is pluggable! 🔌</p> <ul> <li>Rule API is used both by bundled and custom rules</li> <li>Formatter API is used both by bundled and custom formatters</li> <li>Additional rules and formatters can be specified at a runtime</li> <li>Rules and formatters don’t have to be bundled to be used</li> </ul> <p>Every rule:</p> <ul> <li>Is standalone</li> <li>Can be turned off or on (nothin can be deemed “too important to turn off”)</li> <li>Can be set to a warning or error individually</li> </ul> <p>Additionally:</p> <ul> <li>Rules are “agenda-free” - ESLint does not promote any particular coding style</li> <li>Any bundled rules are generalizable</li> </ul> <h3 id="how-eslint-work">How ESLint work</h3> <figure> <picture> <img src="https://eslint.org/docs/latest/assets/images/architecture/dependency.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="how-to-use-eslint">How to use ESLint</h2> <ul> <li>First need to install ESLint in you project: <code class="language-plaintext highlighter-rouge">npm install eslint --save-dev</code></li> <li>Initialize an ESLint configuration for your project: <code class="language-plaintext highlighter-rouge">./node_modules/.bin/eslint --init</code></li> <li>Then you should have <code class="language-plaintext highlighter-rouge">.eslintrc.json</code> file. You can modify or add rule in this file.</li> <li>You can use ESLint CLI to check your code now. But most common way is integrating with ESCode.</li> <li>Install the ESLint Extension.</li> <li>Configure ESLint to automatically fix syntax and formatting issues every time you save by configure settings in Visual Studio Code.</li> </ul> <h3 id="eslint-and-vs-code">ESLint and VS Code</h3> <p>You can install <strong>“VS Code ESLint extension”</strong> in VS Code to use ESLint in VS Code Editor.</p> <p>The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn’t provide one the extension looks for a global install version. If you haven’t installed ESLint either locally or globally do so by running <code class="language-plaintext highlighter-rouge">npm install eslint</code> in the workspace folder for a local install or <code class="language-plaintext highlighter-rouge">npm install -g eslint</code> for a global install.</p> <p>On new folders you might also need to create an <code class="language-plaintext highlighter-rouge">.eslintrc</code> configuration file. You can do this by either using the VS Code command <code class="language-plaintext highlighter-rouge">Create ESLint configuration</code> or by running the eslint command in a terminal with <code class="language-plaintext highlighter-rouge">npx eslint --init</code>.</p> <h2 id="fqa">FQA</h2> <ul> <li>What is VS Code ESLint extension</li> <li>How ESLint work with Editor</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://eslint.org/docs/latest/use/core-concepts/">eslint.org doc</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Eslint"/><summary type="html"><![CDATA[What is Linter]]></summary></entry><entry><title type="html">Shopify Dev Overview</title><link href="https://benwzj.github.io/blog/2024/shopify-dev/" rel="alternate" type="text/html" title="Shopify Dev Overview"/><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/shopify-dev</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/shopify-dev/"><![CDATA[<p>There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).</p> <p>Run through this blog, you can get to know some concepts and terminologies of Shopify develpment.</p> <h2 id="apps">Apps</h2> <h3 id="what-is-shopify-app">What is Shopify App?</h3> <ul> <li>Shopify itself meets about 80% of global merchant needs. For everything else, Shopify merchants turn to apps.</li> <li>Shopify offers APIs, toolings and integration point to App.</li> <li>App Connects with Shopify APIs to extend store features.</li> <li>Merchant installs and uses App in their store.</li> <li>Shopify Apps can appear in and add functionality to nearly every area of the Shopify platform.</li> <li>A single app can add functionality to multiple areas of the platform.</li> <li>Depending on the tool that you’re using, Shopify might host your code, or you might have to arrange for hosting yourself.</li> <li>You can Surface App’s functionality in Shopify admin, Checkout, Online Store, Shopify Flow, Point of Sale, etc.</li> </ul> <h4 id="shopify-admin">Shopify admin</h4> <p>The Shopify admin is the primary interface for merchants to manage their stores, and core Shopify objects such as products, orders, and customers. The Shopify admin is also the place where merchants can manage their apps. Developers can surface their app’s functionality in the Shopify admin using the following technologies:</p> <ul> <li>Embedded app pages directly inside of the Shopify admin. <ul> <li>Shopify App Bridge (A JavaScript library)</li> <li>Polaris design system</li> <li>Shopify app templates</li> </ul> </li> <li>Custom data (more data models except for basic, like products, collections, and orders) <ul> <li>Metafields</li> <li>Metaobjects</li> </ul> </li> <li>App extensions</li> </ul> <h4 id="checkout">Checkout</h4> <p>Merchants use Shopify checkout to accept orders and receive payments wherever they sell online. You can add functionality to Shopify checkout by building an app. using the following technologies:</p> <ul> <li>Checkout UI extensions</li> <li>Shopify Functions</li> <li>Post-purchase checkout extensions</li> </ul> <h3 id="online-store">Online Store</h3> <p>The online store is a storefront that merchants use to sell their products. You can add functionality to the online store using the following technologies:</p> <ul> <li>Theme app extensions</li> <li>Web pixels</li> <li>Storefront API</li> </ul> <h4 id="shopify-flow">Shopify Flow</h4> <p>Shopify Flow is an app and platform that lets merchants customize their store through automation. You can integrate your app with Shopify Flow through custom triggers and actions. Triggers enable your app to start a Flow workflow. Actions enable Flow to call your app or service in a workflow to do work.</p> <h4 id="shopify-pos">Shopify POS</h4> <p>Shopify Point of Sale (POS) is a point of sale app that merchants can use to sell products in person. Merchants can create a cart for each customer, customize the cart in several ways, and then accept payment with a wide range of payment methods. You can surface your app’s functionality in Shopify POS through standardized APIs and extensions.</p> <h3 id="build-shopify-app">Build Shopify App</h3> <ul> <li>You need a Partner account and a development store.</li> <li>You need to use Shopify CLI. like this: <code class="language-plaintext highlighter-rouge">shopify app init</code>.</li> <li>Shopify recommend use Remix to build Shopify App. But you can still other framework.</li> </ul> <h2 id="theme">Theme</h2> <h3 id="what-is-shopify-theme">What is Shopify Theme</h3> <ul> <li>A Shopify theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers.</li> <li>Different themes have different styles and layouts, and offer a different experience for your customers. For example, if you’re selling spa products, then you might want your online store to feel relaxed and luxurious. If you’re selling electronics, then you might want your online store to look energetic and sleek.</li> <li>Shopify themes are built using Shopify’s theme templating language, Liquid, along with <strong>HTML, CSS, JavaScript, and JSON</strong>. Using these languages, developers can create any look and feel that their clients want.</li> <li><a href="https://github.com/Shopify/dawn">Dawn</a> is official, free, default theme. It show What a Theme exactly to be.</li> </ul> <h3 id="theme-architecture">Theme architecture</h3> <p>Theme code is organized with a standard directory structure of files specific to Shopify themes, as well as supporting assets such as images, stylesheets, and scripts.</p> <h4 id="theme-file-categories">Theme file categories</h4> <p>Theme files fall into the following general categories:</p> <ul> <li><strong>Markup and features</strong> - These files control the layout and functionality of a theme. They use <strong>Liquid</strong> to generate the HTML markup that makes up the pages of the merchant’s online store.</li> <li><strong>Supporting assets</strong> - These files are assets, scripts, or locale files that are either called or consumed by other files in the theme.</li> <li><strong>Config files</strong> - These files use <strong>JSON</strong> to store configuration data that can be customized by merchants using the theme editor.</li> </ul> <h4 id="themes-directory-structure">Themes directory structure</h4> <p>Themes must use the following directory structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── assets
├── config
├── layout
├── locales
├── sections
├── snippets
└── templates
    └── customers
</code></pre></div></div> <ul> <li>The <code class="language-plaintext highlighter-rouge">assets</code> directory, including image, CSS, and JavaScript files.</li> <li>The <code class="language-plaintext highlighter-rouge">config</code> directory contains the config files for a theme.</li> <li>The <code class="language-plaintext highlighter-rouge">layout</code> directory contains the layout files for a theme, through which template files are rendered. A <code class="language-plaintext highlighter-rouge">theme.liquid</code> file must exist in this folder for the theme to be uploaded to Shopify.</li> <li>The <code class="language-plaintext highlighter-rouge">locales</code> directory contains the locale files for a theme, which are used to provide translated content.</li> <li>The <code class="language-plaintext highlighter-rouge">sections</code> directory contains a theme’s sections and section groups. Sections are Liquid files, while Section groups are JSON containers.</li> <li>The <code class="language-plaintext highlighter-rouge">snippets</code> directory contains Liquid files that host smaller reusable snippets of code.</li> <li>The <code class="language-plaintext highlighter-rouge">templates</code> directory contains a theme’s template files, which control what’s rendered on each type of page.</li> <li>The <code class="language-plaintext highlighter-rouge">templates/customers</code> directory contains the template files for customer-centric pages like the login and account overview pages.</li> </ul> <h3 id="theme-layout">Theme Layout</h3> <ul> <li>Layouts are the base of the theme, through which all templates are rendered.</li> <li>Layouts are Liquid files.</li> <li>Layout files are located in the <code class="language-plaintext highlighter-rouge">layout</code> directory of the theme.</li> <li>Layout files allow you to include content, that should be <strong>repeated</strong> on multiple page types, in a single location. For example, layouts are a good place to include any content you might want in your <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element, as well as headers and footers.</li> <li>There are the two layout types: General, Checkout.</li> <li>Most layout files also contain the following Schema objects: <code class="language-plaintext highlighter-rouge">content_for_header</code>, <code class="language-plaintext highlighter-rouge">content_for_layout</code>.</li> </ul> <h3 id="theme-template">Theme Template</h3> <ul> <li>Theme Template files located in <code class="language-plaintext highlighter-rouge">templates</code> directory.</li> <li>Templates control what’s rendered on each type of page in a theme.</li> <li>Each page type in an online store has an associated template type. For example, to render a product page, the theme needs at least one template of type <code class="language-plaintext highlighter-rouge">product</code>.</li> <li>There are two different file types you can use for a theme template: JSON and Liquid.</li> <li>Template types can be: <code class="language-plaintext highlighter-rouge">404</code>, <code class="language-plaintext highlighter-rouge">article</code>, <code class="language-plaintext highlighter-rouge">blog</code>, <code class="language-plaintext highlighter-rouge">cart</code>, <code class="language-plaintext highlighter-rouge">collection</code>, <code class="language-plaintext highlighter-rouge">customers/account</code>, etc.</li> </ul> <h3 id="sections">Sections</h3> <ul> <li>Section files are located in the <code class="language-plaintext highlighter-rouge">sections</code> directory of the theme.</li> <li>Sections are Liquid files that allow you to create reusable modules of content that can be customized by <strong>merchants</strong>.</li> <li>For example, you can create an Image with text section that displays an image and text side-by-side with options for merchants to choose the image, set the text, and select the display order.</li> </ul> <h3 id="blocks">Blocks</h3> <ul> <li>Blocks are reusable modules for structuring content within sections.</li> <li>Blocks can represent a variety of content types such as text, images, products, collections and videos. They can be added, removed, and reordered within a section, providing merchants with a high degree of flexibility and customization in the theme editor.</li> </ul> <h2 id="headless">Headless</h2> <h3 id="what-is-headless">What is Headless</h3> <ul> <li>Headless means total customized storefront which give you maximum flexibility.</li> <li>You can build Headless with Shopify’s Storefront APIs and Customer Account APIs.</li> <li>Hydrogen is Shopify official headless framework. You can alwo bring your own stack.</li> <li>Oxygen is Shopify’s global serverless hosting platform, built for deploying Hydrogen storefronts at the edge.</li> <li>custom storefron, not just website, it can be native mobile app, PWA, video livestreams, IoT, or just add a buy button on an existing website.</li> </ul> <h2 id="fqa">FQA</h2> <h3 id="what-is-storefront">What is Storefront</h3> <p>Storefront is the interface to customers from which you can sell things. There are two way to build your Storefront: Using Theme or Headless.</p> <h3 id="what-is-point-of-sale-pos">What is Point of Sale (POS)</h3> <p>The point of sale (POS) is the time and place at which a retail transaction is completed. At the point of sale, the merchant calculates the amount owed by the customer, indicates that amount, prepare an invoice for the customer (which may be a cash register printout), and indicates the options for the customer to make payment.</p> <h3 id="what-is-shopify-point-of-sale-pos">What is Shopify Point of Sale (POS)</h3> <p>Shopify POS is a point of sale <strong>app</strong> that you can use to sell your products in person. Process orders, accept payments, produce receipts, and control it all from your mobile device. Shopify online store automatically synchronizes with Shopify POS, and you manage your entire business from one dashboard. Inventory, product, and payment updates that you make in your Shopify admin will instantly take effect in Shopify POS.</p> <h3 id="what-is-app-extension">What is App extension</h3> <ul> <li>An app extension enables you to add your app’s functionality to Shopify user interfaces.</li> <li>An app extension isn’t an app. It’s a mechanism that lets an app add features to certain defined parts of several Shopify user interfaces</li> <li><strong>Without</strong> an app extension, users interact directly with your app. Your app relays information to Shopify that gets surfaced back to the users through your app.</li> <li><strong>With</strong> an app extension, users interact with Shopify. Shopify relays information to your app that gets surfaced back to the users through your app extension in Shopify.</li> </ul> <h3 id="how-theme-work-in-shopify">How Theme work in Shopify</h3> <h3 id="what-is-headless-shopify-theme">What is headless Shopify theme</h3> <p>A theme determines the way that a Shopify online store looks, feels, and functions for merchants and their customers. Shopify themes are built using Shopify’s theme templating language, Liquid, along with HTML, CSS, JavaScript, and JSON. Using these languages, developers can create any look and feel that their clients want. Headless Theme is used for Headless storefront.</p> <h2 id="references">References</h2> <ul> <li><a href="https://shopify.dev">shopify.dev</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="Shopify"/><category term="E-Commerce"/><summary type="html"><![CDATA[There are three parts that developers can build on: Apps, Themes, Headless(custom storefront).]]></summary></entry><entry><title type="html">SEO Overview</title><link href="https://benwzj.github.io/blog/2024/SEO/" rel="alternate" type="text/html" title="SEO Overview"/><published>2024-05-28T00:00:00+00:00</published><updated>2024-05-28T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/SEO</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/SEO/"><![CDATA[<h2 id="what-is-seo">What is SEO</h2> <p>Search engine optimization (SEO) is the process of increasing the visibility of website pages on search engines in order to attract more relevant traffic.</p> <p>From search engine view, SEO is also about helping search engines understand your content, and helping users find your site and make a decision about whether they should visit your site.</p> <p>SEO can also refer to a position (Search Engine Optimizer)</p> <p>Google provide many reports and tools to help to improve website SEO. Check <a href="https://support.google.com/webmasters">here</a> to see HOW Google help you improve your webiste SEO.</p> <h2 id="how-google-search-works">How Google Search works</h2> <h3 id="crawling">Crawling:</h3> <ul> <li>Google downloads text, images, and videos from pages it found on the internet with automated programs called crawlers.</li> <li>Google constantly look for new and updated pages and add them to its list of known pages. This process is called “URL discovery”.</li> <li>During the crawl, Google renders the page and runs any JavaScript it finds using a recent version of Chrome, similar to how your browser renders pages you visit.</li> <li>Crawling depends on whether Google’s crawlers can access the site. For example, <code class="language-plaintext highlighter-rouge">robots.txt</code> rules preventing Googlebot’s access to the page.</li> <li>Some JavaScript sites may use SPA where the initial HTML does not contain the actual content and Google needs to execute JavaScript before being able to see the actual page content that JavaScript generates. Googlebot queues all pages for rendering.</li> </ul> <h3 id="indexing">Indexing:</h3> <ul> <li>After a page is crawled, Google tries to understand what the page is about. This stage is called indexing and it includes processing and analyzing the textual content and key content tags and attributes, such as <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code> elements and <code class="language-plaintext highlighter-rouge">alt</code> attributes, <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">videos</code>, and more. And stores the information in the Google index.</li> <li>During the indexing process, Google determines if a page is a duplicate of another page on the internet or <strong>canonical</strong>.</li> <li>Indexing also depends on the <strong>content</strong> of the page and its <strong>metadata</strong>.</li> </ul> <h3 id="serving-search-results">Serving search results:</h3> <ul> <li>When a user enters a query, our machines search the index for matching pages and return the results we believe are the highest quality and most relevant to the user’s query.</li> <li>Search Console might tell you that a page is indexed, but you don’t see it in search results. Check it.</li> </ul> <h2 id="google-give-guides-to-maintain-your-websites-seo">Google give guides to Maintain your website’s SEO</h2> <h3 id="control-how-google-crawls-and-indexes">Control how Google crawls and indexes</h3> <ul> <li>Work around Canonical URL a canonical URL is the URL of a page that Google chose as the most representative from a set of duplicate pages.</li> <li>Make sure your resource are accessible</li> <li>Robots.txt</li> <li>Use Sitemaps</li> <li>Internationalized or multi-lingual sites</li> <li>Follow crawling and indexing best practices</li> <li>Help Google understand your site</li> <li>Follow Google guidelines</li> </ul> <h2 id="google-search-console">Google Search Console</h2> <p><a href="https://search.google.com/search-console/">Search Console</a> helps you monitor, maintain, and troubleshoot your site’s presence in Google Search results</p> <p>Search Console offers tools and reports for the following actions:</p> <ul> <li>Confirm that Google can find and crawl your site.</li> <li>Fix indexing problems and request re-indexing of new or updated content.</li> <li>View Google Search traffic data for your site: how often your site appears in Google Search, which search queries show your site, how often searchers click through for those queries, and more.</li> <li>Receive alerts when Google encounters indexing, spam, or other issues on your site.</li> <li>Show you which sites link to your website.</li> </ul> <h2 id="rich-results-test">Rich Results Test</h2> <p><a href="https://search.google.com/test/rich-results">Rich Results Test</a> can Test your publicly accessible page to see which rich results can be generated by the structured data it contains.</p> <h3 id="what-is-structured-data-markup">What is structured data markup</h3> <p>Structured data is a standardized format for providing information about a page and classifying the page content; for example, on a recipe page, what are the ingredients, the cooking time and temperature, the calories, and so on.</p> <p>Adding structured data can enable search results that are more engaging to users and might encourage them to interact more with your website, which are called rich results.</p> <p>For example, here is a JSON-LD structured data snippet that might appear on a recipe page, describing the title of the recipe, the author of the recipe, and other details:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Party Coffee Cake<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"application/ld+json"</span><span class="nt">&gt;</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@context</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://schema.org/</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Recipe</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Party Coffee Cake</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Person</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mary Stone</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">datePublished</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2018-03-10</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This coffee cake is awesome and perfect for parties.</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">prepTime</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PT20M</span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Party coffee cake recipe<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;i&gt;</span>by Mary Stone, 2018-03-10<span class="nt">&lt;/i&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This coffee cake is awesome and perfect for parties.
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Preparation time: 20 minutes
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://search.google.com/search-console/">Search Console</a></li> <li><a href="https://search.google.com/test/rich-results">Rich Results Test</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="SEO"/><category term="Website"/><summary type="html"><![CDATA[What is SEO]]></summary></entry><entry><title type="html">Rendering on the Web</title><link href="https://benwzj.github.io/blog/2024/rendering-web/" rel="alternate" type="text/html" title="Rendering on the Web"/><published>2024-05-27T00:00:00+00:00</published><updated>2024-05-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/rendering-web</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/rendering-web/"><![CDATA[<p>There are many ways to rendering web application on the web.</p> <ul> <li>Server-side rendering (SSR): Rendering a client-side or universal app to HTML on the server.</li> <li>Static rendering: Producing a separate HTML file for each URL ahead of time.</li> <li>Client-side rendering (CSR): Rendering an app in a browser, using JavaScript to modify the DOM.</li> <li>Rehydration: “Booting up” JavaScript views on the client so they reuse the server-rendered HTML’s DOM tree and data.</li> <li>Prerendering: Running a client-side application at build time to capture its initial state as static HTML.</li> </ul> <p>Performance is the important fact for web application.</p> <ul> <li>Time to First Byte (<strong>TTFB</strong>): The time between clicking a link and the first byte of content loading on the new page.</li> <li>First Contentful Paint (<strong>FCP</strong>): The time when requested content (article body, etc) becomes visible.</li> <li>Interaction to Next Paint (<strong>INP</strong>): A representative metric that assesses whether a page consistently responds quickly to user inputs.</li> <li>Total Blocking Time (<strong>TBT</strong>): A proxy metric for INP that calculates how long the main thread was blocked during page load.</li> </ul> <blockquote class="block-warning"> <p>Broadly speaking, It is encouraged to consider server-side rendering or static rendering over a full rehydration approach.</p> </blockquote> <h2 id="server-side-rendering">Server-side rendering</h2> <p>Server-side rendering generates the full HTML for a page on the server in response to navigation. This avoids additional round trips for data fetching and templating on the client, because the renderer handles them before the browser gets a response.</p> <p>Server-side rendering generally produces a fast FCP.</p> <p>React users can use server DOM APIs or solutions built on them like Next.js for server-side rendering. Vue users can use Vue’s server-side rendering guide or Nuxt. Angular has Universal.</p> <h2 id="static-rendering">Static rendering</h2> <p>Static rendering happens at <strong>build</strong> time. With HTML responses generated in advance, you can deploy static renders to multiple CDNs to take advantage of edge caching.</p> <p>Tools like Gatsby are designed to make developers feel like their application is being rendered dynamically, not generated as a build step. Static site generation tools such as 11ty, Jekyll, and Metalsmith embrace their static nature, providing a more template-driven approach.</p> <h2 id="prerendering">prerendering</h2> <p>static rendering and prerendering behave differently: statically rendered pages are interactive without needing to execute much client-side JavaScript, whereas prerendering improves the FCP of a Single Page Application that must be booted on the client to make pages truly interactive.</p> <p>Prerendering generally needs more JavaScript to become interactive.</p> <h2 id="client-side-rendering">Client-side rendering</h2> <p>Client-side rendering means rendering pages directly in the browser with JavaScript. All logic, data fetching, templating, and routing are handled on the client instead of on the server. The effective outcome is that more data is passed to the user’s device from the server, and that comes with its own set of tradeoffs.</p> <p>The primary downside to client-side rendering is that the amount of JavaScript required tends to grow as an application grows.</p> <h2 id="rehydration-combines-server-side-and-client-side-rendering">Rehydration combines server-side and client-side rendering.</h2> <p>Rehydration is an approach that tries to smooth over the tradeoffs between client-side and server-side rendering by doing both. Navigation requests like full page loads or reloads are handled by a server that renders the application to HTML, then the JavaScript and data used for rendering is embedded into the resulting document. When done carefully, this achieves a fast FCP like server-side rendering, then “picks up” by rendering again on the client.</p> <p>This is an effective solution, but it can have considerable performance drawbacks. The primary downside of server-side rendering with rehydration is that it can have a significant negative impact on TBT and INP, even if it improves FCP.</p> <p>Also, Because this duplicates a lot of HTML, rehydration can cause more problems than just delayed interactivity.</p> <h2 id="stream-server-side-rendering-and-rehydrate-progressively">Stream server-side rendering and rehydrate progressively</h2> <p>Streaming server-side rendering lets you send HTML in chunks that the browser can progressively render as it’s received. This can get markup to your users faster, speeding up your FCP.</p> <p>Progressive rehydration is also worth considering, and React has implemented it. With this approach, individual pieces of a server-rendered application are “booted up” over time, instead of the current common approach of initializing the entire application at once.</p> <h2 id="seo-considerations">SEO considerations</h2> <p>When choosing a web rendering strategy, teams often consider the impact of SEO.</p> <p>Server-side rendering is a popular choice for delivering a “complete looking” experience that crawlers can interpret.</p> <p>Crawlers can understand JavaScript, but there are often limitations to how they render. Client-side rendering can work, but often needs additional testing and overhead. More recently, dynamic rendering has also become an option worth considering if your architecture depends heavily on client-side JavaScript.</p> <h2 id="conclusion">Conclusion</h2> <figure> <picture> <img src="/assets/img/app-rendering-types.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="references">References</h2> <ul> <li><a href="https://web.dev/articles/rendering-on-the-web#seo-considerations">web.dev</a></li> </ul>]]></content><author><name></name></author><category term="Website"/><category term="Website"/><category term="Rendering"/><category term="React"/><summary type="html"><![CDATA[There are many ways to rendering web application on the web. Server-side rendering (SSR): Rendering a client-side or universal app to HTML on the server. Static rendering: Producing a separate HTML file for each URL ahead of time. Client-side rendering (CSR): Rendering an app in a browser, using JavaScript to modify the DOM. Rehydration: “Booting up” JavaScript views on the client so they reuse the server-rendered HTML’s DOM tree and data. Prerendering: Running a client-side application at build time to capture its initial state as static HTML.]]></summary></entry><entry><title type="html">Next.js Runtime</title><link href="https://benwzj.github.io/blog/2024/nextjs-runtime/" rel="alternate" type="text/html" title="Next.js Runtime"/><published>2024-05-20T00:00:00+00:00</published><updated>2024-05-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-runtime</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-runtime/"><![CDATA[<h2 id="what-is-nextjs-runtime">What is Next.js Runtime</h2> <p>In the context of Next.js, runtime refers to the set of libraries, APIs, and general functionality available to your code during execution.</p> <p>Next.js has two server runtimes to run your application:</p> <ul> <li>The <strong>Node.js Runtime</strong> (default) has access to all Node.js APIs and compatible packages from the ecosystem. For doing SSR, or serving API routes. Node.js runtime can be Server or Serverless.</li> <li>The <strong>Edge Runtime</strong> is based on Web APIs. For Middlewar.</li> </ul> <p>There are many differences between these two runtimes. Here’s a quick comparison:</p> <table> <thead> <tr> <th style="text-align: left"> </th> <th style="text-align: center">Node (server)</th> <th style="text-align: right">Node (lambda)</th> <th style="text-align: right">Edge</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Cold Boot</td> <td style="text-align: center">/</td> <td style="text-align: right">~250ms</td> <td style="text-align: right">Instant</td> </tr> <tr> <td style="text-align: left">HTTP Streaming</td> <td style="text-align: center">Yes</td> <td style="text-align: right">No</td> <td style="text-align: right">Yes</td> </tr> <tr> <td style="text-align: left">IO</td> <td style="text-align: center">All</td> <td style="text-align: right">All</td> <td style="text-align: right">fetch</td> </tr> <tr> <td style="text-align: left">Scalability</td> <td style="text-align: center">/</td> <td style="text-align: right">High</td> <td style="text-align: right">Highest</td> </tr> <tr> <td style="text-align: left">Security</td> <td style="text-align: center">Normal</td> <td style="text-align: right">High</td> <td style="text-align: right">Highest</td> </tr> <tr> <td style="text-align: left">Latency</td> <td style="text-align: center">Normal</td> <td style="text-align: right">Low</td> <td style="text-align: right">Lowest</td> </tr> <tr> <td style="text-align: left">Code Size</td> <td style="text-align: center">/</td> <td style="text-align: right">50MB</td> <td style="text-align: right">1MB</td> </tr> <tr> <td style="text-align: left">NPM Packages</td> <td style="text-align: center">All</td> <td style="text-align: right">All</td> <td style="text-align: right">A smaller subset</td> </tr> </tbody> </table> <blockquote> <p>You can specify a runtime for individual route segments in your Next.js application.</p> </blockquote> <h2 id="switch-runtime">Switch Runtime</h2> <h3 id="why">Why</h3> <p>Next.js’ default runtime configuration is good for most use cases, but there’re still many reasons to change to one runtime over the other one. For example, to enable React 18’s streaming SSR feature, you cannot deploy the app to lambda. For API routes that relies on native Node.js APIs, it has to be running in the Node.js Runtime. But if an API only uses a simple cookie-based authentication, using middleware and the Edge Runtime will be a better choice due to its lower latency as well as better scalability.</p> <h3 id="how">How</h3> <ol> <li>Global Runtime A runtime option in <code class="language-plaintext highlighter-rouge">next.config.js</code>, which can be either <code class="language-plaintext highlighter-rouge">nodejs</code> or <code class="language-plaintext highlighter-rouge">edge</code> (or leave it as <code class="language-plaintext highlighter-rouge">undefined</code>): <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">experimental</span><span class="p">:</span> <span class="p">{</span>
 <span class="nx">runtime</span><span class="p">?:</span> <span class="dl">'</span><span class="s1">nodejs</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">edge</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Per-route Runtime Config For each route (pages and API routes), you can export an option runtime config such as: <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">runtime</span><span class="p">?:</span> <span class="dl">'</span><span class="s1">nodejs</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">edge</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div> </div> <p>If the segment runtime is not set, the default nodejs runtime will be used.</p> </li> </ol> <h2 id="nodejs-runtime">Node.js Runtime</h2> <p>According to the Node.js official documentation: Node.js is an asynchronous event-driven JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts. According to the Next.js official documentation: Next.js is a React framework for building full-stack web applications.</p> <p>So Next.js is a React framework application which run in Node.js runtime environment. You can say Next.js is Node.js application.</p> <p>Using the Node.js runtime gives you access to all Node.js APIs, and all npm packages that rely on them. However, it’s not as fast to start up as routes using the Edge runtime.</p> <h2 id="edge-runtime">Edge Runtime</h2> <h3 id="what-is-edge-runtime">What is Edge Runtime</h3> <p>The Edge Runtime is designed to help framework authors adopt edge computing and provide open-source tooling built on Web standards. It’s designed to be integrated into frameworks (like Next.js) and not for usage in application code.</p> <p>The Edge Runtime is a subset of Node.js APIs, giving you compatibility and interoperability between multiple web environments. The project is designed to be compliant with standards developed by WinterCG - a community group between Vercel, Cloudflare, Deno, Shopify, and more. The term “Edge” refers to the orientation toward instant serverless compute environments and not a specific set of locations.</p> <p>The Edge Runtime is ideal if you need to deliver dynamic, personalized content at low latency with small, simple functions. The Edge Runtime’s speed comes from its minimal use of resources,</p> <h3 id="using-the-edge-runtime-locally">Using the Edge Runtime Locally</h3> <p>When developing and testing locally, the Edge Runtime will polyfill Web APIs and ensure compatibility with the Node.js layer. In production, the Edge Runtime uses the JavaScript V8 engine, not Node.js, so there is no access to Node.js APIs.</p> <h2 id="fqa">FQA</h2> <ul> <li>Where is the Edge Runtime?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://edge-runtime.vercel.app/">edge-runtime.vercel.app</a>.</li> <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">edge-and-nodejs-runtimes</a>.</li> <li><a href="https://github.com/vercel/next.js/discussions/34179">RFC Switchable Next.js Runtime:</a>.</li> </ul>]]></content><author><name></name></author><category term="React"/><category term="Next.js"/><category term="Node.js"/><category term="Runtime"/><summary type="html"><![CDATA[What is Next.js Runtime]]></summary></entry><entry><title type="html">GraphQL Introduction</title><link href="https://benwzj.github.io/blog/2024/GraphQL/" rel="alternate" type="text/html" title="GraphQL Introduction"/><published>2024-05-11T00:00:00+00:00</published><updated>2024-05-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/GraphQL</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/GraphQL/"><![CDATA[<h2 id="graphql-concept">GraphQL Concept</h2> <p>GraphQL is a <strong>query language</strong> for your API, and a server-side runtime for executing queries using a type system you define for your data.</p> <p>Clients form requests by using the GraphQL query language, and the GraphQL server executes the request and returns the data in a response.</p> <h3 id="features">Features</h3> <ul> <li><strong>The GraphQL query language</strong>: basically about <strong>selecting fields</strong> on objects.</li> <li><strong>A GraphQL service</strong>: it is created by defining <strong>types</strong> and <strong>fields on those types</strong>, then providing functions for each field on each type.</li> <li>In <strong>a GraphQL operation</strong>: the client specifies how to structure the data when it is returned by the server. This makes it possible for the client to query only for the data it needs, in the format that it needs it in.</li> <li><strong>GraphQL request structures</strong> resemble JSON. However, GraphQL requests don’t use quotes for field names and don’t have colons separating field names and values. Responses are in JSON format.</li> </ul> <h3 id="graphql-vs-rest">GraphQL vs REST</h3> <p>We usually compare GraphQL and REST.</p> <p>REST uses <strong>“resources”</strong> as its core concept. That means entities are identified by URIs. In contrast, GraphQL’s conceptual model is an entity <strong>graph</strong>. A GraphQL server operates on a single URL/endpoint, usually /graphql, and all GraphQL requests for a given service should be directed at this endpoint.</p> <p>In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. But in GraphQL, every field and nested object can get its own set of arguments, making GraphQL a complete replacement for making multiple API fetches.</p> <h3 id="graphql-has-three-top-level-operations">GraphQL has three top-level operations:</h3> <ol> <li>Query - read-only fetch</li> <li>Mutation - write, followed by a fetch</li> <li>Subscription - long-lived connection for receiving data</li> </ol> <p>GraphQL exposes these operations via a schema that defines the capabilities of an API. A schema is comprised of types, which can be root types (query, mutation, or subscription) or user-defined types.</p> <blockquote class="block-warning"> <p>Developers start with a schema to define the capabilities of their GraphQL API, which a client application will communicate with.</p> </blockquote> <h2 id="basic-example">Basic example</h2> <h3 id="graphql-service">GraphQL service</h3> <p>A GraphQL service define schema and object types:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Query</span> <span class="p">{</span>
  <span class="nl">me</span><span class="p">:</span> <span class="nx">User</span>
<span class="p">}</span>
<span class="nx">type</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="nx">ID</span>
  <span class="nx">name</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>
</code></pre></div></div> <p>Along with resolver functions for each field on each type:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Query_me</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">user</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">User_name</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nf">getName</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="graphql-operation">GraphQL operation</h3> <p>After a GraphQL service is running, it can receive GraphQL queries to and execute. For example, the query:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nx">me</span> <span class="p">{</span>
    <span class="nx">name</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Could produce the following JSON result:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">me</span><span class="dl">"</span><span class="p">:{</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Luke Skywalker</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="basic-concepts">Basic Concepts</h2> <ul> <li><strong>Arguments</strong>: (just like arguments in Function()) In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. In GraphQL, every field and nested object can get its own set of arguments. It let you fetch more specific data.</li> <li><strong>Aliases</strong>: They let you rename the result of a field to anything you want.</li> <li><strong>fragments</strong>: (just like Functions) GraphQL includes reusable units called fragments. Fragments let you construct sets of fields, and then include them in queries where you need to.</li> <li>The <strong>Operation Type</strong> is either query, mutation, or subscription and describes what type of operation you’re intending to do.</li> <li>The <strong>Operation Name</strong> is a meaningful and explicit name for your operation.</li> <li><strong>Variables</strong>: (<code class="language-plaintext highlighter-rouge">$variableName: variableType</code>) All declared variables must be either scalars, enums, or input object types.</li> <li>Directives: The core GraphQL specification includes exactly two directives, which must be supported by any spec-compliant GraphQL server implementation: <ul> <li><code class="language-plaintext highlighter-rouge">@include(if: Boolean)</code> Only include this field in the result if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> <li><code class="language-plaintext highlighter-rouge">@skip(if: Boolean)</code> Skip this field if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> </ul> </li> </ul> <h2 id="graphql-schema-language">GraphQL schema language</h2> <p>The most basic components of a GraphQL schema are object types, which just represent a kind of object you can fetch from your service, and what fields it has.</p> <h3 id="the-query-and-mutation-types">The Query and Mutation types</h3> <p>Most types in your schema will just be normal object types, but there are two types that are special within a schema:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>schema {
  query: Query
  mutation: Mutation
}
</code></pre></div></div> <h3 id="scalar-types">Scalar types:</h3> <p>they represent the leaves of the query.</p> <h3 id="interface-type">Interface type:</h3> <p>An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface. (Like class)</p> <h3 id="union-types">Union types:</h3> <p>Union types are very similar to interfaces, but they don’t get to specify any common fields between the types. <code class="language-plaintext highlighter-rouge">union SearchResult = Human | Droid | Starship</code> Wherever we return a SearchResult type in our schema, we might get a Human, a Droid, or a Starship.</p> <h3 id="input-types">Input types:</h3> <p>in the GraphQL schema language, input types look exactly the same as regular object types, but with the keyword input instead of type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input ReviewInput {
  stars: Int!
  commentary: String
}
</code></pre></div></div> <p>Input type is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created. You can’t mix input and output types in your schema. Input object types also can’t have arguments on their fields.</p> <h2 id="apollo-graphql">Apollo GraphQL</h2> <h2 id="authorization">Authorization</h2> <h2 id="references">References</h2> <ul> <li><a href="https://graphql.org/">GraphQL official website</a></li> <li><a href="https://www.apollographql.com/">Apollo Graphql</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="GraphQL"/><category term="REST"/><category term="Database"/><summary type="html"><![CDATA[GraphQL Concept]]></summary></entry><entry><title type="html">NPM YARN and PNPM</title><link href="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/" rel="alternate" type="text/html" title="NPM YARN and PNPM"/><published>2024-05-10T00:00:00+00:00</published><updated>2024-05-10T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/npm-pnpm-yarn</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/"><![CDATA[<h2 id="npm">NPM</h2> <p>NPM stands for Node Package Manager. npm is a package manager for the JavaScript programming language maintained by Microsoft’s npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js and is included as a recommended feature in the Node.js installer.</p> <h3 id="packages">Packages</h3> <p>A package in Node.js contains all the files you need for a module. Modules are JavaScript libraries you can include in your project. A package is registered in npmjs.com registry.</p> <h3 id="about-scopes">About scopes</h3> <p>When you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.</p> <blockquote class="block-warning"> <p>A scope allows you to create a package with the same name as a package created by another user or organization without conflict.</p> </blockquote> <p>When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the <code class="language-plaintext highlighter-rouge">@</code> and the slash <code class="language-plaintext highlighter-rouge">/</code>:</p> <ul> <li>“npm” scope: <code class="language-plaintext highlighter-rouge">@npm/package-name</code></li> <li>“npmcorp” scope: <code class="language-plaintext highlighter-rouge">@npmcorp/package-name</code></li> </ul> <h4 id="scopes-and-package-visibility">Scopes and package visibility</h4> <p>Unscoped packages are always public. Private packages are always scoped. Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.</p> <h3 id="commonjs">CommonJS</h3> <p>CommonJS is a project to <strong>standardize the module ecosystem</strong> for JavaScript outside of web browsers (e.g. on web servers or native desktop applications).</p> <p>CommonJS’s specification of how modules should work is widely used today for server-side JavaScript with Node.js. It is also used for browser-side JavaScript, but that code must be packaged with a transpiler since browsers don’t support CommonJS.</p> <p>The other major module specification in use is the ECMAScript (ES) modules specification (<strong>ES6 modules</strong> aka ES2015 modules). CommonJS can be recognized by the use of the <code class="language-plaintext highlighter-rouge">require()</code> function and <code class="language-plaintext highlighter-rouge">module.exports</code>, while ES modules use <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code> statements for similar (though not identical) functionality.</p> <h3 id="use-npm-command">Use npm command</h3> <p>npm manages downloads of dependencies of your project.</p> <ul> <li>If a project has a package.json file, by running <code class="language-plaintext highlighter-rouge">npm install</code>, it will install everything the project needs, in the <code class="language-plaintext highlighter-rouge">node_modules</code> folder, creating it if it’s not existing already.</li> <li>You can also install a specific package by running <code class="language-plaintext highlighter-rouge">npm install &lt;package-name&gt;</code>.</li> <li>Updating packages <code class="language-plaintext highlighter-rouge">npm update</code></li> <li>Running Tasks <code class="language-plaintext highlighter-rouge">npm run &lt;task-name&gt;</code></li> </ul> <h3 id="npx">npx</h3> <p>Run packages without downloading using npx.</p> <h2 id="yarn">YARN</h2> <p>YARN stands for Yet Another Resource Negotiator. It is an alternative package manager for JavaScript that was created in 2016 by Facebook, Google, Exponent, and Tilde. It was designed to address some of the issues and limitations of NPM, such as speed, reliability, and security.</p> <p>YARN has a similar command-line interface as NPM, but with some differences and improvements. It also uses the same package.json file as NPM, but it adds another file called yarn.lock that locks the exact versions of your dependencies. It also creates a node_modules folder where it stores the installed packages.</p> <h3 id="advantages">Advantages</h3> <ul> <li>It is faster and more efficient than NPM when installing or updating packages</li> <li>It uses a flat dependency structure that avoids duplication and nesting of packages</li> <li>It supports offline installation of packages from a local cache</li> <li>It has a better resolution algorithm that ensures consistent and deterministic versions of packages across different environments <h3 id="disadvantages">Disadvantages</h3> </li> <li>It is not as widely used or supported as NPM by the JavaScript community</li> <li>It may not be compatible with some NPM packages or features</li> <li>It may have some bugs or issues that are not yet fixed or resolved</li> </ul> <h2 id="pnpm">PNPM</h2> <p>When using npm, if you have 100 projects using a dependency, you will have 100 copies of that dependency saved on disk. With pnpm, the dependency will be stored in a content-addressable store, so:</p> <ul> <li>If you depend on different versions of the dependency, only the files that differ are added to the store. For instance, if it has 100 files, and a new version has a change in only one of those files, pnpm update will only add 1 new file to the store, instead of cloning the entire dependency just for the singular change.</li> <li>All the files are saved in a single place on the disk. When packages are installed, their files are hard-linked from that single place, consuming no additional disk space. This allows you to share dependencies of the same version across projects.</li> </ul> <p>As a result, you <strong>save a lot of space</strong> on your disk proportional to the number of projects and dependencies, and you have a lot faster installations!</p> <h3 id="boosting-installation-speed">Boosting installation speed</h3> <p>pnpm perfoms installation in three stages:</p> <ul> <li>Dependency resolution. All required dependencies are identified and fetched to the store.</li> <li>Directory structure calculation. The <code class="language-plaintext highlighter-rouge">node_modules</code> directory structure is calculated based on the dependencies.</li> <li>Linking dependencies. All remaining dependencies are fetched and hard linked from the store to <code class="language-plaintext highlighter-rouge">node_modules</code>.</li> </ul> <h3 id="pnpm-creating-a-non-flat-node_modules-directory">pnpm Creating a non-flat node_modules directory</h3> <p><code class="language-plaintext highlighter-rouge">npm</code> and <code class="language-plaintext highlighter-rouge">Yarn</code> create flat node_modules directory.</p> <p>But by default, <code class="language-plaintext highlighter-rouge">pnpm</code> uses <strong>symlinks</strong> to add only the direct dependencies of the project into the root of the modules directory. pnpm Creating a non-flat node_modules directory</p> <h2 id="npm-vs-yarn-vs-pnpm">npm vs yarn vs pnpm</h2> <table> <thead> <tr> <th style="text-align: left">Feature</th> <th style="text-align: left">NPM</th> <th style="text-align: left">YARN</th> <th style="text-align: left">PNPM</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Speed</td> <td style="text-align: left">Slow</td> <td style="text-align: left">Fast</td> <td style="text-align: left">Faster</td> </tr> <tr> <td style="text-align: left">Disk Space</td> <td style="text-align: left">High</td> <td style="text-align: left">Low</td> <td style="text-align: left">Lower</td> </tr> <tr> <td style="text-align: left">Security</td> <td style="text-align: left">Low</td> <td style="text-align: left">High</td> <td style="text-align: left">Higher</td> </tr> <tr> <td style="text-align: left">Compatibility</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">Popularity</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Low</td> </tr> <tr> <td style="text-align: left">Ecosystem</td> <td style="text-align: left">Rich</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">CLI</td> <td style="text-align: left">Simple</td> <td style="text-align: left">Complex</td> <td style="text-align: left">Similar to NPM</td> </tr> <tr> <td style="text-align: left">directory</td> <td style="text-align: left">flattened</td> <td style="text-align: left">flattened</td> <td style="text-align: left">symlinks</td> </tr> </tbody> </table> <h2 id="fqa">FQA</h2> <h3 id="is-it-a-problem-if-mix-using-them-in-a-project">Is it a problem if mix using them in a project?</h3> <p>You can switch between them if you want, as long as you delete the existing node_modules folder and lockfile before installing with a different package manager.</p> <h3 id="lockfile">lockfile?</h3> <p>Use a lockfile to ensure reproducible installs across different machines and environments. A lockfile is a file that records the exact versions and sources of the packages that your project depends on, so that you can install them consistently every time. NPM uses a package-lock.json file, YARN uses a yarn.lock file, and PNPM uses a pnpm-lock.yaml file. You should commit these files to your version control system and update them whenever you add, remove, or update a package</p>]]></content><author><name></name></author><category term="Programming"/><category term="npm"/><category term="Node.js"/><summary type="html"><![CDATA[NPM]]></summary></entry><entry><title type="html">CSS-in-JS Instroduction</title><link href="https://benwzj.github.io/blog/2024/css-in-js/" rel="alternate" type="text/html" title="CSS-in-JS Instroduction"/><published>2024-04-26T00:00:00+00:00</published><updated>2024-04-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-in-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-in-js/"><![CDATA[<h2 id="what-is-css-in-js">What is CSS-in-JS</h2> <p>The tradiction way to use CSS in SPA is using global CSS files. But there are some drawbacks in this approach:</p> <ul> <li>Headache in inventing class names.</li> <li>Hard to maintian: Changing one CSS may affect many HTML.</li> <li>Zombies CSS code.</li> </ul> <p>If you write CSS in JavaScript, you can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If you delete a component, you delete its CSS too. No more append-only stylesheets!</p> <h3 id="some-avandtage-of-css-in-js">Some Avandtage of CSS-in-JS:</h3> <ul> <li>Styles/Component co-location: As components include all the source code, styles, and logic they need for proper running, you can securely move them around.</li> <li>Local Scoping: By default, CSS doesn’t allow local scoping. Each style rule has a global scope, so it applies to the entire project.</li> <li>Reusability: Components are reusable, so you only have to write them once, then you can run them everywhere.</li> <li>Dynamic Functionality: As CSS-in-JS is essentially JavaScript code, you can apply complex logic to your style rules, such as loops, conditionals, variables, state-based styling, and more.</li> <li>Provide State-based styling: CSS-in-JS gives developers API to describe state-based styles in a better way than using a bunch of conditional class names.</li> <li>Constrain Selector: CSS-in-JS helps to constrain that power by scoping its selectors. Providing more expressiveness while encouraging more maintainable patterns than cascading.</li> <li>Painless maintenance: you never have to hunt across different files to find the styling affecting your component, so maintenance is a piece of cake no matter how big your codebase is.</li> <li>Automatic vendor prefixing: Most library provide this.</li> <li>Easier deletion of CSS: it can be hard to know whether a class name is used somewhere in your codebase. Write CSS in JS, every bit of styling is tied to a specific component. If the component is unused (which tooling can detect) and gets deleted, all its styles get deleted with it.</li> <li>Automatic critical CSS: styled-components keeps track of which components are rendered on a page and injects their styles and nothing else, fully automatically. Combined with code splitting, this means your users load the least amount of code necessary.</li> <li>No class name bugs: styled-components generates unique class names for your styles. You never have to worry about duplication, overlap or misspellings.</li> </ul> <h3 id="some-popular-css-in-js-library">Some popular CSS-in-JS library:</h3> <ul> <li>styled-components</li> <li>Emotion</li> <li>JSS</li> <li>APHRODITE</li> <li>RADIUM</li> <li>STYLETRON</li> <li>STYLED-JSX</li> </ul> <h2 id="styled-components">styled-components</h2> <p>styled-components is the result of wondering how we could enhance CSS for styling React component systems.</p> <p>It removes the mapping between components and styles. This means that when you’re defining your styles, you’re actually creating a normal React component, that has your styles attached to it.</p> <h3 id="usage">Usage</h3> <p>Install: <code class="language-plaintext highlighter-rouge">npm install styled-component</code> Once you’ve added styled-components you will have access to the global <code class="language-plaintext highlighter-rouge">window.styled</code> variable.</p> <p>It utilises tagged template literals to style your components. Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a Title component that'll render an &lt;h1&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">h1</span><span class="s2">`
  font-size: 1.5em;
  text-align: center;
  color: #e22`</span>
<span class="c1">// Create a Wrapper component that'll render a &lt;section&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Wrapper</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">section</span><span class="s2">`
  padding: 4em;
  background: papayawhip;
`</span><span class="p">;</span>

<span class="c1">// Use Title and Wrapper like any other React component – except they're styled!</span>
<span class="nf">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Wrapper</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Title</span><span class="o">&gt;</span>
      <span class="nx">Hello</span> <span class="nx">World</span><span class="o">!</span>
    <span class="o">&lt;</span><span class="sr">/Title</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/Wrapper</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div> <h2 id="emotion">Emotion</h2> <h3 id="install-it-for-react">Install it for React</h3> <p><code class="language-plaintext highlighter-rouge">npm i @emotion/styled @emotion/react</code></p> <h3 id="example">Example</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@emotion/styled</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  padding: 32px;
  background-color: hotpink;
  font-size: 24px;
  border-radius: 4px;
  color: black;
  font-weight: bold;
  &amp;:hover {
    color: white;
  }
`</span>
<span class="nf">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">my</span> <span class="nx">button</span> <span class="nx">component</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/Button&gt;</span><span class="err">)
</span></code></pre></div></div> <h2 id="my-conclusion">My Conclusion</h2> <ul> <li>Every component own it’s style. the CSS code will be very big.</li> <li>How to share style between different components?</li> <li>How use preproccessor, like Sass, to manage style.</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://styled-components.com/docs/basics">styled-component basics</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="React"/><category term="CSS"/><category term="JavaScript"/><summary type="html"><![CDATA[What is CSS-in-JS]]></summary></entry></feed>