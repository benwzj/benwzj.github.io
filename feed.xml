<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-14T03:29:59+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">GraphQL Introduction</title><link href="https://benwzj.github.io/blog/2024/GraphQL/" rel="alternate" type="text/html" title="GraphQL Introduction"/><published>2024-05-11T00:00:00+00:00</published><updated>2024-05-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/GraphQL</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/GraphQL/"><![CDATA[<h2 id="graphql-concept">GraphQL Concept</h2> <p>GraphQL is a query <strong>language</strong> for your API, and a server-side runtime for executing queries using a type system you define for your data.</p> <ul> <li><strong>The GraphQL query language</strong>: basically about <strong>selecting fields</strong> on objects.</li> <li><strong>A GraphQL service</strong>: it is created by defining <strong>types</strong> and <strong>fields on those types</strong>, then providing functions for each field on each type.</li> <li>In <strong>a GraphQL operation</strong>: the client specifies how to structure the data when it is returned by the server. This makes it possible for the client to query only for the data it needs, in the format that it needs it in.</li> </ul> <p>We usually compare GraphQL and REST.</p> <h3 id="graphql-vs-rest">GraphQL vs REST</h3> <p>(GrappQL usually serving over HTTP, because HTTP ubiquity. )</p> <p>REST uses <strong>“resources”</strong> as its core concept. That means entities are identified by URIs. In contrast, GraphQL’s conceptual model is an entity <strong>graph</strong>. A GraphQL server operates on a single URL/endpoint, usually /graphql, and all GraphQL requests for a given service should be directed at this endpoint.</p> <p>In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. But in GraphQL, every field and nested object can get its own set of arguments, making GraphQL a complete replacement for making multiple API fetches.</p> <h3 id="graphql-has-three-top-level-operations">GraphQL has three top-level operations:</h3> <ol> <li>Query - read-only fetch</li> <li>Mutation - write, followed by a fetch</li> <li>Subscription - long-lived connection for receiving data</li> </ol> <p>GraphQL exposes these operations via a schema that defines the capabilities of an API. A schema is comprised of types, which can be root types (query, mutation, or subscription) or user-defined types.</p> <blockquote class="block-warning"> <p>Developers start with a schema to define the capabilities of their GraphQL API, which a client application will communicate with.</p> </blockquote> <h2 id="basic-example">Basic example</h2> <ol> <li>A GraphQL service define object types: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  me: User
}
type User {
  id: ID
  name: String
}
</code></pre></div> </div> <p>Along with functions for each field on each type:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Query_me</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">user</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">User_name</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nf">getName</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>After a GraphQL service is running, it can receive GraphQL queries to and execute. For example, the query: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  me {
 name
  }
}
</code></pre></div> </div> <p>Could produce the following JSON result:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"me"</span><span class="p">:{</span><span class="w">
 </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Luke Skywalker"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <h2 id="basic-concepts">Basic Concepts</h2> <ul> <li><strong>Arguments</strong>: (just like arguments in Function()) In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. In GraphQL, every field and nested object can get its own set of arguments. It let you fetch more specific data.</li> <li><strong>Aliases</strong>: They let you rename the result of a field to anything you want.</li> <li><strong>fragments</strong>: (just like Functions) GraphQL includes reusable units called fragments. Fragments let you construct sets of fields, and then include them in queries where you need to.</li> <li>The <strong>Operation Type</strong> is either query, mutation, or subscription and describes what type of operation you’re intending to do.</li> <li>The <strong>Operation Name</strong> is a meaningful and explicit name for your operation.</li> <li><strong>Variables</strong>: (<code class="language-plaintext highlighter-rouge">$variableName: variableType</code>) All declared variables must be either scalars, enums, or input object types.</li> <li>Directives: The core GraphQL specification includes exactly two directives, which must be supported by any spec-compliant GraphQL server implementation: <ul> <li><code class="language-plaintext highlighter-rouge">@include(if: Boolean)</code> Only include this field in the result if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> <li><code class="language-plaintext highlighter-rouge">@skip(if: Boolean)</code> Skip this field if the argument is <code class="language-plaintext highlighter-rouge">true</code>.</li> </ul> </li> </ul> <h2 id="graphql-schema-language">GraphQL schema language</h2> <p>The most basic components of a GraphQL schema are object types, which just represent a kind of object you can fetch from your service, and what fields it has.</p> <h3 id="the-query-and-mutation-types">The Query and Mutation types</h3> <p>Most types in your schema will just be normal object types, but there are two types that are special within a schema:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>schema {
  query: Query
  mutation: Mutation
}
</code></pre></div></div> <h3 id="scalar-types">Scalar types:</h3> <p>they represent the leaves of the query.</p> <h3 id="interface-type">Interface type:</h3> <p>An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface. (Like class)</p> <h3 id="union-types">Union types:</h3> <p>Union types are very similar to interfaces, but they don’t get to specify any common fields between the types. <code class="language-plaintext highlighter-rouge">union SearchResult = Human | Droid | Starship</code> Wherever we return a SearchResult type in our schema, we might get a Human, a Droid, or a Starship.</p> <h3 id="input-types">Input types:</h3> <p>in the GraphQL schema language, input types look exactly the same as regular object types, but with the keyword input instead of type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input ReviewInput {
  stars: Int!
  commentary: String
}
</code></pre></div></div> <p>Input type is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created. You can’t mix input and output types in your schema. Input object types also can’t have arguments on their fields.</p> <h2 id="authorization">Authorization</h2>]]></content><author><name></name></author><category term="Language"/><category term="GraphQL"/><category term="REST"/><summary type="html"><![CDATA[GraphQL Concept]]></summary></entry><entry><title type="html">NPM YARN and PNPM</title><link href="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/" rel="alternate" type="text/html" title="NPM YARN and PNPM"/><published>2024-05-10T00:00:00+00:00</published><updated>2024-05-10T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/npm-pnpm-yarn</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/npm-pnpm-yarn/"><![CDATA[<h2 id="npm">NPM</h2> <p>NPM stands for Node Package Manager. npm is a package manager for the JavaScript programming language maintained by Microsoft’s npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js and is included as a recommended feature in the Node.js installer.</p> <h3 id="packages">Packages</h3> <p>A package in Node.js contains all the files you need for a module. Modules are JavaScript libraries you can include in your project. A package is registered in npmjs.com registry.</p> <h3 id="about-scopes">About scopes</h3> <p>When you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.</p> <blockquote class="block-warning"> <p>A scope allows you to create a package with the same name as a package created by another user or organization without conflict.</p> </blockquote> <p>When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the <code class="language-plaintext highlighter-rouge">@</code> and the slash <code class="language-plaintext highlighter-rouge">/</code>:</p> <ul> <li>“npm” scope: <code class="language-plaintext highlighter-rouge">@npm/package-name</code></li> <li>“npmcorp” scope: <code class="language-plaintext highlighter-rouge">@npmcorp/package-name</code></li> </ul> <h4 id="scopes-and-package-visibility">Scopes and package visibility</h4> <p>Unscoped packages are always public. Private packages are always scoped. Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.</p> <h3 id="commonjs">CommonJS</h3> <p>CommonJS is a project to <strong>standardize the module ecosystem</strong> for JavaScript outside of web browsers (e.g. on web servers or native desktop applications).</p> <p>CommonJS’s specification of how modules should work is widely used today for server-side JavaScript with Node.js. It is also used for browser-side JavaScript, but that code must be packaged with a transpiler since browsers don’t support CommonJS.</p> <p>The other major module specification in use is the ECMAScript (ES) modules specification (<strong>ES6 modules</strong> aka ES2015 modules). CommonJS can be recognized by the use of the <code class="language-plaintext highlighter-rouge">require()</code> function and <code class="language-plaintext highlighter-rouge">module.exports</code>, while ES modules use <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code> statements for similar (though not identical) functionality.</p> <h3 id="use-npm-command">Use npm command</h3> <p>npm manages downloads of dependencies of your project.</p> <ul> <li>If a project has a package.json file, by running <code class="language-plaintext highlighter-rouge">npm install</code>, it will install everything the project needs, in the <code class="language-plaintext highlighter-rouge">node_modules</code> folder, creating it if it’s not existing already.</li> <li>You can also install a specific package by running <code class="language-plaintext highlighter-rouge">npm install &lt;package-name&gt;</code>.</li> <li>Updating packages <code class="language-plaintext highlighter-rouge">npm update</code></li> <li>Running Tasks <code class="language-plaintext highlighter-rouge">npm run &lt;task-name&gt;</code></li> </ul> <h3 id="npx">npx</h3> <p>Run packages without downloading using npx.</p> <h2 id="yarn">YARN</h2> <p>YARN stands for Yet Another Resource Negotiator. It is an alternative package manager for JavaScript that was created in 2016 by Facebook, Google, Exponent, and Tilde. It was designed to address some of the issues and limitations of NPM, such as speed, reliability, and security.</p> <p>YARN has a similar command-line interface as NPM, but with some differences and improvements. It also uses the same package.json file as NPM, but it adds another file called yarn.lock that locks the exact versions of your dependencies. It also creates a node_modules folder where it stores the installed packages.</p> <h3 id="advantages">Advantages</h3> <ul> <li>It is faster and more efficient than NPM when installing or updating packages</li> <li>It uses a flat dependency structure that avoids duplication and nesting of packages</li> <li>It supports offline installation of packages from a local cache</li> <li>It has a better resolution algorithm that ensures consistent and deterministic versions of packages across different environments <h3 id="disadvantages">Disadvantages</h3> </li> <li>It is not as widely used or supported as NPM by the JavaScript community</li> <li>It may not be compatible with some NPM packages or features</li> <li>It may have some bugs or issues that are not yet fixed or resolved</li> </ul> <h2 id="pnpm">PNPM</h2> <p>When using npm, if you have 100 projects using a dependency, you will have 100 copies of that dependency saved on disk. With pnpm, the dependency will be stored in a content-addressable store, so:</p> <ul> <li>If you depend on different versions of the dependency, only the files that differ are added to the store. For instance, if it has 100 files, and a new version has a change in only one of those files, pnpm update will only add 1 new file to the store, instead of cloning the entire dependency just for the singular change.</li> <li>All the files are saved in a single place on the disk. When packages are installed, their files are hard-linked from that single place, consuming no additional disk space. This allows you to share dependencies of the same version across projects.</li> </ul> <p>As a result, you <strong>save a lot of space</strong> on your disk proportional to the number of projects and dependencies, and you have a lot faster installations!</p> <h3 id="boosting-installation-speed">Boosting installation speed</h3> <p>pnpm perfoms installation in three stages:</p> <ul> <li>Dependency resolution. All required dependencies are identified and fetched to the store.</li> <li>Directory structure calculation. The <code class="language-plaintext highlighter-rouge">node_modules</code> directory structure is calculated based on the dependencies.</li> <li>Linking dependencies. All remaining dependencies are fetched and hard linked from the store to <code class="language-plaintext highlighter-rouge">node_modules</code>.</li> </ul> <h3 id="pnpm-creating-a-non-flat-node_modules-directory">pnpm Creating a non-flat node_modules directory</h3> <p><code class="language-plaintext highlighter-rouge">npm</code> and <code class="language-plaintext highlighter-rouge">Yarn</code> create flat node_modules directory.</p> <p>But by default, <code class="language-plaintext highlighter-rouge">pnpm</code> uses <strong>symlinks</strong> to add only the direct dependencies of the project into the root of the modules directory. pnpm Creating a non-flat node_modules directory</p> <h2 id="npm-vs-yarn-vs-pnpm">npm vs yarn vs pnpm</h2> <table> <thead> <tr> <th style="text-align: left">Feature</th> <th style="text-align: left">NPM</th> <th style="text-align: left">YARN</th> <th style="text-align: left">PNPM</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Speed</td> <td style="text-align: left">Slow</td> <td style="text-align: left">Fast</td> <td style="text-align: left">Faster</td> </tr> <tr> <td style="text-align: left">Disk Space</td> <td style="text-align: left">High</td> <td style="text-align: left">Low</td> <td style="text-align: left">Lower</td> </tr> <tr> <td style="text-align: left">Security</td> <td style="text-align: left">Low</td> <td style="text-align: left">High</td> <td style="text-align: left">Higher</td> </tr> <tr> <td style="text-align: left">Compatibility</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">Popularity</td> <td style="text-align: left">High</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Low</td> </tr> <tr> <td style="text-align: left">Ecosystem</td> <td style="text-align: left">Rich</td> <td style="text-align: left">Medium</td> <td style="text-align: left">Medium</td> </tr> <tr> <td style="text-align: left">CLI</td> <td style="text-align: left">Simple</td> <td style="text-align: left">Complex</td> <td style="text-align: left">Similar to NPM</td> </tr> <tr> <td style="text-align: left">directory</td> <td style="text-align: left">flattened</td> <td style="text-align: left">flattened</td> <td style="text-align: left">symlinks</td> </tr> </tbody> </table> <h2 id="fqa">FQA</h2> <h3 id="is-it-a-problem-if-mix-using-them-in-a-project">Is it a problem if mix using them in a project?</h3> <p>You can switch between them if you want, as long as you delete the existing node_modules folder and lockfile before installing with a different package manager.</p> <h3 id="lockfile">lockfile?</h3> <p>Use a lockfile to ensure reproducible installs across different machines and environments. A lockfile is a file that records the exact versions and sources of the packages that your project depends on, so that you can install them consistently every time. NPM uses a package-lock.json file, YARN uses a yarn.lock file, and PNPM uses a pnpm-lock.yaml file. You should commit these files to your version control system and update them whenever you add, remove, or update a package</p>]]></content><author><name></name></author><category term="Programming"/><category term="npm"/><category term="Node.js"/><summary type="html"><![CDATA[NPM]]></summary></entry><entry><title type="html">CSS-in-JS Instroduction</title><link href="https://benwzj.github.io/blog/2024/css-in-js/" rel="alternate" type="text/html" title="CSS-in-JS Instroduction"/><published>2024-04-26T00:00:00+00:00</published><updated>2024-04-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-in-js</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-in-js/"><![CDATA[<h2 id="what-is-css-in-js">What is CSS-in-JS</h2> <p>The tradiction way to use CSS in SPA is using global CSS files. But there are some drawbacks in this approach:</p> <ul> <li>Headache in inventing class names.</li> <li>Hard to maintian: Changing one CSS may affect many HTML.</li> <li>Zombies CSS code.</li> </ul> <p>If you write CSS in JavaScript, you can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If you delete a component, you delete its CSS too. No more append-only stylesheets!</p> <h3 id="some-avandtage-of-css-in-js">Some Avandtage of CSS-in-JS:</h3> <ul> <li>Styles/Component co-location: As components include all the source code, styles, and logic they need for proper running, you can securely move them around.</li> <li>Local Scoping: By default, CSS doesn’t allow local scoping. Each style rule has a global scope, so it applies to the entire project.</li> <li>Reusability: Components are reusable, so you only have to write them once, then you can run them everywhere.</li> <li>Dynamic Functionality: As CSS-in-JS is essentially JavaScript code, you can apply complex logic to your style rules, such as loops, conditionals, variables, state-based styling, and more.</li> <li>Provide State-based styling: CSS-in-JS gives developers API to describe state-based styles in a better way than using a bunch of conditional class names.</li> <li>Constrain Selector: CSS-in-JS helps to constrain that power by scoping its selectors. Providing more expressiveness while encouraging more maintainable patterns than cascading.</li> <li>Painless maintenance: you never have to hunt across different files to find the styling affecting your component, so maintenance is a piece of cake no matter how big your codebase is.</li> <li>Automatic vendor prefixing: Most library provide this.</li> <li>Easier deletion of CSS: it can be hard to know whether a class name is used somewhere in your codebase. Write CSS in JS, every bit of styling is tied to a specific component. If the component is unused (which tooling can detect) and gets deleted, all its styles get deleted with it.</li> <li>Automatic critical CSS: styled-components keeps track of which components are rendered on a page and injects their styles and nothing else, fully automatically. Combined with code splitting, this means your users load the least amount of code necessary.</li> <li>No class name bugs: styled-components generates unique class names for your styles. You never have to worry about duplication, overlap or misspellings.</li> </ul> <h3 id="some-popular-css-in-js-library">Some popular CSS-in-JS library:</h3> <ul> <li>styled-components</li> <li>Emotion</li> <li>JSS</li> <li>APHRODITE</li> <li>RADIUM</li> <li>STYLETRON</li> <li>STYLED-JSX</li> </ul> <h2 id="styled-components">styled-components</h2> <p>styled-components is the result of wondering how we could enhance CSS for styling React component systems.</p> <p>It removes the mapping between components and styles. This means that when you’re defining your styles, you’re actually creating a normal React component, that has your styles attached to it.</p> <h3 id="usage">Usage</h3> <p>Install: <code class="language-plaintext highlighter-rouge">npm install styled-component</code> Once you’ve added styled-components you will have access to the global <code class="language-plaintext highlighter-rouge">window.styled</code> variable.</p> <p>It utilises tagged template literals to style your components. Example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a Title component that'll render an &lt;h1&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">h1</span><span class="s2">`
  font-size: 1.5em;
  text-align: center;
  color: #e22`</span>
<span class="c1">// Create a Wrapper component that'll render a &lt;section&gt; tag with some styles</span>
<span class="kd">const</span> <span class="nx">Wrapper</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">section</span><span class="s2">`
  padding: 4em;
  background: papayawhip;
`</span><span class="p">;</span>

<span class="c1">// Use Title and Wrapper like any other React component – except they're styled!</span>
<span class="nf">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Wrapper</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Title</span><span class="o">&gt;</span>
      <span class="nx">Hello</span> <span class="nx">World</span><span class="o">!</span>
    <span class="o">&lt;</span><span class="sr">/Title</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/Wrapper</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div> <h2 id="emotion">Emotion</h2> <h3 id="install-it-for-react">Install it for React</h3> <p><code class="language-plaintext highlighter-rouge">npm i @emotion/styled @emotion/react</code></p> <h3 id="example">Example</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@emotion/styled</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  padding: 32px;
  background-color: hotpink;
  font-size: 24px;
  border-radius: 4px;
  color: black;
  font-weight: bold;
  &amp;:hover {
    color: white;
  }
`</span>
<span class="nf">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">my</span> <span class="nx">button</span> <span class="nx">component</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/Button&gt;</span><span class="err">)
</span></code></pre></div></div> <h2 id="my-conclusion">My Conclusion</h2> <ul> <li>Every component own it’s style. the CSS code will be very big.</li> <li>How to share style between different components?</li> <li>How use preproccessor, like Sass, to manage style.</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://styled-components.com/docs/basics">styled-component basics</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="React"/><category term="CSS"/><category term="JavaScript"/><summary type="html"><![CDATA[What is CSS-in-JS]]></summary></entry><entry><title type="html">PostCSS Instroduction</title><link href="https://benwzj.github.io/blog/2024/postcss/" rel="alternate" type="text/html" title="PostCSS Instroduction"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/postcss</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/postcss/"><![CDATA[<h2 id="what-is-postcss">What is PostCSS</h2> <p>PostCSS is a JavaScript library that transforms CSS into JavaScript.</p> <p>CSS is transpiled into an abstract syntax tree, which is represented with JavaScript objects. This transformation allows developers the opportunity to manipulate the CSS through those objects. Then, after our CSS has been processed, the objects are converted back into valid CSS.</p> <blockquote> <p>PostCSS will not do anything to our CSS. It’s up to plugins to apply these changes!</p> </blockquote> <p>And as it stands, there are hundreds of plugins available and no shortage of options.</p> <p>Despite its name, it is neither a post-processor nor a pre-processor, it is just a transpiler that turns a special PostCSS plugin syntax into a Vanilla CSS. You can think of it as the Babel tool for CSS.</p> <h2 id="postcss-vs-sass">PostCSS vs SASS</h2> <h3 id="sass">SASS</h3> <p>SASS is preprocessor scripting language for CSS. Built as an extension language to CSS, this preprocessor scripting language allowed Developers to leverage simple programming concepts such as conditional statements and variables for writing CSS, and as a result, working with CSS became so much more enjoyable.</p> <p>The biggest gripe with SASS and preprocessors in general, is that they’re not easily <strong>extendable</strong>.</p> <h3 id="postcss">PostCSS</h3> <p>PostCSS is just born for extendable. You can use PostCSS in conjunction with existing preprocessors like Sass, Less, and Stylus. Or you can use it as an alternative to all of them since it has all the required functionalities to be used alone.</p> <h2 id="set-up-postcss">Set Up PostCSS</h2> <h3 id="using-postcss-cli">Using PostCSS CLI</h3> <p>install CLI</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i postcss-cli
</code></pre></div></div> <p>Then We can run the following command directly in the terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postcss src/style.css --use postcss-import --dir public --watch
</code></pre></div></div> <h3 id="using-npm-scripts">Using NPM scripts</h3> <p>Inside the <code class="language-plaintext highlighter-rouge">package.json</code> file in the “scripts”, we need to type the following: <code class="language-plaintext highlighter-rouge">"postcss:watch": "postcss src/style.css --use postcss-import --dir public --watch"</code></p> <p>The above command will create a new directory called ‘public’ which contains our final Vanilla CSS file, which has the same name as the source file (style.css).</p> <h3 id="using-postcss-config-file">Using PostCSS Config File</h3> <p>In the root directory of your project, create a file and name it postcss.config.js. The code inside it will look like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
     	<span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-import</span><span class="dl">'</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-mixins</span><span class="dl">'</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">stylelint</span><span class="dl">"</span><span class="p">),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postcss-preset-env</span><span class="dl">'</span><span class="p">)({</span> <span class="na">stage</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}),</span>
        <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cssnano</span><span class="dl">'</span><span class="p">),</span>
    <span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div> <p>The command that runs PostCSS in our <code class="language-plaintext highlighter-rouge">package.json</code> file needs to be changed to: <code class="language-plaintext highlighter-rouge">"postcss:watch": "postcss src/style.css --dir public --watch"</code></p> <h3 id="using-task-runners-or-module-bundlers">Using Task Runners (or Module Bundlers)</h3> <p>PostCSS can be set to work with various task runners like Gulp, Grunt, and module bundlers like Rollup and Webpack.</p> <h2 id="postcss-plugin">PostCSS Plugin</h2> <blockquote> <p>The popular CSS framework TailwindCSS can be a PostCSS plugin.</p> </blockquote> <p>You can write your own plugin. SASS, LESS and Stylus can work as a PostCSS plugin to integrate into your work flow.</p> <p>Here list some popular plugins:</p> <h3 id="postcss-import">PostCSS Import</h3> <p>One of the basic and most important plugins to use is postcss-import. It lets us import CSS files into other files. <a href="https://github.com/postcss/postcss-import">github doc</a></p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s2">'./components/comp1.css'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">'./components/comp2.css'</span><span class="p">;</span>
</code></pre></div></div> <h3 id="autoprefixer">Autoprefixer</h3> <p>This is one of the most popular PostCSS plugins. You use it to parse and add vendor prefixes like <code class="language-plaintext highlighter-rouge">-webkit</code>, <code class="language-plaintext highlighter-rouge">-moz</code>, and <code class="language-plaintext highlighter-rouge">-ms</code> to CSS rules using values from the <a href="https://caniuse.com/">Can I Use</a> website.</p> <p>Autoprefixer uses <a href="https://github.com/browserslist/browserslist">Browserslist</a>, so you can specify the browsers you want to target in your project with queries.</p> <p>For example, We can configure our Browserslist in the <code class="language-plaintext highlighter-rouge">package.json</code> file using a “browserslist” key:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">browserslist</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span> 
    <span class="dl">"</span><span class="s2">defaults</span><span class="dl">"</span>  
 <span class="p">]</span>
</code></pre></div></div> <p>Now it work like this:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span>
  <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Based on our previous “browserslist” settings, the final output will be:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span>
  <span class="nl">-webkit-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
     <span class="nl">-moz-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
      <span class="nl">-ms-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
          <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="postcss-preset-env">PostCSS Preset Env</h3> <p>This plugin enables us to use modern CSS (like nesting and custom media queries) in our code, by converting it to Vanilla CSS which can be understood by browsers.</p> <p>It has a <code class="language-plaintext highlighter-rouge">stage</code> option which determines which CSS features to polyfill based upon their stability in the process of becoming implemented as a web standard.</p> <p>The <code class="language-plaintext highlighter-rouge">stage</code> can be 0 (experimental) to 4 (stable), or false. <code class="language-plaintext highlighter-rouge">Stage</code> 2 is the default.</p> <p>This preset-env plugin includes by default the Autoprefixer plugin and the browsers option will be passed to it automatically.</p> <h3 id="postcss-nested">PostCSS Nested</h3> <p>If we want only to use the nesting feature, then this plugin is the perfect choice as it produce the same result as the previous plugin.</p> <h3 id="postcss-mixins">PostCSS Mixins</h3> <p>Mixins allow you to define styles that can be re-used throughout your code.</p> <h3 id="stylelint">Stylelint</h3> <p>This is a CSS linter that helps us avoid errors in our code before they break our User Interface (UI).</p> <h3 id="cssnano">Cssnano</h3> <p>This is a minifier used to reduce the final CSS file size as much as possible so your code is ready for a production environment.</p> <h2 id="references">References</h2> <ul> <li><a href="https://postcss.org/">PostCSS offical website</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="HTML"/><category term="SASS"/><summary type="html"><![CDATA[What is PostCSS]]></summary></entry><entry><title type="html">Agile Methodology</title><link href="https://benwzj.github.io/blog/2024/agile/" rel="alternate" type="text/html" title="Agile Methodology"/><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/agile</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/agile/"><![CDATA[<h2 id="what-is-agile-methodology">What is Agile Methodology</h2> <p>The Agile methodology is a project management approach that involves breaking the project into phases, commonly known as sprints, and emphasizes continuous collaboration and improvement. Teams follow a cycle of planning, executing, and evaluating.</p> <figure> <picture> <img src="/assets/img/inline-agile-agile-methodology-1-2x.webp" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="waterfall-model">Waterfall Model</h3> <p>Before the Agile come out, the common Software develop methodology is Waterfall Model.</p> <figure> <picture> <img src="/assets/img/waterfall_model.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>There are a lot of drawback of the waterfall model. For exampel, When you add features or update features, it need a specific time which is called downtime. Any Change in Waterfall model contain high risk as changes include a new revised version of the entire software running the entire series steps. That is because Waterfall treat the whole product as a single unit.</p> <p>Many big company found it get much better when switch to Agile. Agile based products are developed by breaking the entire product process into microservices or phrases which is faster to execute and deploy change on the go. Providing beta version to end users for reviewing is one of methods.</p> <h3 id="terminology">Terminology</h3> <p>Agile is a set of principles and <strong>Scrum</strong> is a framework for getting s#it done.<br/> The <strong>Manifesto</strong> itself was born out of a need to find a common ground among Scrum, Extreme Programming, Crystal Clear, and other frameworks.</p> <h2 id="agile-manifesto">Agile Manifesto</h2> <p>In early 2001, Utah, 17 people met to discuss the future of software development. The problem, they agreed, was that companies were so focused on excessively planning and documenting their software development cycles that they lost sight of what really mattered — <strong>pleasing their customers</strong>.</p> <p>The Agile Manifesto emerged from this extended weekend at just 68 words.</p> <h3 id="4-pillars-of-agile">4 pillars of Agile</h3> <p>As outlined in the Agile Manifesto, there are four main values of Agile project management:</p> <ul> <li><strong>Individuals over processes and tools</strong>: Agile teams value team collaboration and teamwork over working independently and doing things “by the book.”</li> <li><strong>Working software over comprehensive documentation</strong>: The software that Agile teams develop should work. Additional work, like documentation, is not as important as developing good software.</li> <li><strong>Customer collaboration over contract negotiation</strong>: Customers are extremely important within the Agile methodology. Agile teams allow customers to guide where the software should go. Therefore, customer collaboration is more important than the finer details of contract negotiation.</li> <li><strong>Responding to change over following a plan</strong>: One of the major benefits of Agile project management is that it allows teams to be flexible. This framework allows for teams to quickly shift strategies and workflows without derailing an entire project.</li> </ul> <h3 id="12-principles-behind-the-agile-manifesto">12 Principles behind the Agile Manifesto</h3> <ul> <li>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</li> <li>Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.</li> <li>Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.</li> <li>Business people and developers must work together daily throughout the project.</li> <li>Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.</li> <li>The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.</li> <li>Working software is the primary measure of progress.</li> <li>Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.</li> <li>Continuous attention to technical excellence and good design enhances agility.</li> <li>Simplicity–the art of maximizing the amount of work not done–is essential.</li> <li>The best architectures, requirements, and designs emerge from self-organizing teams.</li> <li>At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.</li> </ul> <h2 id="scrum">Scrum</h2> <p>Scrum is a lightweight framework that helps people, teams and organizations generate value through adaptive solutions for complex problems.</p> <p>In a nutshell, Scrum requires a Scrum Master to foster an environment where:</p> <ul> <li>A Product Owner orders the work for a complex problem into a Product Backlog.</li> <li>The Scrum Team turns a selection of the work into an Increment of value during a Sprint.</li> <li>The Scrum Team and its stakeholders inspect the results and adjust for the next Sprint.</li> <li>Repeat</li> </ul> <p>Scrum is simple.</p> <h3 id="terminology-1">Terminology</h3> <h4 id="sprint">Sprint</h4> <p>A sprint is a short, time-boxed period when a scrum team works to complete a set amount of work. Sprints help teams follow the agile principle of “delivering working software frequently,” as well as live the agile value of “responding to change over following a plan.” The scrum values of transparency, inspection, and adaptation are complementary to agile and central to the concept of sprints.</p> <ul> <li>Sprint planning: This event kicks off the sprint. Sprint planning outlines what can be delivered in a sprint (and how).</li> <li> <p>Daily Scrum: Scrum teams meet daily to discuss active tasks, roadblocks, and anything else that may affect the development team. Get everyone on the same page.</p> </li> <li>Sprint Review:</li> <li>Sprint retrospective: This recurring meeting acts as a sprint review—to iterate on learnings from a previous sprint that will improve and streamline the next one.</li> </ul> <p>Product backlog Sprint backlog</p> <h3 id="scrum-roles">Scrum Roles</h3> <h3 id="scrum-artifaces">Scrum Artifaces</h3> <h2 id="kanban">Kanban</h2> <p>Kanban is a visual approach to Agile. Teams use online Kanban board tools to represent where certain tasks are in the development process. Tasks are represented by cards on a board, and stages are represented in columns. As team members work on tasks, they move cards from the backlog column to the column that represents the stage the task is in.</p> <p>This method is a good way for teams to identify roadblocks and to visualize the amount of work that’s getting done.</p> <h2 id="extreme-programming-xp">Extreme Programming (XP)</h2> <p>Typically used in software development, Extreme Programming (XP) is an Agile framework that outlines values that will allow your team to work together more effectively.</p> <p>The five values of XP include:</p> <ul> <li>Communication</li> <li>Simplicity</li> <li>Feedback</li> <li>Courage</li> <li>Respect</li> </ul> <p>Similar to daily Scrum standups, there are regular releases and iterations, yet XP is much more technical in its approach. If your dev team needs to quickly release and respond to customer requests, XP focuses on the “how” it will get done.</p> <h2 id="references">References</h2> <ul> <li><a href="https://scrumguides.org/scrum-guide.html">scrum-guide</a></li> <li><a href="https://www.atlassian.com/agile/scrum">atlassian agile scrum</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Agile"/><summary type="html"><![CDATA[What is Agile Methodology]]></summary></entry><entry><title type="html">Rendering Process in React</title><link href="https://benwzj.github.io/blog/2024/react-render/" rel="alternate" type="text/html" title="Rendering Process in React"/><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/react-render</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/react-render/"><![CDATA[<p>Even a component render, don’t means browser will repaint it. we get component, then component instance, then element, then VDOM, then DOM.</p> <h2 id="component-rendering-process">Component Rendering Process</h2> <p>Before your components are displayed on screen, they must be rendered by React.</p> <p>There are 3 steps for the whole rendering process:</p> <ol> <li>Triggering a render.</li> <li><strong>Rendering the component.</strong></li> <li>Committing to the DOM.</li> </ol> <h3 id="step-1-trigger-a-render">Step 1: Trigger a render</h3> <p>There are two reasons for a component to render:</p> <ul> <li>It’s the component’s initial render. By calling <code class="language-plaintext highlighter-rouge">createRoot</code> with the target DOM node, and then calling its render method with the component.</li> <li>The component’s (or one of its ancestors’) state has been updated. Updating the component’s state automatically queues a render. When prop or context be changed, it cause re-render as well.</li> </ul> <h3 id="step-2-react-renders-your-components">Step 2: React renders your components</h3> <blockquote class="block-warning"> <p>‘Rendering’ is React calling your components.</p> </blockquote> <ul> <li>On initial render, React will call the root component.</li> <li>For subsequent renders, React will <strong>call the function component</strong> whose state update triggered the render.</li> </ul> <blockquote class="block-warning"> <p>The default behavior of rendering will render all components nested within the updated component.</p> </blockquote> <p>This might be not optimal for performance if the updated component is very high in the tree. You can use <code class="language-plaintext highlighter-rouge">memo</code> and <code class="language-plaintext highlighter-rouge">useMemo</code> to avoid re-render the child components.</p> <h3 id="step-3-react-commits-changes-to-the-dom">Step 3: React commits changes to the DOM</h3> <p>After rendering (calling) your components, React will modify the DOM.</p> <ul> <li>For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.</li> <li>For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.</li> </ul> <p>React only changes the DOM nodes if there’s a difference between renders.</p> <p>After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion with React rendering.</p> <h2 id="check-if-component-is-re-rendered">Check if component is re-rendered</h2> <p>Re-render a component, means React execute that component function to calculate the output.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Component</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">count</span><span class="o">++</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">component render number: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">count</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div> <p>But the component might be only invoked without rerendering. For example, you <code class="language-plaintext highlighter-rouge">setState()</code> to the same value as previous one, React will run the component function, but without rendering the children or firing effects.</p> <p>So the better way is to make a <code class="language-plaintext highlighter-rouge">useEffect</code> hook without a dependency array, this will make it run after each component render. Like code below can flicker the background when re-rendering:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// animation part</span>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">parent</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">parent-flicker</span><span class="dl">"</span><span class="p">);</span>

    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">parent-flicker</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <h2 id="display-render-count-in-component">Display render count in component</h2> <p>You can’t use State, but you can use <strong>Ref</strong>!!</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">renderCounter</span>  <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nf">useEffect </span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="nx">renderCounter</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">renderCounter</span><span class="p">.</span><span class="nx">current</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="na">Renders</span><span class="p">:</span> <span class="p">{</span><span class="nx">renderCounter</span><span class="p">.</span><span class="nx">current</span><span class="p">},</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">};</span>
</code></pre></div></div> <h2 id="avoid-re-rendering-child-component">Avoid re-rendering child component</h2> <p>How to avoid re-rendering a nested child component when a parent component re-renders?</p> <h3 id="use-memory-api">Use Memory API</h3> <p>The basic way is using <code class="language-plaintext highlighter-rouge">React.memo</code> API. This can tell React avoid re-rendering child components. Most of the time you will use Hook <code class="language-plaintext highlighter-rouge">useMemo</code> and <code class="language-plaintext highlighter-rouge">useCallback</code> as well. More inforamtion at <a href="/blog/2023/memo-react/">Use Memory in React</a>.</p> <h3 id="lifting-content-up">lifting content up</h3> <p>The pattern of “lifting content up” has been used to avoid re-rendering a nested child component when a parent component re-renders. lifting content up means wrapping child component as <code class="language-plaintext highlighter-rouge">prop</code> and pass to parent component!</p> <h3 id="stop-re-rendering-of-child-which-consume-context">Stop re-rendering of child which consume Context</h3> <p>If context change, child should re-render. but if context don’t change, how to stop re-rendering? using <code class="language-plaintext highlighter-rouge">React.memo</code> API!</p> <h3 id="why-memory-function-can-stop-re-rendering">Why Memory function can stop re-rendering?</h3> <p>Because React is using <code class="language-plaintext highlighter-rouge">Object.is()</code> to make decision rendering or not.</p> <p>Memo function is used to memoize the result of the component. It returns the cached result when the same output occurs again. It will keep track of the previous <strong>prop’s value</strong> and compare it with the current value. If it detects changes, it will execute the child component again and re-evaluate it; if not, it will not execute it at all.</p> <h2 id="rendering-underhood">Rendering Underhood</h2> <h3 id="react-element">React Element</h3> <p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ele1</span> <span class="o">=&lt;</span><span class="nx">h1</span><span class="o">&gt;</span> <span class="nx">Hello</span><span class="p">,</span> <span class="nx">GFG</span> <span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="c1">// OR</span>
<span class="kd">const</span> <span class="nx">ele1</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="nx">props</span><span class="p">},</span> <span class="dl">"</span><span class="s2">Hello, GFG</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">React.createElement()</code> function returns an object:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hey Geek</span><span class="dl">'</span><span class="p">,</span>
            <span class="nx">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">header</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Normally, React elements is returned from React components. React don’t reuse element, it always destroy it and recreate it.</p> <h3 id="rendering-an-element-into-the-dom">Rendering an Element into the DOM</h3> <ul> <li>To Render an Element into the DOM, You need a root DOM node. <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)</span>
<span class="p">);</span>
<span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>To update the UI is to create a new element, and pass it to <code class="language-plaintext highlighter-rouge">root.render()</code>.</li> <li>ReactDom and React are same lib at version 13. React seperate them in order to support mare media, like ReactNative.</li> </ul> <h3 id="reconciliation">Reconciliation</h3> <p>Reconciliation is responsible for maintaining the tree of elements when a components prop or state change. Reconciliation houses the diffing algorithm that determines what parts of that tree need to be replaced.</p> <p>Here are some examples.</p> <ul> <li>When the React element’s type changed, React builds a whole new tree from scratch.</li> <li>React treat DOM element and component element differently.</li> <li>For children, like list, if you insert item at the end, React will check from the start and find it is same, the second is same and so on till the last one. And it will just add one item simply. BUT, if add item at start or middle, it can be expensive! React check the first one and find the difference, then it will destroy it and build new one, and second one is different and so on. It will destroy all and build again. So, React introduce <strong>key</strong> prop!</li> </ul> <h3 id="react-fiber">React Fiber</h3> <p>The actual rendering process is done by Ract Fiber.</p> <h2 id="fqa">FQA</h2> <ul> <li>How React render component with <code class="language-plaintext highlighter-rouge">key</code>?</li> <li>When re-render the component, is it means browser will re-paint the component? NO</li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Rendering"/><summary type="html"><![CDATA[Even a component render, don’t means browser will repaint it. we get component, then component instance, then element, then VDOM, then DOM.]]></summary></entry><entry><title type="html">Server Component and Next.js</title><link href="https://benwzj.github.io/blog/2024/server-component/" rel="alternate" type="text/html" title="Server Component and Next.js"/><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/server-component</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/server-component/"><![CDATA[<p>Router is the skeleton of the whole Application. It can decide HOW to render Server Components and Client Components. In Next.js, all components in the App Router are Server Components <strong>by default</strong>!</p> <h2 id="foundational-web-concepts">Foundational web concepts</h2> <ul> <li>The <strong>Environments</strong> your application code can be executed in: the server and the client.</li> <li>The <strong>Request-Response Lifecycle</strong> that’s initiated when a user visits or interacts with your application.</li> <li>The <strong>Network Boundary</strong> that separates server and client code.</li> </ul> <h3 id="rendering-environments">Rendering Environments</h3> <p>There are two environments where web applications can be rendered: the client and the server.</p> <p>Historically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use the same language (JavaScript), and the same framework (e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching.</p> <p>However, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other.</p> <h3 id="network-boundary">Network Boundary</h3> <p>In web development, the Network Boundary is a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store.</p> <p>In React, you choose where to place the client-server network boundary wherever it makes the most sense.</p> <p>Behind the scenes, the work is split into two parts: the client module graph and the server module graph. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client.</p> <p>It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other.</p> <p>You can use the React <code class="language-plaintext highlighter-rouge">"use client"</code> convention to define the boundary. There’s also a <code class="language-plaintext highlighter-rouge">"use server"</code> convention, which tells React to do some computational work on the server.</p> <h3 id="building-hybrid-applications">Building Hybrid Applications</h3> <p>When working in these environments, it’s helpful to think of the flow of the code in your application as <strong>unidirectional</strong>. If you need to access the server from the client, you send a new request to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary.</p> <p>In practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive.</p> <h2 id="react-server-components">React Server Components</h2> <p>React Server Components allow you to write UI that can be rendered and optionally cached on the server.</p> <p>In short, Server Components allow you to do <strong>Server Rendering</strong>.</p> <h3 id="benefits-of-server-rendering">Benefits of Server Rendering</h3> <ul> <li>Data Fetching: Server Components allow you to move data fetching to the server.</li> <li>Security: Server Components allow you to keep sensitive data and logic on the server.</li> <li>Caching: By rendering on the server, the result can be cached and reused on subsequent requests and across users.</li> <li>Performance: Server Components give you additional tools to optimize performance.</li> <li>Initial Page Load and First Contentful Paint (FCP).</li> <li>Search Engine Optimization and Social Network Shareability: The rendered HTML can be used by search engine bots.</li> <li>Streaming: Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server.</li> </ul> <h3 id="how-are-server-components-rendered-in-nextjs">How are Server Components rendered in Next.js</h3> <p>Next.js uses Server Components by default. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed.</p> <p>On the server, Next.js uses React’s APIs to orchestrate rendering. The rendering work is split into chunks:</p> <ul> <li>by individual route segments and</li> <li>Suspense Boundaries.</li> </ul> <p>Each chunk is rendered in two steps:</p> <ol> <li>React renders Server Components into a special data format called the React Server Component Payload (<strong>RSC Payload</strong>).</li> <li>Next.js uses the RSC Payload and Client Component JavaScript instructions to render HTML on the server.</li> </ol> <p>Then, on the client:</p> <ol> <li>The HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.</li> <li>The RSC Payload is used to reconcile the Client and Server Component trees, and update the DOM.</li> <li>The JavaScript instructions are used to hydrate Client Components and make the application interactive.</li> </ol> <h3 id="what-is-the-react-server-component-payload-rsc-payload">What is the React Server Component Payload (RSC Payload)?</h3> <p>The RSC Payload is a compact binary representation of the rendered React Server Components tree. It’s used by React on the client to update the browser’s DOM. The RSC Payload contains:</p> <ul> <li>The rendered result of Server Components</li> <li>Placeholders for where Client Components should be rendered and references to their JavaScript files</li> <li>Any props passed from a Server Component to a Client Component</li> </ul> <h3 id="server-rendering-strategies">Server rendering strategies</h3> <p>In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering.</p> <p>There are three subsets of server rendering: Static, Dynamic, and Streaming.</p> <h4 id="static-rendering-default">Static Rendering (Default)</h4> <p>With Static Rendering, routes are rendered at build time, or in the background after data revalidation. The result is cached and can be pushed to a Content Delivery Network (CDN). This optimization allows you to share the result of the rendering work between users and server requests.</p> <h4 id="dynamic-rendering">Dynamic Rendering</h4> <p>With Dynamic Rendering, routes are rendered for each user at request time.</p> <p>Dynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL’s search params.</p> <p>In most websites, routes are not fully static or fully dynamic - it’s a spectrum.</p> <p>In Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time.</p> <p>During rendering, if a <code class="language-plaintext highlighter-rouge">dynamic function</code> or <code class="language-plaintext highlighter-rouge">uncached data request</code> is discovered, Next.js will switch to dynamically rendering the whole route.</p> <p>In Next.js, these dynamic functions are:</p> <ul> <li>cookies() and headers(): Using these in a Server Component will opt the whole route into dynamic rendering at request time.</li> <li>searchParams: Using the searchParams prop on a Page will opt the page into dynamic rendering at request time.</li> </ul> <h4 id="streaming">Streaming</h4> <p>Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.</p> <p>Streaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route.</p> <h2 id="client-components">Client Components</h2> <p>Client Components allow you to write interactive UI that is prerendered on the server and can use client JavaScript to run in the browser.</p> <h3 id="benefits-of-client-rendering">Benefits of Client Rendering</h3> <ul> <li>Interactivity: Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.</li> <li>Browser APIs: Client Components have access to browser APIs, like geolocation or localStorage.</li> </ul> <h3 id="using-client-components-in-nextjs">Using Client Components in Next.js</h3> <p>To use Client Components, you can add the React <code class="language-plaintext highlighter-rouge">"use client"</code> directive at the top of a file, above your <code class="language-plaintext highlighter-rouge">imports</code>.</p> <p><code class="language-plaintext highlighter-rouge">"use client"</code> is used to declare a boundary between a Server and Client Component modules. This means that by defining a <code class="language-plaintext highlighter-rouge">"use client"</code> in a file, all other modules imported into it, including child components, are considered part of the client bundle.</p> <blockquote> <p>You can define multiple <code class="language-plaintext highlighter-rouge">"use client"</code> entry points in your React Component tree. This allows you to split your application into multiple client bundles. However, <code class="language-plaintext highlighter-rouge">"use client"</code> doesn’t need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle.</p> </blockquote> <h3 id="how-are-client-components-rendered">How are Client Components Rendered</h3> <p>There can be two ways:</p> <ul> <li>Full page load: To optimize the initial page load, Next.js will use React’s APIs to render a static HTML preview on the server for both Client and Server Components. (This thing call <strong>hydration</strong>.)</li> <li>Subsequent Navigations: Client Components are rendered entirely on the client, without the server-rendered HTML.</li> </ul> <h3 id="going-back-to-the-server-environmen">Going back to the Server Environmen</h3> <p>Sometimes, after you’ve declared the “use client” boundary, you may want to go back to the server environment.</p> <p>You can keep code on the server even though it’s theoretically nested inside Client Components by <strong>interleaving</strong> Client and Server Components and Server Actions.</p> <h2 id="composition-patterns">Composition Patterns</h2> <p>Need to have a clear mind what server component, client component should do, and can do! Use Server Component when:</p> <ul> <li>Fetch data</li> <li>Access backend resources (directly)</li> <li>Keep sensitive information on the server (access tokens, API keys, etc)</li> <li>Keep large dependencies on the server / Reduce client-side JavaScript</li> </ul> <p>Use Client Component when:</p> <ul> <li>Add interactivity and event listeners (onClick(), onChange(), etc)</li> <li>Use State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)</li> <li>Use browser-only APIs</li> <li>Use custom hooks that depend on state, effects, or browser-only APIs</li> </ul> <h3 id="server-component-patterns">Server Component Patterns</h3> <p>Here are some common patterns when working with Server Components:</p> <h4 id="sharing-data-between-components">Sharing data between components</h4> <p>Instead of using React Context or passing data as props, you can use <code class="language-plaintext highlighter-rouge">fetch</code> or React’s <code class="language-plaintext highlighter-rouge">cache</code> function to fetch the same data in the components. React extends <code class="language-plaintext highlighter-rouge">fetch</code> to automatically memoize data requests.</p> <h4 id="keeping-server-only-code-out-of-the-client-environment">Keeping Server-only Code out of the Client Environment</h4> <p>You may keep some module just only available for server component. For example, the component is using some sensitive data, like <code class="language-plaintext highlighter-rouge">API_KEY</code>, to fetch data. You can use <code class="language-plaintext highlighter-rouge">import 'server-only'</code> to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component.</p> <h4 id="using-third-party-packages-and-providers">Using Third-party Packages and Providers</h4> <p>When you use Third-party Packages in your server component, and these Packages are using some Client only API, you will get some error. The simply way to fix this error is telling Next.js that, this part of code is render as client component by wrap it into a file with <code class="language-plaintext highlighter-rouge">"use client"</code>.</p> <p>When use Context Providers in your server component, it is same way to deal with it: mark it as a Client Component: Wrap these Providers into a file with <code class="language-plaintext highlighter-rouge">"use client"</code>.</p> <h3 id="client-components-patterns">Client Components Patterns</h3> <p>To reduce the Client JavaScript bundle size, Next.js recommend moving Client Components down your component tree. That means try to keep all your components as server components if it can be.</p> <h4 id="passing-props-from-server-to-client-components-serialization">Passing props from Server to Client Components (Serialization)</h4> <p>If you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to be serializable by React.</p> <p>If your Client Components depend on data that is not serializable, you can fetch data on the client with a third party library or on the server via a Route Handler.</p> <h3 id="interleaving-patterns">Interleaving Patterns</h3> <p>You should visualize your UI as a tree of components. Starting with the root layout, which is a Server Component, you can then render certain subtrees of components on the client by adding the “use client” directive.</p> <p>Within those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:</p> <ul> <li>During a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you’ll be making a new request to the server - not switching back and forth.</li> <li>When a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result (RSC Payload) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree.</li> <li>Since Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component as props to a Client Component.</li> </ul> <blockquote class="block-warning"> <p>The pattern of “lifting content up” has been used to avoid re-rendering a nested child component when a parent component re-renders.</p> </blockquote> <h2 id="fqa">FQA</h2> <ul> <li>How do React know a component is Server component or Client component?</li> <li>How do Next.js know what codes need to be bundle and send to browser when Client and Server Components are interleaving together?</li> <li>How do React and Next.js connect together?</li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Next.js"/><category term="Router"/><summary type="html"><![CDATA[Router is the skeleton of the whole Application. It can decide HOW to render Server Components and Client Components. In Next.js, all components in the App Router are Server Components by default!]]></summary></entry><entry><title type="html">Next.js Start Application</title><link href="https://benwzj.github.io/blog/2024/nextjs-starter/" rel="alternate" type="text/html" title="Next.js Start Application"/><published>2024-03-29T00:00:00+00:00</published><updated>2024-03-29T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/nextjs-starter</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/nextjs-starter/"><![CDATA[<p>Next.js Starter application is a Dashboard app. It is a good beginning to understand How do Next.js work and What have Next.js done. This Blog list some conclusions of the application.</p> <h2 id="overview">Overview</h2> <ul> <li>Next.js application is Node.js application.</li> <li>Next.js is powered by React.</li> <li>Next.js use Turbopack as bundler instead of Webpack.</li> <li>Next.js use SWC (Speedy Web Compiler) as compiler instead of Babel.</li> <li>About Styling: There are different ways to style your application in Next.js.</li> <li>Next.js provide some Optimizations to optimize images, links, and fonts.</li> <li>Routing is core part of Next.js: Understand how to create nested layouts and pages using <strong>file-system</strong> routing.</li> <li>Data Fetching: How to set up a database on Vercel, and best practices for fetching and streaming.</li> <li>Using URL Search Params for Search and Pagination</li> <li>Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache.</li> <li>Provide Error Handling.</li> <li>Support server-side Form Validation and imporve Accessibility.</li> <li>Next.js provide NextAuth.js for user to add Authentication.</li> <li>Next.js provide Metadata management.</li> </ul> <h2 id="styling">Styling</h2> <p>‘Tailwind CSS’ and ‘CSS Modules’ is popular way to implement CSS in Next.js project.</p> <h3 id="add-a-global-css-file-to-your-project">add a global CSS file to your project</h3> <p>It’s good practice to add <code class="language-plaintext highlighter-rouge">global.css</code> to your top-level component. In Next.js, the root layout is top-level component.</p> <h3 id="tailwind">Tailwind</h3> <p>Next.js support Tailwind natively. Although the CSS styles are shared globally, each class is singularly applied to each element. This means if you add or delete an element, you don’t have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales.</p> <h3 id="css-modules">CSS Modules</h3> <p>For example you have a css file named <code class="language-plaintext highlighter-rouge">home.module.css</code>. Then</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/home.module.css</span><span class="dl">'</span><span class="p">;</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">shape</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span></code></pre></div></div> <h3 id="toggle-class-names">Toggle class names</h3> <p>The <code class="language-plaintext highlighter-rouge">clsx</code> library is one choice to toggle class names. Like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">clsx</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">clsx</span><span class="dl">'</span><span class="p">;</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">InvoiceStatus</span><span class="p">({</span> <span class="nx">status</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">status</span><span class="p">:</span> <span class="kr">string</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">span</span>
      <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nf">clsx</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">inline-flex items-center rounded-full px-2 py-1 text-sm</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">{</span>
          <span class="dl">'</span><span class="s1">bg-gray-100 text-gray-500</span><span class="dl">'</span><span class="p">:</span> <span class="nx">status</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">pending</span><span class="dl">'</span><span class="p">,</span>
          <span class="dl">'</span><span class="s1">bg-green-500 text-white</span><span class="dl">'</span><span class="p">:</span> <span class="nx">status</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">paid</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">)}</span>
    <span class="o">&gt;</span>
    <span class="c1">// ...</span>
<span class="p">)}</span>
</code></pre></div></div> <h3 id="other-styling-solutions">Other styling solutions</h3> <p>You can also style your Next.js application with:</p> <ul> <li><strong>Sass</strong> which allows you to import <code class="language-plaintext highlighter-rouge">.css</code> and <code class="language-plaintext highlighter-rouge">.scss</code> files.</li> <li><strong>CSS-in-JS</strong> libraries such as <code class="language-plaintext highlighter-rouge">styled-jsx</code>, <code class="language-plaintext highlighter-rouge">styled-components</code>, and <code class="language-plaintext highlighter-rouge">emotion</code>.</li> </ul> <h2 id="optimizing-fonts-and-images">Optimizing Fonts and Images</h2> <h3 id="fonts">Fonts</h3> <p>Next.js <strong>downloads</strong> font files at build time and hosts them with your other static assets. This means when a user visits your application, there are no additional network requests for fonts which would impact performance.</p> <p>Next.js do this to download font: <code class="language-plaintext highlighter-rouge">/app/ui/fonts.ts</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Inter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/font/google</span><span class="dl">'</span><span class="p">;</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="nx">inter</span> <span class="o">=</span> <span class="nc">Inter</span><span class="p">({</span> <span class="na">subsets</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">latin</span><span class="dl">'</span><span class="p">]</span> <span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">/app/layout.tsx</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">inter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">RootLayout</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">body</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">inter</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased`</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>You can use Local font! Import <code class="language-plaintext highlighter-rouge">next/font/local</code> and specify the <code class="language-plaintext highlighter-rouge">src</code> of your local font file. Rrecommend using variable fonts for the best performance and flexibility.</p> <h3 id="image-component">Image Component</h3> <p>The <code class="language-plaintext highlighter-rouge">&lt;Image&gt;</code> Component is an extension of the HTML <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tag, and comes with automatic image optimization on top of <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>, such as:</p> <ul> <li>Ensure image is responsive on different screen sizes.</li> <li>Preventing layout shift automatically when images are loading.</li> <li>Resizing images to avoid shipping large images to devices with a smaller viewport.</li> <li>Lazy loading images by default (images load as they enter the viewport).</li> <li>Serving images in modern formats, like WebP and AVIF, when the browser supports it.</li> </ul> <p>If you are using <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>, you need to handle all of that yourself. How to use <code class="language-plaintext highlighter-rouge">&lt;Image&gt;</code> at <a href="https://nextjs.org/docs/app/building-your-application/optimizing/images">here</a>. Learn more about image at <a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia">here</a> and <a href="https://web.dev/learn/images">here</a>.</p> <h2 id="layouts-and-pages">Layouts and Pages</h2> <p>Next.js uses <strong>file-system routing</strong> where folders are used to create nested routes. Each folder represents a route segment that maps to a URL segment.</p> <blockquote class="block-warining"> <p>You can create separate UIs for each route using <code class="language-plaintext highlighter-rouge">layout.tsx</code> and <code class="language-plaintext highlighter-rouge">page.tsx</code> files.</p> </blockquote> <h3 id="pagetsx-file">page.tsx file</h3> <p><code class="language-plaintext highlighter-rouge">page.tsx</code> is a special Next.js file that exports a React component, and it’s required for the route to be accessible. Only the content inside the page file will be publicly accessible. For example, <code class="language-plaintext highlighter-rouge">/app/dashboard/page.tsx</code> is associated with the <code class="language-plaintext highlighter-rouge">/dashboard</code> path.</p> <h3 id="layouttsx-file">layout.tsx file</h3> <p>You can use a special <code class="language-plaintext highlighter-rouge">layout.tsx</code> file to create UI that is shared between multiple pages.</p> <p>The idea is like this: layout.tsx structure:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">SideNav</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/dashboard/sidenav</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Layout</span><span class="p">({</span> <span class="nx">children</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex h-screen flex-col md:flex-row md:overflow-hidden</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">w-full flex-none md:w-64</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNav</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex-grow p-6 md:overflow-y-auto md:p-12</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>Any components you import into <code class="language-plaintext highlighter-rouge">layout.tsx</code> file will be part of the layout.</li> <li>The <code class="language-plaintext highlighter-rouge">&lt;Layout /&gt;</code> component receives a <code class="language-plaintext highlighter-rouge">children</code> prop. This child can either be a page or another layout. I</li> <li>When <code class="language-plaintext highlighter-rouge">page.tsx</code> and <code class="language-plaintext highlighter-rouge">layout.tsx</code> are both in the same folder, the route will display <code class="language-plaintext highlighter-rouge">layout.tsx</code>.</li> <li>All the <code class="language-plaintext highlighter-rouge">page.tsx</code> files inside same folder or subfolder will automatically be nested inside a <code class="language-plaintext highlighter-rouge">&lt;Layout /&gt;</code>.</li> <li>One benefit of using layouts is that on navigation, only the page components update while the layout won’t re-render. This is called <strong>partial rendering</strong>.</li> <li><code class="language-plaintext highlighter-rouge">/app/layout.tsx</code> is called a <strong>root layout</strong> and is required. Any UI you add to the root layout will be shared across all pages in your whole application. You can use the root layout to modify your <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> tags, and add metadata</li> </ul> <h2 id="navigation">Navigation</h2> <h3 id="the-link-component">The <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> Component</h3> <p>In Next.js, you can use the <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> Component to link between pages in application. If you use <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> instead of <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code>, it will cause whole page refresh! <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> allows you to do client-side navigation with JavaScript. Although parts of your application are rendered on the server, hen using <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> Component for navigation, there’s no full page refresh, making it feel like a web app.</p> <h3 id="why-the-link-component-can-do-this">Why the <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> Component can do this?</h3> <p>It is because Next.js implement <strong>Automatic code-splitting and prefetching</strong>.</p> <p>Next.js automatically code splits your application by route segments. This is different from a traditional React SPA, where the browser loads all your application code on initial load.</p> <p>Splitting code by routes means that pages become isolated. If a certain page throws an error, the rest of the application will still work.</p> <p>Furthermore, in production, whenever <code class="language-plaintext highlighter-rouge">&lt;Link&gt;</code> components appear in the browser’s viewport, Next.js automatically prefetches the code for the linked route in the background. By the time the user clicks the link, the code for the destination page will already be loaded in the background, and this is what makes the page transition near-instant!</p> <h3 id="hook-usepathname">Hook <code class="language-plaintext highlighter-rouge">usePathname()</code></h3> <p>Next.js provide <code class="language-plaintext highlighter-rouge">usePathname()</code> to get the current link path. You can use this one to show user where are they.</p> <h2 id="fetch-data">Fetch data</h2> <h3 id="how-to-access-backend-database">How to access backend database</h3> <p>Some concepts: API, ORM, SQL, React Server Component;</p> <ul> <li>API: <ul> <li>If you’re using 3rd party services that provide an API.</li> <li>If you’re fetching data from the client, you want to have an API layer that runs on the server to avoid exposing your database secrets to the client.</li> <li>API layer use ORM or SQL to fetch data.</li> <li>In Next.js, you can create API endpoints using Route Handlers.</li> </ul> </li> <li>ORM, like Prisma. To access your database, use ORM. ORMs generate SQL under the hood.</li> <li>React Server Components If you are using React Server Components (fetching data on the server), you can skip the API layer, and query your database directly without risking exposing your database secrets to the client.</li> </ul> <h3 id="using-server-components-to-fetch-data">Using Server Components to fetch data!</h3> <p>By default, Next.js applications use React Server Components. Fetching data with Server Components is a relatively new approach and there are a few benefits of using them:</p> <ul> <li>Server Components support promises, providing a simpler solution for asynchronous tasks like data fetching. You can use async/await syntax without reaching out for useEffect, useState or data fetching libraries.</li> <li>Server Components execute on the server, so you can keep expensive data fetches and logic on the server and only send the result to the client.</li> <li>Server Components execute on the server, you can query the database directly without an additional API layer.</li> </ul> <h3 id="parallel-data-fetching">Parallel data fetching</h3> <p>Sequential fatching, also called waterfall pattern, is not necessarily bad. Sometime you may need to one step then next. However, this behavior can also be unintentional and impact performance.</p> <p>A common way to avoid waterfalls is to initiate all data requests at the same time - in parallel. In JavaScript, you can use the <code class="language-plaintext highlighter-rouge">Promise.all()</code> or <code class="language-plaintext highlighter-rouge">Promise.allSettled()</code> functions to initiate all promises at the same time.</p> <p>This Parallel pattern work like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">fetchCardData</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">invoiceCountPromise</span> <span class="o">=</span> <span class="nx">sql</span><span class="s2">`SELECT COUNT(*) FROM invoices`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">customerCountPromise</span> <span class="o">=</span> <span class="nx">sql</span><span class="s2">`SELECT COUNT(*) FROM customers`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">invoiceStatusPromise</span> <span class="o">=</span> <span class="nx">sql</span><span class="s2">`SELECT
         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS "paid",
         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS "pending"
         FROM invoices`</span><span class="p">;</span>
 
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">all</span><span class="p">([</span>
      <span class="nx">invoiceCountPromise</span><span class="p">,</span>
      <span class="nx">customerCountPromise</span><span class="p">,</span>
      <span class="nx">invoiceStatusPromise</span><span class="p">,</span>
    <span class="p">]);</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote class="block-warning"> <p>However, there is one disadvantage of relying only on this pattern: what happens if one data request is slower than all the others? Your application is only as fast as your slowest data fetch. One solution is using Streaming and static rendering.</p> </blockquote> <h2 id="static-and-dynamic-rendering">Static and Dynamic Rendering</h2> <p>Next.js provide Static and Dynamic Rendering function. By default, when you use Server component to fetch data. Next.js provide cached function which is stastic rendering. Stastic rendering can make visit faster, good for SEO, reduced Server Load.</p> <p><code class="language-plaintext highlighter-rouge">import { unstable_noStore as noStore } from 'next/cache';</code></p> <h3 id="what-is-static-rendering">What is Static Rendering</h3> <p>With static rendering, data fetching and rendering happens on the server at build time (when you deploy) or during revalidation. The result can then be distributed and cached in a Content Delivery Network (CDN).</p> <p>Static rendering is useful for UI with no data or data that is shared across users</p> <h3 id="what-is-dynamic-rendering">What is Dynamic Rendering</h3> <p>With dynamic rendering, content is rendered on the server for each user at request time (when the user visits the page). There are a couple of benefits of dynamic rendering:</p> <ul> <li>Real-Time Data</li> <li>User-Specific Content</li> <li>Request Time Information</li> </ul> <h2 id="streaming">Streaming</h2> <p>Streaming is a data transfer technique that allows you to break down a route into smaller “chunks” and progressively stream them from the server to the client as they become ready.</p> <p>By streaming, you can prevent slow data requests from blocking your whole page. This allows the user to see and interact with parts of the page without waiting for all the data to load before any UI can be shown to the user.</p> <p>Streaming works well with React’s component model, as each component can be considered a chunk.</p> <p>There are two ways you implement streaming in Next.js:</p> <ul> <li>At the page level, with the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file.</li> <li>For specific components, with <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code>.</li> </ul> <h3 id="streaming-a-whole-page-with-loadingtsx">Streaming a whole page with <code class="language-plaintext highlighter-rouge">loading.tsx</code></h3> <p><code class="language-plaintext highlighter-rouge">loading.tsx</code> is a special Next.js file built on top of <strong>Suspense</strong>, it allows you to create fallback UI to show as a replacement while page content loads. <code class="language-plaintext highlighter-rouge">loading.tsx</code> is describing the fallback UI which should be a static rendering.</p> <p>To use Streaming with <code class="language-plaintext highlighter-rouge">loading.tsx</code>, the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file is located at same folder level with <code class="language-plaintext highlighter-rouge">page.tsx</code>. Next.js will display <code class="language-plaintext highlighter-rouge">loading.tsx</code> first, then the <code class="language-plaintext highlighter-rouge">page.tsx</code>.</p> <p>Also, The user doesn’t have to wait for the page to finish loading before navigating away.(this is called interruptable navigation).</p> <h3 id="route-groups">route groups</h3> <p>When <code class="language-plaintext highlighter-rouge">loading.tsx</code> is a level higher than <code class="language-plaintext highlighter-rouge">/subfolder/page.tsx</code> in the file system, it’s also applied to that page. In order to fix this problem. Next.js use route groups concept: Create a new folder called <code class="language-plaintext highlighter-rouge">/(overview)</code> inside the dashboard folder. Then, move your <code class="language-plaintext highlighter-rouge">loading.tsx</code> and <code class="language-plaintext highlighter-rouge">page.tsx</code> files inside the folder. Now, the <code class="language-plaintext highlighter-rouge">loading.tsx</code> file will only apply to the same folder level page.</p> <blockquote> <p>When you create a new folder using parentheses <code class="language-plaintext highlighter-rouge">()</code>, the name won’t be included in the URL path.</p> </blockquote> <h3 id="streaming-a-component-with-suspense">Streaming a component with <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code></h3> <p>Wrap the component which need to be Streaming into <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code>.</p> <p>Suspense allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads.</p> <p>Steps:</p> <ul> <li>Move data fetching down to the component that need it, thus isolating which parts of your routes should be dynamic in preparation for Partial Prerendering.</li> <li>Using <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code> to wrap that component.</li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">Suspense</span> <span class="nx">fallback</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">FetchDataComponentSkeleton</span> <span class="o">/&gt;</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">FetchDataComponent</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/Suspense</span><span class="err">&gt;
</span></code></pre></div></div> <h3 id="grouping-components">Grouping components</h3> <p>You can use Grouping components pattern when you want multiple components to load in at the same time. Step:</p> <ul> <li>Wrap all these multiple components into one component call WrapComponent.</li> <li>These Grouping components inside the WrapComponent can use <code class="language-plaintext highlighter-rouge">Promise.all</code> to parallel fetch data.</li> <li>Using <code class="language-plaintext highlighter-rouge">&lt;Suspense&gt;</code> to wrap that WrapComponent.</li> </ul> <h3 id="what-is-partial-prerendering">What is Partial Prerendering</h3> <p>Application behaves today, where entire routes are either entirely static or dynamic.</p> <p>Partial Prerendering allows you to render a route with a static loading shell, while keeping some parts dynamic. In other words, you can isolate the dynamic parts of a route.</p> <p>When a user visits a route:</p> <ul> <li>A static route shell is served, ensuring a fast initial load.</li> <li>The shell leaves holes where dynamic content will load in asynchronous.</li> <li>The async holes are streamed in parallel, reducing the overall load time of the page.</li> </ul> <h2 id="use-url-search-params">Use URL search params</h2> <p>Next.js is using URL search params to manage the <strong>search</strong> and <strong>pagination</strong> state.</p> <h3 id="why">Why</h3> <ul> <li>Bookmarkable and Shareable URLs</li> <li>URL parameters can be directly consumed on the server to render the initial state, making it easier to handle server rendering</li> <li>makes it easier to track user behavior</li> </ul> <h3 id="how">How</h3> <p>Next.js provide Hooks:</p> <ul> <li>useSearchParams - Allows you to access the parameters of the current URL. For example, the search params for this URL <code class="language-plaintext highlighter-rouge">/dashboard/invoices?page=1&amp;query=pending</code> would look like this: <code class="language-plaintext highlighter-rouge">{page: '1', query: 'pending'}</code>.</li> <li>usePathname - Lets you read the current URL’s pathname. For example, for the route <code class="language-plaintext highlighter-rouge">/dashboard/invoices</code>, usePathname would return <code class="language-plaintext highlighter-rouge">'/dashboard/invoices'</code>.</li> <li>useRouter - Enables navigation between routes within client components programmatically.</li> </ul> <p>You use these Hooks to implement the interact logic between client and server components.</p> <h3 id="steps">Steps</h3> <p>Setup the query string Steps:</p> <ol> <li>In client component, using <code class="language-plaintext highlighter-rouge">useSearchParams</code>, <code class="language-plaintext highlighter-rouge">URLSearchParams</code>, <code class="language-plaintext highlighter-rouge">useRouter</code> and <code class="language-plaintext highlighter-rouge">usePathname</code> to update the URL.</li> <li>When the URL updagte, it will works as prop update to the Server component. Server component will fetch data and re-render.</li> </ol> <blockquote class="block-warning"> <p>This client component may live inside the server component in code base. This logic looks weird but works. So URL search params is the key point to make client and server component interact each other.</p> </blockquote> <p>You use <strong>query string</strong> to implement Fetch data, Search and Pagination function.</p> <h2 id="react-server-actions">React Server Actions</h2> <h3 id="what-is-react-server-actions">What is React Server Actions</h3> <p>React Server Actions allow you to run asynchronous code directly on the server to <strong>mutate data</strong>. You can write asynchronous functions that execute on the server and can be invoked from your Client or Server Components.</p> <p>They eliminate the need to create API endpoints to mutate data.</p> <p>Server Actions achieve this through techniques like <strong><code class="language-plaintext highlighter-rouge">POST</code> requests</strong>, <strong>encrypted closures</strong>, <strong>strict input checks</strong>, <strong>error message hashing</strong>, and <strong>host restrictions</strong>, all working together to significantly enhance your app’s safety.</p> <h3 id="how-to-create-server-actions">How to create Server Actions</h3> <p>By adding the <code class="language-plaintext highlighter-rouge">'use server'</code> to a file, you mark all the exported functions within the file as server functions. These server functions can then be imported into Client and Server components, making them extremely versatile. You can also write Server Actions directly inside Server Components by adding <code class="language-plaintext highlighter-rouge">"use server"</code> inside the action.</p> <p>Usually, you use the <code class="language-plaintext highlighter-rouge">action</code> attribute in the <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> element to invoke actions. When you submit the form, Server action function <code class="language-plaintext highlighter-rouge">createRecord</code> will automatically receive the native <code class="language-plaintext highlighter-rouge">FormData</code> object, containing the captured data. Like this: <code class="language-plaintext highlighter-rouge">createRecord(formData: FormData)</code>.</p> <blockquote> <p>Good to know:</p> <p>In HTML, you’d pass a URL to the <code class="language-plaintext highlighter-rouge">action</code> attribute of <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code>. This URL would be the destination where your form data should be submitted (usually an API endpoint). However, in React, the <code class="language-plaintext highlighter-rouge">action</code> attribute of <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> is considered a special prop - meaning React builds on top of it to allow actions to be invoked. Behind the scenes, Server Actions create a <code class="language-plaintext highlighter-rouge">POST</code> API endpoint. This is why you don’t need to create API endpoints manually when using Server Actions.</p> </blockquote> <h3 id="example">Example</h3> <p>Invoking a Server Action within a Server Component :</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Server Component</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Action</span>
  <span class="k">async</span> <span class="kd">function</span> <span class="nf">create</span><span class="p">(</span><span class="nx">formData</span><span class="p">:</span> <span class="nx">FormData</span><span class="p">)</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">use server</span><span class="dl">'</span><span class="p">;</span>
 
    <span class="c1">// Logic to mutate data...</span>
  <span class="p">}</span>
 
  <span class="c1">// Invoke the action using the "action" attribute</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="p">{</span><span class="nx">create</span><span class="p">}</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/form&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <h3 id="some-point-for-server-action">some point for server action</h3> <ul> <li>Using <code class="language-plaintext highlighter-rouge">bind</code> to send data to server action.</li> <li>Even you just delete a record, you will wrap the delete button into a <code class="language-plaintext highlighter-rouge">form</code> to invoke server action.</li> <li>Usuall you will Revalidate and redirect after mutate data. Because of Next.js catching.</li> </ul> <h3 id="revalidate-and-redirect">Revalidate and redirect</h3> <p>Usually, you will Revalidate and redirect in the server action.</p> <p>Next.js has a Client-side Router Cache that stores the route segments in the user’s browser for a time. Along with prefetching, this cache ensures that users can quickly navigate between routes while reducing the number of requests made to the server.</p> <ul> <li><code class="language-plaintext highlighter-rouge">revalidatePath</code> allows you to purge cached data on-demand for a specific path.</li> <li>The <code class="language-plaintext highlighter-rouge">redirect</code> function allows you to redirect the user to another URL. <code class="language-plaintext highlighter-rouge">redirect</code> can be used in Server Components, Route Handlers, and Server Actions.</li> </ul> <h4 id="how-to-use-it">How to use it</h4> <ul> <li>Inside the server action function, you will add <code class="language-plaintext highlighter-rouge">revalidatePath('/dashboard/invoices');</code>. Then the <code class="language-plaintext highlighter-rouge">/dashboard/invoices</code> path will be revalidated, and fresh data will be fetched from the server.</li> <li>At this point, you also want to redirect the user back to the <code class="language-plaintext highlighter-rouge">/dashboard/invoices</code> page by adding <code class="language-plaintext highlighter-rouge">redirect('/dashboard/invoices'); </code></li> </ul> <h2 id="dynamic-route-segments">Dynamic Route Segments</h2> <p>Next.js allows you to create Dynamic Route Segments when you don’t know the exact segment name and want to create routes based on data. This could be product ID, blog post titles, product pages, etc. You can create dynamic route segments by wrapping a folder’s name in square brackets. For example, [id], [post] or [slug].</p> <p>For example, you need a invoice update function. Then you need to Create a Dynamic Route Segment with the invoice id.</p> <h3 id="steps-1">Steps:</h3> <ul> <li> <p>In your /invoices folder, create a new dynamic route called [id], then a new route called <code class="language-plaintext highlighter-rouge">edit</code> with a <code class="language-plaintext highlighter-rouge">page.tsx</code> file.</p> </li> <li> <p>The Update Button for each invoice will do this:</p> </li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">Link</span>
  <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">`/dashboard/invoices/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">/edit`</span><span class="p">}</span>
  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">rounded-md border p-2 hover:bg-gray-100</span><span class="dl">"</span>
<span class="o">&gt;</span>
</code></pre></div></div> <ul> <li>Inside the <code class="language-plaintext highlighter-rouge">[id]/edit/page.tsx</code>, it will Read the invoice <code class="language-plaintext highlighter-rouge">id</code> from page <code class="language-plaintext highlighter-rouge">params</code>.</li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">({</span> <span class="nx">params</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">params</span><span class="p">:</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="kr">string</span> <span class="p">}</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li> <p>Inside the <code class="language-plaintext highlighter-rouge">[id]/edit/page.tsx</code>, you will Fetch the specific invoice according to the <code class="language-plaintext highlighter-rouge">id</code> to fill the page.</p> </li> <li> <p>When user confirm update, You will update Database by using Server Action. At this moment, You can’t just pass <code class="language-plaintext highlighter-rouge">id</code> to server action! Instead, you can pass id to the Server Action using JS bind.</p> </li> </ul> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateInvoiceWithId</span> <span class="o">=</span> <span class="nx">updateInvoice</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">invoice</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
<span class="k">return </span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="p">{</span><span class="nx">updateInvoiceWithId</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">invoice</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div> <h2 id="error-handler">error handler</h2> <p>Next.js works as framework, it have implement error handle flow. When something wrong happen, it can automatically implement the routine. For example, if you define a <code class="language-plaintext highlighter-rouge">error.tsx</code> file, it will turn to this file.</p> <h3 id="errortsx-file"><code class="language-plaintext highlighter-rouge">error.tsx</code> file</h3> <p>When you add <code class="language-plaintext highlighter-rouge">error.tsx</code> file to your route segments folder, the <code class="language-plaintext highlighter-rouge">error.tsx</code> file serves as a catch-all for unexpected errors and allows you to display a fallback UI to your users.</p> <p><code class="language-plaintext highlighter-rouge">error.tsx</code> file describe the UI and should like this:</p> <ul> <li><code class="language-plaintext highlighter-rouge">"use client"</code> - error.tsx needs to be a Client Component.</li> <li>It accepts two props: <ul> <li><code class="language-plaintext highlighter-rouge">error</code>: This object is an instance of JavaScript’s native Error object.</li> <li><code class="language-plaintext highlighter-rouge">reset</code>: This is a function to reset the error boundary. When executed, the function will try to re-render the route segment.</li> </ul> </li> </ul> <h3 id="not-foundtsx-file"><code class="language-plaintext highlighter-rouge">not-found.tsx</code> file</h3> <p>If you know some specific error, like not found resource, you can display specific information to user:</p> <ol> <li>import <code class="language-plaintext highlighter-rouge">notFound</code>: <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">notFound</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/navigation</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">//...</span>
<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">invoice</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">notFound</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Create a <code class="language-plaintext highlighter-rouge">not-found.tsx</code> file in your route segments folder.</li> <li>Then <code class="language-plaintext highlighter-rouge">not-found.tsx</code> file will display when notFound happen.</li> </ol> <blockquote> <p>That’s something to keep in mind, <code class="language-plaintext highlighter-rouge">notFound</code> will take precedence over <code class="language-plaintext highlighter-rouge">error.tsx</code>, so you can reach out for it when you want to handle more specific errors!</p> </blockquote> <h2 id="form-validation">Form Validation</h2> <h3 id="client-side-validation">Client-Side validation</h3> <p>There are a couple of ways you can validate forms on the client. The simplest would be to rely on the form validation provided by the browser by simply adding the <code class="language-plaintext highlighter-rouge">required</code> attribute to the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> elements in your <code class="language-plaintext highlighter-rouge">forms</code>. For example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">input</span>
  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">amount</span><span class="dl">"</span>
  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">amount</span><span class="dl">"</span>
  <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span>
  <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Enter USD amount</span><span class="dl">"</span>
  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500</span><span class="dl">"</span>
  <span class="nx">required</span>
<span class="o">/&gt;</span>
</code></pre></div></div> <h3 id="server-side-validation">Server-Side validation</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">useFormState</code> to connect form state to Server Action function.</li> <li>use <code class="language-plaintext highlighter-rouge">Zod</code> lib to implement validating form data. If form validation fails, return errors early.</li> <li>Using the <code class="language-plaintext highlighter-rouge">aria</code> labels to show error information in form.</li> </ul> <h3 id="useformstate-useactionstate">useFormState (useActionState)</h3> <ul> <li><code class="language-plaintext highlighter-rouge">useFormState</code> hook is from <code class="language-plaintext highlighter-rouge">react-dom</code> lib.</li> <li><code class="language-plaintext highlighter-rouge">useActionState</code> is the new hook to <strong>replace</strong> <code class="language-plaintext highlighter-rouge">useFormState</code>. <code class="language-plaintext highlighter-rouge">useActionState</code> is from <code class="language-plaintext highlighter-rouge">react</code> lib.</li> <li>It is a messager between the component who use <code class="language-plaintext highlighter-rouge">form</code> and React Server Action function.</li> <li>Use for Server-Side Form Validation.</li> <li>Basic usage: like Displaying form errors, structured information after submitting a form.</li> </ul> <h4 id="what-and-how">What and How</h4> <p><code class="language-plaintext highlighter-rouge">useActionState</code> is a Hook that allows you to update state based on the result of a form action. It is a messager between the component who use <code class="language-plaintext highlighter-rouge">form</code> and React Server Action function.</p> <p>Call <code class="language-plaintext highlighter-rouge">useActionState</code> at the top level of your component to create component state that is updated when a form action is invoked.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">formAction</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useActionState</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">permalink</span><span class="p">?);</span>
</code></pre></div></div> <p>You pass <code class="language-plaintext highlighter-rouge">useActionState</code> an existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state. The latest form state is also passed to the function that you provided.</p> <h3 id="aria-labels"><code class="language-plaintext highlighter-rouge">aria</code> labels</h3> <p>get more informaiton from <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label">MDN doc</a>.</p> <p>The code below will show error information when <code class="language-plaintext highlighter-rouge">state.errors</code> is <code class="language-plaintext highlighter-rouge">true</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">select</span>
      <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">customer</span><span class="dl">"</span>
      <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">customerId</span><span class="dl">"</span>
      <span class="nx">defaultValue</span><span class="o">=</span><span class="dl">""</span>
      <span class="nx">aria</span><span class="o">-</span><span class="nx">describedby</span><span class="o">=</span><span class="dl">"</span><span class="s2">customer-error</span><span class="dl">"</span>
    <span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="sr">/select</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">customer-error</span><span class="dl">"</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="dl">"</span><span class="s2">polite</span><span class="dl">"</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">atomic</span><span class="o">=</span><span class="dl">"</span><span class="s2">true</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">errors</span><span class="p">?.</span><span class="nx">customerId</span> <span class="o">&amp;&amp;</span>
      <span class="nx">state</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">customerId</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="na">error</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">p</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">mt-2 text-sm text-red-500</span><span class="dl">"</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">error</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>      <span class="p">))}</span>
  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span></code></pre></div></div> <h2 id="adding-authentication">Adding Authentication</h2> <h3 id="basic-idea-like-this">Basic idea like this:</h3> <p>Next.js provide <code class="language-plaintext highlighter-rouge">NextAuth.js</code> to add authentication to your application. <code class="language-plaintext highlighter-rouge">NextAuth.js</code> abstracts away much of the complexity involved in managing sessions, sign-in and sign-out, and other aspects of authentication. It is third library.</p> <h3 id="how-it-work">How It Work</h3> <p>Here are the <a href="https://authjs.dev/reference/next-auth">official Doc</a>.</p> <p>The step roughly like this:</p> <h4 id="setting-up-nextauthjs-to-your-project">Setting up NextAuth.js to your project</h4> <ul> <li>install it: <code class="language-plaintext highlighter-rouge">npm install next-auth@beta</code></li> <li>generate a secret key for your application. This key is used to encrypt cookies, ensuring the security of user sessions. Like this: <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code></li> <li>In your <code class="language-plaintext highlighter-rouge">.env</code> file, add your generated key to the AUTH_SECRET variable: <code class="language-plaintext highlighter-rouge">AUTH_SECRET=your-secret-key</code></li> </ul> <h4 id="authconfigts-file"><code class="language-plaintext highlighter-rouge">auth.config.ts</code> file</h4> <p>Create an <code class="language-plaintext highlighter-rouge">auth.config.ts</code> file at the root of our project that exports an <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <ul> <li>you can Add the login pages option in this config file.</li> <li>configure Protecting your routes with Next.js Middleware.</li> </ul> <h4 id="authts-file"><code class="language-plaintext highlighter-rouge">auth.ts</code> file</h4> <p>Spreads your <code class="language-plaintext highlighter-rouge">authConfig</code> object.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">NextAuth</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">authConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./auth.config</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Credentials</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-auth/providers/credentials</span><span class="dl">'</span><span class="p">;</span>
 
<span class="k">export</span> <span class="kd">const</span> <span class="p">{</span> <span class="nx">auth</span><span class="p">,</span> <span class="nx">signIn</span><span class="p">,</span> <span class="nx">signOut</span> <span class="p">}</span> <span class="o">=</span> <span class="nc">NextAuth</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">authConfig</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nc">Credentials</span><span class="p">({})],</span>
<span class="p">});</span>
</code></pre></div></div> <h4 id="the-login-form">The login form</h4> <p>you create the login route and component. for example, create route <code class="language-plaintext highlighter-rouge">'/login'</code>.</p> <h2 id="references">References</h2> <ul> <li><a href="https://github.com/benwzj/nextjs-demo">My github repo</a></li> <li><a href="https://nextjs.org/learn/dashboard-app">Offical Doc</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="TypeScript"/><category term="JavaScript"/><category term="React"/><category term="Next.js"/><summary type="html"><![CDATA[Next.js Starter application is a Dashboard app. It is a good beginning to understand How do Next.js work and What have Next.js done. This Blog list some conclusions of the application.]]></summary></entry><entry><title type="html">Tailwind CSS Instroduction</title><link href="https://benwzj.github.io/blog/2024/css-tailwind/" rel="alternate" type="text/html" title="Tailwind CSS Instroduction"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/css-tailwind</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/css-tailwind/"><![CDATA[<h2 id="what-is-tailwind-css">What is Tailwind CSS</h2> <h3 id="css-problems">CSS Problems</h3> <ol> <li>Separation</li> <li>Verbosity</li> <li>Too Much Power</li> <li>Zombies</li> </ol> <p>Tailwind CSS is an open source CSS framework. It looks like solve the CSS problems.</p> <h3 id="tailwind-css-main-feature">Tailwind CSS Main Feature</h3> <p>Unlike other CSS frameworks like Bootstrap, it does not provide a series of predefined classes for elements such as buttons or tables. Instead, it creates a list of <strong>“utility” CSS classes</strong> that can be used to style each element by mixing and matching.</p> <p>For example, in other traditional systems, there would be a class message-warning that would apply a yellow background color and bold text. To achieve this result in Tailwind, one would have to apply a set of classes created by the library: <code class="language-plaintext highlighter-rouge">bg-yellow-300</code> and <code class="language-plaintext highlighter-rouge">font-bold</code>.</p> <h3 id="how-it-work">How it work</h3> <p>Tailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.</p> <h3 id="why-is-tailwind-css-winning">Why is Tailwind CSS Winning</h3> <p>Tailwind CSS is very popular nowaday. Why it is winning among so many CSS solution competitors? Here some benefits may tell something:</p> <ul> <li>You aren’t wasting energy <strong>inventing class names</strong>. This is the hardest job for developer. No more adding silly class names like <code class="language-plaintext highlighter-rouge">sidebar-inner-wrapper</code> just to be able to style something, and no more agonizing over the perfect abstract name for something that’s really just a flex container.</li> <li>Your CSS stops growing. Using a traditional approach, your CSS files get bigger every time you add a new feature. With utilities, everything is reusable so you rarely need to write new CSS.</li> <li>Making changes feels safer. CSS is global and you never know what you’re breaking when you make a change. Classes in your HTML are local, so you can change them without worrying about something else breaking.</li> <li>No zombies CSS code!</li> </ul> <p>Cons:</p> <ul> <li>Ugly ass HTML</li> <li>Learning Curve</li> <li>Non-standard</li> <li>Requires tooling</li> </ul> <blockquote> <p>Pro tip: Using ‘Inline fold’ VSCode plugin can fix the Tailwind CSS pollution.</p> </blockquote> <h3 id="tailwind-css-vs-inline-styles">Tailwind CSS vs inline styles</h3> <ul> <li>Designing with <strong>constraints</strong>. Using inline styles, every value is a magic number. With utilities, you’re choosing styles from a predefined design system, which makes it much easier to build visually consistent UIs.</li> <li><strong>Responsive design</strong>. You can’t use media queries in inline styles, but you can use Tailwind’s responsive utilities to build fully responsive interfaces easily.</li> <li><strong>Hover, focus, and other states</strong>. Inline styles can’t target states like hover or focus, but Tailwind’s state variants make it easy to style those states with utility classes.</li> </ul> <h2 id="use-tailwind-css">Use Tailwind CSS</h2> <h3 id="tailwind-css-just-is-css">Tailwind CSS just is CSS</h3> <p>95% of Tailwind utility classes can convert to CSS directly. For example <code class="language-plaintext highlighter-rouge">padding</code>, you can search at Tainwind Doc and it will show you that how it design classes around padding and how to use them. And it also show you that <code class="language-plaintext highlighter-rouge">p-0</code> is <code class="language-plaintext highlighter-rouge">padding: 0px;</code> etc. In Tainwind website, and press <code class="language-plaintext highlighter-rouge">ctrl + k</code>, you can access search directly.</p> <blockquote> <p>Pro tip: Using ‘Tailwind CSS IntelliSense’ VSCode plugin to write Tailwind CSS code.</p> </blockquote> <p>Using ‘Tailwind CSS IntelliSense’ and CSS knowledge can do 75% of Tailwind CSS coding directly. You might need to check the Tailwind Doc for the usage of another 25%. For example <code class="language-plaintext highlighter-rouge">position</code>, Tailwind is using <code class="language-plaintext highlighter-rouge">static</code>, <code class="language-plaintext highlighter-rouge">fixed</code>, etc. It may be a bit confusing at the beginning.</p> <h3 id="document-core-concepts-section">Document ‘Core Concepts’ Section</h3> <p>Ok, 95% classes can convert to CSS simply. And 5% of clssses are not map 1 to 1 to CSS. You just need to go to the ‘Core Concepts’ section in the Tainwind Doc, and glance over them, you will get the most of the idea.</p> <h4 id="hover-focus-and-other-states-section">‘Hover, Focus, and Other States’ section</h4> <p>‘Hover, Focus, and Other States’ section go over 99% of the different edge use cases for handling things like hovering, focusing, pseudo element, and so on, which you can’t handle with CSS classes. But Tailwind get around that and implement these functionality for pretty much everything with classes.</p> <p>For example,</p> <ul> <li>It use <strong>colon</strong> to show hover effect: <code class="language-plaintext highlighter-rouge">hover:bg-violet-600</code>.</li> <li>It have <strong>group</strong> concept: When you need to style an element based on the state of some parent element, mark the parent with the <code class="language-plaintext highlighter-rouge">group</code> class, and use <code class="language-plaintext highlighter-rouge">group-*</code> modifiers like <code class="language-plaintext highlighter-rouge">group-hover</code> to style the target element.</li> <li>It have <strong>peer</strong> concept: When you need to style an element based on the state of a sibling element, mark the sibling with the peer class, and use peer-* modifiers like peer-invalid to style the target element</li> </ul> <h4 id="responsive-design">Responsive Design</h4> <p>Prefix the utility with the breakpoint name, followed by the <code class="language-plaintext highlighter-rouge">:</code> character.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Width of 16 by default, 32 on medium screens, and 48 on large screens --&gt;</span>
<span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"w-16 md:w-32 lg:w-48"</span> <span class="na">src=</span><span class="s">"..."</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>If you’d like to apply a utility only when a specific breakpoint range is active, stack a responsive modifier like <code class="language-plaintext highlighter-rouge">md</code> with a <code class="language-plaintext highlighter-rouge">max-*</code> modifier to limit that style to a specific range</p> <h3 id="some-usage-cases">Some Usage Cases</h3> <ul> <li><code class="language-plaintext highlighter-rouge">space-y-8</code>, this class can work as a <strong>container</strong> class which can make the items inside have 8 space between each other in <code class="language-plaintext highlighter-rouge">y</code> axle.</li> <li><code class="language-plaintext highlighter-rouge">line-clamp-3</code>, this class allow 3 text lines to show in side it. <code class="language-plaintext highlighter-rouge">truncate</code>, allow 1 text line inside it.</li> <li>Show Gradient Color: <code class="language-plaintext highlighter-rouge">bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500</code>.</li> <li>Use <code class="language-plaintext highlighter-rouge">ring</code> border to have a shine button.</li> <li>Support Animation: <ul> <li>Add the <code class="language-plaintext highlighter-rouge">animate-spin</code> utility to add a linear spin animation to elements like loading indicators.</li> <li>Add the <code class="language-plaintext highlighter-rouge">animate-pulse</code> utility to make an element gently fade in and out — useful for things like skeleton loaders</li> </ul> </li> <li>The official Tailwind CSS <strong>Typography</strong> plugin provides a set of <code class="language-plaintext highlighter-rouge">prose</code> classes you can use to add beautiful typographic defaults to any vanilla HTML you don’t control, like HTML rendered from Markdown, or pulled from a CMS.</li> </ul> <h2 id="setup-tailwind-css">Setup Tailwind CSS</h2> <h3 id="using-postcss">Using PostCSS</h3> <p>Installing Tailwind CSS as a PostCSS plugin is the most seamless way to integrate it with build tools like webpack, Rollup, Vite, and Parcel.</p> <ol> <li>Install Tailwind CSS Install tailwindcss and its peer dependencies via npm, and create your <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> file.</li> <li>Add Tailwind to your PostCSS configuration Add tailwindcss and autoprefixer to your <code class="language-plaintext highlighter-rouge">postcss.config.js</code> file, or wherever PostCSS is configured in your project. postcss.config.js: <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">{</span>
 <span class="na">tailwindcss</span><span class="p">:</span> <span class="p">{},</span>
 <span class="na">autoprefixer</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> </ol> <h3 id="using-cli">Using CLI</h3> <p>The simplest and fastest way to get up and running with Tailwind CSS from scratch is with the Tailwind CLI tool.</p> <ol> <li>Install Tailwind CSS.</li> <li>Configure your template paths. Add the paths to all of your template files in your <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> file.</li> <li>Add the Tailwind directives to your CSS. Add the <code class="language-plaintext highlighter-rouge">@tailwind</code> directives for each of Tailwind’s layers to your main CSS file.</li> <li>Start the Tailwind CLI build process. Run the CLI tool to scan your template files for classes and build your CSS.</li> <li>Start using Tailwind in your HTML. Add your compiled CSS file to the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> and start using Tailwind’s utility classes to style your content.</li> </ol> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"./output.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-3xl font-bold underline"</span><span class="nt">&gt;</span>
    Hello world!
  <span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div> <h3 id="play-cdn">Play CDN</h3> <p>Use the Play CDN to try Tailwind right in the browser without any build step. The Play CDN is designed for development purposes only, and is not the best choice for production.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.tailwindcss.com"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-3xl font-bold underline"</span><span class="nt">&gt;</span>
    Hello world!
  <span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div> <h2 id="fqa">FQA</h2> <ul> <li>Responsive Design</li> <li>How can I memorize so many utility classes?</li> <li>Utility Classes Are the Same As Inline Styles?</li> <li>What is <code class="language-plaintext highlighter-rouge">@tailwind</code> directives?</li> <li>What is Tailwind’s layers?</li> </ul> <h2 id="references">References</h2> <ul> <li><a href="https://tailwindcss.com/">Tailwind official website</a></li> <li><a href="https://tailwindcomponents.com/">tailwind components</a></li> <li><a href="https://tailwindcomponents.com/cheatsheet/">tailwind cheatsheet</a></li> </ul>]]></content><author><name></name></author><category term="CSS"/><category term="CSS"/><category term="HTML"/><summary type="html"><![CDATA[What is Tailwind CSS]]></summary></entry><entry><title type="html">React and TypeScript</title><link href="https://benwzj.github.io/blog/2024/React-ts/" rel="alternate" type="text/html" title="React and TypeScript"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/React-ts</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/React-ts/"><![CDATA[<h2 id="premise">Premise</h2> <p>All production-grade React frameworks offer support for using TypeScript. Like, Next.js, Remix, Gatsby, Expo, Create-React-App.</p> <p>When you want to write React app in TypeScript, you need to setup the configuration to support typeScript. For example, you need <code class="language-plaintext highlighter-rouge">ts-loader</code>, <code class="language-plaintext highlighter-rouge">source-map-loader</code>, <code class="language-plaintext highlighter-rouge">@types</code>, <code class="language-plaintext highlighter-rouge">tsconfig.json</code>, setup webpack config, etc.</p> <p>The things you need can be: <code class="language-plaintext highlighter-rouge">npm install --save-dev typescript ts-loader source-map-loader</code> <code class="language-plaintext highlighter-rouge">npm install @types/react @types/react-dom</code></p> <p>The best way is using framework to build new project which support TypeScript. Otherwise you will have a big head.</p> <p>Of course you will use TSX, TS files instead of JS files.</p> <h2 id="typescript-and-components">TypeScript and Components</h2> <blockquote class="block-warning"> <h5 id="note">Note</h5> <p>Every file containing JSX must use the <code class="language-plaintext highlighter-rouge">.tsx</code> file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.</p> </blockquote> <p>Writing TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can <strong>provide types for your component’s props</strong>. These types can be used for correctness checking and providing inline documentation in editors.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MyButton</span><span class="p">({</span> <span class="nx">title</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">app</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">MyButton</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">I'm a button</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component’s props</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">MyButtonProps</span> <span class="p">{</span>
  <span class="cm">/** The text to display inside the button */</span>
  <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="cm">/** Whether the button can be interacted with */</span>
  <span class="nl">disabled</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">MyButton</span><span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">disabled</span> <span class="p">}:</span> <span class="nx">MyButtonProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">disabled</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">app</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">MyButton</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">I'm a disabled button</span><span class="dl">"</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="hooks-and-typescript">Hooks and TypeScript</h2> <p>The type definitions from <code class="language-plaintext highlighter-rouge">@types/react</code> include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get <strong>inferred types</strong> a lot of the time.</p> <h3 id="usestate">useState</h3> <p>Usually, you can just use infer types:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Infer the type as "boolean"</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">enabled</span><span class="p">,</span> <span class="nx">setEnabled</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</code></pre></div></div> <p>But you still can do it explicitly, but not necessary:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">enabled</span><span class="p">,</span> <span class="nx">setEnabled</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</code></pre></div></div> <p>For object type, usually implement like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">user</span><span class="p">,</span> <span class="nx">serUser</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">User</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">user</span><span class="p">?.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></div></div> <h3 id="useref">useRef</h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">HTMLElement</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Me</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span></code></pre></div></div> <h3 id="usereducer">useReducer</h3> <p>Exampel:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">useReducer</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">State</span> <span class="p">{</span>
   <span class="nl">count</span><span class="p">:</span> <span class="kr">number</span> 
<span class="p">};</span>
<span class="kd">type</span> <span class="nx">CounterAction</span> <span class="o">=</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span> <span class="p">}</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">;</span> <span class="nl">value</span><span class="p">:</span> <span class="nx">State</span><span class="p">[</span><span class="dl">"</span><span class="s2">count</span><span class="dl">"</span><span class="p">]</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">initialState</span><span class="p">:</span> <span class="nx">State</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>
<span class="kd">function</span> <span class="nf">stateReducer</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">State</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">CounterAction</span><span class="p">):</span> <span class="nx">State</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">initialState</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">,</span> <span class="na">count</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">value</span> <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Unknown action</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useReducer</span><span class="p">(</span><span class="nx">stateReducer</span><span class="p">,</span> <span class="nx">initialState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">addFive</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">setCount</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">5</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span> <span class="p">});</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">my</span> <span class="nx">counter</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">addFive</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="mi">5</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">reset</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Reset</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>We are using TypeScript in a few key places:</p> <ul> <li><code class="language-plaintext highlighter-rouge">interface State</code> describes the shape of the reducer’s state.</li> <li><code class="language-plaintext highlighter-rouge">type CounterAction</code> describes the different actions which can be dispatched to the reducer.</li> <li><code class="language-plaintext highlighter-rouge">const initialState: State</code> provides a type for the initial state, and also the type which is used by useReducer by default.</li> <li><code class="language-plaintext highlighter-rouge">stateReducer(state: State, action: CounterAction): State</code> sets the types for the reducer function’s arguments and return value.</li> </ul> <h3 id="usecontext">useContext</h3> <p>The useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createContext</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Theme</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">system</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">ThemeContext</span> <span class="o">=</span> <span class="nx">createContext</span><span class="o">&lt;</span><span class="nx">Theme</span><span class="o">|</span><span class="kc">null</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">useGetTheme</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">useContext</span><span class="p">(</span><span class="nx">ThemeContext</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">theme</span><span class="p">,</span> <span class="nx">setTheme</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">Theme</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">light</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ThemeContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/ThemeContext.Provider</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">MyComponent</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="nf">useGetTheme</span><span class="p">();</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">theme</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">theme must be used within a Provider</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Current</span> <span class="nx">theme</span><span class="p">:</span> <span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="usememo">useMemo</h3> <h3 id="usecallback">useCallback</h3> <h2 id="useful-types">Useful Types</h2> <h3 id="dom-events">DOM Events</h3> <p>When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to <strong>explicitly</strong> set the type of the event.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Form</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">setValue</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">"</span><span class="s2">Change me</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleChange</span><span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">setValue</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Value</span><span class="p">:</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="children">Children</h3> <p>There are two common paths to describing the children of a component. The first is to use the <code class="language-plaintext highlighter-rouge">React.ReactNode</code> type, which is a union of all the possible types that can be passed as children in JSX:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ModalRendererProps</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is a very broad definition of children. The second is to use the <code class="language-plaintext highlighter-rouge">React.ReactElement</code> type, which is only JSX elements and not JavaScript primitives like strings or numbers:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ModalRendererProps</span> <span class="p">{</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactElement</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <p>Note, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> children.</p> </blockquote> <h3 id="style-props">Style Props</h3> <p>When using inline styles in React, you can use <code class="language-plaintext highlighter-rouge">React.CSSProperties</code> to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">MyComponentProps</span> <span class="p">{</span>
  <span class="nl">style</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">CSSProperties</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="reactcomponentprops">React.ComponentProps</h3> <p>When you component wrap basic elements, like div, button, you can use <code class="language-plaintext highlighter-rouge">React.ComponentProps</code> accept all the props for that elements.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ComponentProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">MyDivProps</span> <span class="o">=</span> <span class="nx">ComponentProps</span><span class="o">&lt;</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="p">{</span>
  <span class="na">myProp</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">MyDiv</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">myProp</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">}:</span> <span class="nx">MyDivProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myProp</span><span class="o">!</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">};</span>
</code></pre></div></div> <p>There are also <code class="language-plaintext highlighter-rouge">ComponentPropsWithRef</code>, <code class="language-plaintext highlighter-rouge">ComponentPropsWithoutRef</code> available.</p> <h2 id="implement-types">Implement Types</h2> <p>The more type information provided to TypeScript, the more powerful its type checking is.</p> <h3 id="naming-conventions">Naming Conventions</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">PascalCase</code> for type names.</li> <li>Do not use the <code class="language-plaintext highlighter-rouge">I</code> prefix for interfaces. (Something that was copied from statically typed languages)</li> <li>Use <code class="language-plaintext highlighter-rouge">_</code> prefix for private properties.</li> <li>Use consistent naming for component props types (For example, type CustomComponentProps)</li> </ul> <h3 id="where-to-put-your-types-in-application-code">Where To Put Your Types in Application Code</h3> <ul> <li>Rule 1: When a type is used in only one place, put it in the same file where it’s used. <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
<span class="nl">foo</span><span class="p">:</span> <span class="kr">string</span>
<span class="nx">bar</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div> </div> <p>And when types are truly single-use, You can even inline them:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="p">{</span><span class="nl">foo</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="nl">bar</span><span class="p">:</span> <span class="kr">number</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Rule 2: Types that are used in more than one place should be moved to a shared location. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- src
|- components
  |- MyComponent.tsx
|- shared.types.ts
</code></pre></div> </div> <p>If they’re only used in the components folder, I’ll put them there:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- src
|- components-
  |- MyComponent.tsx
  |- components.types.ts
</code></pre></div> </div> <p>In other words, I share the type across the <strong>smallest</strong> number of modules that need it.</p> </li> <li>Rule 3: Types that are used in more than one package in a monorepo should be moved to a shared package. if you’re working on a monorepo with multiple packages? In that case, you should move shared types to a shared package. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|- apps
|- app
|- website
|- docs
|- packages
|- types
  |- src
    |- shared.types.ts
</code></pre></div> </div> </li> </ul> <h3 id="export-import-types">export import types</h3> <p>types.ts file:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">type</span> <span class="nx">Launch</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">full_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>you can use <code class="language-plaintext highlighter-rouge">import</code> or <code class="language-plaintext highlighter-rouge">import type</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span><span class="nx">Launch</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./types</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <h3 id="namespaces">Namespaces</h3> <p>As your project size increases, so will the number of types. There is a good chance that there will be name collisions. Namespaces are the solution to this problem. A namespace will not only avoid multiple type declarations but also provide an organisational structure to your projects. Using namespaces effectively can make your codebase clean.</p> <h3 id="keyof-typeof">Keyof, Typeof</h3> <p>In Typescript, it can use the <code class="language-plaintext highlighter-rouge">typeof</code> operator to get the exact type definition of a variable. <code class="language-plaintext highlighter-rouge">typeof</code> can be used to infer types.</p> <p>The <code class="language-plaintext highlighter-rouge">keyof</code> operator is introduced by typescript. It gives the properties of an object type in form of a union. For example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">b</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;};</span>
<span class="kd">const</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="kc">false</span><span class="p">};</span>
<span class="c1">// Y = 'a' | 'b'</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="kr">keyof</span> <span class="nx">X</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">y</span><span class="p">:</span> <span class="nx">Y</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">;</span>
<span class="cm">/* Without explicitly specifying y as type Y TS will infer its type as string and will throw an error about indexing type X using string */</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">y</span><span class="p">]);</span>
</code></pre></div></div> <p>You will often be using typeof and keyof operators in combination, typeof to get the type of an object and keyof to index it.</p> <h3 id="types">@types</h3> <p><code class="language-plaintext highlighter-rouge">@types</code> is a special directory in typescript. It is <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefintelyTyped</a> which is maintained by TypeScript. DefinitelyTyped try to conclude all the types used in TypeScript, including build-in libraryies and third libraryies.</p> <p>You can find <code class="language-plaintext highlighter-rouge">@types</code> dictionary in React project <code class="language-plaintext highlighter-rouge">node_modules</code>. The declaration file (*.d.ts files, e.g. index.d.ts) are auto recognised by your project’s <code class="language-plaintext highlighter-rouge">tsconfig</code> as the root types files. The types defined in these files can be used as global types in your project.</p> <p>For example <code class="language-plaintext highlighter-rouge">@types/react/index.d.ts</code>, which difine type for React project.</p> <h3 id="utility-types">Utility Types</h3> <p>Typescript provides several utility types which help you transform your type definitions. Some of my commonly used utility types are:</p> <ul> <li>Partial<Type> constructs type with all the properties of the type set to optional. </Type> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;}</span>
<span class="c1">// Y = Partial&lt;X&gt; = {a?: number;} or {a: number | undefined;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">X</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Required<Type> constructs type with all the properties of the type set to required. </Type> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;}</span>
<span class="c1">// Y = Required&lt;X&gt; = {a: number;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Required</span><span class="o">&lt;</span><span class="nx">X</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Record&lt;Keys, Type&gt; constructs an object type with property key of type Keys and property value of type Type. <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// X = {[key: string]: number;}</span>
<span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="o">&gt;</span>
</code></pre></div> </div> </li> <li>Omit&lt;Type, Keys&gt; constructs a type from type Type after removing key Keys (string literal or union of strings). <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">X</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">b</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span> <span class="nl">c</span><span class="p">:</span> <span class="kr">string</span><span class="p">;}</span>
<span class="c1">// Y = {b: boolean; c: string;}</span>
<span class="kd">type</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">X</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="o">&gt;</span>
<span class="c1">// Z = {c: string;}</span>
<span class="kd">type</span> <span class="nx">Z</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">X</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="o">&gt;</span>
</code></pre></div> </div> <p>There are many more Utility Types in typescript and these will help you avoid rewriting your type definitions for every individual or derivable type.</p> </li> </ul> <p>You can also write custom utility types, like the Optional type provided in the <code class="language-plaintext highlighter-rouge">@types/index.d.ts</code> file. Optional type is used to make only selected properties optional in a type.</p> <h3 id="generics">Generics</h3> <blockquote> <p>Definiton: Generics take type(s) as input and use them to derive the type of variables or functions.</p> </blockquote> <blockquote> <p>Purpose: Generics type give you chance to describe the type <strong>relationship</strong> between input and output.</p> </blockquote> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">identity</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">arg</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/* Explicitly*/</span>
<span class="nx">identity</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
<span class="cm">/* Implicitly */</span>
<span class="nf">identity</span><span class="p">(</span><span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ButtonProp</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">count</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="nl">countHistory</span><span class="p">:</span> <span class="nx">T</span><span class="p">[];</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">Button</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">({</span><span class="nx">count</span><span class="p">,</span> <span class="nx">countHistory</span><span class="p">}:</span> <span class="nx">ButtonProp</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Me</span><span class="o">&lt;</span><span class="sr">/button&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <p>Use generics to make your code reusable without writing multiple type definitions.</p> <h3 id="the-unknown-type">The <code class="language-plaintext highlighter-rouge">unknown</code> Type</h3> <ul> <li>The <code class="language-plaintext highlighter-rouge">any</code> type is container type, but <code class="language-plaintext highlighter-rouge">unknown</code> type is not.</li> <li>All assignments to the <code class="language-plaintext highlighter-rouge">unknown</code> variable are considered type-correct. But the <code class="language-plaintext highlighter-rouge">unknown</code> type is only assignable to the <code class="language-plaintext highlighter-rouge">any</code> type and the <code class="language-plaintext highlighter-rouge">unknown</code> type itself.</li> <li>You can narrow <code class="language-plaintext highlighter-rouge">unknown</code> type and use them.</li> </ul> <h4 id="narrowing-the-unknown-type">Narrowing the <code class="language-plaintext highlighter-rouge">unknown</code> Type</h4> <p>You need to <strong>narrow</strong> the <code class="language-plaintext highlighter-rouge">unknown</code> Type first before using it. For example using:</p> <ul> <li><code class="language-plaintext highlighter-rouge">typeof</code> operators</li> <li><code class="language-plaintext highlighter-rouge">instanceof</code> operators</li> <li>custom type guard function</li> <li>third lib schema, like Zod.</li> </ul> <p>Custom type guard function Example :</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">isNumberArray</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">):</span> <span class="nx">value</span> <span class="k">is</span> <span class="kr">number</span><span class="p">[]</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nf">every</span><span class="p">(</span><span class="nx">element</span> <span class="o">=&gt;</span> <span class="k">typeof</span> <span class="nx">element</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">unknownValue</span><span class="p">:</span> <span class="nx">unknown</span> <span class="o">=</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">16</span><span class="p">];</span>
<span class="k">if </span><span class="p">(</span><span class="nf">isNumberArray</span><span class="p">(</span><span class="nx">unknownValue</span><span class="p">))</span> <span class="p">{</span>
  <span class="c1">// Within this branch, `unknownValue` has type `number[]`,</span>
  <span class="c1">// so we can spread the numbers as arguments to `Math.max`</span>
  <span class="kd">const</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(...</span><span class="nx">unknownValue</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">max</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Zod example</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">z</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zod</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// creating a schema for strings</span>
<span class="kd">const</span> <span class="nx">mySchema</span> <span class="o">=</span> <span class="nx">z</span><span class="p">.</span><span class="nf">string</span><span class="p">();</span>
<span class="c1">// parsing</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="dl">"</span><span class="s2">tuna</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// =&gt; "tuna"</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// =&gt; throws ZodError</span>
<span class="c1">// "safe" parsing (doesn't throw error if validation fails)</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">safeParse</span><span class="p">(</span><span class="dl">"</span><span class="s2">tuna</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// =&gt; { success: true; data: "tuna" }</span>
<span class="nx">mySchema</span><span class="p">.</span><span class="nf">safeParse</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// =&gt; { success: false; error: ZodError }</span>
</code></pre></div></div> <h4 id="using-type-assertions-with-unknown">Using Type Assertions with <code class="language-plaintext highlighter-rouge">unknown</code></h4> <p>If you want to force the compiler to trust you that a value of type <code class="language-plaintext highlighter-rouge">unknown</code> is of a given type, you can use a type assertion like this:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">unknown</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">someString</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="nx">value</span> <span class="k">as</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">otherString</span> <span class="o">=</span> <span class="nx">someString</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">();</span> <span class="c1">// "HELLO WORLD"</span>
</code></pre></div></div> <h4 id="unknown-in-union-and-intersection-types"><code class="language-plaintext highlighter-rouge">unknown</code> in Union and Intersection Types</h4> <p>In union, any of the constituent types is <code class="language-plaintext highlighter-rouge">unknown</code>, the union type evaluates to <code class="language-plaintext highlighter-rouge">unknown</code>, except <code class="language-plaintext highlighter-rouge">any</code>. In intersection, intersecting any type with unknown doesn’t change the resulting type.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">UnionType1</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType2</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType3</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// unknown</span>
<span class="kd">type</span> <span class="nx">UnionType4</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">number</span><span class="p">[];</span> <span class="c1">// unknown</span>

<span class="kd">type</span> <span class="nx">UnionType5</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">|</span> <span class="kr">any</span><span class="p">;</span> <span class="c1">// any</span>

<span class="kd">type</span> <span class="nx">IntersectionType1</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// null</span>
<span class="kd">type</span> <span class="nx">IntersectionType2</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// undefined</span>
<span class="kd">type</span> <span class="nx">IntersectionType3</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// string</span>
<span class="kd">type</span> <span class="nx">IntersectionType4</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">number</span><span class="p">[];</span> <span class="c1">// number[]</span>
<span class="kd">type</span> <span class="nx">IntersectionType5</span> <span class="o">=</span> <span class="nx">unknown</span> <span class="o">&amp;</span> <span class="kr">any</span><span class="p">;</span> <span class="c1">// any</span>
</code></pre></div></div> <h4 id="use-unknown-type-in-fetch">use <code class="language-plaintext highlighter-rouge">unknown</code> type in fetch</h4> <p>The <code class="language-plaintext highlighter-rouge">data</code> is <code class="language-plaintext highlighter-rouge">any</code> type when fetching!</p> <ul> <li>Using Zod: <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">useEffect</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
<span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://jsonplaceholder.typicode.com/todos/1</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="na">data</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="c1">// use Zod</span>
    <span class="c1">// for example: const todo = todoSchema.parse(data); </span>
    <span class="c1">// ...</span>
  <span class="p">});</span>
<span class="p">},[]);</span>
</code></pre></div> </div> </li> <li>Using ts-reset: <code class="language-plaintext highlighter-rouge">.json</code> (in fetch) and <code class="language-plaintext highlighter-rouge">JSON.parse</code> both return <code class="language-plaintext highlighter-rouge">unknown</code>.</li> </ul> <h3 id="type-assertions">Type Assertions</h3> <p>Type assertion allows you to set the type of a value and tell the compiler not to infer it.</p> <p>You may do this to make thing simple:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ButtonColor</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="o">|</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">;</span>

<span class="nf">useEffect </span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">previousButtonColor</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nf">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">buttonColor</span><span class="dl">'</span><span class="p">)</span> <span class="k">as</span> <span class="nx">ButtonColor</span><span class="p">;</span>
<span class="p">},[]);</span>
</code></pre></div></div> <h3 id="omit"><code class="language-plaintext highlighter-rouge">Omit&lt;&gt;</code></h3> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">sessionId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">Guest</span> <span class="o">=</span> <span class="nb">Omit</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">,</span> <span class="s2">`name`</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// then, Guest type just contain sessionId. </span>
</code></pre></div></div> <h3 id="jsxelement-vs-reactnode-vs-reactelement">JSX.Element vs ReactNode vs ReactElement</h3> <p>A <strong><code class="language-plaintext highlighter-rouge">ReactElement</code></strong> is an object with type, props, and key properties:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ReactElement</span><span class="o">&lt;</span>
  <span class="nx">P</span> <span class="o">=</span> <span class="kr">any</span><span class="p">,</span>
  <span class="nx">T</span> <span class="kd">extends</span>
    <span class="o">|</span> <span class="kr">string</span>
    <span class="o">|</span> <span class="nx">JSXElementConstructor</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kr">string</span>
    <span class="o">|</span> <span class="nx">JSXElementConstructor</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
<span class="o">&gt;</span> <span class="p">{</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="nl">props</span><span class="p">:</span> <span class="nx">P</span><span class="p">;</span>
  <span class="nl">key</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>A <strong><code class="language-plaintext highlighter-rouge">JSX.Element</code></strong> is a <code class="language-plaintext highlighter-rouge">ReactElement&lt;any, any&gt;</code>. It exists as various libraries can implement JSX in their own way:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="nb">global</span> <span class="p">{</span>
  <span class="c1">// …</span>
  <span class="k">namespace</span> <span class="nx">JSX</span> <span class="p">{</span>
    <span class="c1">// …</span>
    <span class="kr">interface</span> <span class="nx">Element</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactElement</span><span class="o">&lt;</span><span class="kr">any</span><span class="p">,</span> <span class="kr">any</span><span class="o">&gt;</span> <span class="p">{}</span>
    <span class="c1">// …</span>
  <span class="p">}</span>
  <span class="c1">// …</span>
<span class="p">}</span>
</code></pre></div></div> <p>A <strong>ReactPortal</strong> is a <code class="language-plaintext highlighter-rouge">ReactElement</code> with a children property:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ReactPortal</span> <span class="kd">extends</span> <span class="nx">ReactElement</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>A <strong>ReactNode</strong> is a <code class="language-plaintext highlighter-rouge">ReactElement</code>, <code class="language-plaintext highlighter-rouge">string</code>, <code class="language-plaintext highlighter-rouge">number</code>, <code class="language-plaintext highlighter-rouge">Iterable&lt;ReactNode&gt;</code>, <code class="language-plaintext highlighter-rouge">ReactPortal</code>, <code class="language-plaintext highlighter-rouge">boolean</code>, <code class="language-plaintext highlighter-rouge">null</code>, or <code class="language-plaintext highlighter-rouge">undefined</code>:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ReactNode</span> <span class="o">=</span>
  <span class="o">|</span> <span class="nx">ReactElement</span>
  <span class="o">|</span> <span class="kr">string</span>
  <span class="o">|</span> <span class="kr">number</span>
  <span class="o">|</span> <span class="nx">Iterable</span><span class="o">&lt;</span><span class="nx">ReactNode</span><span class="o">&gt;</span>
  <span class="o">|</span> <span class="nx">ReactPortal</span>
  <span class="o">|</span> <span class="nx">boolean</span>
  <span class="o">|</span> <span class="kc">null</span>
  <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
</code></pre></div></div> <p>Example:</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span> <span class="c1">// &lt;- ReactElement</span>
  <span class="o">&lt;</span><span class="nx">Component</span><span class="o">&gt;</span> <span class="c1">// &lt;- ReactElement</span>
    <span class="p">{</span><span class="nx">condition</span> <span class="o">&amp;&amp;</span> <span class="dl">'</span><span class="s1">text</span><span class="dl">'</span><span class="p">}</span> <span class="c1">// &lt;- ReactNode</span>
  <span class="o">&lt;</span><span class="sr">/Component</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span></code></pre></div></div> <p>Due to historical reasons, <code class="language-plaintext highlighter-rouge">render</code> methods of class components return <code class="language-plaintext highlighter-rouge">ReactNode</code>, but function components return <code class="language-plaintext highlighter-rouge">ReactElement</code>.</p> <h2 id="reference">Reference</h2> <ul> <li><a href="https://react.dev/learn/typescript">React Doc</a></li> <li><a href="https://www.typescriptlang.org">TypeScript official website</a></li> <li><a href="https://react-typescript-cheatsheet.netlify.app">React TypeScript Cheatsheets</a></li> <li><a href="https://github.com/microsoft/TypeScript-React-Conversion-Guide/blob/master/README.md">TypeScript-React-Conversion-Guide</a></li> </ul>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="TypeScript"/><summary type="html"><![CDATA[Premise]]></summary></entry></feed>