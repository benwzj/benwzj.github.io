<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-07T09:41:58+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">About Timer in JavaScript</title><link href="https://benwzj.github.io/blog/2024/timeout-javascript/" rel="alternate" type="text/html" title="About Timer in JavaScript"/><published>2024-02-03T00:00:00+00:00</published><updated>2024-02-03T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/timeout-javascript</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/timeout-javascript/"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">setTimeout()</code> and <code class="language-plaintext highlighter-rouge">setInterval()</code> methods allow authors to schedule timer-based callbacks.</p> <ul> <li>Timers can be nested; after five such nested timers, however, the interval is forced to be at least four milliseconds.</li> <li>This API does not guarantee that timers will run exactly on schedule. Delays due to CPU load, other tasks, nested level, inactive tab, etc, are to be expected.</li> <li>Non-number <code class="language-plaintext highlighter-rouge">delay</code> values are silently coerced into numbers.</li> <li>You can include a string instead of a function, which is compiled and executed when the timer expires. This syntax is not recommended for the same reasons that make using <code class="language-plaintext highlighter-rouge">eval()</code> a security risk.</li> </ul> <p>I am not gonna talk about how to use it. But trying to dig a bit deepper.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> and <code class="language-plaintext highlighter-rouge">setInterval()</code> methods work in a very similiar machanism.</p> <h2 id="how-it-work-underhood">How it work underhood</h2> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> is web API which means there are standards to define how it work. Becaue it need to make sure all browsers work consistently. Timers are described in the timers section of <a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html">HTML Living Standard</a>.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code>s are the functions (a subset) that are common to all workers and to the main thread. They are from <code class="language-plaintext highlighter-rouge">WindowOrWorkerGlobalScope</code>. Objects that implement the <code class="language-plaintext highlighter-rouge">WindowOrWorkerGlobalScope</code> mixin have a map of active timers, which is a map, initially empty. Each key in this map is an identifier for a timer, and each value is a <code class="language-plaintext highlighter-rouge">DOMHighResTimeStamp</code>, representing the expiry time for that timer.</p> <p><code class="language-plaintext highlighter-rouge">setTimeout()</code> will run the <a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps">timer initialization steps</a> and put entries into the map of active timers. In completionStep, an algorithm step, which <strong>queues a global task</strong> on the timer task source given global to run task.</p> <h2 id="the-this-problem">The “this” problem</h2> <p>Code executed by setTimeout() is called from an execution context separate from the function from which setTimeout was called. If you have not set <code class="language-plaintext highlighter-rouge">this</code> in the call or with bind, it will default to the window (or global) object. It will not be the same as the <code class="language-plaintext highlighter-rouge">this</code> value for the function that called setTimeout.</p> <p>Solutions:</p> <ul> <li>A common way to solve the problem is to use a wrapper function that sets <code class="language-plaintext highlighter-rouge">this</code> to the required value.</li> <li>Alternatively, you can use bind() to set the value of this for all calls to a given function</li> </ul> <h2 id="settimeout-and-recursion">setTimeout and Recursion</h2> <p>The act of a function calling itself, recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (resumes recursion).</p> <p>To understand Recursion, you need to understand closure, call stack, etc.</p> <p>In JavaScript, Recursion is limited by stack size. It is easy to explode call stack. For example: Function below returns the maximum size of the call stack available in the JavaScript runtime in which the code is run.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getMaxCallStackSize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">getMaxCallStackSize</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">getMaxCallStackSize</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</code></pre></div></div> <p>But if call function itself in setTimeout(), it is still Recursion? just like below:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="nx">count</span> <span class="o">--</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">currentTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">getMilliseconds</span><span class="p">();</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="nf">setTimeout </span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="kd">let</span> <span class="nx">executionTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">getMilliseconds</span><span class="p">();</span>
      <span class="nf">writeLog</span><span class="p">(</span><span class="nx">currentTime</span><span class="p">,</span> <span class="nx">executionTime</span><span class="p">);</span>
      <span class="nf">timer</span><span class="p">();</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is still called recursion, or called nested setTimeout. But their implement is different.</p> <h2 id="understand-the-execution-order">Understand the execution order</h2> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">wait</span> <span class="o">=</span> <span class="nx">ms</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
<span class="nf">wait</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
<span class="nf">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
<span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> 

<span class="c1">// When execute this script, the order of log will be: "1, 2, 3, 4, 5"</span>
</code></pre></div></div> <p>Promise and setTimeout() both are using event loop, callback queue. But they have some difference.</p> <h3 id="microtask-macrotask-concept">microtask, macrotask concept</h3> <p>There are <strong>microtask queue</strong> and <strong>macrotask queue</strong> in JS. Callbacks of Promise objects will be microtasks.</p> <ul> <li> <p>The macrotasks, or just call tasks, which is any JavaScript scheduled to be run by the standard mechanisms such as initially starting to execute a program, an event triggering a callback, and so forth. Other than by using events (like <code class="language-plaintext highlighter-rouge">onClick</code>), you can enqueue a task by using <code class="language-plaintext highlighter-rouge">setTimeout()</code> or <code class="language-plaintext highlighter-rouge">setInterval()</code>.</p> </li> <li> <p>The microtasks, which are programmed for things that should happen immediately after the script that is currently running, such as performing something asynchronous without supporting the penalty of creating a new macrotask. These microtasks are <strong>glued</strong> into the microtask queue which is processed after the macrotasks and at the end of the execution of each macrotask provided there is no Javascript running. Among the microtask are the callbacks of Promise objects. If we add new microtasks to microtask queue during the execution of the microtasks, they are also executed.</p> </li> </ul> <p>So, As a corollary of this sequence we could say that two macrotasks cannot be executed one after the other if, in between, the microtasks tail has elements.</p> <h2 id="the-setinterval">The <code class="language-plaintext highlighter-rouge">setInterval()</code></h2> <p>The <code class="language-plaintext highlighter-rouge">setInterval()</code> function is commonly used to set a delay for functions that are executed again and again, such as animations. You can cancel the interval using <code class="language-plaintext highlighter-rouge">clearInterval()</code>.</p> <p>Ensure that execution duration is shorter than interval frequency when using <code class="language-plaintext highlighter-rouge">setInterval()</code>. If there is a possibility that your logic could take longer to execute than the interval time, it is recommended that you recursively call a named function using <code class="language-plaintext highlighter-rouge">setTimeout()</code>.</p> <p>For example, if using <code class="language-plaintext highlighter-rouge">setInterval()</code> to poll a remote server every 5 seconds, network latency, an unresponsive server, and a host of other issues could prevent the request from completing in its allotted time. As such, you may find yourself with queued up XHR requests that won’t necessarily return in order.</p> <p>In these cases, a recursive <code class="language-plaintext highlighter-rouge">setTimeout()</code> pattern is preferred:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Your logic here</span>

    <span class="nf">loop</span><span class="p">();</span>
  <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div> <p>loop() is recursively called inside setTimeout() after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing.</p> <h2 id="common-using-way-in-react">Common using way in React</h2> <ul> <li>Using <code class="language-plaintext highlighter-rouge">ref</code> to mark intervalID.</li> <li><code class="language-plaintext highlighter-rouge">clearInterval(theOldInterval)</code> before start a new interval.</li> </ul> <p>Example: building a stopwatch</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Stopwatch</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">setStartTime</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">now</span><span class="p">,</span> <span class="nx">setNow</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">intervalRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleStart</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">setStartTime</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>
    <span class="nf">setNow</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>

    <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
    <span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">setNow</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">());</span>
    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">handleStop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">intervalRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">secondsPassed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">startTime</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">now</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">secondsPassed</span> <span class="o">=</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">passed</span><span class="p">:</span> <span class="p">{</span><span class="nx">secondsPassed</span><span class="p">.</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleStart</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Start</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleStop</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Stop</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="fqa">FQA</h2> <h3 id="what-happen-if-not-clearinterval">What happen if not <code class="language-plaintext highlighter-rouge">clearInterval()</code></h3> <h2 id="reference">Reference</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/setTimeout">MDN doc</a></li> <li><a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html">html.spec</a></li> </ul>]]></content><author><name></name></author><category term="JavaScript"/><category term="Web-API"/><category term="Timer"/><category term="Recursion"/><summary type="html"><![CDATA[The setTimeout() and setInterval() methods allow authors to schedule timer-based callbacks.]]></summary></entry><entry><title type="html">Virtual DOM Concept</title><link href="https://benwzj.github.io/blog/2024/Virtual-DOM/" rel="alternate" type="text/html" title="Virtual DOM Concept"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/Virtual-DOM</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/Virtual-DOM/"><![CDATA[<h2 id="dom-rendering">DOM rendering</h2> <p>Let’s get to know a bit about DOM rendering first. In traditional rendering, the Browser does the following tasks:</p> <ul> <li>The browser parses our HTML and stores it in memory as a <strong>tree structure</strong> of a document, which is also known as DOM (Document Object Model) or sometimes as Real DOM. DOM methods allow programmatic access to the tree. With them, you can change the document’s structure, style, or content.</li> <li>The browser uses DOM to create a render tree. Render Tree represents everything that will be rendered on the browser.</li> <li><strong>Layout</strong> Render Tree by calculating the geometry of all elements (sizes &amp; positioning) and placing them.</li> <li><strong>painting</strong> all individual nodes.</li> </ul> <blockquote class="block-warning"> <h5 id="the-premise-of-virtual-dom">The Premise of Virtual DOM:</h5> <p>Real DOM updation is a slow process (due to reflow and repainting).</p> </blockquote> <h2 id="why-virtual-dom-can-help">Why Virtual DOM can help</h2> <p>Modern browsers are efficient enough to update only the required elements in the DOM. For example, if I have two ‘p’ tags and I change the text in one of the p tags using a button click, then only that p tag will be updated by safari (you can verify this using paint flashing).</p> <p>Then why we still need Virtual DOM?</p> <p>Virtual DOM is not magic, but it make writing WebApp easier. For example, if there are many tags you need to update when a state change, you will have a headache to figure out what tags to change and how to change. Rebuild the whole DOM can be easier, but it is slow process. Virtual DOM is one way to fix this.</p> <p>There are two arguments for React’s Virtual DOM being <strong>easier</strong> to build WebApp (not faster):</p> <ul> <li>It updates ONLY those elements that actually need to be updated (using <strong>diff</strong>).</li> <li>It <strong>batches</strong> the updates and hence we update the real DOM only a single time. Thus the repainting is also done only once which otherwise would have been done multiple times.</li> </ul> <p>Here some points need to be clear:</p> <ul> <li>You can drop into raw DOM operations and DOM API calls and beat React if you wanted to. This way can be more efficient. But it can be too trivial to do that in real App.</li> <li>Batching updates is actually the basic for every WebApp. Virtual DOM just make batching is much easier for us.</li> </ul> <h2 id="what-is-react-virtual-dom">What is React Virtual DOM</h2> <p>React renders JSX components to the Browser DOM, but keeps a copy of the actual DOM to itself. This copy is the Virtual DOM. We can think of it as the twin brother of the real or Browser DOM. The following actions take place in React:</p> <ul> <li>React stores a copy of Browser DOM which is called Virtual DOM.</li> <li>When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one.</li> <li>Comparison is done by <strong>Diffing Algorithm</strong>. The cool fact is all these comparisons take place in the memory and nothing is yet changed in the Browser.</li> <li>After comparing, React goes ahead and creates a new Virtual DOM having the changes. It is to be noted that as many as 200,000 virtual DOM nodes can be produced in a second.</li> <li>Then it updates the Browser DOM with the least number of changes possible without rendering the entire DOM again. This changes the efficiency of an application tremendously.</li> </ul> <p>It’s important to understand that virtual DOM isn’t a feature for React. It’s a means to an end, the end being <strong>declarative</strong>, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is generally good enough. That means less buggy code, and more time spent on creative tasks instead of tedious ones.</p> <h3 id="reconciliation">Reconciliation</h3> <p>To get a better understanding, we need to discuss some terminologies before discussing the whole Reconciliation process.</p> <p>Reconciliation is the process of keeping 2 DOM Trees in sync by a library like ReactDOM. It is done by using <strong>Reconciler</strong> and a <strong>Renderer</strong>.</p> <p><strong>Reconciler</strong> uses Diffing Algorithm to find differences between Current Tree and Work in Progress Tree and sends computed changes to the Renderer.</p> <p>The <strong>Renderer</strong> is the one that updates the app’s UI. Different devices can have different Renderers while sharing the same Reconciler.</p> <p>Before React 16, React used to work on Call Stack to keep track of the program’s execution. Hence old reconciler has been given the name Stack Reconciler. In React 16, they created a new Reconciler from scratch which uses a new data structure called fiber. Hence it is called <strong>Fiber Reconciler</strong>. The main aim was to make the reconciler asynchronous and smarter by executing work on the basis of priority.</p> <p>In <a href="https://www.youtube.com/watch?v=aS41Y_eyNrU">Dan Abramov’s Youtube Video</a>, he explained the motivation of 2 Virtual DOM trees came from The Double Buffering Technique that was used in the earlier days for Game Development.</p> <h2 id="svelte">Svelte</h2> <p>Many people reckon VDOM cut down the performance. Svelte is an example to ditch VDOM.</p> <p>Svelte regards <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">Virtual DOM is pure overhead</a>.</p> <p>Firstly, The <strong>diffing</strong> isn’t free. Svelte believe the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip the diffing.</p> <blockquote> <p>Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.</p> </blockquote> <p>Secondly, the greater overhead is in the <strong>components themselves</strong>. You’d be carelessly recalculating value on every update, regardless of whether props.foo had changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">StrawManComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nf">expensivelyCalculateValue</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">the</span> <span class="nx">value</span> <span class="nx">is</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div> <p>Or we’re generating a new array of virtual <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> elements — each with their own inline event handler — on every state change, regardless of whether props.items has changed:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">MoreRealisticComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">selected</span><span class="p">,</span> <span class="nx">setSelected</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Selected</span> <span class="p">{</span><span class="nx">selected</span> <span class="p">?</span> <span class="nx">selected</span><span class="p">.</span><span class="nx">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">nothing</span><span class="dl">'</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">setSelected</span><span class="p">(</span><span class="nx">item</span><span class="p">)}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Svelte achieve a similar programming model without using virtual DOM.</p> <figure> <picture> <img src="/assets/img/svelte-VS-react.avif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="React"/><category term="JavaScript"/><category term="DOM"/><category term="SPA"/><category term="Svelte"/><summary type="html"><![CDATA[DOM rendering]]></summary></entry><entry><title type="html">Should TypeScript be ditched</title><link href="https://benwzj.github.io/blog/2023/dropping-ts/" rel="alternate" type="text/html" title="Should TypeScript be ditched"/><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/dropping-ts</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/dropping-ts/"><![CDATA[<p>Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?</p> <p>Now the people begin talk about dropping TypeScript. Why?</p> <p>The main reasons looks like this:</p> <blockquote> <p>Not just because it requires an explicit compile step, but because it pollutes the code with type gymnastics that add ever so little joy to my development experience, and quite frequently considerable grief. Things that should be easy become hard, and things that are hard become <code class="language-plaintext highlighter-rouge">any</code>.</p> </blockquote> <p>One of the longest running schisms in programming is that of static vs dynamic typing. There were a million arguments from both sides throughout these years, but seen very few of them ever convinced anyone of anything. As rationalizations masquerading as reason rarely do in matters of faith.</p> <p>We know that types are always there, but the difference is that they are in your codes or in your mind.</p> <h2 id="jsdoc">JSDoc</h2> <p>Both TypeScript and JSDoc aim to improve the development experience and enhance JavaScript codebases.</p> <p>TypeScript introduces a type system to JavaScript, enabling developers to catch errors at compile-time rather than runtime.</p> <p>What is JSDoc? JSDoc is a markup language and a documentation tool for JavaScript. It allows developers to add structured comments to their JavaScript code, providing valuable information about the codebase. Here are some notable aspects of JSDoc:</p> <ul> <li>Type Annotations: JSDoc supports type annotations similar to TypeScript, allowing developers to document the expected types of variables, parameters, and return values.</li> <li>Code Documentation: JSDoc allows developers to document functions, classes, objects, and their members, providing information about their purpose, usage, and expected behavior.</li> <li>Tool Integration: JSDoc-generated documentation can be utilized by various tools and IDEs to provide context-aware help, autocompletion suggestions, and inline documentation.</li> <li>Custom Tags: JSDoc supports custom tags, which enable developers to extend the existing set of annotations and document additional information specific to their codebase or project.</li> </ul> <h3 id="jsdoc-vs-typescript">JSDoc vs TypeScript</h3> <ul> <li>Type Checking: TypeScript performs static type checking during compilation, catching type-related errors before runtime. JSDoc, on the other hand, is primarily a documentation tool and does not provide type checking by itself.</li> <li>Language Features: TypeScript introduces additional language features like interfaces, classes, and modules, while JSDoc focuses on providing documentation annotations for existing JavaScript code.</li> <li>Ecosystem and Tooling: TypeScript has a mature ecosystem with strong tooling support, including IDE integrations, build systems, and popular frameworks. JSDoc, being a documentation tool, complements existing JavaScript development workflows and is commonly used alongside other tools.</li> </ul> <h2 id="some-libraries-turn-around">Some libraries turn around</h2> <p>So big libraries like Turbo, Svelte, Drizzle are deciding to ditch TypeScript from their code bases. Are there more to ditch TypeScript in the future?</p> <p>TypeScripte become popular since it come out at 2012 from MicroSoft. The fact is not changed, the pros and cons of TypeScript are not changend. But people can change.</p> <p>Let us enjoy JavaScript in the glorious spirit it was originally designed: Free of strong typing.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><summary type="html"><![CDATA[Many people answer question why using TS, they usually saying I can use inferface, I can use generic to make reuseful functions. Are them your main reasons?]]></summary></entry><entry><title type="html">ExpressJS vs. NestJS</title><link href="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/" rel="alternate" type="text/html" title="ExpressJS vs. NestJS"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/ExpressJS-NestJS</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/ExpressJS-NestJS/"><![CDATA[<p>Both of them are Server side application frameworks for NodeJS.</p> <h2 id="expressjs">ExpressJS</h2> <p>ExpressJS is Lightweight and the most widely-used. The strengths of Express is its strong community and the number of available plugins.</p> <h2 id="nestjs">NestJS</h2> <p>Nest is a progressive framework. It is built with TypeScript and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming). Under the hood, Nest makes use of ExpressJS. The architecture of NestJS is heavily inspired by Angular.</p> <h2 id="expressjs-vs-nestjs">ExpressJS vs. NestJS</h2> <p>The biggest difference between these frameworks is that NestJS is opinionated, and ExpressJS is not. It means Express gives developers the freedom to make multiple possibilities and implement code as per the need, as it doesn’t have a set of pre-defined rules to follow. Such a flexibility is appreciated by many developers, and it’s beneficial for smaller flexible teams, but once team size and app’s complexity grows, the lack of structure becomes a problem.</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="TypeScript"/><category term="JavaScript"/><category term="NodeJS"/><category term="Framework"/><summary type="html"><![CDATA[Both of them are Server side application frameworks for NodeJS.]]></summary></entry><entry><title type="html">Ref in React</title><link href="https://benwzj.github.io/blog/2023/react-ref/" rel="alternate" type="text/html" title="Ref in React"/><published>2023-11-01T00:00:00+00:00</published><updated>2023-11-01T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-ref</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-ref/"><![CDATA[<h2 id="what-is-refs">What is Refs</h2> <blockquote class="block-warning"> <h5 id="the-definition">The Definition</h5> <p>When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a <code class="language-plaintext highlighter-rouge">ref</code>.</p> </blockquote> <p>You can access the current value of that ref through the <code class="language-plaintext highlighter-rouge">ref.current</code> property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)</p> <p>Refs are a generic concept, but most often you’ll use them to hold DOM elements.</p> <blockquote class="block-warning"> <p>But you should always keep this in mind: <code class="language-plaintext highlighter-rouge">ref</code> is escape hatch. Using it sparingly.</p> </blockquote> <h3 id="ref-vs-state">Ref vs State</h3> <ul> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">ref</code> could point to anything: a string, an object, or even a function.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are live outside of your component.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are retained by React between re-renders.</li> <li>Mutating <code class="language-plaintext highlighter-rouge">state</code> cause re-render. Mutating <code class="language-plaintext highlighter-rouge">ref</code> won’t.</li> <li><code class="language-plaintext highlighter-rouge">state</code> works as snapshot for each render, You can’t get latest state from an asynchronous operation; But <code class="language-plaintext highlighter-rouge">ref</code> won’t be affected by render, you can read the latest ref anytime.</li> <li><code class="language-plaintext highlighter-rouge">state</code> is ”Immutable” — you must use the state setting function to modify state variables to queue a re-render; <code class="language-plaintext highlighter-rouge">ref</code> is mutable, it is a <strong>plain</strong> JavaScript object that you can read and modify.</li> <li>You shouldn’t read (or write) the <code class="language-plaintext highlighter-rouge">ref.current</code> value during rendering. But You can read <code class="language-plaintext highlighter-rouge">state</code> any time.</li> </ul> <h2 id="using-ref">Using <code class="language-plaintext highlighter-rouge">ref</code></h2> <h3 id="example-alerting-how-many-click-have-happen">Example: alerting how many click have happen.</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">You clicked </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> times!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="nx">Click</span> <span class="nx">me</span><span class="o">!</span>
    <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="debouncedbutton-component">DebouncedButton component</h3> <p>If you keep clicking the button, it will ignore the click event, untill you stop and wait a second. This is called <strong>Debounced</strong>. <code class="language-plaintext highlighter-rouge">ref</code> is good way to implement this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">useRef</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">DebouncedButton</span><span class="p">({</span> <span class="nx">onClick</span><span class="p">,</span> <span class="nx">children</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">timeoutID</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">clearTimeout</span><span class="p">(</span><span class="nx">timeoutID</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
      <span class="nx">timeoutID</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">onClick</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">}}</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="when-to-use-refs">When to use refs</h2> <p>Typically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:</p> <ul> <li>Storing and manipulating <strong>DOM elements</strong> (the most common use case).</li> <li>Storing <strong>timeout IDs</strong></li> <li>Storing other objects that aren’t necessary to calculate the JSX.</li> </ul> <p>If your component needs to store some value, but it doesn’t impact the rendering logic, choose refs.</p> <h2 id="best-practices-for-refs">Best practices for refs</h2> <p>Following these principles will make your components more predictable:</p> <ul> <li><strong>Treat refs as an escape hatch</strong>. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.</li> <li><strong>Don’t read or write <code class="language-plaintext highlighter-rouge">ref.current</code> during rendering</strong>. If some information is needed during rendering, use state instead. Since React doesn’t know when <code class="language-plaintext highlighter-rouge">ref.current</code> changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like <code class="language-plaintext highlighter-rouge">if (!ref.current) ref.current = new Thing()</code> which only sets the ref once during the first render.)</li> </ul> <h2 id="manipulating-the-dom-with-refs">Manipulating the DOM with Refs</h2> <p>React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. <strong>However</strong>, sometimes you might need access to the DOM elements managed by React, for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a <code class="language-plaintext highlighter-rouge">ref</code> to the DOM node.</p> <p>You can instruct React to put a DOM node into <code class="language-plaintext highlighter-rouge">myRef.current</code> by passing <code class="language-plaintext highlighter-rouge">&lt;div ref={myRef}&gt;</code>. Once the element is removed from the DOM, React will update <code class="language-plaintext highlighter-rouge">myRef.current</code> to be <code class="language-plaintext highlighter-rouge">null</code>.</p> <h3 id="getting-a-ref-to-the-node">Getting a <code class="language-plaintext highlighter-rouge">ref</code> to the node</h3> <p>To access a DOM node managed by React:</p> <ul> <li>first, import the useRef Hook: <code class="language-plaintext highlighter-rouge">import { useRef } from 'react';</code></li> <li>Then, use it to declare a ref inside your component: <code class="language-plaintext highlighter-rouge">const myRef = useRef(null);</code></li> <li>Finally, pass your <code class="language-plaintext highlighter-rouge">ref</code> as the <code class="language-plaintext highlighter-rouge">ref</code> attribute to the JSX tag for which you want to get the DOM node: <code class="language-plaintext highlighter-rouge">&lt;div ref={myRef}&gt;</code></li> </ul> <p>The <code class="language-plaintext highlighter-rouge">useRef</code> Hook returns an object with a single property called current. Initially, <code class="language-plaintext highlighter-rouge">myRef.current</code> will be <code class="language-plaintext highlighter-rouge">null</code>.</p> <p>When React creates a DOM node for this<code class="language-plaintext highlighter-rouge"> &lt;div&gt;</code>, React will put a reference to this node into <code class="language-plaintext highlighter-rouge">myRef.current</code>. You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it. Then:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// You can use any browser APIs, for example:</span>
<span class="nx">myRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">();</span>
</code></pre></div></div> <h3 id="the-ref-callback">The <code class="language-plaintext highlighter-rouge">ref</code> callback</h3> <p>Sometimes you might need a <code class="language-plaintext highlighter-rouge">ref</code> to each item in the list, and you don’t know how many you will have.</p> <p><code class="language-plaintext highlighter-rouge">ref</code> callback can let you manage a list of refs!</p> <blockquote class="block-warning"> <h5 id="the-basic-idea-is-like-this">The Basic Idea is like this:</h5> <p><code class="language-plaintext highlighter-rouge">ref</code> doesn’t hold a single DOM node. Instead, it holds a <code class="language-plaintext highlighter-rouge">Map</code> from item ID to a DOM node. The <code class="language-plaintext highlighter-rouge">ref</code> callback on every list item takes care to update the Map.</p> </blockquote> <p>You can pass a callback function to the <code class="language-plaintext highlighter-rouge">ref</code> attribute. And then React will call your <code class="language-plaintext highlighter-rouge">ref</code> callback with the DOM node when it’s time to set the <code class="language-plaintext highlighter-rouge">ref</code>, and with <code class="language-plaintext highlighter-rouge">null</code> when it’s time to clear it. This lets you maintain your own array or a Map, and access any <code class="language-plaintext highlighter-rouge">ref</code> by its index or some kind of ID.</p> <blockquote class="block-warning"> <h5 id="the-tricky-thing-is">The tricky thing is</h5> <p>React will call your <code class="language-plaintext highlighter-rouge">ref</code> callback with the DOM node when it’s time to set the <code class="language-plaintext highlighter-rouge">ref</code>.</p> </blockquote> <p>It works liks this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. define ref</span>
<span class="kd">const</span> <span class="nx">itemsRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="c1">// 2. get ref.current reference.</span>
<span class="kd">function</span> <span class="nf">getMap</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Initialize the Map on first usage.</span>
    <span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">itemsRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 3. tell React how to arrange the ref to nodes list.</span>
<span class="kd">const</span> <span class="nx">catList</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">catList</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="na">imageUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://placekitten.com/250/200?image=</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">i</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">catList</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">cat</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">li</span>
              <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
              <span class="nx">ref</span><span class="o">=</span><span class="p">{(</span><span class="nx">node</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">getMap</span><span class="p">();</span>
                <span class="k">if </span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                  <span class="nx">map</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
                <span class="p">}</span>
              <span class="p">}}</span>
            <span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">img</span>
                <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">cat</span><span class="p">.</span><span class="nx">imageUrl</span><span class="p">}</span>
                <span class="nx">alt</span><span class="o">=</span><span class="p">{</span><span class="dl">'</span><span class="s1">Cat #</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">cat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>          <span class="p">))}</span>
        <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>

<span class="c1">// 4. now you can access individual DOM nodes from the Map according to ID:.</span>
<span class="kd">function</span> <span class="nf">getNodeByID</span><span class="p">(</span><span class="nx">itemId</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">getMap</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">itemId</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="accessing-components-dom-nodes">Accessing component’s DOM nodes</h3> <p>When you put a <code class="language-plaintext highlighter-rouge">ref</code> on a <strong>built-in</strong> component that outputs a browser element like <code class="language-plaintext highlighter-rouge">&lt;input /&gt;</code>, React will set that <code class="language-plaintext highlighter-rouge">ref</code>’s <code class="language-plaintext highlighter-rouge">current</code> property to the corresponding DOM node (such as the actual <code class="language-plaintext highlighter-rouge">&lt;input /&gt;</code> in the browser).</p> <p>However, if you try to put a <code class="language-plaintext highlighter-rouge">ref</code> on your own component, like <code class="language-plaintext highlighter-rouge">&lt;MyInput /&gt;</code>, by default you will get <code class="language-plaintext highlighter-rouge">null</code>. This is <strong>intentional</strong>.</p> <p>Accessing component’s DOM nodes, you should use <code class="language-plaintext highlighter-rouge">React.forwardRef()</code></p> <h4 id="reactforwardref">React.forwardRef()</h4> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">forwardRef</span><span class="p">,</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyInput</span> <span class="o">=</span> <span class="nf">forwardRef</span><span class="p">((</span><span class="nx">props</span><span class="p">,</span> <span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Form</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">inputRef</span> <span class="o">=</span> <span class="nf">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">inputRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">focus</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyInput</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputRef</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">Focus</span> <span class="nx">the</span> <span class="nx">input</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <p>This is how it works:</p> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;MyInput ref={inputRef} /&gt;</code> tells React to put the corresponding DOM node into inputRef.current. However, it’s up to the MyInput component to opt into that—by default, it doesn’t.</li> <li>The MyInput component is declared using <code class="language-plaintext highlighter-rouge">forwardRef</code>. This opts it into receiving the inputRef from above as the second <code class="language-plaintext highlighter-rouge">ref</code> argument which is declared after props.</li> <li>MyInput itself passes the <code class="language-plaintext highlighter-rouge">ref</code> it received to the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> inside of it.</li> </ul> <blockquote> <p><code class="language-plaintext highlighter-rouge">useImperativeHandle()</code> This function can restrict the exposed functionality of the <code class="language-plaintext highlighter-rouge">ref</code></p> </blockquote> <h3 id="when-react-attaches-the-refs">When React attaches the refs</h3> <p>In React, every update is split in two phases:</p> <ol> <li>During render, React calls your components to figure out what should be on the screen.</li> <li>During commit, React applies changes to the DOM.</li> </ol> <p>React sets <code class="language-plaintext highlighter-rouge">ref.current</code> during the commit. Before updating the DOM, React sets the affected ref.current values to null. After updating the DOM, React immediately sets them to the corresponding DOM nodes.</p> <p>In general, you don’t want to access <code class="language-plaintext highlighter-rouge">refs</code> during rendering. That goes for <code class="language-plaintext highlighter-rouge">refs</code> holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so ref.current will be null. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.</p> <h3 id="best-practices-for-dom-manipulation-with-refs">Best practices for DOM manipulation with refs</h3> <ul> <li> <p>Refs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.</p> </li> <li> <p>If you stick to <strong>non-destructive</strong> actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.</p> </li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://react.dev/learn/referencing-values-with-refs">React official doc</a></p>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Ref"/><summary type="html"><![CDATA[What is Refs]]></summary></entry><entry><title type="html">Chrome DevTools Network</title><link href="https://benwzj.github.io/blog/2023/network-chrome/" rel="alternate" type="text/html" title="Chrome DevTools Network"/><published>2023-10-23T00:00:00+00:00</published><updated>2023-10-23T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/network-chrome</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/network-chrome/"><![CDATA[<p>Here will try to a bit deep dive in <strong>Network</strong> panel in Chrome DevTools.</p> <p>Network Panel only logs network activity while it’s open.</p> <h2 id="network-log-overview">Network Log Overview</h2> <p>Each row of the Network Log represents a <strong>resource</strong> or call <strong>request</strong>. By default the resources are listed chronologically. The top resource is usually the main HTML document. The bottom resource is whatever was requested last.</p> <p>Let’s take a look at default columes:</p> <ul> <li>Status. The HTTP response code.</li> <li>Type. The resource type.</li> <li>Initiator. What caused a resource to be requested. Clicking a link in the Initiator column takes you to the source code that caused the request.</li> <li>Time. How long the request took.</li> <li>Waterfall. A graphical representation of the different stages of the request. Hover over a Waterfall to see a breakdown.</li> </ul> <p>You can display more columes, like Protocol, domain, etc.</p> <h2 id="some-tips">Some tips</h2> <ul> <li> <p>Simulate a slower network connection By throttling the page you can get a better idea of how long a page takes to load on a mobile device. Find the Throttling menu,(it is No Throttling by default)</p> </li> <li> <p>Empty Cache And Hard Reload On repeat visits, the browser usually serves some files from its cache, which speeds up the page load. Empty Cache And Hard Reload forces the browser to go the network for all resources. This is helpful when you want to see how a first-time visitor experiences a page load.</p> </li> <li> <p>Capture screenshots Tick <em>Capture Screenshots</em> Capture Screenshots.</p> </li> <li>You can Save requests across page loads. check the <em>Preserve log</em> checkbox</li> <li>Inspect a resource’s details Click a resource to learn more information about it. <ul> <li>Use <strong>Headers</strong> tab to inspect HTTP headers.</li> <li>Click the Preview tab. A basic rendering of the HTML is shown.</li> <li>Click the Response tab. The HTML source code is shown.</li> <li>Click the Timing tab. A breakdown of the network activity for this resource is shown.</li> </ul> </li> <li> <p>Use the <strong>Search</strong> pane when you need to search the <em>HTTP headers</em> and <em>responses</em> of all resources for a certain string or regular expression.</p> </li> <li> <p>Filter resources DevTools provides numerous workflows for filtering out resources that aren’t relevant to the task at hand.</p> </li> <li>Block requests How does a page look and behave when some of its resources aren’t available? Does it fail completely, or is it still somewhat functional? Block requests to find out: <ul> <li>Shortcut <keyboard>Command</keyboard>+<keyboard>Shift</keyboard>+<keyboard>P</keyboard> (Mac) to open the Command Menu.</li> <li>Type <code class="language-plaintext highlighter-rouge">block</code>, select Show Request Blocking, and press <keyboard>Enter</keyboard>.</li> <li>Click <em>Add</em> Pattern</li> <li>Then Reload the page.</li> </ul> </li> <li> <p>Replay XHR request Select the XMLHttpRequest(XHR), Right-click the request and select Replay XHR.</p> </li> <li>Throttling <ul> <li>Emulate offline. When you develop Progressive Web Apps, this is helpful.</li> <li>You can even create custom throttling profiles!</li> <li>In addition to HTTP requests, you can throttle WebSocket connections.</li> </ul> </li> <li>Override HTTP response headers With local overrides, you can override HTTP response headers and web content, including XHR and fetch requests, to mock remote resources even if you don’t have access to them. This lets you prototype changes without waiting for the backend to support them. Local overrides also lets you keep the changes you make in DevTools across page loads. How it works: <ul> <li>When you make changes in DevTools, DevTools saves a copy of the modified file to a folder you specify.</li> <li>When you reload the page, DevTools serves the local, modified file, rather than the network resource.</li> </ul> </li> <li>Override the user agent</li> <li>Powerful Filter function on requests</li> <li>Export requests data</li> </ul> <h2 id="understand-waterfall-chart">Understand Waterfall Chart</h2> <p>They are often used to analyze site speed and identify opportunities for optimization.</p> <h4 id="server-connections">Server connections</h4> <h2 id="questions">Questions</h2> <ul> <li>What is Site Speed Test</li> <li>What is routing, data fetching, and generating HTML</li> <li>What is Network Waterfall. How to read waterfall charts. Network Waterfall charts show what network requests are made when loading a web page. They are often used to analyze website speed and identify opportunities for optimization. Many DevTools provide Network Waterfall charts, Like Chrome DevTools.</li> </ul> <p>It provides you with a visual representation of how all the assets on your website load. This includes CSS, JavaScript, HTML, images, plugins, and third-party content.</p> <figure> <picture> <img src="/assets/img/waterfall-chart.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="reference">Reference</h2>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Network"/><summary type="html"><![CDATA[Here will try to a bit deep dive in Network panel in Chrome DevTools.]]></summary></entry><entry><title type="html">WebSocket Introduction</title><link href="https://benwzj.github.io/blog/2023/websocket-introduce/" rel="alternate" type="text/html" title="WebSocket Introduction"/><published>2023-10-21T00:00:00+00:00</published><updated>2023-10-21T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/websocket-introduce</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/websocket-introduce/"><![CDATA[<h2 id="what-is-websocket">What is WebSocket</h2> <p>WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.</p> <p>WebSocket is distinct from HTTP. Both protocols are located at layer 5 in the OSI model and depend on TCP at layer 4.</p> <p>Although they are different, RFC 6455 states that WebSocket “is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries,” thus making it compatible with the HTTP protocol.</p> <p>To achieve compatibility, the WebSocket handshake uses the HTTP Upgrade header to change from the HTTP protocol to the WebSocket protocol.</p> <p>The WebSocket protocol enables interaction between a web browser (or other client application) and a web server with lower overhead than half-duplex alternatives such as HTTP polling, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the client without being first requested by the client.</p> <h2 id="test-websocket">Test Websocket</h2> <h3 id="websocket-client-testers">Websocket Client Testers</h3> <ul> <li>Using browser as Client Tester: 1, <a href="https://www.piesocket.com/websocket-tester">piesocket</a> or 2, <a href="https://socketsbay.com/test-websockets">socketsbay</a></li> <li>Using <code class="language-plaintext highlighter-rouge">zsh</code> as Client Tester: <code class="language-plaintext highlighter-rouge">wscat</code>.</li> </ul> <h3 id="public-websocket-server">Public WebSocket server</h3> <ul> <li>websocket-echo.com is a simple echo websocket server. support ws and wss. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ws://websocket-echo.com
wss://websocket-echo.com
</code></pre></div> </div> </li> <li>Free Chatroom I apply a free WebScoket chatroom in socketsbay. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wss://socketsbay.com/wss/v2/[ChannelId]/[ApiKey]/
</code></pre></div> </div> <p>You can use wscat to connect to the chatroom.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wscat -c wss://socketsbay.com/wss/v2/1/1f437d249c2ca2eb3c415b9f92df92c8/
</code></pre></div> </div> </li> </ul> <h2 id="uing-aws-websocket-api-gateway-create-group-chat-application">Uing AWS WebSocket API Gateway Create Group Chat application</h2> <p>This example will show how to create Group Chat applicatin using AWS WebSocket API Gateway.</p> <h3 id="group-chat-app-overview">Group Chat App Overview</h3> <p>1, Clients join the chat room as they connect to the WebSocket API. 2, The backend can send messages to specific users via a callback URL that is provided after the user is connected to the WebSocket API. 3, Users can send messages to the room. 4, Disconnected clients are removed from the chat room.</p>]]></content><author><name></name></author><category term="Protocol"/><category term="WebSocket"/><category term="Http"/><category term="Tcp"/><summary type="html"><![CDATA[What is WebSocket]]></summary></entry><entry><title type="html">Effect in React</title><link href="https://benwzj.github.io/blog/2023/react-effect/" rel="alternate" type="text/html" title="Effect in React"/><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-effect</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-effect/"><![CDATA[<p>Some components need to stay connected to the <strong>network</strong>, some <strong>browser API</strong>, or a <strong>third-party library</strong> while they are displayed on the page. These systems aren’t controlled by React, so they are called external.</p> <p>How React Synchronize With External? React provide Effect system!</p> <h2 id="what-are-effects">What are Effects</h2> <p>When talking about Effect, usually compare to Event.</p> <blockquote class="block-warning"> <h5 id="the-definition">The definition</h5> <p>Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.</p> </blockquote> <blockquote> <p>Capitalized “Effect” refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we’ll say “side effect”.</p> </blockquote> <p>Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.</p> <h3 id="understand-effect">Understand Effect</h3> <p>To understand Effect, you need to be familiar with two types of logic inside React components:</p> <ol> <li><strong>Rendering code</strong> lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure.</li> <li><strong>Event handlers</strong> are nested functions inside your components that do things rather than just calculate them. Event handlers contain “side effects” (they change the program’s state) caused by a specific user action (for example, a button click or typing).</li> </ol> <p>Beside these two basic logic, React provide Effect logic. It is not on Rendering code or Event handlers. Effect is caused by rendering, and run after rendering. This logic is just designed for Synchronizing with external.</p> <p>If you’re not connecting to any external system, you probably don’t need an Effect.</p> <p>To declare an Effect in your component, you need to import the <code class="language-plaintext highlighter-rouge">useEffect</code> Hook from React.</p> <h2 id="what-is-useeffect">What is <code class="language-plaintext highlighter-rouge">useEffect</code></h2> <p><code class="language-plaintext highlighter-rouge">useEffect</code> is a React Hook. It lets you synchronize a component with an external system.</p> <p>Every time your component renders, React will update the screen and then run the code inside <code class="language-plaintext highlighter-rouge">useEffect</code>. In other words, <code class="language-plaintext highlighter-rouge">useEffect</code> “delays” a piece of code from running until that render is reflected on the screen.</p> <p>Each render has its own Effects. You can even think of <code class="language-plaintext highlighter-rouge">useEffect</code> as “attaching” a piece of behavior to the render output.</p> <h2 id="using-useeffect">Using <code class="language-plaintext highlighter-rouge">useEffect</code></h2> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">useEffect</span><span class="p">(</span><span class="nx">setup</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">?)</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">setup</code>: The function with your Effect’s logic. Your setup function may also optionally return a cleanup function.</li> <li>optional <code class="language-plaintext highlighter-rouge">dependencies</code>: The list of all reactive values referenced inside of the setup code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. <ol> <li>If you specify the dependencies, your Effect runs after the initial render and after re-renders with changed dependencies.</li> <li>If you omit this argument, your Effect will re-run after every re-render of the component.</li> <li>If dependencies is <code class="language-plaintext highlighter-rouge">[]</code>, it will only run after the initial render.</li> </ol> </li> </ul> <p>Optional <code class="language-plaintext highlighter-rouge">dependencies</code> rules:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// This runs after every render</span>
<span class="p">});</span>

<span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// This runs only on mount (when the component appears)</span>
<span class="p">},</span> <span class="p">[]);</span>

<span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// This runs on mount *and also* if either a or b have changed since the last render</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div> <p>You can’t “choose” your <code class="language-plaintext highlighter-rouge">dependencies</code>. They are determined by the code inside the Effect. React will call your <code class="language-plaintext highlighter-rouge">cleanup function</code> before the Effect runs next time, and during the unmount.</p> <h3 id="common-patterns-for-effect">Common Patterns for Effect</h3> <p>In Strict Mode, Effect will be run twice. That is helpful for development. For example, it can tell you that the Effect need <code class="language-plaintext highlighter-rouge">cleanup function</code> or not.</p> <p>Most of the Effects you’ll write will fit into one of the common patterns below.</p> <ul> <li>Controlling non-React widgets Sometimes you need to add UI widgets that aren’t written to React. For example, let’s say you’re adding a map component to your page. It has a setZoomLevel() method, and you’d like to keep the zoom level in sync with a zoomLevel state variable in your React code.</li> <li>Subscribing to events If your Effect subscribes to something, the cleanup function should unsubscribe.</li> <li>Triggering animations If your Effect animates something in, the cleanup function should reset the animation to the initial values.</li> <li>Fetching data If your Effect fetches something, the cleanup function should either abort the fetch or ignore its result. Please note, Fetching data in Effect is not an elegant way. If you use a framework, use its built-in data fetching mechanism. Otherwise, consider using or building a client-side cache.</li> <li>Sending analytics</li> <li>(Not an Effect): Initializing the application Some logic should only run once when the application starts. You can put it outside your components.</li> </ul> <h3 id="classic-bugs-race-conditions">Classic Bugs: race conditions</h3> <p>When fetch data from internet in your <code class="language-plaintext highlighter-rouge">useEffect</code> according to user input, it is easy to cross classic bug race condition. You can fix this by adding flag <code class="language-plaintext highlighter-rouge">ignore</code>, like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">ignore</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="nf">setBio</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nf">fetchBio</span><span class="p">(</span><span class="nx">person</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">ignore</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">setBio</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ignore</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">person</span><span class="p">]);</span>
</code></pre></div></div> <p>Each render’s Effect has its <strong>own</strong> <code class="language-plaintext highlighter-rouge">ignore</code> variable. Initially, the <code class="language-plaintext highlighter-rouge">ignore</code> variable is set to false. However, if an Effect gets cleaned up (such as when you select a different person), its <code class="language-plaintext highlighter-rouge">ignore</code> variable becomes true. So now it doesn’t matter in which order the requests complete. Only the last person’s Effect will have <code class="language-plaintext highlighter-rouge">ignore</code> set to false, so it will call <code class="language-plaintext highlighter-rouge">setBio(result)</code>.</p> <h2 id="fqa">FQA</h2> <h3 id="what-is-uselayouteffect-and-why-we-need-it">What is <code class="language-plaintext highlighter-rouge">useLayoutEffect</code> and Why we need it</h3> <p>If your Effect wasn’t caused by an interaction (like a click), React will generally let the browser paint the updated screen first before running your Effect. If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace <code class="language-plaintext highlighter-rouge">useEffect</code> with <code class="language-plaintext highlighter-rouge">useLayoutEffect</code>.</p> <p><code class="language-plaintext highlighter-rouge">useLayoutEffect</code> is a version of <code class="language-plaintext highlighter-rouge">useEffect</code> that fires before the browser repaints the screen. But <code class="language-plaintext highlighter-rouge">useLayoutEffect</code> can hurt performance. Prefer useEffect when possible.</p> <p><strong>tooltip</strong> is a good example to tell why we need <code class="language-plaintext highlighter-rouge">useLayoutEffect</code> in some cases. If there’s enough space, the tooltip should appear above the element, but if it doesn’t fit, it should appear below. In order to render the tooltip at the right final position, you need to know its height (i.e. whether it fits at the top). To do this, you need to render in two passes:</p> <ol> <li>Render the tooltip anywhere (even with a wrong position).</li> <li>Measure its height and decide where to place the tooltip.</li> <li>Render the tooltip again in the correct place.</li> </ol> <p>All of this needs to happen before the browser repaints the screen.</p> <h3 id="when-react-run-setup-in-useeffect-the-detail">When React run <code class="language-plaintext highlighter-rouge">setup</code> in <code class="language-plaintext highlighter-rouge">useEffect</code>? the detail!!</h3> <h3 id="what-do-paint-the-updated-screen-first-before-running-your-effect-means-why-react-run-in-this-order-the-code-inside-the-useeffect-may-update-the-screen-as-well-why-not-run-effect-and-updated-screen-together">What do “paint the updated screen first before running your Effect” means? Why React run in this order. The code inside the useEffect may update the screen as well. Why not run Effect and updated Screen together.</h3> <h3 id="the-life-cycle-of-function-component-around-useeffect">The life cycle of function component around useEffect?</h3>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Hook"/><summary type="html"><![CDATA[Some components need to stay connected to the network, some browser API, or a third-party library while they are displayed on the page. These systems aren’t controlled by React, so they are called external.]]></summary></entry><entry><title type="html">React State system</title><link href="https://benwzj.github.io/blog/2023/react-state/" rel="alternate" type="text/html" title="React State system"/><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/react-state</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/react-state/"><![CDATA[<h2 id="state-rules">State Rules</h2> <ul> <li>Treat all state in React as <strong>immutable</strong>. This help React run very fast.</li> <li>State behaves as a <strong>snapshot</strong>. Setting state does not change the state variable you already have, but instead triggers a re-render.</li> <li>State actually “lives” in React itself outside of your function.</li> <li>When triggering a render, React calls your component, it gives you a snapshot of the state for that particular render.</li> <li>This new snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!</li> <li>React will ignore your update if the next state is equal to the previous state, as determined by an Object.is comparison.</li> <li>You can store information from previous renders, but need to use condition, and also, the logic is hard to read. try to avoid.</li> <li>When you call the <code class="language-plaintext highlighter-rouge">set</code> function of useState hook during render, React will re-render that component immediately after your component exits with a <code class="language-plaintext highlighter-rouge">return</code> statement, and before rendering the children.</li> <li>Unlike props, state is fully private to the component declaring it. If you render the same component twice, each copy will have completely isolated state!</li> <li>React batches state updates, it will queue all set functions and execute all set functions one by one before re-render.</li> </ul> <h2 id="understand-state-in-react">Understand State in React</h2> <h3 id="state-vs-ref">State vs Ref</h3> <p>State and Ref are comparable. React use them for different purpose.</p> <ul> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">ref</code> could point to anything: a string, an object, or even a function.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are live outside of your component.</li> <li><code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">refs</code> both are retained by React between re-renders.</li> <li>Mutating <code class="language-plaintext highlighter-rouge">state</code> cause re-render. Mutating <code class="language-plaintext highlighter-rouge">ref</code> won’t.</li> <li><code class="language-plaintext highlighter-rouge">state</code> works as snapshot for each render, You can’t get latest state from an asynchronous operation; But <code class="language-plaintext highlighter-rouge">ref</code> won’t be affected by render, you can read the latest ref anytime.</li> <li><code class="language-plaintext highlighter-rouge">state</code> is ”Immutable” — you must use the state setting function to modify state variables to queue a re-render; <code class="language-plaintext highlighter-rouge">ref</code> is mutable, it is a <strong>plain</strong> JavaScript object that you can read and modify.</li> <li>You shouldn’t read (or write) the <code class="language-plaintext highlighter-rouge">ref.current</code> value during rendering. But You can read <code class="language-plaintext highlighter-rouge">state</code> any time.</li> </ul> <h3 id="state-behaves-as-snapshot">State behaves as snapshot</h3> <p>States are a component’s memory. State actually “lives” in React itself (as if on a shelf!) outside of your function. When triggering a render, React calls your component, it gives you a snapshot of the state for that particular render.</p> <p>This snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!</p> <p>But how to understand this component:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">counter</span><span class="p">,</span> <span class="nx">setCounter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">async</span> <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">setCounter</span><span class="p">(</span><span class="nx">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
    <span class="nf">setCounter</span><span class="p">(</span><span class="nx">counter</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
        <span class="nx">counter</span><span class="p">:</span> <span class="p">{</span><span class="nx">counter</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="nx">add</span> <span class="nx">it</span>     
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// It will display "counter: -1" when click the button.</span>
</code></pre></div></div> <p>It still make sense like this: When you click, cause a re-render, React return a second snapshot: <code class="language-plaintext highlighter-rouge">counter: 1</code> for the new render; After 3 seconds, <code class="language-plaintext highlighter-rouge">setCounter(counter - 1);</code> executed and trigger a new render as well but this code is executed based on the old snapshot: <code class="language-plaintext highlighter-rouge">counter: 0</code>. It still trigger a render and create a new snapshot: <code class="language-plaintext highlighter-rouge">counter: -1</code>; In this case, React just manage one memory for this component because it is in the same place.</p> <blockquote class="block-warning"> <p>So, Don’t read the latest state from an asynchronous operation, like a timeout. It is confused!</p> </blockquote> <h3 id="how-react-update-states">How React update states</h3> <ul> <li>If you have many states need to be updated. React <strong>batches</strong> state updates. That means State updates are queued. This lets you update multiple state variables without triggering too many re-renders.</li> <li>React waits until all code in the event handlers has run before processing your state updates.</li> </ul> <p>Understand <strong>queue</strong> the state udpate:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
        <span class="nf">setNumber</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
      <span class="p">}}</span><span class="o">&gt;</span><span class="nx">You</span> <span class="nx">will</span> <span class="kd">get</span> <span class="mi">6</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setNumber</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nf">setNumber</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nf">setNumber</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
      <span class="p">}}</span><span class="o">&gt;</span><span class="nx">You</span> <span class="nx">will</span> <span class="kd">get</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="flushsync">flushSync()</h4> <p>you can force React to update (or call ‘flush’) the DOM <strong>synchronously</strong> according to state update. To do this, import flushSync from react-dom and wrap the state update into a <code class="language-plaintext highlighter-rouge">flushSync</code> call:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">flushSync</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTodos</span><span class="p">([</span> <span class="p">...</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">newTodo</span><span class="p">]);</span>
<span class="p">});</span>
<span class="nx">listRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">();</span>
</code></pre></div></div> <h2 id="usestate-hook">useState Hook</h2> <h3 id="syntax">Syntax</h3> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">);</span>
</code></pre></div></div> <p>useState returns an array with exactly two items:</p> <ol> <li>The current state of this state variable, initially set to the initial state you provided.</li> <li>The set function that lets you change it to any other value in response to interaction.</li> </ol> <p>Important to Know:</p> <ol> <li>Calling the set function does not change the current state in the already executing code.</li> <li>State is considered read-only, When state is objects or arrays, you should replace it rather than mutate your existing objects.</li> <li>About the initial state, React saves it once and ignores it on the next renders. So don’t do this: <code class="language-plaintext highlighter-rouge">const [todos, setTodos] = useState(createInitialTodos());</code>, because React run this function every render and means nothing. But you can do this: <code class="language-plaintext highlighter-rouge">const [todos, setTodos] = useState(createInitialTodos);</code>.</li> </ol> <h3 id="how-react-implement-usestate-hook">How React implement <code class="language-plaintext highlighter-rouge">useState</code> Hook</h3> <p>It is helpful to know How <code class="language-plaintext highlighter-rouge">useState</code> works inside React. Internally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState, React gives you the next state pair and increments the index. Hooks rely on a stable call <strong>order</strong> on every render of the same component. Roughly like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">componentHooks</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">let</span> <span class="nx">currentHookIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">pair</span> <span class="o">=</span> <span class="nx">componentHooks</span><span class="p">[</span><span class="nx">currentHookIndex</span><span class="p">];</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">pair</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// This is not the first render,</span>
    <span class="c1">// so the state pair already exists.</span>
    <span class="c1">// Return it and prepare for next Hook call.</span>
    <span class="nx">currentHookIndex</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">pair</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// This is the first time we're rendering,</span>
  <span class="c1">// so create a state pair and store it.</span>
  <span class="nx">pair</span> <span class="o">=</span> <span class="p">[</span><span class="nx">initialState</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>

  <span class="kd">function</span> <span class="nf">setState</span><span class="p">(</span><span class="nx">nextState</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// When the user requests a state change,</span>
    <span class="c1">// put the new value into the pair.</span>
    <span class="nx">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nextState</span><span class="p">;</span>
    <span class="nf">updateDOM</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// Store the pair for future renders</span>
  <span class="c1">// and prepare for the next Hook call.</span>
  <span class="nx">componentHooks</span><span class="p">[</span><span class="nx">currentHookIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
  <span class="nx">currentHookIndex</span><span class="o">++</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">pair</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="how-about-setstate">How about <code class="language-plaintext highlighter-rouge">setState</code></h3> <p>The set function returned by <code class="language-plaintext highlighter-rouge">useState</code> lets you update the state to a different value and trigger a re-render.</p> <p>You can pass the next <strong>state value</strong> directly, OR a <strong>‘updater function’</strong> that calculates it from the previous state. Because <strong>React batches state updates</strong>, it will queue all these set functions and execute all these set functions one by one before re-render. React will treat updater function differently from direct value (<code class="language-plaintext highlighter-rouge">baseState</code> is current value; <code class="language-plaintext highlighter-rouge">queue</code> is setfunctions array) :</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">getFinalState</span><span class="p">(</span><span class="nx">baseState</span><span class="p">,</span> <span class="nx">queue</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">finalState</span> <span class="o">=</span> <span class="nx">baseState</span><span class="p">;</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">updater</span> <span class="k">of</span> <span class="nx">queue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">updater</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Apply the updater function.</span>
      <span class="nx">finalState</span> <span class="o">=</span> <span class="nf">updater</span><span class="p">(</span><span class="nx">finalState</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// Replace the next state.</span>
      <span class="nx">finalState</span> <span class="o">=</span> <span class="nx">updater</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">finalState</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>The <strong>order</strong> is matter! React execute the setState functions in exact order.</li> <li>The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value that was on the screen before your call. It is Async.</li> <li> <p>If the new value you provide is identical to the current state, as determined by an <code class="language-plaintext highlighter-rouge">Object.is</code> comparison, React will skip re-rendering the component and its children.</p> </li> <li>Calling the set function during rendering is only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it to store information from the previous renders.</li> <li>In Strict Mode, React will call your updater function twice in order to help you find accidental impurities. This is development-only behavior and does not affect production.</li> </ul> <h3 id="set-state-to-a-function">Set State to a function</h3> <p>Don’t do this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">setFn</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">someFunction</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setFn</span><span class="p">(</span><span class="nx">someOtherFunction</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Because you’re passing a function, React assumes that someFunction is an initializer function, and that someOtherFunction is an updater function, so it tries to call them and store the result. To actually store a function, you have to put <code class="language-plaintext highlighter-rouge">()=&gt;</code> before them in both cases. Then React will store the functions you pass.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">setFn</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">someFunction</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">setFn</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">someOtherFunction</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <p>The different between <code class="language-plaintext highlighter-rouge">someFunction</code> and <code class="language-plaintext highlighter-rouge">()=&gt;someFunction</code> is that, executing latter will return former.</p> </blockquote> <h2 id="fqa">FQA</h2> <h3 id="how-to-handle-object-and-array-state">How to handle Object and Array STATE?</h3> <p>Keep stick to this rule: <strong>Treat all state as immutable</strong>. Object and Array is mutable, but we need to handle it asif it is immutable.</p> <h4 id="here-are-some-ways-to-handle-object-state">Here are some ways to handle Object state:</h4> <ul> <li>Copying objects with the <strong>spread syntax</strong>. Like this: ` {…obj, something: ‘newValue’}` object spread syntax to create copies of objects. But Spread syntax is shallow.</li> <li>Using <code class="language-plaintext highlighter-rouge">Immer</code> module for nested object state is a choice. (I don’t recommend Immer, because it looks like break the rule and make thing confused.)</li> <li>Create a new array from the original array in your state by calling its non-mutating methods like <code class="language-plaintext highlighter-rouge">filter()</code> (Removing from an array) and <code class="language-plaintext highlighter-rouge">map()</code>(Transforming an array, Replacing items in an array).</li> </ul> <h4 id="updating-objects-inside-arrays-nested-state">Updating objects inside arrays (nested state)</h4> <p>You don’t have to deep copy all the objects for every update, but you need to create copies from the point where you want to update, and all the way up to the top level. Using <code class="language-plaintext highlighter-rouge">map</code> and spread <code class="language-plaintext highlighter-rouge">...</code> can make it.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialList</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Big Bellies</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lunar Landscape</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Terracotta Army</span><span class="dl">'</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">myList</span><span class="p">,</span> <span class="nx">setMyList</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialList</span><span class="p">);</span>
<span class="nf">setMyList</span><span class="p">(</span><span class="nx">myList</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">artwork</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">artworkId</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Create a *new* object with changes</span>
    <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">artwork</span><span class="p">,</span> <span class="na">seen</span><span class="p">:</span> <span class="nx">nextSeen</span> <span class="p">};</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// No changes</span>
    <span class="k">return</span> <span class="nx">artwork</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}));</span>
</code></pre></div></div> <h3 id="why-key-is-matter">Why <code class="language-plaintext highlighter-rouge">key</code> is matter?</h3> <h3 id="why-react-choose-immutable">Why React choose Immutable</h3> <ul> <li>Good for Debugging: If you use console.log and don’t mutate state, your past logs won’t get clobbered by the more recent state changes.</li> <li>Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones.</li> <li>Easy for some implements, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values.</li> <li>Make Implementation simpler. And that is the reason why you can set Object as State.</li> </ul> <blockquote class="block-warning"> <p>Important concept in Immutable: ‘Nested’ Objects are not really nested. Nesting is an inaccurate way to think about how objects behave.</p> </blockquote> <h3 id="do-react-have-component-instance-concept-when-placing-a-component-in-different-place-all-of-them-keep-their-own-states-that-means-react-manage-defferent-instances-of-the-component">Do React have component instance concept? When placing a component in different place, all of them keep their own states. That means React manage defferent instances of the component.</h3>]]></content><author><name></name></author><category term="React"/><category term="React"/><category term="Hook"/><summary type="html"><![CDATA[State Rules]]></summary></entry><entry><title type="html">Chrome DevTools Lighthouse</title><link href="https://benwzj.github.io/blog/2023/network-permance/" rel="alternate" type="text/html" title="Chrome DevTools Lighthouse"/><published>2023-10-14T00:00:00+00:00</published><updated>2023-10-14T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2023/network-permance</id><content type="html" xml:base="https://benwzj.github.io/blog/2023/network-permance/"><![CDATA[<p><strong>Lighthouse</strong> is design to help to optimize website speed. It provide two important functions:</p> <ul> <li>It creates a baseline for you to measure subsequent changes against.</li> <li>It gives you actionable tips on what changes will have the most impact.</li> </ul> <h2 id="build-initial-report">Build Initial Report</h2> <p>The baseline is a record of how the site performed before you made any performance improvements. <em>Analyze page load</em> to create a report at the very first.</p> <p>The report will</p> <ul> <li>tell scores for your selected categories.</li> <li>Metric section provides quantitative measurements of the site’s performance. Each metric provides insight into a different aspect of the performance. <ul> <li>Largest Contentful Paint (LCP) measures when the largest content element in the viewport is rendered to the screen. This approximates when the main content of the page is visible to users.</li> </ul> </li> <li>Screenshots section show collection of screenshots that show you how the page looked as it loaded.</li> <li>Opportunities section that provides specific tips on how to improve this particular page’s load performance. For example choose smaller size pictures, compress js files.</li> <li>Diagnostics section provides more information about factors that contribute to the page’s load time.</li> <li>Passed audits section shows you what the site is doing correctly.</li> </ul> <p>Some tips:</p> <ul> <li>Enabling <em>Clear Storage checkbox</em> clears all storage associated with the page, This will audit how first-time visitors experience your site.</li> </ul> <h2 id="actions-according-to-report">Actions according to Report</h2> <h4 id="enable-text-compression">Enable text compression</h4> <p>Go to Network panel to check!</p> <ul> <li>Compare download size anf uncompression size.</li> <li>Search file Response Headers section for a <code class="language-plaintext highlighter-rouge">content-encoding</code> header.</li> </ul> <p>If haven’t compression, then use commpression. For example, if you are using Node Express, then install the Node.js compression middleware via <code class="language-plaintext highlighter-rouge">npm compression</code>.</p> <h4 id="resize-images">Resize images</h4> <p>Create multiple sizes of each image during the build process and then use srcset in your code. At runtime, the browser takes care of choosing what size is best for the device it’s running on.</p> <h4 id="eliminate-render-blocking-resources">Eliminate render-blocking resources</h4> <p>A render-blocking resource is an external JavaScript or CSS file that the browser must download, parse, and execute before it can show the page. The goal is to only run the core CSS and JavaScript code that is required to display the page properly.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">Coverage tab</code> provides an overview of how much of the code in js files,like main.js, bundle.js, jquery.js, and lodash.js is being executed while the page loads. The <code class="language-plaintext highlighter-rouge">Coverage tab</code> can help you analyze your code, line-by-line, and only ship the code that’s needed for page load.</li> <li>The<code class="language-plaintext highlighter-rouge"> Request Blocking tab</code> can show you what happens when resources aren’t available. Which can help you remove the thing we don’t need.</li> </ul> <h4 id="do-less-main-thread-work">Do less main thread work</h4> <p>The main thread is where the browser does most of the work needed to display a page, such as parsing and executing HTML, CSS, and JavaScript.</p> <ul> <li>Diagnostics section in the Lighthouse report will show you the main thread activity.</li> <li>The goal is to use the <code class="language-plaintext highlighter-rouge">Performance panel</code> to analyze what work the main thread is doing while the page loads, and find ways to defer or remove unnecessary work.</li> </ul> <h4 id="improve-largest-contentful-paint-lcp">Improve Largest Contentful Paint (LCP)</h4> <p>LCP represents how quickly the main content of a web page is loaded. Specifically, LCP measures the time from when the user initiates loading the page until the largest image or text block is rendered within the viewport. To provide a good user experience, sites should strive to have an LCP of <strong>2.5 seconds</strong> or less for at least 75% of page visits. To improve LCP, breakdown it and looking at two:</p> <ul> <li>The initial HTML document</li> <li>The LCP resource</li> </ul> <figure> <picture> <img src="/assets/img/a-breakdown-lcp-showing.png" class="img-fluid rounded z-depth-1" width="80%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Check <a href="https://web.dev/articles/optimize-lcp">here</a> for more info to Optimize LCP.</p> <h4 id="reduce-cumulative-layout-shift-cls">Reduce Cumulative Layout Shift (CLS)</h4> <p>CLS is a measure of the largest burst of layout shift scores for every unexpected layout shift that occurs during the entire lifespan of a page. Check <a href="https://web.dev/articles/cls">here</a> for more info to Optimize CLS.</p> <h2 id="reference">Reference</h2> <p><a href="https://developer.chrome.com/docs/devtools/lighthouse/">Chrome DevTools Doc</a> https://developer.chrome.com/docs/devtools/lighthouse/</p>]]></content><author><name></name></author><category term="Website"/><category term="Web-page"/><category term="Chrome"/><category term="DevTools"/><category term="Lighthouse"/><summary type="html"><![CDATA[Lighthouse is design to help to optimize website speed. It provide two important functions: It creates a baseline for you to measure subsequent changes against. It gives you actionable tips on what changes will have the most impact.]]></summary></entry></feed>