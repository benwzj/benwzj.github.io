<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://benwzj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-14T21:37:19+00:00</updated><id>https://benwzj.github.io/feed.xml</id><title type="html">BEN WEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">REST API Overview</title><link href="https://benwzj.github.io/blog/2025/restful/" rel="alternate" type="text/html" title="REST API Overview"/><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/restful</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/restful/"><![CDATA[<h2 id="what-is-rest-api">What is REST API</h2> <p>REpresentational State Transfer (REST) is an architectural style that defines a set of constraints to be used for creating web services.</p> <h3 id="features">Features</h3> <ul> <li>A web API that obeys the REST constraints is informally described as RESTful.</li> <li>REST is a software architectural style.</li> <li>REST API is a way of accessing web services in a simple and flexible way without having any processing knowledge.</li> <li>In a RESTful Web service, requests made to a resource’s URI elicit a response with a payload formatted in JSON, or other format.</li> <li>supports JSON and XML languages.</li> <li>Provides error information to the developer and the reason for the error</li> <li>REST API’s are stateless</li> <li>A uniform interface is crucial to ensure decoupling the client from server and allow independent evolution of the application.</li> <li>REST operates entirely on the HTTP protocol</li> <li>Optimized Code Encapsulation</li> </ul> <h3 id="rest-constraints-principles">REST constraints (principles)</h3> <ul> <li>client–server architecture,</li> <li>statelessness,</li> <li>cacheability,</li> <li>use of a layered system,</li> <li>support for code on demand,</li> <li>and using a uniform interface.</li> </ul> <p>These principles must be followed for the system to be classified as RESTful.</p> <p>The classic example of a non-RESTful system using HTTP is something which treats HTTP as if it was a transport protocol, and with every request sends a POST of data to the same URI which is then acted upon in an RPC-like manner, possibly with the connection itself having shared state. For example, GraphQL is not RESTful.</p> <h2 id="rest-and-cors">REST and CORS</h2> <h2 id="some-terms">Some terms</h2> <ul> <li><strong>RESTful Web services</strong> allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations.</li> <li><strong>SOAP</strong> is a protocol. Unlike SOAP-based Web services, there is no “official” standard for RESTful Web APIs. This is because REST is an architectural style. It is not protocol.</li> <li><strong>Swagger</strong> is an Interface Description Language for describing RESTful APIs expressed using JSON. Swagger is used together with a set of open-source software tools to design, build, document, and use RESTful web services. Swagger includes automated documentation, code generation (into many programming languages), and test-case generation.</li> <li><strong>HTTP API</strong>: A RESTful API adheres ALL the REST constraints set out in its “format” documentation. A HTTP API is ANY API that makes use of HTTP as their transfer protocol. This means that even SOAP can be considered a HTTP API, as long as it will use HTTP for transport. RESTful API can based on HTTP or other protocol. Most HTTP APIs can be very close to becoming a truly RESTful API. Depend on the <a href="https://martinfowler.com/articles/richardsonMaturityModel.html">Glory of REST Model</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="REST"/><category term="Http"/><category term="CORS"/><summary type="html"><![CDATA[What is REST API]]></summary></entry><entry><title type="html">Understand SOP and CORS</title><link href="https://benwzj.github.io/blog/2025/cors/" rel="alternate" type="text/html" title="Understand SOP and CORS"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2025/cors</id><content type="html" xml:base="https://benwzj.github.io/blog/2025/cors/"><![CDATA[<p>Same-Origin Policy(SOP) and Cross-Origin Resource Sharing(CORS) Mechanism are all <strong>Web Browser based</strong>. That means It is Browser to implement them.</p> <h2 id="what-is-sop">What is SOP</h2> <p>The Same-Origin Policy(SOP) is a browser security feature that restricts <strong>HOW</strong> documents and scripts on one origin can interact with resources on another origin.</p> <p>It restricts scripts on a web page from freely making cross-origin requests. It is default behavior of browsers. It stops malicious websites from accessing other websites, protecting against attacks such as <em>cross-site scripting (XSS)</em>, <em>cross-site request forgery (CSRF)</em>, and <em>session/cookie theft</em> etc.</p> <blockquote> <p>A ‘cross-origin request’ is a web request (either fetch or XMLHttpRequest) that is initiated from a script on one domain (e.g., mysite.com) to another domain (e.g., othersite.com). Browsers will detect whether a request is cross-origin or same-origin request.</p> </blockquote> <p>By default, SOP blocks cross-origin HTTP requests initiated by scripts. There are several use cases that require cross-origin script access; for example, Content Delivery Networks (CDNs) that provide hosting for JavaScript/CSS libraries and public API endpoints.</p> <p>Browsers are using CORS to handle cross-origin script access.</p> <h2 id="what-is-cors">What is CORS</h2> <p>Cross-Origin Resource Sharing (CORS) is an <strong>HTTP-header based</strong> mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a “preflight” request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.</p> <blockquote class="block-warning"> <p>CORS is Web Browser based mechanism</p> </blockquote> <p>To understans CORS, you need to clear three parties:</p> <ol> <li>Browser</li> <li>Domain A</li> <li>Domain B</li> </ol> <p>CORS defines a way for <strong>client web applications</strong> or script that are loaded in domain A to interact with resources in Domain B.</p> <h3 id="basic-logic-on-how-cors-work">Basic logic on How CORS work</h3> <p>A cross-origin request example: the front-end JavaScript code served from ‘https://domain-a.com’ uses <code class="language-plaintext highlighter-rouge">fetch()</code> to make a request for ‘https://domain-b.com/data.json’.</p> <p>Browsers will restrict this request! The APIs <code class="language-plaintext highlighter-rouge">fetch()</code> and <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins <strong>includes the right CORS headers</strong>.</p> <h3 id="main-points">Main points</h3> <ul> <li>It is Domain B who implement CORS policy to specify/declare which origins are allowed to make cross-origin requests to it’s resource. For example set up The HTTP response headers <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code> to define the non-same origins that are allowed to make requests to pages on your domain.</li> <li>The cross-origin request from Domain A won’t be fulfilled unless the Domain B origin allows for the request.</li> <li>CORS is based on HTTP headers.</li> <li>CORS is Web Browser based mechanism.</li> <li>The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers. Browsers use CORS in APIs such as <code class="language-plaintext highlighter-rouge">fetch()</code> or <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> to mitigate the risks of cross-origin HTTP requests.</li> <li>Developers making cross-origin requests do not have to set any cross-origin sharing request headers programmatically. Browsers do that for you.</li> </ul> <h2 id="cors-three-scenarios">CORS three scenarios</h2> <p>Here are three scenarios that demonstrate how Cross-Origin Resource Sharing works.</p> <h3 id="simple-requests">Simple requests</h3> <p>A simple request is one that meets some conditions, like: using GET or HEAD or POST methods; etc. A simple requests don’t trigger a CORS preflight.</p> <ol> <li>Make request like below, Browser will set up the header for you.</li> </ol> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://bar.other</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">fetchPromise</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <ol> <li>In response, the server returns a <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code> header with <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: *</code>, which means that the resource can be accessed by any origin.</li> </ol> <h3 id="preflighted-requests">Preflighted requests</h3> <p>Unlike simple requests, for “preflighted” requests the browser first sends an HTTP request using the <code class="language-plaintext highlighter-rouge">OPTIONS</code> method to the resource on the other origin, in order to determine if the actual request is safe to send. Such cross-origin requests are preflighted since they may have implications for user data.</p> <p>Make request:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://bar.other/doc</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cors</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/xml</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">X-PINGOTHER</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pingpong</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">fetchPromise</span><span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Browser send preflight request with the OPTIONS method for you. along with the OPTIONS request, two other request headers are sent:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type,x-pingother
</code></pre></div></div> <p>Domain B need to response, like <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: https://foo.example</code> to go ahead. And then the real Request is coming.</p> <h3 id="requests-with-credentials">Requests with credentials</h3> <p>To ask for a fetch() request to include credentials, set the credentials option to “include”.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://bar.other/resources/credentialed-content/</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Request</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="na">credentials</span><span class="p">:</span> <span class="dl">"</span><span class="s2">include</span><span class="dl">"</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">fetchPromise</span> <span class="o">=</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
<span class="nx">fetchPromise</span><span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS on mozilla</a>.</li> </ul>]]></content><author><name></name></author><category term="HTML"/><category term="CORS"/><category term="fetch"/><category term="Http"/><summary type="html"><![CDATA[Same-Origin Policy(SOP) and Cross-Origin Resource Sharing(CORS) Mechanism are all Web Browser based. That means It is Browser to implement them.]]></summary></entry><entry><title type="html">Some Build-in lib in Python</title><link href="https://benwzj.github.io/blog/2024/py-buildin-lib/" rel="alternate" type="text/html" title="Some Build-in lib in Python"/><published>2024-12-29T00:00:00+00:00</published><updated>2024-12-29T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-buildin-lib</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-buildin-lib/"><![CDATA[<h2 id="random-module">Random module</h2> <p>This module implements pseudo-random number generators for various distributions.</p> <ul> <li>For integers, there is uniform selection from a range.</li> <li>For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.</li> <li>Almost all module functions depend on the basic function random(), which generates a random float uniformly in the half-open range 0.0 &lt;= X &lt; 1.0.</li> <li>Python uses the Mersenne Twister as the core generator.</li> <li>It produces 53-bit precision floats and has a period of 2**19937-1.</li> <li>It is completely unsuitable for cryptographic purposes.</li> <li>For security or cryptographic uses, see the secrets module.</li> <li>The functions supplied by this module are actually bound methods of a hidden instance of the random.Random class. You can instantiate your own instances of Random to get generators that don’t share state.</li> </ul> <h3 id="bookkeeping-functions">Bookkeeping functions</h3> <h4 id="randomseedanone-version2"><code class="language-plaintext highlighter-rouge">random.seed(a=None, version=2)</code></h4> <p>Initialize the random number generator.</p> <ul> <li>If a is omitted or None, the current system time is used.</li> <li>If a is an int, it is used directly.</li> </ul> <h4 id="randomgetstate"><code class="language-plaintext highlighter-rouge">random.getstate()</code></h4> <p>Return an object capturing the current internal state of the generator. This object can be passed to setstate() to restore the state.</p> <h4 id="randomsetstatestate"><code class="language-plaintext highlighter-rouge">random.setstate(state)</code></h4> <h3 id="functions-for-integers">Functions for integers</h3> <h4 id="randomrandrangestart-stop-step">random.randrange(start, stop[, step])</h4> <p>Return a randomly selected element from range(start, stop, step)</p> <h3 id="functions-for-sequences">Functions for sequences</h3> <h4 id="randomchoiceseq">random.choice(seq)</h4> <p>Return a random element from the non-empty sequence seq.</p> <h4 id="randomshufflex">random.shuffle(x)</h4> <p>Shuffle the sequence x in place. (please note that, it will mutate the sequence).</p> <ul> <li>To shuffle an immutable sequence and return a new shuffled list, use sample(x, k=len(x)) instead.</li> </ul> <h4 id="randomsamplepopulation-k--countsnone">random.sample(population, k, *, counts=None)</h4> <p>Return a k length, new list of unique elements chosen from the population sequence or set. Used for random sampling without replacement.</p> <h3 id="real-valued-distributions">Real-valued distributions</h3> <h4 id="randomrandom">random.random()</h4> <p>Return the next random floating point number in the range <code class="language-plaintext highlighter-rouge">0.0 &lt;= X &lt; 1.0</code></p> <h4 id="randomuniforma-b">random.uniform(a, b)</h4> <p>Return a random floating point number N such that <code class="language-plaintext highlighter-rouge">a &lt;= N &lt;= b</code> for <code class="language-plaintext highlighter-rouge">a &lt;= b</code> and <code class="language-plaintext highlighter-rouge">b &lt;= N &lt;= a</code> for <code class="language-plaintext highlighter-rouge">b &lt; a</code>.</p> <h2 id="heapq">heapq</h2> <p>(Still don’t get the main point of this module and heap)</p> <p>This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.</p> <h3 id="what-is-heap">What is heap</h3> <ul> <li>Heaps are binary trees for which every parent node has a value less than or equal to any of its children.</li> <li>Heaps are arrays for which <code class="language-plaintext highlighter-rouge">a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2]</code> for all k, counting elements from 0.</li> <li>For the sake of comparison, non-existing elements are considered to be infinite.</li> <li>The interesting property of a heap is that its smallest element is always the root, <code class="language-plaintext highlighter-rouge">heap[0]</code>.</li> <li>In a word, heaps are useful memory structures to know.</li> </ul> <h3 id="functions">functions</h3> <h4 id="heapqnlargestn-iterable-keynone">heapq.nlargest(n, iterable, key=None)</h4> <p>Return a list with the n largest elements from the dataset defined by iterable.</p> <h2 id="json">json</h2> <p>json exposes an API familiar to users of the standard library marshal and pickle modules.</p> <h3 id="functions-1">Functions</h3> <h4 id="jsonloads-and-jsonload">json.loads() and json.load()</h4> <p>conversion table:</p> <figure> <picture> <img src="/assets/img/py-json-load.jpg" class="img-fluid rounded z-depth-1" width="35%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="jsonloadss-">json.loads(s, *)</h4> <p>Deserialize s (a str, bytes or bytearray instance containing a JSON document) to a Python object using this conversion table.</p> <p>For example, If you have a JSON string, you can parse it by using the json.loads() method. it return a Python dictionary.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="s">:30, </span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">New York</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span>
<span class="n">dct</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <h4 id="jsonloadfp-">json.load(fp, *)</h4> <p>Deserialize fp (a .read()-supporting text file or binary file containing a JSON document) to a Python object using this conversion table.</p> <h4 id="jsondumpsobj-">json.dumps(obj, *)</h4> <p>Serialize obj to a JSON formatted str using this conversion table.</p> <h4 id="jsondumpobj-fp-">json.dump(obj, fp, *)</h4> <p>Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.</p> <h3 id="classes">Classes</h3> <p>You can create subclass of these defined classes:</p> <h4 id="class-jsonjsondecoder">class json.JSONDecoder</h4> <p>Simple JSON decoder.</p> <h4 id="method-decodes">method: decode(s)</h4> <p>Return the Python representation of s (a str instance containing a JSON document).</p> <h4 id="class-jsonjsonencoder">class json.JSONEncoder</h4> <p>Extensible JSON encoder for Python data structures.</p> <h4 id="method-defaulto">method: default(o)</h4> <p>Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError).</p> <h4 id="encodeo">encode(o)</h4> <p>Return a JSON string representation of a Python data structure, o.</p> <h4 id="iterencodeo">iterencode(o)</h4> <p>Encode the given object, o, and yield each string representation as available.</p> <h2 id="io-module">io module</h2> <ul> <li>The io module provides Python’s main facilities for dealing with various types of I/O.</li> <li>There are three main types of I/O: text I/O, binary I/O and raw I/O.</li> <li>A concrete object belonging to any of these categories is called a file object. Other common terms are stream and file-like object.</li> </ul> <h3 id="text-io">Text I/O</h3> <p>Text I/O expects and produces str objects. The easiest way to create a text stream is with open(): <code class="language-plaintext highlighter-rouge">f = open("myfile.txt", "r", encoding="utf-8")</code></p> <p>In-memory text streams are also available as StringIO objects: <code class="language-plaintext highlighter-rouge">f = io.StringIO("some initial text data")</code></p> <h3 id="binary-io">Binary I/O</h3> <p>Binary I/O (also called buffered I/O) expects bytes-like objects and produces bytes objects.</p> <p>The easiest way to create a binary stream is with open() with ‘b’ in the mode string: <code class="language-plaintext highlighter-rouge">f = open("myfile.jpg", "rb")</code></p> <p>In-memory binary streams are also available as BytesIO objects: <code class="language-plaintext highlighter-rouge">f = io.BytesIO(b"some initial binary data: \x00\x01")</code></p>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Random module]]></summary></entry><entry><title type="html">Popular Third party lib For Python</title><link href="https://benwzj.github.io/blog/2024/py-third-lib/" rel="alternate" type="text/html" title="Popular Third party lib For Python"/><published>2024-12-29T00:00:00+00:00</published><updated>2024-12-29T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-third-lib</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-third-lib/"><![CDATA[<h2 id="numpy">NumPy</h2> <ul> <li>NumPy is a Python library used for working with arrays.</li> <li>NumPy stands for Numerical Python.</li> <li>NumPy is the fundamental package for scientific computing in Python.</li> <li>It provides a multi-dimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays.</li> </ul> <h3 id="why-use-numpy">Why Use NumPy?</h3> <ul> <li>In Python we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li> <li>The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.</li> <li>NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.</li> <li>NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.</li> </ul> <h3 id="basic-example">Basic example:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]])</span>
<span class="n">subarr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">subarr</span><span class="p">)</span> <span class="n">like</span> <span class="n">this</span><span class="p">:</span>
<span class="p">[[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">6</span> <span class="mi">7</span><span class="p">]]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>  <span class="c1"># Output: 78
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>  <span class="c1"># Output: [ 2.5  6.5 10.5]
</span></code></pre></div></div> <h3 id="functions">Functions</h3> <p>np.random.normal</p> <h2 id="scipy">SciPy</h2> <ul> <li>SciPy is a scientific computation library that uses NumPy underneath.</li> <li>SciPy stands for Scientific Python.</li> <li>It provides more utility functions for optimization, stats and signal processing.</li> <li>Like NumPy, SciPy is open source so we can use it freely.</li> <li>SciPy was created by NumPy’s creator Travis Olliphant.</li> </ul> <h3 id="why-use-scipy">Why Use SciPy?</h3> <ul> <li>If SciPy uses NumPy underneath, why can we not just use NumPy?</li> <li>SciPy has optimized and added functions that are frequently used in NumPy and Data Science.</li> </ul> <h2 id="pandas">Pandas</h2> <p>Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data. The name “Pandas” has a reference to both “Panel Data”, and “Python Data Analysis” and was created by Wes McKinney in 2008.</p> <h3 id="why-use-pandas">Why Use Pandas?</h3> <p>Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Relevant data is very important in data science.</p> <h2 id="matplotlib">Matplotlib</h2> <p>Matplotlib is a low level graph plotting library in python that serves as a visualization utility. Most of the Matplotlib utilities lies under the pyplot submodule.</p> <p>What main job Matplotlib do as following:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">xpoints</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
<span class="n">ypoints</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xpoints</span><span class="p">,</span> <span class="n">ypoints</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>Then you get:</p> <figure> <picture> <img src="/assets/img/py-Matplotlib.jpg" class="img-fluid rounded z-depth-1" width="35%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can decorate this chart: like marker, line, label, grid, scatter, bars, histograms, pie.</p> <h2 id="openpyxl">openpyxl</h2> <p>(The first exercise) https://openpyxl.readthedocs.io/en/stable/index.html#</p> <p>openpyxl is a lib which deal with Excel 2010 xlsx/xlsm/xltx/xltm files.</p> <h3 id="create-workbook">Create workbook</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> from openpyxl import Workbook
<span class="o">&gt;&gt;&gt;</span> wb <span class="o">=</span> Workbook<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> ws <span class="o">=</span> wb.create_sheet<span class="o">(</span><span class="s2">"Mysheet"</span><span class="o">)</span> <span class="c"># insert at the end (default)</span>
</code></pre></div></div> <h3 id="load-data-from-a-file">Load data from a file</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> from openpyxl import load_workbook
<span class="o">&gt;&gt;&gt;</span> wb2 <span class="o">=</span> load_workbook<span class="o">(</span><span class="s1">'test.xlsx'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> print<span class="o">(</span>wb2.sheetnames<span class="o">)</span>
</code></pre></div></div> <h3 id="playing-with-cells-content">Playing with cells content</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> ws <span class="o">=</span> wb.active
<span class="o">&gt;&gt;&gt;</span> ws[<span class="s1">'A4'</span><span class="o">]</span> <span class="o">=</span> 4
<span class="o">&gt;&gt;&gt;</span> d <span class="o">=</span> ws.cell<span class="o">(</span><span class="nv">row</span><span class="o">=</span>4, <span class="nv">column</span><span class="o">=</span>2, <span class="nv">value</span><span class="o">=</span>10<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>row <span class="k">in </span>ws.iter_rows<span class="o">(</span><span class="nv">min_row</span><span class="o">=</span>1, <span class="nv">max_col</span><span class="o">=</span>3, <span class="nv">max_row</span><span class="o">=</span>2<span class="o">)</span>:
...    print<span class="o">(</span>row<span class="o">)</span> <span class="c"># one row is one tuple</span>
...    <span class="k">for </span>cell <span class="k">in </span>row:
...        print<span class="o">(</span>cell<span class="o">)</span> <span class="c"># cell object: &lt;Cell Sheet.A1&gt;</span>
</code></pre></div></div> <h3 id="save-data">save data</h3> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; wb.save('balances.xlsx')</code></p> <h3 id="conclusion">Conclusion</h3> <ul> <li>Lib documents supposed to support all information. Such as how to use it, Example, security.</li> <li>list, tuple, dictionary are basic object which are very good designed! and need to be familiar with.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[NumPy]]></summary></entry><entry><title type="html">Python Asyncio</title><link href="https://benwzj.github.io/blog/2024/py-asyncio/" rel="alternate" type="text/html" title="Python Asyncio"/><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-asyncio</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-asyncio/"><![CDATA[<h2 id="what-is-asyncio">What is asyncio</h2> <p>Asyncio is a built-in library of Python to write concurrent code using <code class="language-plaintext highlighter-rouge">async/await</code> syntax. This library provides high-performance network and web servers, database connection libraries, distributed task queues, etc., for asynchronous programming.</p> <ul> <li>asyncio is the concurrency module introduced in Python 3.4.</li> <li>It is designed to use coroutines and futures to simplify asynchronous code and make it almost as readable as synchronous code as there are no callbacks.</li> <li>To understand sayncio, the key point is understand event loop, although somebody keep saying coroutine is the core feature.</li> <li>The asyncio package is a library to write concurrent code. However, async IO is not threading, nor is it multiprocessing. It is not built on top of either of these.</li> <li>async IO is a single-threaded, single-process design: it uses cooperative multitasking.</li> <li>async IO gives a feeling of concurrency despite using a single thread in a single process.</li> <li>By default asyncio runs in production mode. In order to ease the development asyncio has a debug mode.</li> </ul> <h3 id="event-loops-coroutines-and-futures-concepts">event loops, coroutines and futures concepts</h3> <ul> <li>An <strong>event loop</strong> manages and distributes the execution of different tasks. It registers them and handles distributing the flow of control between them.</li> <li><strong>Coroutines</strong> are special functions that work similarly to Python generators, on await they release the flow of control back to the event loop. A coroutine needs to be scheduled to run on the event loop, once scheduled coroutines are wrapped in Tasks which is a type of Future.</li> <li><strong>Futures</strong> represent the result of a task that may or may not have been executed. This result may be an exception.</li> </ul> <h2 id="coroutines">Coroutines</h2> <h3 id="what-is-coroutines">What is Coroutines</h3> <ul> <li>Detail on PEP 492.</li> <li>Coroutines declared with the async/await syntax is the preferred way of writing asyncio applications.</li> <li>Example:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">world</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>Python coroutines are awaitables and therefore can be awaited from other coroutines.</li> <li>Simply calling a coroutine will not schedule it to be executed.</li> <li>To actually run a coroutine in the event loop, asyncio provides the following mechanisms: <ul> <li>asyncio.run()</li> <li>asyncio.create_task()</li> <li>asyncio.TaskGroup()</li> </ul> </li> <li>The term “coroutine” can be used for two closely related concepts: <ul> <li>a coroutine function: an async def function;</li> <li>a coroutine object: an object returned by calling a coroutine function.</li> </ul> </li> <li>A coroutine is a specialized version of a Python generator function.</li> <li>The keyword async def introduces a native coroutine.</li> <li>The keyword await passes function control back to the event loop.</li> </ul> <h4 id="chaining-coroutines">Chaining Coroutines</h4> <p>A key feature of coroutines is that they can be chained together. (Remember, a coroutine object is awaitable, so another coroutine can await it.) This allows you to break programs into smaller, manageable, recyclable coroutines</p> <h3 id="coroutines-is-generators">Coroutines is generators</h3> <ul> <li>Coroutines are repurposed generators that take advantage of the peculiarities of generator methods.</li> <li>Old generator-based coroutines use yield from to wait for a coroutine result. Modern Python syntax in native coroutines simply replaces yield from with await as the means of waiting on a coroutine result.</li> <li>The use of await is a signal that marks a break point. It lets a coroutine temporarily suspend execution and permits the program to come back to it later.</li> </ul> <h3 id="awaitable-object">Awaitable Object</h3> <ul> <li>An awaitable object generally implements an <code class="language-plaintext highlighter-rouge">__await__()</code> method.</li> <li> <p>Note: The generator iterator objects returned from generators decorated with types.coroutine() are also awaitable, but they do not implement <code class="language-plaintext highlighter-rouge">__await__()</code>.</p> </li> <li>We say that an object is an awaitable object if it can be used in an await expression.</li> <li>Many asyncio APIs are designed to accept awaitables.</li> <li>There are three main types of awaitable objects: coroutines, Tasks, and Futures.</li> </ul> <h3 id="coroutine-obejct">Coroutine Obejct</h3> <p>Coroutine objects returned from async def functions are awaitable.</p> <ul> <li>A coroutine’s execution can be controlled by calling <code class="language-plaintext highlighter-rouge">__await__()</code> and iterating over the result.</li> <li>Coroutines have the methods which are analogous to those of generators. Like coroutine.send(value), coroutine.throw(value), coroutine.close().</li> <li>However, unlike generators, coroutines do not directly support iteration.</li> </ul> <h3 id="asynchronous-iterators-and-async-for">Asynchronous Iterators and “async for”</h3> <p>Along with plain <code class="language-plaintext highlighter-rouge">async/await</code>, Python also enables async for to iterate over an asynchronous iterator.</p> <h4 id="what-is-asynchronous-iterator">What is asynchronous iterator</h4> <ul> <li> <p>An asynchronous iterable is able to call asynchronous code in its iter implementation, and asynchronous iterator can call asynchronous code in its next method.</p> </li> <li>To support asynchronous iteration: <ul> <li>An object must implement an <code class="language-plaintext highlighter-rouge">__aiter__</code> method returning an asynchronous iterator object.</li> <li>An asynchronous iterator object must implement an <code class="language-plaintext highlighter-rouge">__anext__</code> method returning an awaitable.</li> <li>To stop iteration <code class="language-plaintext highlighter-rouge">__anext__</code> must raise a StopAsyncIteration exception.</li> </ul> </li> <li>An example of asynchronous iterable:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AsyncIterable</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__aiter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">__anext__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">fetch_data</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">StopAsyncIteration</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_data</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="bp">...</span>
</code></pre></div></div> <ul> <li>A new statement for iterating through asynchronous iterators is supported:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">for</span> <span class="n">TARGET</span> <span class="ow">in</span> <span class="n">ITER</span><span class="p">:</span>
    <span class="n">BLOCK</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">BLOCK2</span>
</code></pre></div></div> <p>which is semantically equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">iter</span> <span class="o">=</span> <span class="p">(</span><span class="n">ITER</span><span class="p">)</span>
<span class="nb">iter</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="nb">iter</span><span class="p">).</span><span class="nf">__aiter__</span><span class="p">(</span><span class="nb">iter</span><span class="p">)</span>
<span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">while</span> <span class="n">running</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">TARGET</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">type</span><span class="p">(</span><span class="nb">iter</span><span class="p">).</span><span class="nf">__anext__</span><span class="p">(</span><span class="nb">iter</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
        <span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">BLOCK</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">BLOCK2</span>
</code></pre></div></div> <ul> <li>The purpose of an asynchronous iterator is for it to be able to call asynchronous code at each stage when it is iterated over.</li> </ul> <h3 id="asynchronous-context-managers-and-async-with-">Asynchronous Context Managers And “async with ”</h3> <ul> <li>An asynchronous context manager is a context manager that is able to suspend execution in its <code class="language-plaintext highlighter-rouge">__aenter__</code> and <code class="language-plaintext highlighter-rouge">__aexit__</code> methods.</li> <li>Asynchronous context managers can be used in an <code class="language-plaintext highlighter-rouge">async with</code> statement.</li> </ul> <h2 id="task">Task</h2> <ul> <li>Task is a concept which interact with event loop.</li> <li>Tasks are one of the primary ways to interact with the event loop.</li> <li>Tasks wrap coroutines and track when they are complete.</li> <li>Tasks are used to run coroutines in event loops. If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future. When the Future is done, the execution of the wrapped coroutine resumes.</li> <li>Tasks are used to schedule coroutines concurrently.</li> <li>When a coroutine is wrapped into a Task with functions like asyncio.create_task() the coroutine is automatically scheduled to run soon.</li> </ul> <h3 id="create-task">Create task</h3> <p>asyncio.create_task(coro)</p> <ul> <li>Wrap the coro coroutine into a Task and schedule its execution. Return the Task object.</li> <li>The task is executed in the loop returned by get_running_loop()</li> <li>Save a reference to the result of this function, to avoid a task disappearing mid-execution.</li> <li>asyncio.TaskGroup.create_task() is a newer alternative that allows for convenient waiting for a group of related tasks.</li> </ul> <h4 id="still-have-no-idea-why-need-task-to-wrap-a-coroutine">Still have no idea why need task to wrap a coroutine?</h4> <p>OK, let’s clear it.</p> <ul> <li>Firstly, coroutine just work within a event loop. You can just simply use asyncio.run(coro) to creates a new event loop to run coro and closes it at the end.</li> <li>When you are using asyncio.gather() for concurrency, it actually use task.</li> <li>Using task provide more control, more features. For example, according code below:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">not_task</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="nf">say_hello</span><span class="p">()</span>
    <span class="k">await</span> <span class="nf">say_hello</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">is_task</span><span class="p">():</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say_hello</span><span class="p">())</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say_hello</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">t1</span>
    <span class="k">await</span> <span class="n">t2</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">started at </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%X</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>understand HOW not_task() and is_task() work when wrap them in run(). Running not_task() coroutine object, it take 4 seconds; Running is_task(), it can run concurrently, it take 2 seconds.</li> </ul> <h3 id="task-groups">Task Groups</h3> <ul> <li>New at version 3.11</li> <li>Task groups combine a task creation API with a convenient and reliable way to wait for all tasks in the group to finish.</li> </ul> <h2 id="futures">Futures</h2> <ul> <li>A Future is a special low-level awaitable object that represents an eventual result of an asynchronous operation.</li> <li>Future objects are used to bridge low-level callback-based code with high-level async/await code.</li> <li>When a Future object is awaited it means that the coroutine will wait until the Future is resolved in some other place.</li> <li>Future objects in asyncio are needed to allow callback-based code to be used with async/await.</li> <li>Normally there is no need to create Future objects at the application level code.</li> <li>Future objects, sometimes exposed by libraries and some asyncio APIs, can be awaited.</li> </ul> <h2 id="event-loop">Event loop</h2> <ul> <li>The event loop is the core of every asyncio application that takes care of all the running tasks.</li> <li>The event loop supports multitasking. When a function is suspended, control returns to the loop, which then finds another function to start or resume.</li> <li>Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.</li> <li>Event loops use cooperative scheduling: an event loop runs one Task at a time. While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.</li> <li>Event loop interface provide low-level APIs. Application developers should rarely need to reference the loop object or call its methods.</li> <li>By default, an async IO event loop runs in a single thread and on a single CPU core.</li> <li>Event loops are pluggable. That is, you could, if you really wanted, write your own event loop implementation and have it run tasks just the same.</li> </ul> <figure> <picture> <img src="/assets/img/py-eventloop.jpg" class="img-fluid rounded z-depth-1" width="60%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="how-event-loop-work">How event loop work</h3> <ul> <li>An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread.</li> <li>While a Task is running in the event loop, no other Tasks can run in the same thread.</li> <li>When a Task executes an await expression, the running Task gets suspended, and the event loop executes the next Task.</li> <li>To schedule a callback from another OS thread, the loop.call_soon_threadsafe() method should be used.</li> </ul> <h3 id="high-level-asyncio-functions">high-level asyncio functions</h3> <h4 id="asyncioruncoro">asyncio.run(coro)</h4> <ul> <li>asyncio.run() introduced in Python 3.7, is responsible for getting the event loop, running tasks until they are marked as complete, and then closing the event loop.</li> <li>It runs the passed coro, taking care of managing the asyncio event loop and closing the threadpool.</li> <li>This function cannot be called when another asyncio event loop is running in the same thread.</li> <li>It should be used as a main entry point for asyncio programs, and should ideally only be called once.</li> <li>There’s a more long-winded way of managing the asyncio event loop, with get_event_loop().</li> </ul> <h3 id="low-level-functions">low-level functions</h3> <p>Application developers should typically use the high-level asyncio functions, such as asyncio.run(), and should rarely need to reference the loop object or call its methods.</p> <h4 id="asyncioget_running_loop">asyncio.get_running_loop()</h4> <ul> <li>Return the running event loop in the current OS thread.</li> <li>Raise a RuntimeError if there is no running event loop.</li> <li>This function can only be called from a coroutine or a callback.</li> </ul> <h4 id="asyncioget_event_loop">asyncio.get_event_loop()</h4> <ul> <li>When called from a coroutine or a callback, this function will always return the running event loop.</li> <li>If there is no running event loop set, the function will return the result of the get_event_loop_policy().get_event_loop() call.</li> <li>Consider using the higher-level asyncio.run() function, instead of using these lower level functions to manually create and close an event loop.</li> </ul> <h4 id="asyncioset_event_looploop">asyncio.set_event_loop(loop)</h4> <p>Set loop as the current event loop for the current OS thread.</p> <h4 id="asyncionew_event_loop">asyncio.new_event_loop()</h4> <p>Create and return a new event loop object.</p> <h3 id="event-loop-methods">Event Loop Methods</h3> <h4 id="running-and-stopping-the-loop">Running and stopping the loop</h4> <ul> <li> <p><code class="language-plaintext highlighter-rouge">loop.run_until_complete(future)</code>: Run until the future (an instance of Future) has completed.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">loop.run_forever()</code>: Run the event loop until stop() is called.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">loop.close()</code>: Close the event loop.</p> </li> </ul> <h4 id="scheduling-callbacks">Scheduling callbacks</h4> <ul> <li><code class="language-plaintext highlighter-rouge">loop.call_soon(callback, *args, context=None)</code>: Schedule the callback callback to be called with args arguments at the next iteration of the event loop. Callbacks are called in the order in which they are registered. Each callback will be called exactly once.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_soon_threadsafe(callback, *args, context=None)</code>: When scheduling callbacks from another thread, this function must be used.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_later(delay, callback, *args, context=None)</code>: Schedule callback to be called after the given delay number of seconds.</li> <li><code class="language-plaintext highlighter-rouge">loop.call_at(when, callback, *args, context=None)</code>: Schedule callback to be called at the given absolute timestamp when (an int or a float), using the same time reference as loop.time().</li> <li><code class="language-plaintext highlighter-rouge">loop.time()</code>: Return the current time, as a float value, according to the event loop’s internal monotonic clock.</li> </ul> <h4 id="creating-futures-and-tasks">Creating Futures and Tasks</h4> <ul> <li><code class="language-plaintext highlighter-rouge">loop.create_future()</code> Create an asyncio.Future object attached to the event loop.</li> </ul> <p>This is the preferred way to create Futures in asyncio. This lets third-party event loops provide alternative implementations of the Future object</p> <ul> <li><code class="language-plaintext highlighter-rouge">loop.create_task(coro, *, name=None, context=None)</code> Schedule the execution of coroutine coro. Return a Task object.</li> </ul> <h4 id="opening-network-connections">Opening network connections</h4> <ul> <li>coroutine loop.create_connection() Open a streaming transport connection to a given address specified by host and port.</li> <li>coroutine loop.create_datagram_endpoint() Create a datagram connection.</li> <li>coroutine loop.create_unix_connection()</li> </ul> <h4 id="creating-network-servers">Creating network servers</h4> <ul> <li>coroutine loop.create_server() Create a TCP server (socket type SOCK_STREAM) listening on port of the host address.</li> </ul> <h2 id="asynchronous-context-manager">asynchronous context manager</h2> <p>An asynchronous context manager is a context manager that is able to suspend execution in its <strong>aenter</strong> and <strong>aexit</strong> methods.</p> <h3 id="runner-context-manager">Runner context manager</h3> <p><code class="language-plaintext highlighter-rouge">class asyncio.Runner(*, debug=None, loop_factory=None)</code></p> <ul> <li>A context manager that simplifies multiple async function calls in the same context.</li> <li>Sometimes several top-level async functions should be called in the same event loop and contextvars.Context.</li> <li>Basically, asyncio.run() example can be rewritten with the runner usage:</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Runner</span><span class="p">()</span> <span class="k">as</span> <span class="n">runner</span><span class="p">:</span>
    <span class="n">runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div> <h3 id="coroutine-asynciotimeoutdelay">coroutine asyncio.timeout(delay)</h3> <p>An asynchronous context manager that can be used to limit the amount of time spent waiting on something.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">timeout</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="k">await</span> <span class="nf">long_running_task</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The long operation timed out, but we</span><span class="sh">'</span><span class="s">ve handled it.</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This statement will run regardless.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="usage">Usage</h2> <h3 id="sleeping">Sleeping</h3> <p><code class="language-plaintext highlighter-rouge">coroutine asyncio.sleep(delay)</code> Example, wait 1 second: <code class="language-plaintext highlighter-rouge">await asyncio.sleep(1)</code></p> <h3 id="running-tasks-concurrently">Running Tasks Concurrently</h3> <p><code class="language-plaintext highlighter-rouge">awaitable asyncio.gather(*aws)</code></p> <ul> <li>Run awaitable objects in the aws sequence concurrently.</li> <li>If any awaitable in aws is a coroutine, it is automatically scheduled as a Task.</li> </ul> <h3 id="task-groups-1">Task groups</h3> <ul> <li>New in version 3.11</li> <li>Task groups combine a task creation API with a convenient and reliable way to wait for all tasks in the group to finish.</li> <li><code class="language-plaintext highlighter-rouge">class asyncio.TaskGroup</code> An asynchronous context manager holding a group of tasks. Tasks can be added to the group using TaskGroup.<code class="language-plaintext highlighter-rouge">create_task()</code>. All tasks are awaited when the context manager exits.</li> </ul> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">TaskGroup</span><span class="p">()</span> <span class="k">as</span> <span class="n">tg</span><span class="p">:</span>
        <span class="n">task1</span> <span class="o">=</span> <span class="n">tg</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">some_coro</span><span class="p">(...))</span>
        <span class="n">task2</span> <span class="o">=</span> <span class="n">tg</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">another_coro</span><span class="p">(...))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Both tasks have completed now.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The async with statement will wait for all tasks in the group to finish.</p> <p>Other topics:</p> <ul> <li>Shielding From Cancellation</li> <li>Timeouts</li> <li>Waiting Primitives</li> <li>Running in Threads</li> <li>Scheduling From Other Threads</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>Asynchronous programming and Generator</li> <li>Are all coroutines which are in the same asyncio.run() are in a same thread? One event loop locate in one thread?</li> <li>The current thread which execute asyncio.run() is other than the event loop thread?</li> </ul> <h4 id="what-is-concurrent-computing">What is Concurrent computing</h4> <p>Concurrent computing is a form of computing in which several computations are executed concurrently—during overlapping time periods—instead of sequentially—with one completing before the next starts.</p> <p>Concurrency is not Parallelism</p> <ul> <li>Concurrency and parallelism, a related but quite distinct concept.</li> <li>In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations.</li> <li>Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.</li> <li>Concurrency is talk about structure, while parallelism is about execution.</li> <li>Concurrency maybe use parallelism, but parallelism is not it’s goal.</li> <li>An analogue: OS need to handle many stuff, keyboard, mouse input,screen output, response many socket. But it don’t have to be parallelism. it use concurrent model.</li> <li>Parallelism, for example, break a big job into many small jobs and execute them in parallel way.</li> </ul> <h4 id="asynciocoroutine">@asyncio.coroutine</h4> <p>async/await is new syntax. @asyncio.coroutine return a generator-based coroutine which outdated.</p> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@asyncio.coroutine</span>
<span class="k">def</span> <span class="nf">py34_coro</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Generator-based coroutine, older syntax</span><span class="sh">"""</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="nf">stuff</span><span class="p">()</span>
<span class="n">same</span> <span class="k">with</span><span class="p">:</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">py35_coro</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Native coroutine, modern syntax</span><span class="sh">"""</span>
    <span class="k">await</span> <span class="nf">stuff</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="Asynchronous"/><summary type="html"><![CDATA[What is asyncio]]></summary></entry><entry><title type="html">Python Memory Management</title><link href="https://benwzj.github.io/blog/2024/py-memory/" rel="alternate" type="text/html" title="Python Memory Management"/><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-memory</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-memory/"><![CDATA[<h2 id="memory-management">Memory Management</h2> <ul> <li>Memory management in Python involves a private heap containing all Python objects and data structures.</li> <li>The management of this private heap is ensured internally by the Python memory manager.</li> <li>The Python memory manager has different components which deal with various dynamic storage management aspects, like sharing, segmentation, preallocation or caching.</li> <li>It is important to understand that the management of the Python heap is performed by the interpreter itself and that the user has no control over it, even if they regularly manipulate object pointers to memory blocks inside that heap.</li> <li>To avoid memory corruption, extension writers should never try to operate on Python objects with the functions exported by the C library: malloc(), calloc(), realloc() and free().</li> </ul> <h2 id="how-much-memory-python-objects-use">How Much Memory Python Objects Use</h2> <h3 id="sysgetsizeof">sys.getsizeof</h3> <p>use sys.getsizeof to measure.</p> <h3 id="int">Int</h3> <ul> <li>The same integer always has same address and same memory size, no matter it is variable or literal.</li> <li>Memory size of Integer 1 is 28, and Memory size of 1000000000000000000000000000000 is 40.</li> </ul> <h3 id="memory-profiler">Memory Profiler</h3> <ul> <li> <p>To gauge and measure the actual memory usage of your program, you can use the memory_profiler module.</p> </li> <li> <p>You decorate a function (could be the main function) with an @profiler decorator, and when the program exits, the memory profiler prints to standard output a handy report that shows the total and changes in memory for every line.</p> </li> </ul> <h3 id="tracemalloc">tracemalloc</h3> <ul> <li>tracemalloc is a Python module that acts as a debug tool to trace memory blocks allocated by Python.</li> </ul> <p>Once tracemalloc is enabled, you can obtain the following information:</p> <ul> <li>identify where the object was allocated</li> <li>give statistics on allocated memory</li> <li>detect memory leaks by comparing snapshots</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Memory Management]]></summary></entry><entry><title type="html">Python Virtual Environments</title><link href="https://benwzj.github.io/blog/2024/py-venv/" rel="alternate" type="text/html" title="Python Virtual Environments"/><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-venv</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-venv/"><![CDATA[<h2 id="concept-of-virtual-environments">Concept of virtual environments</h2> <h3 id="what-is-virtual-environments">What is Virtual environments</h3> <p>A virtual environment is created on top of an existing Python installation, known as the virtual environment’s “base” Python, and may optionally be isolated from the packages in the base environment, so only those explicitly installed in the virtual environment are available.</p> <ul> <li> <p>Any time you’re working on a Python project that uses external dependencies that you’re installing with pip, it’s best to first create a virtual environment.</p> </li> <li> <p>a Python virtual environment is a folder structure that gives you everything you need to run a lightweight yet isolated Python environment.</p> </li> </ul> <h3 id="why">Why</h3> <ul> <li>Main purpose of virtual environment is for dependency management.</li> <li>For example If you install two different versions of the same package into your global Python environment, the second installation overwrites the first one.</li> <li>If using virtual environments, you can use different versions of the same package.</li> <li>Avoid system pollution. Imagine installing all third-party package in your global Python, that is too much.</li> </ul> <h3 id="how-to-use">How to use</h3> <ul> <li>After creation, you can activate it, and Install Packages Into It.</li> <li>At this point, as long as you don’t close your terminal, every Python package that you’ll install will end up in this isolated environment instead of your global Python site-packages.</li> <li>That means you can now work on your Python project without worrying about dependency conflicts.</li> <li>Once you’re done working with this virtual environment, you can deactivate it. After executing the deactivate command, your command prompt returns to normal.</li> </ul> <h2 id="venv-moudel">venv moudel</h2> <ul> <li>You can use Python’s venv module to create and manage separate virtual environments for your Python projects.</li> <li>This lightweight “virtual environments” go with their own independent set of Python packages installed in their site directories.</li> </ul> <h3 id="creating-virtual-environments">Creating virtual environments</h3> <p>Creation of virtual environments is done by executing the command venv: python3 -m venv /path/to/new/virtual/environment</p> <ul> <li>Running this command creates the target directory (creating any parent directories that don’t exist already) and places a pyvenv.cfg file in it with a home key pointing to the Python installation from which the command was run (a common name for the target directory is .venv).</li> </ul> <h3 id="how-venvs-work">How venvs work</h3> <ul> <li> <p>When a Python interpreter is running from a virtual environment, sys.prefix and sys.exec_prefix point to the directories of the virtual environment, whereas sys.base_prefix and sys.base_exec_prefix point to those of the base Python used to create the environment.</p> </li> <li> <p>It is sufficient to check sys.prefix == sys.base_prefix to determine if the current interpreter is running from a virtual environment.</p> </li> <li>You can source .venv/bin/activate activate virtual environment. It will put (.venv) in front of the pwd.</li> <li> <p>You can deactivate a virtual environment by typing deactivate in your shell</p> </li> <li>To assure that the scripts you want to run use the Python interpreter within your virtual environment, venv modifies the PYTHONPATH environment variable that you can access using sys.path.</li> <li>It Changes Your Shell PATH Variable on Activation</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Concept of virtual environments]]></summary></entry><entry><title type="html">Regular Expression (RE)</title><link href="https://benwzj.github.io/blog/2024/regular-expression/" rel="alternate" type="text/html" title="Regular Expression (RE)"/><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/regular-expression</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/regular-expression/"><![CDATA[<h2 id="what-is-re">What is RE</h2> <p>A regular expression (shortened as RE or regex or regexp) is essentially a tiny, highly specialized programming language. It is a sequence of characters that specifies a match pattern in text. Usually such patterns are used by string-searching algorithms for “find” or “find and replace” operations on strings, or for input validation.</p> <p>The concept of regular expressions began in the 1950s, when an American mathematician formalized the concept of a regular language. They came into common use with Unix text-processing utilities. Different syntaxes for writing regular expressions have existed since the 1980s, one being the POSIX standard and another, widely used, being the <strong>Perl syntax</strong>.</p> <p>Regular expressions are supported in many programming languages, including Pythong and JavaScript.</p> <h3 id="why-need-re">Why need RE</h3> <p>Regular expressions are particularly useful for defining filters! Regular expressions are used in search engines, in search and replace dialogs of word processors and text editors, in text processing utilities and in lexical analysis.</p> <h2 id="re-in-javascript">RE in JavaScript</h2> <p>In JavaScript, regular expressions are objects.</p> <h3 id="javascript-regexp-object">JavaScript RegExp Object</h3> <p>JavaScript use RegExp object to implement Regular Expression. There are some String methods which support regExp. But all the actual implementations come from corresponsed method of RegExp.</p> <h4 id="create-a-regexp-object-in-two-ways">create a RegExp Object in two ways:</h4> <ol> <li>Using a regular expression literal: <code class="language-plaintext highlighter-rouge">let re = /ab+c/;</code></li> <li>Or calling the constructor function: <code class="language-plaintext highlighter-rouge">let re = new RegExp('ab+c');</code></li> </ol> <h4 id="instance-property---lastindex">Instance property - lastIndex</h4> <p>lastIndex is a read/write integer property of RegExp instances that specifies the index at which to start the next match.</p> <p>Note that lastIndex is not a property of the RegExp prototype but is instead only exposed from RegExp instances.</p> <h4 id="methods">Methods</h4> <p>test() and exec()</p> <h3 id="regexp-related-methods">RegExp related Methods</h3> <h4 id="regexp-method---test">RegExp Method - test()</h4> <p>The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello world!</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="sr">/^hello/</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div> <h4 id="regexp-method---exec">RegExp Method - exec()</h4> <p>The <code class="language-plaintext highlighter-rouge">exec()</code> method executes a search for a match in a string. Returns a result array, or null.</p> <ul> <li>JavaScript RegExp objects are stateful when they have the global or sticky flags set. They store a lastIndex from the previous match. Using this internally, exec() can be used to iterate over multiple matches in a string of text (with capture groups)</li> <li>If the match succeeds, the exec() method returns an array (with extra properties index, input, and if the d flag is set, indices;) and updates the lastIndex property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.</li> <li>If your regular expression uses the “g” flag, you can use the exec() method multiple times to find successive matches in the same string. (Using string.matchAll() looks easier)</li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myRe</span> <span class="o">=</span> <span class="sr">/ab*/g</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abbcdefabh</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myArray</span><span class="p">;</span>
<span class="k">while </span><span class="p">((</span><span class="nx">myArray</span> <span class="o">=</span> <span class="nx">myRe</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">str</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Found </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">myArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">. </span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">msg</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">Next match starts at </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">myRe</span><span class="p">.</span><span class="nx">lastIndex</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//Found abb. Next match starts at 3</span>
<span class="c1">//Found ab. Next match starts at 9</span>
</code></pre></div></div> <h4 id="string-method---match---matchall">String method - match() - matchAll()</h4> <h4 id="match">match()</h4> <ul> <li>The match() method retrieves an array containing matchings in the string against a regular expression.</li> <li>Return null if no matches are found.</li> <li>Return an Array whose contents depend on the presence or absence of the global (g) flag. <ul> <li>If the g flag is used, all results matching the complete regular expression will be returned, but capturing groups will not. If you want to obtain capture groups and the global flag is set, you need to use RegExp.exec() or String.prototype.matchAll() instead.</li> <li>If the g flag is NOT used, only the first complete match and its related capturing groups are returned. In this case, the returned item will have additional properties, like group, index, input.</li> </ul> </li> </ul> <p>(with no g flag, str.match() return the same result as RegExp.exec().)</p> <ul> <li>The implementation of <code class="language-plaintext highlighter-rouge">String.prototype.match</code> comes from <code class="language-plaintext highlighter-rouge">RegExp.prototype[@@match]</code>.</li> </ul> <h4 id="matchall">matchAll()</h4> <ul> <li>The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups.</li> <li>The actual implementation comes from <code class="language-plaintext highlighter-rouge">RegExp.prototype[@@matchAll]</code>.</li> </ul> <h4 id="string-method---replace---replaceall">String method - replace() - replaceAll()</h4> <p>replace() The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.</p> <ul> <li>The original string is left unchanged.</li> <li>The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match.</li> <li>If pattern is a string, only the first occurrence will be replaced.</li> <li>If pattern is RegExp:</li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">re</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(\w</span><span class="sr">+</span><span class="se">)\s(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">/</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John Smith</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">newstr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="nx">re</span><span class="p">,</span> <span class="dl">'</span><span class="s1">$2, $1</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">newstr</span><span class="p">);</span>  <span class="c1">// Smith, John</span>
</code></pre></div></div> <ul> <li>If a function as the second parameter. the function will be invoked after the match has been performed. The function’s result (return value) will be used as the replacement string. The arguments to the function are as follows: <code class="language-plaintext highlighter-rouge">match, p1, p2.., offset, string, groups</code>.</li> </ul> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">replacer</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// p1 is non-digits, p2 digits, and p3 non-alphanumerics</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">].</span><span class="nf">join</span><span class="p">(</span><span class="dl">'</span><span class="s1"> - </span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">newString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abc12345#$*%</span><span class="dl">'</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">([^\d]</span><span class="sr">*</span><span class="se">)(\d</span><span class="sr">*</span><span class="se">)([^\w]</span><span class="sr">*</span><span class="se">)</span><span class="sr">/</span><span class="p">,</span> <span class="nx">replacer</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">newString</span><span class="p">);</span>  <span class="c1">// abc - 12345 - #$*%</span>
</code></pre></div></div> <h4 id="replaceall">replaceAll()</h4> <p>The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.</p> <h4 id="string-method---search">String method - search()</h4> <p>The search() method executes a search for a match between a regular expression and this String object. Return the index of the first match between the regular expression and the given string, or -1 if no match was found.</p> <h4 id="string-method---split">String method - split()</h4> <p>The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.</p> <h3 id="regular-expression-pattern">Regular expression pattern</h3> <h4 id="flag">Flag</h4> <p><strong>Sticky flag ‘y’</strong>: The “y” flag indicates that it matches only from the exact index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later or earlier indexes). A regular expression defined as both sticky and global ignores the global flag.</p> <p><strong>‘d’ flag</strong> Generate indices for substring matches. The “d” flag indicates that the result of a regular expression match should contain the start and end indices of the substrings of each capture group.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">str1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">foo bar foo</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">regex1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegExp</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">gd</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">regex1</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">str1</span><span class="p">).</span><span class="nx">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// Output: Array [0, 3]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">regex1</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">str1</span><span class="p">).</span><span class="nx">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// Output: Array [8, 11]</span>

<span class="err">‘</span><span class="nx">d</span><span class="err">’</span> <span class="nx">flag</span> <span class="nx">equal</span> <span class="nx">to</span> <span class="nb">RegExp</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasIndices</span>
</code></pre></div></div> <p><strong>‘u’ flag</strong> <code class="language-plaintext highlighter-rouge">u</code> flag indicates a string must be considered as a series of Unicode code points. For <code class="language-plaintext highlighter-rouge">\p</code> or <code class="language-plaintext highlighter-rouge">\u{hhhh}</code> to work, a regular expression must use the u flag.</p> <p><strong>‘s’ flag</strong> ‘.’ matches any single character except line terminators: \n, \r, \u2028 or \u2029. ES2018 added the s “dotAll” flag, which allows the dot to also match line terminators. Means that, dot will match all single character when using ‘s’ flag.</p> <h4 id="charactar-classes">Charactar classes</h4> <p>Character classes, [], distinguish kinds of characters such as, for example, distinguishing between letters and digits.</p> <p><code class="language-plaintext highlighter-rouge">[abcd], [0-9], [-_.]</code>: A character class. Find all the lowcase letters and put them in an Array:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">The quick mps..</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">[</span><span class="sr">a-z</span><span class="se">]</span><span class="sr">/g</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="nx">regex</span><span class="p">);</span> <span class="c1">//Array ["h", "e", "q", "u", "i", "c", "k", "m", "p", "s"]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[^abcd]</code>: it matches anything that is not enclosed in the brackets.</p> <p><code class="language-plaintext highlighter-rouge">.</code> : Has one of the following meanings:</p> <ol> <li>Matches any single character except line terminators: \n, \r, \u2028 or \u2029. For example, /.y/ matches “my” and “ay”, but not “yes”, in “yes make my day”.</li> <li>Inside a character class, [.], the dot loses its special meaning and matches a literal dot.</li> </ol> <p><code class="language-plaintext highlighter-rouge">\d</code> Matches any digit (Arabic numeral). Equivalent to [0-9]. <code class="language-plaintext highlighter-rouge">\D</code> : Equivalent to [^0-9].</p> <p><code class="language-plaintext highlighter-rouge">\w</code> Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to <code class="language-plaintext highlighter-rouge">[A-Za-z0-9_]</code> <code class="language-plaintext highlighter-rouge">[\w-]</code> is the same as <code class="language-plaintext highlighter-rouge">[A-Za-z0-9_-]</code> <code class="language-plaintext highlighter-rouge">\W</code> : Equivalent to <code class="language-plaintext highlighter-rouge">[^A-Za-z0-9_]</code>, opposite to <code class="language-plaintext highlighter-rouge">/w</code></p> <p><code class="language-plaintext highlighter-rouge">\s</code> Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to <code class="language-plaintext highlighter-rouge">[ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]</code>. <code class="language-plaintext highlighter-rouge">\S</code> : opposite to <code class="language-plaintext highlighter-rouge">/s</code></p> <p><code class="language-plaintext highlighter-rouge">\xhh</code> : Matches the character with the code hh (two hexadecimal digits).</p> <p><code class="language-plaintext highlighter-rouge">\uhhhh</code> : Matches a UTF-16 code-unit with the value hhhh (four hexadecimal digits).</p> <p><code class="language-plaintext highlighter-rouge">\u{hhhh}</code> or <code class="language-plaintext highlighter-rouge">\u{hhhhh}</code> : (Only when the u flag is set.) Matches the character with the Unicode value U+hhhh or U+hhhhh (hexadecimal digits).</p> <p><code class="language-plaintext highlighter-rouge">\</code> : Indicates that the following character should be treated specially, or “escaped”.</p> <p><code class="language-plaintext highlighter-rouge">x|y</code> : Disjunction: Matches either “x” or “y”.</p> <h4 id="unicode-property-escapes">Unicode property escapes</h4> <p><code class="language-plaintext highlighter-rouge">\p{UnicodeProperty}</code>, <code class="language-plaintext highlighter-rouge">\P{UnicodeProperty}</code></p> <p>Unicode property escapes RE allows for matching characters based on their Unicode properties. To match, for example, emoji characters, or Japanese katakana characters, or Chinese/Japanese Han/Kanji characters, punctuations, letters (even letters from specific languages or scripts), etc.</p> <h5 id="what-is-unicode-property">What is Unicode property?</h5> <p>A character is described by several properties which are either binary (“boolean-like”) or non-binary.</p> <p>Some Unicode properties encompasses many more characters than some character classes (such as \w which matches only latin letters, a to z) but the latter is better supported among browsers. The Unicode Standard assigns various properties to each Unicode character and code point.</p> <p>The properties can be used to handle characters (code points) in processes, like in line-breaking, script direction right-to-left or applying controls. Some “character properties” are also defined for code points that have no character assigned and code points that are labeled like <code class="language-plaintext highlighter-rouge">"&lt;not a character&gt;"</code>.</p> <p>Properties are displayed in the following order: <code class="language-plaintext highlighter-rouge">[code];[name];[gc];[cc];[bc];[decomposition];;;[nv];[bm];[alias];;;;</code></p> <h4 id="boundary-type-assertions">Boundary-type Assertions</h4> <p><code class="language-plaintext highlighter-rouge">^</code> : Matches the beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, /^A/ does not match the “A” in “an A”, but does match the first “A” in “An A”.</p> <p><code class="language-plaintext highlighter-rouge">$</code> : Matches the end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, /t$/ does not match the “t” in “eater”, but does match it in “eat”.</p> <p><code class="language-plaintext highlighter-rouge">\b</code> : Matches a word boundary. Indicate the beginnings and endings of lines and words. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space.</p> <p>Examples can help to understand this assertion:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/\bm/</code> matches the “m” in “moon”.</li> <li><code class="language-plaintext highlighter-rouge">/oo\b/</code> does not match the “oo” in “moon”, because “oo” is followed by “n” which is a word character.</li> <li><code class="language-plaintext highlighter-rouge">/oon\b/</code> matches the “oon” in “moon”, because “oon” is the end of the string, thus not followed by a word character.</li> <li><code class="language-plaintext highlighter-rouge">/\w\b\w/</code> will never match anything, because a word character can never be followed by both a non-word and a word character.</li> <li><code class="language-plaintext highlighter-rouge">/\b\d{4}\b/g</code>, the first <code class="language-plaintext highlighter-rouge">\b</code> means start matching at the beginning of a word, the second <code class="language-plaintext highlighter-rouge">\b</code> means end matching at the end of a word.</li> </ul> <p><code class="language-plaintext highlighter-rouge">\B</code> : Matches a non-word boundary. This is a position where the previous and next character are of the same type: Either both must be words, or both must be non-words, for example between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match. For example, /\Bon/ matches “on” in “at noon”, and /ye\B/ matches “ye” in “possibly yesterday”.</p> <h4 id="look-ahead-look-behind-assertion">Look-ahead Look-behind assertion</h4> <p><code class="language-plaintext highlighter-rouge">x(?=y)</code>: Lookahead assertion, Matches “x” only if “x” is followed by “y”.</p> <p><code class="language-plaintext highlighter-rouge">x(?!y)</code>: Negative lookahead assertion, Matches “x” only if “x” is not followed by “y”.</p> <p><code class="language-plaintext highlighter-rouge">(?&lt;=y)x</code>: Lookbehind assertion, Matches “x” only if “x” is preceded by “y”.</p> <p><code class="language-plaintext highlighter-rouge">(?&lt;!y)x</code>: Negative lookbehind assertion, Matches “x” only if “x” is not preceded by “y”.</p> <h4 id="groups-and-backreferences">Groups and backreferences</h4> <p>Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.</p> <p><code class="language-plaintext highlighter-rouge">(x)</code>: Capturing group: Matches x and remembers the match. For example, <code class="language-plaintext highlighter-rouge">/(foo)/</code> matches and remembers “foo” in “foo bar”.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">personList</span> <span class="o">=</span> <span class="s2">`First_Name: John, Last_Name: Doe
First_Name: Jane, Last_Name: Smith`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">regexpNames</span> <span class="o">=</span>  <span class="sr">/First_Name: </span><span class="se">(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">, Last_Name: </span><span class="se">(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">/mg</span><span class="p">;</span>
<span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">match</span> <span class="k">of</span> <span class="nx">personList</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regexpNames</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span><span class="s2"> </span><span class="p">${</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Hello John Doe</span><span class="dl">"</span>
<span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Hello Jane Smith</span><span class="dl">"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">matchAll ()</code> method return capturing groups information and store in the returned array. <code class="language-plaintext highlighter-rouge">match[0]</code> store the matched text. match[1] store the submatched text 1 which refer to the first parentheses.</p> <p>Why need capturing group? provide sub-matched information.</p> <p>You can even name a capturing Group <code class="language-plaintext highlighter-rouge">(?&lt;Name&gt;x)</code>: Name-capturing group</p> <p>You can match and does not remember the match <code class="language-plaintext highlighter-rouge">(?:x)</code>: Non-capturing group</p> <p>back reference <code class="language-plaintext highlighter-rouge">\n</code> n, positive number. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, <code class="language-plaintext highlighter-rouge">/apple(,)\sorange\1/</code> matches “apple, orange,” in “apple, orange, cherry, peach”.</p> <p><code class="language-plaintext highlighter-rouge">\k&lt;Name&gt;</code> A back reference to the last substring matching the Named capture group specified by <code class="language-plaintext highlighter-rouge">&lt;Name&gt;</code>.</p> <h4 id="quantifiers-repetitions">Quantifiers (Repetitions)</h4> <ul> <li>following ‘x’, just refer to one letter</li> <li>Repetitions such as *, + are greedy;</li> </ul> <p><code class="language-plaintext highlighter-rouge">x+</code>: Matches the preceding item “x” 1 or more times. Equivalent to {1,}. For example, /a+/ matches the “a” in “candy” and all the “a”’s in “caaaaaaandy”.</p> <p><code class="language-plaintext highlighter-rouge">x*</code>: Matches the preceding item “x” 0 or more times. Equivalent to {0,}. For example, /bo*/ matches “boooo” in “A ghost booooed” and “b” in “A bird warbled”, but nothing in “A goat grunted”.</p> <p><code class="language-plaintext highlighter-rouge">x?</code>: Matches the preceding item “x” 0 or 1 times. Equivalent to {0,1}. For example, /e?le?/ matches the “el” in “angel” and the “le” in “angle.” If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy. (quantifiers are always greedy by default)</p> <p><code class="language-plaintext highlighter-rouge">?</code> following quantifiers example:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">regex1</span> <span class="o">=</span> <span class="sr">/&lt;.*&gt;/</span>
<span class="kd">const</span> <span class="nx">str1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">some &lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt; thing</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str1</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="nx">regex1</span><span class="p">))</span> <span class="c1">// &gt; Array ["&lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt;"]</span>
<span class="kd">const</span> <span class="nx">regex2</span> <span class="o">=</span> <span class="sr">/&lt;.*</span><span class="se">?</span><span class="sr">&gt;/</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">str1</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="nx">regex2</span><span class="p">))</span> <span class="c1">// Array ["&lt;foo&gt;"]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">x{n}</code>: matches exactly “n” occurrences of the preceding item “x”. For example, /a{2}/ doesn’t match the “a” in “candy”, but it matches all of the “a”’s in “caandy”, and the first two “a”’s in “caaandy”.</p> <p><code class="language-plaintext highlighter-rouge">x{n,}</code>: matches at least “n” occurrences of the preceding item “x”. For example, /a{2,}/ doesn’t match the “a” in “candy”, but matches all of the a’s in “caandy” and in “caaaaaaandy”.</p> <p><code class="language-plaintext highlighter-rouge">x{n,m}</code>: m &gt; n, matches at least “n” and at most “m” occurrences of the preceding item “x”.</p> <h3 id="questions">Questions</h3> <ul> <li>Why use string methods to implement RegExp function? Why not use RegExp object methods to complete all function?</li> <li>Why it won’t work for \p (Unicode property escape) without ‘u’ flag?</li> </ul> <h4 id="uhhhh-vs-uhhhh"><code class="language-plaintext highlighter-rouge">\uhhhh vs. \u{hhhh}</code></h4> <p><code class="language-plaintext highlighter-rouge">\uhhhh</code> : hhhh is UTF-16 code-unit value. It works even without u flag. <code class="language-plaintext highlighter-rouge">\u{hhhh}</code> or <code class="language-plaintext highlighter-rouge">\u{hhhhh}</code> : (Only when the u flag is set.) U+hhhh or U+hhhhh is Unicode value. <code class="language-plaintext highlighter-rouge">u</code> flag indicates a string must be considered as a series of Unicode code points.</p> <h2 id="re-in-python">RE in Python</h2> <h3 id="re-in-python-overview">RE in Python Overview</h3> <p>Regular expressions are made available through the <code class="language-plaintext highlighter-rouge">re</code> module.</p> <ul> <li>Match patterns is the core of RE.</li> <li>Python RE patterns follows perl syntax. it is very similar with JavaScript.</li> <li>RE patterns are compiled into a series of bytecodes which are then executed by a matching engine written in C.</li> <li>REs aren’t part of the core Python language.</li> <li>No special syntax was created for expressing RE in Python.</li> </ul> <h4 id="unicode-string-and-bytes">Unicode string and bytes.</h4> <p>Both patterns and strings to be searched can be Unicode strings (str) as well as 8-bit strings (bytes). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</p> <h4 id="in-many-cases-using-string-methods-will-be-better-choice-than-re">In many cases, using String methods will be better choice than re.</h4> <p>Strings have several methods for performing operations with fixed strings and they’re usually much faster, because the implementation is a single small C loop that’s been optimized for the purpose, instead of the large, more generalized regular expression engine.</p> <ul> <li>For Replacing a single fixed string with another one, consider the string <code class="language-plaintext highlighter-rouge">replace()</code> method first.</li> <li>Another common task is deleting every occurrence of a single character from a string or replacing it with another single character. Try string <code class="language-plaintext highlighter-rouge">translate()</code> first.</li> </ul> <h3 id="how-re-works-in-python">How RE works in Python</h3> <p>The <code class="language-plaintext highlighter-rouge">re</code> module provides an interface to the regular expression engine, allowing you to compile REs into objects and then perform matches with them. Pattern objects have methods for various operations such as searching for pattern matches or performing string substitutions.</p> <h3 id="classic-way-to-use-re">Classic way to use RE</h3> <h4 id="firstly-compiling-re-to-pattern-object">Firstly, Compiling RE to Pattern object</h4> <p>Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sh">'</span><span class="s">ab*</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>RE is handled as string in Python and is passed to <code class="language-plaintext highlighter-rouge">re.complie()</code>. No special syntax was created for expressing RE in Python. ( There are special syntax for RE in JavaScript, like <code class="language-plaintext highlighter-rouge">/[a-z]/g</code> ) This keep Python simpler, but has one disadvantage: backslash plague! So it is recommend to use raw string r’rawstring’.</p> <h4 id="secondly-use-pattern-objects-to-perform-matches">Secondly, Use Pattern objects to Perform Matches</h4> <h3 id="using-module-level-functions">Using module-level Functions</h3> <ul> <li>You don’t have to create a pattern object and call its methods; The re module also provides top-level functions called match(), search(), findall(), sub(), and so forth.</li> <li>Under the hood, these functions simply create a pattern object for you and call the appropriate method on it. They also store the compiled object in a cache, so future calls using the same RE won’t need to parse the pattern again and again.</li> <li>Should you use these module-level functions, or should you get the pattern and call its methods yourself? If you’re accessing a regex within a loop, pre-compiling it will save a few function calls. Outside of loops, there’s not much difference thanks to the internal cache.</li> </ul> <h3 id="pattern-object">Pattern Object</h3> <h4 id="match-1">match()</h4> <p>Return match object. Determine if the RE matches Just at the beginning of the string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = p.match('tempo')
&gt;&gt;&gt; m
&lt;re.Match object; span=(0, 5), match='tempo'&gt;
</code></pre></div></div> <h4 id="search">search()</h4> <p>Return None or match object. Scan through a string, looking for any location where this RE matches.</p> <h4 id="findall">findall()</h4> <p>Return a list of strings or a list of tuples Find all substrings where the RE matches, and returns them as a list. Return all non-overlapping matches of pattern in string, as a list of strings or tuples</p> <h4 id="finditer">finditer()</h4> <p>Find all substrings where the RE matches, and returns them as an iterator.</p> <h4 id="split">split()</h4> <p>String split() only supports splitting by whitespace or by a fixed string. But re.split() provides much more generality in the delimiters.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p.split('This is a test, short and sweet, of split().')
['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', '']
</code></pre></div></div> <p>If capturing parentheses are used in the RE, then the capturing group values are also returned as part of the list. Compare the following calls:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p2 = re.compile(r'(\W+)')
&gt;&gt;&gt; p.split('This... is a test.')
['This', 'is', 'a', 'test', '']
&gt;&gt;&gt; p2.split('This... is a test.')
['This', '... ', 'is', ' ', 'a', ' ', 'test', '.', '']
</code></pre></div></div> <h4 id="subreplacement-string-count0">sub(replacement, string[, count=0])</h4> <p>Returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile('(blue|white|red)')
&gt;&gt;&gt; p.sub('colour', 'blue socks and red shoes')
'colour socks and colour shoes'
</code></pre></div></div> <p>replacement can be a function:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; def repl(m):
...     inner_word = list(m.group(2))
...     random.shuffle(inner_word)
...     return m.group(1) + "".join(inner_word) + m.group(3)
&gt;&gt;&gt; text = "Professor Abdolmalek, please report your absences promptly."
&gt;&gt;&gt; re.sub(r"(\w)(\w+)(\w)", repl, text)
'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'
</code></pre></div></div> <h3 id="match-object">Match object</h3> <p>match(), search() return match object. Match object methods and attributes:</p> <h4 id="groupgroup1-">group(([group1, …]))</h4> <p>Returns one or more subgroups of the match.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
&gt;&gt;&gt; m.group(0)       # The entire match
'Isaac Newton'
&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.
'Isaac'
&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.
'Newton'
&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.
('Isaac', 'Newton')
</code></pre></div></div> <h4 id="groupsdefaultnone">groups(default=None)</h4> <p>Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = re.match(r"(\d+)\.(\d+)", "24.1632")
&gt;&gt;&gt; m.groups()
('24', '1632')
</code></pre></div></div> <h4 id="start">start()</h4> <p>Return the starting position of the match</p> <h4 id="end">end()</h4> <p>Return the ending position of the match</p> <h4 id="span">span()</h4> <p>Return a tuple containing the (start, end) positions of the match</p> <h3 id="re-pattern-syntax">RE Pattern Syntax</h3> <p>metacharacters: <code class="language-plaintext highlighter-rouge">. ^ $ * + ? { } [ ] \ | ( )</code></p> <h4 id="compilation-flag">Compilation Flag</h4> <ul> <li>ASCII, A: Makes several escapes like \w, \b, \s and \d match only on ASCII characters with the respective property. Corresponds to the inline flag (?a)</li> <li>DOTALL, S: Make . match any character, including newlines.</li> <li>IGNORECASE, I: Do case-insensitive matches. (?i)</li> <li>LOCALE, L: Do a locale-aware match. (not recommend in python3, because of using unicode by default)</li> <li>MULTILINE, M: Multi-line matching, affecting ^ and $.</li> <li>VERBOSE, X (for ‘extended’): Enable verbose REs, which can be organized more cleanly and understandably. You can even use comments within a RE. Corresponds to the inline flag (?x)</li> </ul> <h4 id="character-class">Character class</h4> <ul> <li><code class="language-plaintext highlighter-rouge">[</code> and <code class="language-plaintext highlighter-rouge">]</code>. They’re used for specifying a character class.</li> <li>Metacharacters (except <code class="language-plaintext highlighter-rouge">\</code>) are not active inside classes. For example <code class="language-plaintext highlighter-rouge">[$]</code> can match $.</li> <li>You can match the characters not listed within the class by complementing the set. This is indicated by including a ‘<code class="language-plaintext highlighter-rouge">^</code>’ as the first character of the class.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\d  Matches any decimal digit; this is equivalent to the class [0-9].
\D  [^0-9].
\s   Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S  [^ \t\n\r\f\v].
\w  Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W  [^a-zA-Z0-9_].
</code></pre></div></div> <h4 id="backslash-">backslash <code class="language-plaintext highlighter-rouge">\</code></h4> <p>Perhaps the most important metacharacter is the backslash, <code class="language-plaintext highlighter-rouge">\</code>.</p> <ul> <li>You can precede metacharacters with a backslash to remove their special meaning.</li> <li>Some of the special sequences beginning with ‘' represent predefined sets of characters.</li> </ul> <p><code class="language-plaintext highlighter-rouge">\w</code> matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class <code class="language-plaintext highlighter-rouge">[a-zA-Z0-9_]</code>. If the regex pattern is a string, <code class="language-plaintext highlighter-rouge">\w</code> will match all the characters marked as letters in the Unicode database provided by the unicodedata module.</p> <h4 id="repeating-things">Repeating Things</h4> <p>Repetitions such as * are greedy; (This part is similar with JavaScript)</p> <p>Do <code class="language-plaintext highlighter-rouge">*?</code> work in Python? It works!</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; s = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;'
&gt;&gt;&gt; print(re.match('&lt;.*&gt;', s).group())
&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;
&gt;&gt;&gt; print(re.match('&lt;.*?&gt;', s).group())
&lt;html&gt;
</code></pre></div></div> <h4 id="assertion">Assertion</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Alternation; 
Crow|Servo will match either 'Crow' or 'Servo', not 'Cro', a 'w' or an 'S', and 'ervo'.
^ Matches at the beginning of lines. 
$ Matches at the end of a line,
\A Matches only at the start of the string. When not in MULTILINE mode, \A and ^ are effectively the same.
\Z Matches only at the end of the string.
\b Word boundary.
\B Another zero-width assertion, this is the opposite of \b
</code></pre></div></div> <h4 id="grouping">Grouping</h4> <p>Because Frequently you need to obtain more information than just whether the RE matched or not. you need Grouping.</p> <ul> <li>Groups are marked by the ‘(‘, ‘)’</li> <li>Match object methods all have group 0 as their default</li> <li>Example:</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile('(a(b)c)d')
&gt;&gt;&gt; m = p.match('abcd')
&gt;&gt;&gt; m.group(0)
'abcd'
&gt;&gt;&gt; m.group(1)
'abc'
&gt;&gt;&gt; m.group(2)
'b'
&gt;&gt;&gt; m.group(2,1,2)
('b', 'abc', 'b')
</code></pre></div></div> <ul> <li>The groups() method returns a tuple containing the strings for all the subgroups, from 1 up to however many there are.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m.groups()
('abc', 'b')
</code></pre></div></div> <ul> <li>Repetition will repeat the whole group.:</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile('(ab)*')
&gt;&gt;&gt; print(p.match('ababababab').span())
(0, 10)
</code></pre></div></div> <ul> <li>Backreferences in a pattern allow you to specify that the contents of an earlier capturing group must also be found at the current location in the string.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\b(\w+)\s+\1\b')
&gt;&gt;&gt; p.search('Paris in the the spring').group()
'the the'
</code></pre></div></div> <p>Backreferences are very useful when performing string substitutions.</p> <h4 id="non-capturing-groups">Non-capturing Groups</h4> <p>Sometimes you’ll want to use a group to denote a part of a regular expression, but aren’t interested in retrieving the group’s contents. You can make this fact explicit by using a non-capturing group: (?:…), where you can replace the … with any other regular expression.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; m = re.match("([abc])+", "abc")
&gt;&gt;&gt; m.groups()
('c',)
&gt;&gt;&gt; m = re.match("(?:[abc])+", "abc")
&gt;&gt;&gt; m.groups()
()
</code></pre></div></div> <p>Except for not retrieving the content, a non-capturing group behaves exactly the same as a capturing group.</p> <h4 id="named-groups">Named Groups</h4> <p>The syntax for a named group is one of the Python-specific extensions: <code class="language-plaintext highlighter-rouge">(?P&lt;name&gt;...)</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\b\w+\b)')
&gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' )
&gt;&gt;&gt; m.group('word')
'Lots'
&gt;&gt;&gt; m.group(1)
'Lots'
</code></pre></div></div> <p>It’s obviously much easier to retrieve group.</p> <p>backreferences can like this: <code class="language-plaintext highlighter-rouge">(?P=name)</code> indicates that the contents of the group called name should again be matched at the current point.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; p = re.compile(r'\b(?P&lt;word&gt;\w+)\s+(?P=word)\b')
&gt;&gt;&gt; p.search('Paris in the the spring').group()
'the the'
</code></pre></div></div> <h4 id="lookahead-assertions">Lookahead Assertions</h4> <p>(?=…) Positive lookahead assertion. (?!…) Negative lookahead assertion.</p> <p>For example, simple pattern to match a filename and split it apart into a base name and an extension, separated by a . In news.rc, news is the base name, and rc is the filename’s extension. The pattern to match this is quite simple: <code class="language-plaintext highlighter-rouge">.*[.].*$</code> Now, consider complicating the problem a bit; what if you want to match filenames where the extension is not bat or exe? <code class="language-plaintext highlighter-rouge">.*[.](?!bat$|exe$)[^.]*$</code></p> <h3 id="questions-1">Questions</h3> <ul> <li>JavaScript support <code class="language-plaintext highlighter-rouge">/g</code> flag, but Python don’t. How to search whole string? Python use findall() to search globally. search() just match once.</li> <li>JavaScript support <code class="language-plaintext highlighter-rouge">/u</code> flag, but Python don’t. How do Python implement unicode?</li> <li>Python support A, X flag, but JavaScript don’t.</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><category term="RE"/><summary type="html"><![CDATA[What is RE]]></summary></entry><entry><title type="html">Type in Python</title><link href="https://benwzj.github.io/blog/2024/py-type/" rel="alternate" type="text/html" title="Type in Python"/><published>2024-12-26T00:00:00+00:00</published><updated>2024-12-26T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/py-type</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/py-type/"><![CDATA[<ul> <li>Almost everything in Python is an object, with its properties and methods.</li> <li>JavaScript have primitive type concept. But Python don’t.</li> <li>Python is dynamic type language.</li> <li>Dynamic typing have it’s shortcoming.</li> <li>Python provide library to help type check.</li> <li>Must Clear Concepts that are related to type: <strong>Generic type</strong>, <strong>interface</strong>, <strong>ABC</strong>, <strong>type annotations</strong>.</li> </ul> <h2 id="classes-vs-types">Classes vs Types</h2> <h3 id="history">History</h3> <p>Once upon a time, Python had both types and classes. Types were built-in objects defined in C; classes were what you built when using a class statement. The two were named differently because you couldn’t mix these; classes could not extend types.</p> <p>This difference was artificial, a limitation in the language implementation. Starting with Python 2.2, the developers of Python have slowly moved towards unifying the two concepts, with the difference all but gone in Python 3. Built-in types are now also labelled classes, and you can extend them at will.</p> <h3 id="built-in-function-type">built-in function type()</h3> <h4 id="typeobj">type(obj)</h4> <p><code class="language-plaintext highlighter-rouge">type(obj)</code> built-in function can return the class of the obj.</p> <h4 id="typeclassname-superclasses-attributes_dict">type(classname, superclasses, attributes_dict)</h4> <p><code class="language-plaintext highlighter-rouge">type()</code> can be called with three parameters:</p> <ul> <li>If type is called with three arguments, it will return a new type object. This provides us with a dynamic form of the class statement.</li> <li><code class="language-plaintext highlighter-rouge">classname</code> is a string defining the class name and becomes the name attribute;</li> <li><code class="language-plaintext highlighter-rouge">superclasses</code> is a list or tuple with the superclasses of our class. This list or tuple will become the bases attribute;</li> <li><code class="language-plaintext highlighter-rouge">attributes_dict</code> is a dictionary, functioning as the namespace of our class. It contains the definitions for the class body and it becomes the dict attribute.</li> </ul> <h2 id="type-hints-pep-0483">Type Hints (pep-0483)</h2> <p>https://peps.python.org/pep-0483/ pep-0484</p> <h3 id="type-checkers">type checkers</h3> <p>type checker for Python is third library for now. e.g. Mypy. (PyCharm have type checker as well)</p> <p>It is important for the user to be able to define types in a form that can be understood by type checkers. The goal of this PEP 0483 is to propose such a systematic way of defining types for type annotations of variables and functions using PEP 3107 syntax.</p> <h3 id="gradual-typing">Gradual typing</h3> <ul> <li> <p>dynamic type language, like python, javascript, perl, etc. is very popular, Static type langage, like Java, C++, C#, C is very popular as well, The main reason is both of them have some good points and bad points. They can’t substitute each other.</p> </li> <li> <p>Gradual typing is a type system developed by Jeremy Siek and Walid Taha in 2006</p> </li> <li>Gradual typing allows parts of a program to be dynamically typed and other parts to be statically typed.</li> <li>The programmer controls which parts are which by either leaving out type annotations or by adding them in. Thus leverage desirable aspects of both dynamic and static typing.</li> </ul> <h3 id="subtype-what-is-subtype-relationships">Subtype? what is Subtype relationships?</h3> <p>A crucial notion for static type checker is the subtype relationship.</p> <h4 id="it-arises-from-the-question">It arises from the question:</h4> <p>If first_var has type first_type, and second_var has type second_type, is it safe to assign first_var = second_var? (It is safe when second_type is subtype of first_type)</p> <h4 id="a-strong-criterion-for-when-it-should-be-safe-is">A strong criterion for when it should be safe is:</h4> <ul> <li>every value from second_type is also in the set of values of first_type; and</li> <li>every function from first_type is also in the set of functions of second_type.</li> </ul> <p>By this definition:</p> <ul> <li>Every type is a subtype of itself.</li> <li>The set of values becomes smaller for subtype, while the set of functions becomes larger.</li> </ul> <p>#### Subtype concept Conclusion</p> <ul> <li>If B is subtype of A, then var_A = var_B is safe. </li> <li>The values of subtype will be smaller, but functions will be larger. - Every type is a subtype of itself.</li> <li>Int is subtype of real number.</li> <li>But List[int] is not a subtype of List[float]. Although list[int] value is set of list[float], but  appending a real number only works with List[float]</li> </ul> <h4 id="a-formal-example">A formal example:</h4> <p>Integers are subtype of real numbers. Indeed, every integer is of course also a real number, and integers support more operations, such as, e.g., bitwise shifts « and »</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lucky_number</span> <span class="o">=</span> <span class="mf">3.14</span>    <span class="c1"># type: float
</span><span class="n">lucky_number</span> <span class="o">=</span> <span class="mi">42</span>      <span class="c1"># Safe
</span><span class="n">lucky_number</span> <span class="o">*</span> <span class="mi">2</span>       <span class="c1"># This works
</span><span class="n">lucky_number</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>      <span class="c1"># Fails
</span>
<span class="n">unlucky_number</span> <span class="o">=</span> <span class="mi">13</span>    <span class="c1"># type: int
</span><span class="n">unlucky_number</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>    <span class="c1"># This works
</span><span class="n">unlucky_number</span> <span class="o">=</span> <span class="mf">2.72</span>  <span class="c1"># Unsafe
</span></code></pre></div></div> <p>#### Two widespread approaches to declare subtype information to type checker. In nominal subtyping, the type tree is based on the class tree. But this approach should be used under control of the type checker, because in Python one can override attributes in an incompatible way:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="sh">'</span><span class="s">42</span><span class="sh">'</span> <span class="c1"># type: str
</span><span class="k">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1"># should be marked as error by type checker
</span></code></pre></div></div> <p>In structural subtyping the subtype relation is deduced from the declared methods.</p> <p>#### is-consistent-with vs. is-subtype-of <code class="language-plaintext highlighter-rouge">is-consistent-with</code>, which is similar to <code class="language-plaintext highlighter-rouge">is-subtype-of</code>, except new type <code class="language-plaintext highlighter-rouge">Any</code>. </p> <p>The is-consistent-with relationship is defined by three rules:</p> <ul> <li>A type t1 is consistent with a type t2 if t1 is a subtype of t2. (But not the other way around.)</li> <li>Any is consistent with every type. (But Any is not a subtype of every type.)</li> <li>Every type is consistent with Any. (But every type is not a subtype of Any.)</li> </ul> <h3 id="types-vs-classes">Types vs. Classes</h3> <p>Class is a dynamic, runtime concept.</p> <h4 id="the-distinction-between-classes-and-types-the-following-general-rules-apply">the distinction between classes and types the following general rules apply:</h4> <ul> <li>No types defined below (i.e. Any, Union, etc.) can be instantiated, an attempt to do so will raise TypeError. (But non-abstract subclasses of Generic can be.)</li> <li>No types defined below can be subclassed, except for Generic and classes derived from it.</li> <li>All of these will raise TypeError if they appear in isinstance or issubclass (except for unparameterized generics).</li> </ul> <h4 id="types-appear-in-variable-and-function-type-annotations-can-be-constructed-from-building-blocks-described-below-and-are-used-by-static-type-checkers">types appear in variable and function type annotations, can be constructed from building blocks described below, and are used by static type checkers.</h4> <ul> <li>Any.</li> <li>Union[t1, t2, …].</li> <li>Optional[t1]</li> <li>Tuple[t1, t2, …, tn].</li> <li>Callable[[t1, t2, …, tn], tr]</li> <li>Intersection[t1, t2, … ]</li> </ul> <h2 id="generic-type">Generic type</h2> <h3 id="what-is-generic-programming">What is Generic programming</h3> <p>Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters.</p> <h3 id="why-generic">Why Generic</h3> <ul> <li>Stronger type checks at compile time.</li> <li>Enabling programmers to implement generic algorithms.</li> </ul> <h3 id="what-is-generic-type-in-python">What is Generic type in Python</h3> <ul> <li>Use generic type constructor to construct new types in a generic manner. It is common when a particular class or a function behaves in such a type generic manner.</li> <li>Using Union[t1, t2,…], Callable[[t1, t2, …, tn], tr] or Tuple[t1, t2, …, tn], etc. to construct new types.</li> <li>For example, Tuple can take concrete type float and make a concrete type Vector = Tuple[float, …], Such semantics is known as generic type constructor</li> <li>it is similar to semantics of functions, but a function takes a value and returns a value, while generic type constructor takes a type and “returns” a type.</li> </ul> <h4 id="generic-type-example1">Generic type Example1:</h4> <p>Container classes, such as list or dict, typically contain only values of a particular type. Therefore, a user might want to type annotate them as such:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">users</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># type: List[UserID]
</span><span class="n">users</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">UserID</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span> <span class="c1"># OK
</span><span class="n">users</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Some guy</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># Should be rejected by the type checker
</span>
<span class="n">examples</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># type: Dict[str, Any]
</span><span class="n">examples</span><span class="p">[</span><span class="sh">'</span><span class="s">first example</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span> <span class="c1"># OK
</span><span class="n">examples</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>   
</code></pre></div></div> <p>To allow type annotations in these situations, built-in containers and container abstract base classes are extended with type parameters, so that they behave as generic type constructors. Classes, that behave as generic type constructors are called generic types. Example:</p> <p>from typing import Iterable</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Task</span><span class="p">:</span>
    <span class="bp">...</span>
<span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">todo_list</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="n">Task</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>Here Iterable is a generic type that takes a concrete type Task and returns a concrete type Iterable[Task].</p> <h4 id="generic-function-example">Generic function example:</h4> <p>The following function can take two arguments of type int and return an int, or take two arguments of type float and return a float, etc.:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
<span class="nf">add</span><span class="p">(</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">12</span><span class="sh">'</span>
<span class="nf">add</span><span class="p">(</span><span class="mf">2.7</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">)</span> <span class="o">==</span> <span class="mf">6.2</span>
</code></pre></div></div> <p>Functions that behave in the type generic manner are called generic functions. Type annotations of generic functions are allowed by type variables. Their semantics with respect to generic types is somewhat similar to semantics of parameters in functions. But one does not assign concrete types to type variables, it is the task of a static type checker to find their possible values and warn the user if it cannot find. Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">take_first</span><span class="p">(</span><span class="n">seq</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">:</span> <span class="c1"># a generic function
</span>    <span class="k">return</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">accumulator</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># type: int
</span>
<span class="n">accumulator</span> <span class="o">+=</span> <span class="nf">take_first</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>   <span class="c1"># Safe, T deduced to be int
</span><span class="n">accumulator</span> <span class="o">+=</span> <span class="nf">take_first</span><span class="p">((</span><span class="mf">2.7</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">))</span>  <span class="c1"># Unsafe
</span></code></pre></div></div> <p>Type variables are used extensively in type annotations, also internal machinery of the type inference in type checkers is typically build on type variables</p> <h3 id="type-variables">Type variables</h3> <p><code class="language-plaintext highlighter-rouge">X = TypeVar('X')</code> declares a unique type variable. (TypeVar() is defined in typing.py)</p> <ul> <li>The name must match the variable name.</li> <li>By default, a type variable ranges over all possible types.</li> <li>type variables Example: (it work for PyCharm’s static type checker)</li> </ul> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TypeVar</span>
<span class="n">T</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_nothing</span><span class="p">(</span><span class="n">one_arg</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">other_arg</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="nf">do_nothing</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>               <span class="c1"># OK, T is int
</span><span class="nf">do_nothing</span><span class="p">(</span><span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">,</span> <span class="nc">UserID</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span>  <span class="c1"># also OK, T is object
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Y = TypeVar('Y', t1, t2, ...)</code>. Ditto, constrained to t1, etc. Behaves similar to <code class="language-plaintext highlighter-rouge">Union[t1, t2, ...]</code>.</p> <p>Function type annotation with a constrained type variable:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TypeVar</span>
<span class="n">AnyStr</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">AnyStr</span><span class="sh">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">longest</span><span class="p">(</span><span class="n">first</span><span class="p">:</span> <span class="n">AnyStr</span><span class="p">,</span> <span class="n">second</span><span class="p">:</span> <span class="n">AnyStr</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AnyStr</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">first</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">first</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">second</span><span class="p">)</span> <span class="k">else</span> <span class="n">second</span>

<span class="n">result</span> <span class="o">=</span> <span class="nf">longest</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># The inferred type for result is str
</span><span class="n">result1</span> <span class="o">=</span> <span class="nf">longest</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sa">b</span><span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># Fails static type check
</span></code></pre></div></div> <p>both arguments to <code class="language-plaintext highlighter-rouge">longest()</code> must have the same type (str or bytes)</p> <h3 id="defining-your-own-generic-types">Defining your own generic types</h3> <ul> <li>Users can declare their classes as generic types using the special building block Generic. The definition class MyGeneric(Generic[X, Y, …]): … defines a generic type MyGeneric over type variables X, etc.</li> <li>MyGeneric itself becomes parameterizable, e.g. MyGeneric[int, str, …] is a specific type with substitutions X -&gt; int, etc.</li> </ul> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Generic</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">TypeVar</span>
<span class="n">T</span> <span class="o">=</span> <span class="nc">TypeVar</span><span class="p">(</span><span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">CustomQueue</span><span class="p">(</span><span class="n">Generic</span><span class="p">[</span><span class="n">T</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">communicate</span><span class="p">(</span><span class="n">queue</span><span class="p">:</span> <span class="n">CustomQueue</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="bp">...</span>
</code></pre></div></div> <ul> <li>Classes that derive from generic types become generic.</li> <li>A class can subclass multiple generic types.</li> <li>However, classes derived from specific types returned by generics are not generic.</li> </ul> <p>Examples:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TodoList</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="n">Container</span><span class="p">[</span><span class="n">T</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">check_all</span><span class="p">(</span><span class="n">todo</span><span class="p">:</span> <span class="n">TodoList</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># TodoList is generic
</span>    <span class="bp">...</span>

<span class="k">class</span> <span class="nc">URLList</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">bytes</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">scrape_all</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">urls</span><span class="p">:</span> <span class="n">URLList</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bytes</span><span class="p">]</span>  <span class="c1"># URLList is not generic
</span>    <span class="bp">...</span>
</code></pre></div></div> <h3 id="covariance-and-contravariance-concepts">Covariance and Contravariance concepts</h3> <p>If t2 is a subtype of t1, then a generic type constructor GenType is called:</p> <ul> <li>Covariant, if GenType[t2] is a subtype of GenType[t1] for all such t1 and t2.</li> <li>Contravariant, if GenType[t1] is a subtype of GenType[t2] for all such t1 and t2.</li> <li>Invariant, if neither of the above is true.</li> </ul> <h3 id="predefined-generic-types-and-protocols-in-typingpy">Predefined generic types and Protocols in typing.py</h3> <p>Like:</p> <ul> <li>Any.</li> <li>Union[t1, t2, …].</li> <li>Optional[t1]</li> <li>Tuple[t1, t2, …, tn].</li> <li>Callable[[t1, t2, …, tn], tr]</li> <li>Intersection[t1, t2, … ]</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><summary type="html"><![CDATA[Almost everything in Python is an object, with its properties and methods. JavaScript have primitive type concept. But Python don’t. Python is dynamic type language. Dynamic typing have it’s shortcoming. Python provide library to help type check. Must Clear Concepts that are related to type: Generic type, interface, ABC, type annotations.]]></summary></entry><entry><title type="html">Functional Programming</title><link href="https://benwzj.github.io/blog/2024/functional-programming/" rel="alternate" type="text/html" title="Functional Programming"/><published>2024-12-25T00:00:00+00:00</published><updated>2024-12-25T00:00:00+00:00</updated><id>https://benwzj.github.io/blog/2024/functional-programming</id><content type="html" xml:base="https://benwzj.github.io/blog/2024/functional-programming/"><![CDATA[<h2 id="what-is-functional-programming">What is Functional Programming</h2> <p>Functional programming decomposes a problem into a set of functions. Ideally, functions only take inputs and produce outputs, and don’t have any internal state that affects the output produced for a given input.</p> <ul> <li>Well-known functional languages include the ML family (Standard ML, OCaml, and other variants) and Haskell.</li> <li>Like List and C++, Python is multi-paradigm language that support several different approaches. You can write programs or libraries that are largely procedural, object-oriented, or functional.</li> <li>In a large program, different sections might be written using different approaches; the GUI might be object-oriented while the processing logic is procedural or functional, for example.</li> <li>Functional style discourages functions with side effects that modify internal state or make other changes that aren’t visible in the function’s return value.</li> <li>Python won’t go to the extreme of avoiding all I/O or all assignments; instead, they’ll provide a functional-appearing interface but will use non-functional features internally. For example, the implementation of a function will still use assignments to local variables, but won’t modify global variables or have other side effects.</li> <li>Functional programming can be considered the opposite of object-oriented programming. But in Python you might combine the two approaches by writing functions that take and return instances representing objects in your application.</li> </ul> <h3 id="some-core-features">Some core features:</h3> <ul> <li>Input data flows through a set of functions. Each function operates on its input and produces some output.</li> <li>Functional programming tries to avoid mutable data types and state changes as much as possible.</li> <li>It works with the data that flow between functions.</li> <li>The use of recursion rather than loops or other structures as a primary flow control structure</li> <li>A focus on lists or arrays processing</li> <li>A focus on what is to be computed rather than on how to compute it</li> <li>The use of pure functions that avoid side effects</li> <li>The use of higher-order functions</li> </ul> <h3 id="why-should-you-avoid-objects-and-side-effects-in-functional-programming">Why should you avoid objects and side effects in Functional programming?</h3> <p>There are theoretical and practical advantages to the functional style: Formal provability. Modularity. Composability. Ease of debugging and testing.</p> <h2 id="iterator-iterable">Iterator, Iterable</h2> <ul> <li>Why iteration need two concepts: iterator and iterable? Because It can decouples the iteration algorithms from container data structures.</li> <li>Maybe we can say there are 3 concepts: iterator, not pure iterable, and pure iterable. iter(pure_iterable) return fresh iterator, iter(not_purt_iterable) return itself.</li> <li>List object is classic iterable, but not iterator.</li> <li>iterator is an important foundation for writing functional-style programs.</li> </ul> <h3 id="iterable-concept-official-document">Iterable concept (official document)</h3> <ul> <li>Any object that supports iter() and return iterator is said to be “iterable.”</li> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an<code class="language-plaintext highlighter-rouge"> __iter__()</code> method or with a <code class="language-plaintext highlighter-rouge">__getitem__()</code> method that implements sequence semantics are iterables.</li> <li>Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(), …).</li> </ul> <h4 id="iter">Iter()</h4> <ul> <li>When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object. This iterator is good for one pass over the set of values.</li> <li>When using iterables, it is usually not necessary to call iter() or deal with iterator objects yourself. The for statement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop.</li> </ul> <h3 id="iterator-concept">Iterator concept</h3> <ul> <li>An iterator object representing a stream of data. Repeated calls to the iterator’s <code class="language-plaintext highlighter-rouge">__next__()</code> method (or passing it to the built-in function next()) return successive items in the stream.</li> <li>Iterator just go forward, never backward.</li> <li>When no more data are available a StopIteration exception is raised instead.</li> <li>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: <ul> <li><code class="language-plaintext highlighter-rouge">iterator.__iter__()</code>,</li> <li><code class="language-plaintext highlighter-rouge">iterator.__next__()</code></li> </ul> </li> <li>Iterators are required to have an <code class="language-plaintext highlighter-rouge">__iter__()</code> method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. (One notable exception is code which attempts multiple iteration passes. )</li> <li>CPython does not consistently apply the requirement that an iterator define <code class="language-plaintext highlighter-rouge">__iter__()</code>.</li> <li>Every iterator is also an iterable, but not every iterable is an iterator. For example, list and string are iterable but they are not iterator.</li> <li>A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. But Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.</li> <li>An iterator can be created from an iterable by using the function <code class="language-plaintext highlighter-rouge">iter()</code>. <code class="language-plaintext highlighter-rouge">s = "GFG"</code> then <code class="language-plaintext highlighter-rouge">s = iter(s)</code> then <code class="language-plaintext highlighter-rouge">next(s) </code></li> <li>Iterators are used to allow user-defined classes to support iteration.</li> <li><code class="language-plaintext highlighter-rouge">__iter__()</code> function returns an iterator for the given object (like list, set, tuple, etc. or custom objects). It creates an object that can be accessed one element at a time using <code class="language-plaintext highlighter-rouge">__next__()</code> function.</li> </ul> <figure> <picture> <img src="/assets/img/iter-next.jpg" class="img-fluid rounded z-depth-1" width="25%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="iterator-vs-iterable">Iterator vs. Iterable</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <h4 id="an-iterable-is">An ITERABLE is:</h4> <ul> <li>an object that defines <strong>iter</strong> that returns a fresh ITERATOR, or it may have a <strong>getitem</strong> method suitable for indexed lookup.</li> </ul> <h4 id="an-iterator-is-an-object">An ITERATOR is an object:</h4> <ul> <li>with a <code class="language-plaintext highlighter-rouge">__next__</code> method that: <ul> <li>returns the next value in the iteration</li> <li>updates the state to point at the next value</li> <li>signals when it is done by raising StopIteration</li> </ul> </li> <li>with state that remembers where it is during iteration,</li> <li>and that is self-iterable (CPython does not consistently apply ).</li> </ul> <h4 id="difference-at-iter">Difference at <strong>iter</strong>()</h4> <p><code class="language-plaintext highlighter-rouge">__iter__()</code> is semantically different for iterables and iterators.</p> <ul> <li>In iterators, the method returns the iterator itself, which must implement a <code class="language-plaintext highlighter-rouge">.__next__() </code>method.</li> <li>In iterables, the method should yield items on demand. It return fresh iterator.</li> </ul> <h4 id="other-differences">Other differences</h4> <ul> <li>Pure iterables typically hold the data themselves.</li> <li>In contrast, iterators don’t hold the data but produce it one item at a time, depending on the caller’s demand.</li> <li>Therefore, iterators are more efficient than iterables in terms of memory consumption.</li> </ul> <h3 id="iteration-example">iteration example:</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">countdown</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">start</span><span class="p">):</span>
   <span class="n">self</span><span class="p">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
 <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
   <span class="k">return</span> <span class="nf">countdown_iter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">countdown_iter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
   <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">count</span>
 <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
   <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
     <span class="k">raise</span> <span class="nb">StopIteration</span>
   <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">count</span>
   <span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
   <span class="k">return</span> <span class="n">r</span>
</code></pre></div></div> <p>Then:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> c <span class="o">=</span> countdown<span class="o">(</span>5<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for </span>i <span class="k">in </span>c:
... print<span class="o">(</span>i, <span class="nv">end</span><span class="o">=</span><span class="s1">' '</span><span class="o">)</span>
...
5 4 3 2 1
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div> <ul> <li>c is iterable. 5 is it’s data. <code class="language-plaintext highlighter-rouge">iter(c)</code> will return fresh iterator (without <code class="language-plaintext highlighter-rouge">__iter__</code>).</li> <li><code class="language-plaintext highlighter-rouge">iter(c)</code> is technically not iterator because it have no <code class="language-plaintext highlighter-rouge">__iter__</code>.</li> <li>You can make <code class="language-plaintext highlighter-rouge">iter(c)</code> a iterator when you add def <code class="language-plaintext highlighter-rouge">__iter__(self)</code>: return self to countdown_iter class.</li> </ul> <h3 id="iteration-faq">Iteration FAQ</h3> <h4 id="if-a-object-support-next-but-not-support-iter-is-it-a-iterator">If a object support next(), but not support iter(). is it a iterator?</h4> <p>It is NOT iterator. But CPython doesn’t consistently apply.</p> <h4 id="if-object-a-support-iter-and-iterobjecta-return-an-object-which-just-support-next-but-not-iter-then-object-a-is-still-iterable">If object A support iter() and iter(objectA) return an object which just support next() but not iter(). Then object A is still iterable?</h4> <p>If no iter() then NOT iterator, so not iterable. But CPython doesn’t consistently apply.</p> <h4 id="why-so-many-blogs-conclude-the-differences-between-iterator-and-iterable-when-iterator-is-a-iterable-as-well">Why so many blogs conclude the differences between iterator and iterable, when iterator is a iterable as well?</h4> <p>the differnence is one thing: iterator iter() itself, but iterable iter() another object.</p> <h4 id="iterator-should-not-be-called-as-iterable-even-it-supoort-iter-because-iter-return-itself-instead-of-a-fresh-iterator-or-just-should-not-be-called-as-pure-iterable">Iterator should not be called as iterable even it supoort iter(), Because iter() return itself instead of a fresh iterator? Or just should not be called as pure iterable?</h4> <p>Yes, you can add the pure iterable concept.</p> <h2 id="for-loop-in-python">for loop in Python</h2> <h3 id="the-forin-is-always-used-in-combination-with-an-iterable-object">The <code class="language-plaintext highlighter-rouge">for...in</code> is always used in combination with an iterable object.</h3> <p>The Python for statement iterates over the members of a sequence in order, executing the block each time. It don’t like JavaScript, or C</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
 <span class="c1"># statements
</span></code></pre></div></div> <h3 id="underneath-the-covers">Underneath the covers</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="c1"># Get iterator object
</span><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span> <span class="c1"># Get next item
</span> <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span> <span class="c1"># No more items
</span>   <span class="k">break</span>
 <span class="c1"># statements
</span> <span class="bp">...</span>
</code></pre></div></div> <h3 id="understand-how-forin-loop-iterate-over-a-iterable-object">Understand how <code class="language-plaintext highlighter-rouge">for...in</code> loop iterate over a iterable object:</h3> <ul> <li>What the core point is that it is a lazy processing.</li> <li>I am going to make two example to display how <code class="language-plaintext highlighter-rouge">for...in</code> loop work underneath the cover. First one is loop over a enumerate object, and second one is loop over a range object, it raise error.</li> </ul> <h4 id="first-example">First example:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p>There are No error raising for these codes, but they are not work as expected. the code print: <code class="language-plaintext highlighter-rouge">[1, 3, 5, 7, 9]</code></p> <p><code class="language-plaintext highlighter-rouge">enumerate</code> object is generator object which will yield value from lst. It is lazy process. When <code class="language-plaintext highlighter-rouge">lst</code> change, value from enumerate object change as well, but i is keep going.</p> <p><code class="language-plaintext highlighter-rouge">for...in</code> is equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span> 
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span> 
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">enumerate()</code> is equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h4 id="second-example">Second example:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p>This code will raise IndexError. <code class="language-plaintext highlighter-rouge">range()</code> is iterable, but len(lst) in range() parameter here have been replace with constant value 10. Because len(lst) is not a lazy process. it don’t change any more. So i will up to 9.</p> <p>So the codes are equivalent to:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <h2 id="generator">Generator</h2> <h3 id="what-is-generator">What is Generator</h3> <ul> <li>Generators are a special class of functions that simplify the task of writing iterators.</li> <li>Generator functions is a convenient shortcut to building iterators.</li> <li>Regular functions compute a value and return it, but generators return an iterator that returns a stream of values.</li> <li>When you call a generator function, it doesn’t return a single value; instead it returns a generator object that supports the iterator protocol.</li> <li>If a container object’s <code class="language-plaintext highlighter-rouge">__iter__()</code> method is implemented as a generator, it will automatically return a generator object supplying the <code class="language-plaintext highlighter-rouge">__iter__()</code> and <code class="language-plaintext highlighter-rouge">__next__()</code> methods.</li> <li>There are two ways to create Generator: generator expression and generator function</li> <li>If you create a list to sum the first n. When n is really big, then it consume lots of memory. Not acceptable. Generator (iterator) will perform the job much better.</li> <li>Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.</li> <li>When you use recursion for generator, you need to clear the subgenerator concept. Otherwise, it won’t work as you expect.</li> </ul> <h3 id="generator-is-not-pure-iterable">Generator is not pure iterable</h3> <p>Generator is iterator, but it is not pure iterable. That means iter(generator) return itself instead of a fresh iterator.</p> <h4 id="basic-example">Basic Example</h4> <p>clone python’s built-in range() function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">start must be smaller than stop</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">step</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">my_range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <h3 id="create-generator">Create Generator</h3> <h4 id="generator-functions">Generator functions</h4> <p>Generator function is defined similar to normal function but there is only one difference, it is using yield keyword to return value used for each iteration.</p> <p>Any function containing a yield keyword is a generator function; this is detected by Python’s bytecode compiler which compiles the function specially as a result.</p> <p>Generator function return a lazy iterator. This iterator also call generator object.</p> <h4 id="generator-expressionalso-call-generator-comprehension">Generator expression(also call generator comprehension)</h4> <ul> <li>Generator expressions provide an additional shortcut to build generators out of expressions similar to that of list comprehensions.</li> <li>If the generated expressions are more complex, involve multiple steps, or depend on additional temporary state, Using generator function .</li> </ul> <h5 id="generator-comprehension">generator comprehension:</h5> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; nums_squared_gc = (num**2 for num in range(5))</code></p> <h5 id="list-comprehension">List comprehension:</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> nums_squared_lc <span class="o">=</span> <span class="o">[</span>num<span class="k">**</span>2 <span class="k">for </span>num <span class="k">in </span>range<span class="o">(</span>5<span class="o">)]</span>

<span class="o">&gt;&gt;&gt;</span> nums_squared_lc
<span class="o">[</span>0, 1, 4, 9, 16]
<span class="o">&gt;&gt;&gt;</span> nums_squared_gc
&lt;generator object &lt;genexpr&gt; at 0x107fbbc78&gt;
</code></pre></div></div> <h5 id="the-difference">The difference</h5> <p>We can think of list comprehensions as generator expressions wrapped in a list constructor:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list comprehension
</span><span class="n">doubles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">)]</span>
<span class="c1"># same as the list comprehension above
</span><span class="n">doubles</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span>
</code></pre></div></div> <p>The difference between generator and list comprehensions is that generator comprehension create lazy generator. it won’t consume all memory it need at one time. But list comprehension will, because list constructor run through the generator.</p> <h3 id="subgenerator-yield-from">Subgenerator (yield from)</h3> <ul> <li>You can use yield from to read data from an other generator.</li> <li>There is Subgenerator concept, read more at PEP380.</li> <li>When you use recursion in generator you will meet some weird issue. That is because you have no subgenerator concept. You need to use yield from for each subgenerator. Otherwise you need to use for to run over it (sometime works, sometime not works). Because Generator return Generator Object! it is different from normal function.</li> </ul> <h4 id="understand-subgenerator">Understand subgenerator</h4> <ul> <li>A Python generator is a form of coroutine, but has the limitation that it can only yield to its immediate caller. This means that a piece of code containing a yield cannot be factored out and put into a separate function in the same way as other code.</li> <li>Performing such a factoring causes the called function to itself become a generator, and it is necessary to explicitly iterate over this second generator and re-yield any values that it produces.</li> <li>If yielding of values is the only concern, this can be performed without much difficulty using a loop.</li> <li>However, if the subgenerator is to interact properly with the caller in the case of calls to send(), throw() and close(), things become considerably more difficult. As will be seen later, the necessary code is very complicated, and it is tricky to handle all the corner cases correctly.</li> </ul> <h4 id="understand-yield-from">Understand <code class="language-plaintext highlighter-rouge">yield from</code></h4> <ul> <li>yield from is a new syntax. You can check the codes for yield from in PEP380.</li> <li>This new syntax empowers you to refactor generators in a clean way by making it easy to yield every value from an iterator (which a generator conveniently happens to be).</li> <li>yield from also lets you chain generators together so that values bubble up and down the call stack without code having to do anything special.</li> <li>Let’s get one thing out of the way first. The explanation that yield from g is equivalent to for v in g: yield v does not even begin to do justice to what yield from is all about.</li> <li>Because, if all yield from does is expand the for loop, then it does not warrant adding yield from to the language and preclude a whole bunch of new features from being implemented in Python 2.x. PEP380 have the detail.</li> </ul> <h5 id="what-yield-from-does-is-it-establishes-a-transparent-bidirectional-connection-between-the-caller-and-the-sub-generator">What yield from does is it establishes a transparent bidirectional connection between the caller and the sub-generator:</h5> <ul> <li>The connection is “transparent” in the sense that it will propagate everything correctly too, not just the elements being generated (e.g. exceptions are propagated).</li> <li>The connection is “bidirectional” in the sense that data can be both sent from and to a generator.</li> </ul> <h4 id="example-of-using-recursion-in-generator">Example of using recursion in generator:</h4> <p>You can’t print 0,1,2,3,4 from following code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
    
<span class="n">gr</span> <span class="o">=</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">gr</span><span class="p">:</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div> <p>You need to use yield from:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">generator_recursion</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">n</span>
</code></pre></div></div> <h3 id="passing-values-into-a-generator">Passing values into a generator</h3> <p>In Python 2.5 there’s a simple way to pass values into a generator. <code class="language-plaintext highlighter-rouge">yield</code> became an expression, returning a value that can be assigned to a variable or otherwise operated on:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
<span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span>
</code></pre></div></div> <p>(Recommend that you always put parentheses around a yield expression.)</p> <p>Values are sent into a generator by calling its .send(value) method. This method resumes the generator’s code and the yield expression returns the specified value.</p> <p>Simple example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">counter</span><span class="p">(</span><span class="n">maximum</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maximum</span><span class="p">:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">i</span><span class="p">)</span>
        <span class="c1"># If value provided, change counter
</span>        <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">val</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <p>The value of val is always None when regular <code class="language-plaintext highlighter-rouge">__next__()</code> method is called. When <code class="language-plaintext highlighter-rouge">.send(value)</code> is called. the val will be the value</p> <h4 id="how-do-sendvalue-resumes-the-generator">How do send(value) resumes the generator?</h4> <ul> <li>When calling next(), the code resume from the next line which after last yield.</li> <li>When calling <code class="language-plaintext highlighter-rouge">.send(value)</code>, the code resume from the last yield! And also yield a value back to <code class="language-plaintext highlighter-rouge">.send(value)</code> function (like <code class="language-plaintext highlighter-rouge">next()</code> do).</li> <li>You can even can’t send(value) at the very beginning, otherwise get error: TypeError: can’t send non-None value to a just-started generator</li> </ul> <h2 id="built-in-functions-for-iterators">Built-in functions for iterators</h2> <h3 id="map-and-filter-duplicate-the-features-of-generator-expressions">map() and filter() duplicate the features of generator expressions:</h3> <p>map(f, iterA, iterB, …) returns an iterator over the sequence f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ….</p> <h3 id="filterpredicate-iter">filter(predicate, iter)</h3> <p>returns an iterator over all the sequence elements that meet a certain condition, and is similarly duplicated by list comprehensions.</p> <h3 id="enumerateiter-start0">enumerate(iter, start=0)</h3> <p>counts off the elements in the iterable returning 2-tuples containing the count (from start) and each element.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">([</span><span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">verb</span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="sortediterable-keynone-reversefalse">Sorted(iterable, key=None, reverse=False)</h3> <p>collects all the elements of the iterable into a list, sorts the list, and returns the sorted result. The key and reverse arguments are passed through to the constructed list’s sort() method.</p> <h3 id="the-anyiter-and-alliter">The any(iter) and all(iter)</h3> <p>built-ins look at the truth values of an iterable’s contents. any() returns True if any element in the iterable is a true value, and all() returns True if all of the elements are true values</p> <h3 id="zipitera-iterb-">zip(iterA, iterB, …)</h3> <p>takes one element from each iterable and returns them in a tuple</p> <h2 id="itertools-module">itertools module</h2> <p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p> <h3 id="combinatoric-iterators">Combinatoric iterators:</h3> <h4 id="permutationsiterable-rnone">permutations(iterable, r=None)</h4> <ul> <li>Return successive r length permutations of elements in the iterable.</li> <li>Return a iterable object, elements are tuple.</li> <li>Elements are treated as unique based on their position, not on their value.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> print<span class="o">([</span>p <span class="k">for </span>p <span class="k">in </span>permutations<span class="o">(</span><span class="s1">'pro'</span><span class="o">)])</span>
<span class="o">[(</span><span class="s1">'p'</span>, <span class="s1">'r'</span>, <span class="s1">'o'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'p'</span>, <span class="s1">'o'</span>, <span class="s1">'r'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'r'</span>, <span class="s1">'p'</span>, <span class="s1">'o'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'r'</span>, <span class="s1">'o'</span>, <span class="s1">'p'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'o'</span>, <span class="s1">'p'</span>, <span class="s1">'r'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'o'</span>, <span class="s1">'r'</span>, <span class="s1">'p'</span><span class="o">)]</span>
</code></pre></div></div> <h4 id="productiterables-repeat1">product(*iterables, repeat=1)</h4> <p>Cartesian product of input iterables. What Cartesian product do is as following: <code class="language-plaintext highlighter-rouge">product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</code></p> <p><code class="language-plaintext highlighter-rouge">repeat</code> parameter</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">product</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span> <span class="n">means</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="nf">product</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">).</span>
<span class="c1"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
</span></code></pre></div></div> <p>This function is roughly equivalent to the following code, except that the actual implementation does not build up intermediate results in memory:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">pools</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="n">pool</span><span class="p">)</span> <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span> <span class="o">*</span> <span class="n">repeat</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[]]</span>
    <span class="k">for</span> <span class="n">pool</span> <span class="ow">in</span> <span class="n">pools</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">result</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">pool</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">prod</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
        <span class="k">yield</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">prod</span><span class="p">)</span>
</code></pre></div></div> <h2 id="functools-module">functools module</h2> <p>A higher-order function takes one or more functions as input and returns a new function. The most useful tool in this module is the functools.partial() function.</p> <h3 id="functoolspartial">functools.partial()</h3> <p>The constructor for partial() takes the arguments (function, arg1, arg2, …, kwarg1=value1, kwarg2=value2). The resulting object is callable, so you can just call it to invoke function with the filled-in arguments.</p> <p>Example:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">functools</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">subsystem</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Write the contents of </span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="s"> to the specified subsystem.</span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">%s: %s</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">subsystem</span><span class="p">,</span> <span class="n">message</span><span class="p">))</span>
    <span class="bp">...</span>

<span class="n">server_log</span> <span class="o">=</span> <span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">log</span><span class="p">,</span> <span class="n">subsystem</span><span class="o">=</span><span class="sh">'</span><span class="s">server</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">server_log</span><span class="p">(</span><span class="sh">'</span><span class="s">Unable to open socket</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="functoolsreduce">functools.reduce()</h3> <p><code class="language-plaintext highlighter-rouge">functools.reduce()</code> takes the first two elements A and B returned by the iterator and calculates func(A, B)</p> <p>Syntax: <code class="language-plaintext highlighter-rouge">functools.reduce(func, iterable[, initializer])</code> func must be a function that takes two elements and returns a single value.</p> <p><code class="language-plaintext highlighter-rouge">reduce()</code> is roughly equivalent to the following Python function:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">,</span> <span class="n">initializer</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">it</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">initializer</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">initializer</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">it</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div> <p>Example: from functools import reduce</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="k">return</span> <span class="nf">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="nf">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div></div> <h2 id="small-functions-and-the-lambda-expression">Small functions and the lambda expression</h2> <p>When writing functional-style programs, you’ll often need little functions that act as <strong>predicates</strong> or that combine elements in some way.</p> <p>If there’s a Python built-in or a module function that’s suitable</p> <h3 id="operator--standard-operators-as-functions">operator — Standard operators as functions</h3> <p>The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. For example, operator.add(x, y) is equivalent to the expression x+y.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>

<span class="n">student_tuples</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">john</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">jane</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B</span><span class="sh">'</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">dave</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B</span><span class="sh">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
<span class="p">]</span>
<span class="nf">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nf">itemgetter</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="c1"># equal to:
</span><span class="nf">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">student</span><span class="p">:</span> <span class="n">student</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> 
<span class="c1"># [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
</span></code></pre></div></div> <p>one way to write small functions is to use the lambda expression. (not recommend)</p> <p>An alternative is to just use the def statement and define a function in the usual way. (recommend)</p> <h2 id="recursion">Recursion</h2> <h3 id="recursion-introduce">Recursion introduce</h3> <p>In most case, recursion won’t be a good choice.</p> <ul> <li>Recursive implementations often consume more memory than non-recursive ones.</li> <li>In some cases, using recursion may result in slower execution time.</li> </ul> <p>Traversal of tree</p> <ul> <li>Recursion is good for Traversal of tree-like data structures.</li> </ul> <h3 id="recursion-in-python">Recursion in Python</h3> <ul> <li>You can find out what Python’s recursion limit is with a function from the sys module called getrecursionlimit().</li> <li>You can change it, too, with setrecursionlimit()</li> <li>When you call a function in Python, the interpreter creates a new local namespace so that names defined within that function don’t collide with identical names defined elsewhere.</li> </ul> <h2 id="functional-features-functions">functional features functions</h2> <p>Build-in functions: map() filter() reduce().</p> <h3 id="mapfunction-iterable-iterables">map(function, iterable, *iterables)</h3> <ul> <li>Return an iterator that applies function to every item of iterable, yielding the results.</li> <li>If additional iterables arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.</li> <li>With multiple iterables, the iterator stops when the shortest iterable is exhausted.</li> <li>For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().</li> <li>map() is Functional Style in Python. Although it can be replace by for loop.</li> </ul> <p>Advantage</p> <ul> <li>Since map() is written in C and is highly optimized, its internal implied loop can be more efficient than a regular Python for loop.</li> <li>map() returns a map object, which is an iterator that yields items on demand. Using map() is good for memory consumption. This is compare to Python for loop.</li> </ul> <h3 id="filterfunction-iterable">filter(function, iterable)</h3> <p>Construct an iterator from those elements of iterable for which function is true.</p> <ul> <li>Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None.</li> </ul> <h2 id="faq">FAQ</h2> <ul> <li>What is the difference between generator and coroutine</li> <li>What is the difference between generator object and generator function?</li> </ul>]]></content><author><name></name></author><category term="Python"/><category term="Python"/><category term="JavaScript"/><summary type="html"><![CDATA[What is Functional Programming]]></summary></entry></feed>